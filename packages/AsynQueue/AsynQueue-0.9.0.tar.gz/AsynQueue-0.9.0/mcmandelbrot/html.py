#!/usr/bin/env python
#
# mcmandelbrot
#
# An example package for AsynQueue:
# Asynchronous task queueing based on the Twisted framework, with task
# prioritization and a powerful worker interface.
#
# Copyright (C) 2015 by Edwin A. Suominen,
# http://edsuom.com/AsynQueue
#
# See edsuom.com for API documentation as well as information about
# Ed's background and other projects, software and otherwise.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language
# governing permissions and limitations under the License.


"""
A Twisted web C{Resource} that serves clickable, zoomable
Mandelbrot Set images.
"""

import sys

from twisted.application import internet, service
from twisted.internet import defer
from twisted.web import server, resource

from mcmandelbrot import vroot, image


PORT = 8080
VERBOSE = True

FOOTER = """
This image was generated by the <i>mcmandelbrot</i> demonstration
package bundled with the <a
href="http://edsuom.com/AsynQueue">AsynQueue</a> asynchronous
processing package for Twisted. You are free to do whatever you like with the
images produced here, and to download, use, and modify my underlying
software under the terms of the Apache License. In addition to the
attribution required of that license for the software usage, a live link
back to <a href="http://edsuom.com"><b>edsuom.com</b></a> would be
appreciated. Thanks, and enjoy! <i>&mdash;Ed Suominen</i>
"""


class MandelbrotSiteResource(resource.Resource):
    defaultPosition = {
        'cr':   "-0.630",
        'ci':   "+0.000",
        'crpm': "1.40" }
    defaultTitle = \
        "Interactive Mandelbrot Set: Driven by Twisted and AsynQueue"
    formItems = (
        ("Real:", "cr"   ),
        ("+/-",   "crpm" ),
        ("Imag:", "ci"   ))
    
    def __init__(self):
        resource.Resource.__init__(self)
        self.vr = vroot.HTML_VRoot()
        self.vr.title = self.defaultTitle

    def shutdown(self):
        return self.imageResource.imager.shutdown()

    def render_GET(self, request):
        if not hasattr(self, '_html'):
            # We only need to render the page once. All that changes
            # are the image and form fields.
            self._html = self.makeHTML()
        return self._html
        
    def imgURL(self, dct):
        parts = ["{}={}".format(name, value)
                 for name, value in dct.iteritems()]
        return "/image.png?{}".format('&'.join(parts))
        
    def makeHTML(self):
        with self.vr as v:
            heading = v.nc('div', 'heading')
            #--------------------------------------------------------
            v.nc('div', 'left')
            v.ngc('p', 'bigger').text = "Interactive Mandelbrot Set"
            v.ns('div', 'right')
            v.nc('p', 'smaller')
            v.text("Powered by ")
            v.nc('a')
            v.text("Twisted")
            v.set('href', "http://twistedmatrix.com")
            v.tail(" and ")
            v.ns('a')
            v.text("AsynQueue")
            v.set('href', "http://edsuom.com/AsynQueue")
            v.tail(".")
            #--------------------------------------------------------
            v.rp()
            v.nc('div', 'clear').text = " "
            formDiv = v.ns('div')
            v.nc('form')
            v.nc('div', 'form')
            v.set('name', "position")
            v.set('action', "javascript:updateImage()")
            for label, name in v.nci(self.formItems, 'div', 'form_item'):
                v.nc('span', 'form_item')
                v.text(label)
                v.ns('input', 'position')
                v.set('type', "text")
                v.set('id', name)
                v.set('value', self.defaultPosition[name])
            v.nc('div', 'form_item')
            e = v.ngc('input')
            e.set('type', "submit")
            e.set('value', "Reload")
            v.ns('div', 'form_item')
            v.nc('button')
            v.set('type', "button")
            v.set('onclick', "zoomOut()")
            v.text("Zoom Out")
            #--------------------------------------------------------
            v.rp()
            v.nc('div', 'image')
            v.set('id', 'image')
            v.nc('img', 'mandelbrot')
            v.set('id', 'mandelbrot')
            v.set('src', self.imgURL(self.defaultPosition))
            v.set('onclick', "zoomIn(event)")
            v.set('onmousemove', "hover(event)")
            #--------------------------------------------------------
            v.rp()
            v.nc('div', 'coords')
            v.set('id', 'hover')
            v.text(" ")
            #--------------------------------------------------------
            v.ns('div', 'footer')
            v.textX(FOOTER)
        return self.vr()
        

class MandelbrotImageResource(resource.Resource):
    isLeaf = True
    
    def __init__(self):
        resource.Resource.__init__(self)
        self.imager = image.Imager(verbose=VERBOSE)
        
    def render_GET(self, request):
        request.setHeader("Content-Type", 'image/png')
        self.imager.renderImage(request)
        return server.NOT_DONE_YET


class MandelbrotSite(server.Site):
    def __init__(self):
        rootResource = MandelbrotSiteResource()
        imageResource = MandelbrotImageResource()
        rootResource.putChild('image.png', imageResource)
        rootResource.putChild('', rootResource)
        server.Site.__init__(self, rootResource)
    
    def stopFactory(self):
        super(MandelbrotSite, self).stopFactory()
        return self.resource.shutdown()


if '/twistd' in sys.argv[0]:
    site = MandelbrotSite()
    application = service.Application("Mandelbrot Set image server")
    internet.TCPServer(PORT, site).setServiceParent(application)
