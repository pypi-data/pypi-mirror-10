import rnftools
from ._source import Source

import os
import smbl
import snakemake
import re

class CuReSim(Source):
	"""Class for CuReSim.

	Only single-end reads simulations are supported.

	Args:
		fasta (str): File name of the genome from which reads are created (FASTA file).
		coverage (float): Average coverage of the genome.
		read_length_1 (int): Length of the first end of a read.
		read_length_2 (int): Length of the second end of a read. It must be equal to zero.
		other_params (str): Other parameters which are used on commandline.

	Raises:
		ValueError
	"""

	def __init__(self,
				fasta,
				coverage=0,
				number_of_read_tuples=0,
				read_length_1=100,
				read_length_2=0,
				other_params="",
				rng_seed=1
			):
		
		if read_length_2!=0:
			smbl.messages.error("CuReSim supports only single-end reads",program="RNFtools",subprogram="MIShmash",exception=ValueError)

		super().__init__(
				fasta=fasta,
				reads_in_tuple=1,
				rng_seed=rng_seed,
				number_of_required_cores=9999,
			)


		self.read_length_1=read_length_1
		self.read_length_2=read_length_2
		self.other_params=other_params

		self.number_of_read_tuples=number_of_read_tuples
		self.coverage=coverage


	def get_input(self):
		return [
				smbl.prog.CURESIM,
				self._fa_fn,
				self._fai_fn,
			]

	def get_output(self):
		return [
				self._fq_fn,
			]

	# TODO: find out how it is with RNG seeds
	def create_fq(self):
		if self.number_of_read_tuples == 0:
			genome_size=os.stat(self._fa_fn).st_size
			self.number_of_read_tuples=int(self.coverage*genome_size/(self.read_length_1+self.read_length_2))

		snakemake.shell("""
				cd "{dir}"
				java -Xmx8g -jar \
				{curesim} \
				-f "{fa}" \
				-n {nb} \
				-m {rlen1} \
				-r 0 \
				-sd 0 \
				-y 0 \
				{other_params} \
				> /dev/null
			""".format(
				dir=self.get_dir(),
				curesim=smbl.prog.CURESIM,
				fa=self._fa_fn,
				nb=self.number_of_read_tuples,
				rlen1=self.read_length_1,
				other_params=self.other_params,
				rng_seed=self._rng_seed,
			)
		)
		self.recode_curesim_reads(
			os.path.join(
					self.get_dir(),
					"output.fastq",
				)
		)

	def recode_curesim_reads(self,old_fq,number_of_read_tuples=10**9):
		"""Recode CuReSim output FASTQ file to the RNF-compatible output FASTQ file.

		Args:
			old_fq (str): Od FASTQ file name.
			number_of_read_tuples (int): Expected number of read tuples (to estimate number of digits in RNF).

		Raises:
			ValueError
		"""
		curesim_pattern = re.compile('@(.*)_([0-9]+)_([0-9]+)_([0-9]+)_([0-9]+)_([0-9]+)_([0-9]+)_([0-9]+)')
		"""
			CuReSim read name format

			@<#1>_<#2>_<#3>_<#4>_<#5>_<#6>_<#7>_<#8>

			1: contig name
			2: original position
			3: strand (0=forward;1=reverse)
			4: random read (0=non-random;1=random)
			5: number of insertions
			6: number of deletions
			7: number of substitution
			8: read number (unique within a genome)
		"""

		max_seq_len=0

		self.load_fai()
		read_tuple_id_width=len(format(number_of_read_tuples,'x'))

		rn_formatter = rnftools.rnfformat.RnFormatter(
				read_tuple_id_width=read_tuple_id_width,
				genome_id_width=2,
				chr_id_width=self.chr_id_width,
				coor_width=self.coor_width,
			)

		# parsing FQ file
		last_new_read_tuple_name=""
		read_tuple_id=0
		with open(old_fq,"r+") as f1:
			with open(self._fq_fn,"w+") as f2:
				i=0
				for line in f1:
					if i%4==0:
						(line1,line2,line3,line4)=("","","","")

						m = curesim_pattern.search(line)
						if m is None:
							smbl.messages.error("Read '{}' was not generated by CuReSim.".format(line[1:]),program="RNFtools",subprogram="MIShmash",exception=ValueError)

						contig_name     = m.group(1)
						start_pos       = int(m.group(2))
						direction       = "R" if int(m.group(3)) else "F"
						random          = bool(m.group(4))
						ins_nb          = int(m.group(5))
						del_nb          = int(m.group(6))
						subst_nb        = int(m.group(7))
						rd_id           = int(m.group(8))

						end_pos         = start_pos - 1 - ins_nb + del_nb

						chr_id=0
						#TODO: uncomment when the chromosome naming bug in curesim is corrected
						#chr_id = self.dict_chr_ids[contig_name] if self.dict_chr_ids!={} else "0"

					elif i%4==1:
						line2=line
						read_length=len(line2.strip())
						end_pos += read_length

						segment=rnftools.rnfformat.Segment(
								genome_id=self.genome_id,
								chr_id=chr_id,
								direction=direction,
								left=start_pos + 1,
								right=end_pos,
							)

						read_tuple = rnftools.rnfformat.ReadTuple(segments=[segment],read_tuple_id=read_tuple_id+1,suffix="[single-end,curesim]")
						new_read_tuple_name = rn_formatter.process_read_tuple(read_tuple)

						read_tuple_id+=1

						line1="".join(["@",new_read_tuple_name,os.linesep])
						last_new_read_tuple_name=new_read_tuple_name

					elif i%4==2:
						line3=line

					else:
						line4=line

						f2.write(line1)
						f2.write(line2)
						f2.write(line3)
						f2.write(line4)

					i+=1
