from __future__ import absolute_import
import unittest
import codecs
import resource

from ..aligner import *


class AlignerTest(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        resource.setrlimit(resource.RLIMIT_STACK, (65532000, 65532000))
        cls._aligner = Aligner(85)

    def setUp(self):
        self.s1 = pyopa.Sequence(
            'MRFGNFETKNYIFMAPIKTALATPKTGLITDEQIKYYENKAKGGVGTIIFEPISVLPNGKEHPKQTMLNTDAHIEGLKRLVDTLHKYDT'
            'KLVVHLNHAGRAANPKASGEVVAPSSVICPSTGQTPRELTQKEIWEIIHAFKENALRAQEAGADAIEIQFGHGYIVHQFYSERMNKRKDE'
            'YGKDKLKFAKELLSAITSEIKIPLFLRISGSEFVDGGITLEELSRIFLLAQEFGVSVIHVGWGNACDSAPWYYNHMSLPLKVMDDKLREI'
            'RNLTSLPIIAVGRMQKDERYKKLMDDKVIDGVVFGRQLIIDPGFPKKILSNSDDYIRCGSCLQGCLGNVKAGREIGCIANPEVHSSFNSK'
            'TSTNRKKVAIVGGGPAGLFAGLYLKKKNYDVTIFEKNSYLGGQWVLAYKSPGKLSMKDTLEDLIKKAKKELKIRLNTEATLDTFRSEKFE'
            'IIIVATGAKPFVPNIPGLENFITGFDFFNGKKVDGEKVLIIGGGLIGLEVAEALIIEGKKVTVVEMLEQVGRGMEIVASKLFQKNYAPKI'
            'SIYTNTLVKEINGKNVVAQTKDGREFSLGEFDSIIVTAGTKPENKLYEELSREFKNVYLIGDAAKIGQIIDAVQDAFELAEEI')
        self.s2 = pyopa.Sequence(
            'NYGNKNLIFENPIRGALAVPKSRLVTDQHIRYQENKDKGGVDTILYEKISIFTQGKEHPKESMMNTGASIEGMKRVADSLHNYRAKNAIH'
            'LSYGGRAATPDASGHTVAVSEVICPSTGRTPRELTQKKLWKNNITFSIRTARPGSGPEPSEDYKWLDFPDFCVVNACRMEMVRHIDAMRA'
            'GADAIEVAFGHNRVQAVFYEERPNKREDEYGNDRLKFNKELVTSITEKLQAPTFFEMPGAEFIGTGITLEKLIRIFILDQLFAILVLHVG'
            'WGESCQNAPWHYASMFLLLKSDRDQIREVRNVQSLNIIAVGRMQKETRYNKVFKSTVIDG')

    def test_fast_alignment(self):
        self.assertTrue(self._aligner.fast_homology_test(self.s1, self.s2), 'should be significant')

    def test_optimal_local_alignment(self):
        """comparison with darwin local alignment results"""
        opa = self._aligner.optimal_pairwise_alignment(self.s1, self.s2, modif='Local')
        ln_e = self._aligner.log_evalue(opa)
        pident = self._aligner.percent_identity(opa)

        self.assertAlmostEqual(opa.score, 1390.4826591299)
        self.assertAlmostEqual(opa.pam, 62)
        self.assertAlmostEqual(opa.pamvar, 32.4308580787)
        self.assertEqual(opa.start1, 4)
        self.assertEqual(opa.end1, 299)
        self.assertEqual(opa.start2, 0)
        self.assertEqual(opa.end2, 329)
        self.assertAlmostEqual(ln_e, -308.2617647391)
        self.assertAlmostEqual(pident, 0.5030303030)

    def test_optimal_global_alignment(self):
        opa = self._aligner.optimal_pairwise_alignment(self.s1, self.s2, modif='Global')
        ln_e = self._aligner.log_evalue(opa)
        pident = self._aligner.percent_identity(opa)

        self.assertAlmostEqual(opa.score, 889.5683252)
        self.assertAlmostEqual(opa.pam, 63)
        self.assertAlmostEqual(opa.pamvar, 32.95251392)
        self.assertAlmostEqual(ln_e, -192.9189977)
        self.assertAlmostEqual(pident, 0.2530487805)


class AlignWorkerTest(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        resource.setrlimit(resource.RLIMIT_STACK, (65532000, 65532000))
        cls.alignworker = AlignWorker({})

    def test_invalid_request(self):
        req = b'some random byte stream'
        reply = json.loads(codecs.decode(self.alignworker.handle_request(req), 'zlib'))
        self.assertEqual(reply['code'], 500)
        self.assertEqual(reply['msg'], u'Malformed request')

    def test_broken_checksum_request(self):
        req = {'group1': [{'entrynr': 1, 'seq': 'ADRIAN'}],
               'group2': [{'entrynr': 1, 'seq': 'ARRANIAA'}],
               'checksum': 'a5a11209bf3a57010'}
        # enforce message with broken checksum
        req_str = zlib.compress(json.dumps(req))
        reply = json.loads(zlib.decompress(self.alignworker.handle_request(req_str)))
        self.assertEqual(reply['code'], 500)
        self.assertEqual(reply['msg'], u'Malformed request')

    def test_align_batch(self):
        req = {'group1': [{'entrynr': 1, 'seq': 'MEDSQSDMSIELPLSQETFSCLWKLLPPDDILPTTATGSPNSMEDLFLPQDVAELLEGPEEALQVSAPAAQEPGTEAPAP'}],
               'group2': [{'entrynr': 5, 'seq': 'MTAMEESQSDISLELPLSQETFSGLWKLLPPEDILPSPHCMDDLLLPQDVEEFFEGPSEALRVSGAPAAQDPVTETPGPV'},
                          {'entrynr': 12, 'seq': 'LGRQAVNIKICSCPGRDREQDEDALLPQPAPGSKKRLMTDSKTSQKKRKKTSVTSSSNGVAHDG'}],
               'rID': '1022-234a-3111', 'genome1': 9606, 'genome2': 9605}
        req_str = Request(req).serialize_to_compressed_string()
        reply = json.loads(zlib.decompress(self.alignworker.handle_request(req_str)), object_hook=json_numpy_obj_hook)
        self.assertEqual(len(reply['matches']), 1)

    def test_same_genome_align_batch(self):
        req = {'group1': [{'entrynr': 1, 'seq': 'MEDSQSDMSIELPLSQETFSCLWKLLPPDDILPTTATGSPNSMEDLFLPQDVAELLEGPEEALQVSAPAAQEPGTEAPAP'},
                          {'entrynr': 2, 'seq': 'MEDSQSDMSIELPLSQETFSCLWKLLPPDDILPTTATGSPNSMEDLFLPQDVAELLEGPEEALQVSAPAAQEPGTEAPAP'},
                          {'entrynr': 3, 'seq': 'MEDSQSDMSIELPLSQETFSCLWKLLPPDDILPTTATGSPNSMEDLFLPQDVAELLEGPEEALQVSAPAAQEPGTEAPAP'}],
               'group2': [{'entrynr': 1, 'seq': 'MEDSQSDMSIELPLSQETFSCLWKLLPPDDILPTTATGSPNSMEDLFLPQDVAELLEGPEEALQVSAPAAQEPGTEAPAP'},
                          {'entrynr': 2, 'seq': 'MEDSQSDMSIELPLSQETFSCLWKLLPPDDILPTTATGSPNSMEDLFLPQDVAELLEGPEEALQVSAPAAQEPGTEAPAP'},
                          {'entrynr': 3, 'seq': 'MEDSQSDMSIELPLSQETFSCLWKLLPPDDILPTTATGSPNSMEDLFLPQDVAELLEGPEEALQVSAPAAQEPGTEAPAP'}],
               'rID': '1022-234a-3111', 'genome1': 9606, 'genome2': 9606}
        req_str = Request(req).serialize_to_compressed_string()
        reply = json.loads(zlib.decompress(self.alignworker.handle_request(req_str)), object_hook=json_numpy_obj_hook)
        self.assertEqual(len(reply['matches']), 3)
        self.assertTrue(numpy.array_equal(reply['matches']['EntryNr1'], numpy.array([1, 1, 2])))
        self.assertTrue(numpy.array_equal(reply['matches']['EntryNr2'], numpy.array([2, 3, 3])))
        self.assertTrue((reply['matches']['PamDistance'] < 0.05).all())

    def test_checksum_is_nontrivial(self):
        req1 = {'group1': [{'entrynr': 1, 'seq': 'ADRIAN'}],
                'group2': [{'entrynr': 1, 'seq': 'ARRANIAA'}],
                'rID': 'bal', 'genome1': 3333, 'genome2': 2112}
        req2 = {'group1': [{'entrynr': 2, 'seq': 'ADRIAN'}],
                'group2': [{'entrynr': 1, 'seq': 'ARRANIAA'}],
                'rID': 'bal', 'genome1': 3333, 'genome2': 2112}
        self.assertNotEqual(Request(req1).compute_checksum(), Request(req2).compute_checksum())

    def test_convergenceerror_is_serializeble(self):
        opa = self.alignworker.aligner.optimal_pairwise_alignment(pyopa.Sequence('ADRIAN'),
                                                                  pyopa.Sequence('ADRAN'))
        ex = ConvergenceError(opa)
        ex_serial = zlib.decompress(self.alignworker.serialize(ex.to_reply()))
        self.assertTrue(ex_serial.index('"code": 500') > -1)



class ConvergenceBugCases(unittest.TestCase):
    s1 = b'MERGGYGGGSGQGYNNFAVPPPNYQQMPNKTGNYNEPPPNYGKQGGGYDSGSGHRGSGGSGNGGGGGGSWNDRGGNSYGNGGASKDSYNKGHGGYSGGGGGGGGGGGGGSGGNDMITQEDTIFVSGMDPSTTEQDIETHFGAIGIIKKDKRTMKPKIWLYKNKETGASKGEATVTYDDTNAAQSAIEWFDGRDFNGNAIKVSLAQRQNNWNKGGGGGGGGGGRGGFGGRRGGGGGGGGGGGGGGRFDRGGGGGGGRYDRGGGGGGGGGGGNVQPRDGDWKCNSCNNTNFAWRNECNRCKTPKGDDEGSSGGGGGGGYGGGGGGGGYDRGNDRGSGGGGYHNRDRGGNSQGGGGGGGGGGGYSRFNDNNGGGRGGRGGGGGNRRDGGPMRNDGGMRSRPY'
    s2 = b'MEPQPSLSDFSVPLGMSAPASEPETLAPELVSPPEPLGQDIQLPQALIAPVGASPMAAADLTALIPEGIPGYDRPQNPFEGWPFQAPEPPELPPLEVPEPLAPGQMSLEEAMAADASNRNDDRRGEDPRREQQEERTVELPRYQPGELGELGDEFEPPEALRFAPEPDDDLPAAADLPPPAAALADFTSADDPEALSAEYLSQVPESPVAEVPGDTLENPLDPAEHSQQPEAFSPPEEALQAYNALSPLPPTEQLFPSTAAQDPLVPPGSPPQAVPGAPELSGAGSAEGSGPSLGTGDPRSLFSLEASFAAEPGSTPFVAGNLNPPFPGDASALVPPGGPGQDVLPAVDPPDTAAQEFLSLEDRFVQEGFLLPDQLAAPEILPDEILPELPSPELLEAEVPPPPDGLPTAAVDLAASPPTDNGEPLLGEAESLIPAVDPEAAEPTMQPSILEAAADGTASPFAGYPPELLTGAHGSPVGEGPIPPVDFFSAPDEGSLPPSVAEPFAQGDELASTGQPGMIPQPEPLGAQSQPREQSDPAIEPQSIAQAEPLSAATATPSEWPEAEPSLPAAPAEIPFLEQAEPFYADESAPESPPGDGTSPVADAEEAFPVPPLIPQATDPAADFPLPVEPVMLTPSELPGEVTASEALRATASSEGEPQRYVPPDDAGASAFSSGVPEFSTLPPESESSVEAPGLDAPVETLEEVAFLPTQDELADNEPVEFVEPLPVVSEMESEAAPEESVESVPGPEDALIREVGGGGQAFGAPAGEAGIADTSLLSTETSPQVFPSPATPDEIGQSAADTAAGREAEMPPRLQDPELPESPLVSILDSQTVAEQPTVVESDPQPTTGSEPQEFVPSAFEAASRSPSEAQIFQPEPLADPGVPLREEPSIEPAVLSTAESINAGDLGETSESPFVALEEQFPREGLPESVLPAAAEPFVPADIPAPSSGGELQIPIGDEQPPAAFYEAAGLTAQPLQAQMPTRPEASGEPMPPEGFAAQVEPSMLESLAPEPSPIAEISSPTGSESIAVPQLSLPEQPAAEPDLTVPLELPLDDETTAEQVAQAQASELSGETPALSLPQTVELSGQSESLLSFETQAPGEAPEVSFPVETETVESAGKSDGSVSSLEAVESIGELEPFSVLEAEASEPSGQSDTFLSPVTTEPTDETLSVGMPASQLGIPGGESEIFALQEAETAAAVPEATLLSALQGPPAAEALGAQPEAILPLEGQDPQATEFLETAGEPVFVSLEAQFSREQPPGSEPVAGLTAQTPERLAQPQAVGETTAEVAEWFAPPEAIETPTEAPESLAQPEAFAEGASEVLDLRSQPQAVGEGGVFDELDPLADRPPDLLGRLQPLSEQALPEQSGASLLERPEPLGEAQPLTPQEPLAETELAIPLEPPSATASTDDAVPFARLQTPEEFQPSEAPLRQTDSPIEPTADELEPEYEALVEAGLETQPVAVPTPELAAPALDVSEGEFFSEPLLQAEQAELPPQPEPLSALSAFTEPEEGFAPSPTAEVAAVAPELAAAAEPTSDDEIAVEEVVAFQPPELPGEPDDFLPLQPAELSGQPEALLSPPLEALEPSGGPETVASIGDGDLDAVLPPPEAAAAGGEAGIIPQPERTVVIEPSEPDSPSPSLEPQAAEFLETAGEPVFVSLETQFTHEHPPGSEPVAGLTAQTPERLAQPQAVGETTAEVAEWFAPPEAIETPTEAPELLAQPEAFAEGASEVPDLHSQLEAVGGGAVPDGLNLLADRPPSEQASPEQSSATASTDDAVPFARLQTPEEFQPSEAPLRQTDSPIGPTADELEPEYEAPSLEEQFAQEQEQPTSTISVDGTAVAQEAPDTEVGFTEQVTWTPPEVLDPVESVMPPAEPLLPAEESVPSEVGVIEPSAEPAVQLEPQAVEPEALISSGLPGEVLTFGEETVAPPEALVEAGLETQPVAVPTSELAAPALDVSEGEFFSEPLLQAEQAELPPQTEPLSQSPPEESPAQPWIPLEEQFVGEELPESQSQVLPDEASAVTSPAEVPGEGQETPELTFAALEDRFSQEEGFEPGMFTAEPPVASEDPSINLELPLETVQSELPAELPGPPQSTDGLPQTVVPTGTAIEQATAAETAAAAAEPFGPSLEGDSALFEEQPIEPEAQELPLSALSAFVEPEESFAPEPTAEVAAVAPELVAAAEATADTEFLETAGEPVFTSLEAQFSREQPPGSEPVAGLTAQTPERLAQPQAVGETTAEVAEWFAPPEAIETPTEAPESLAQPDEISEGAFEATELPAPTQAIGEGGAYDESDPLADTPADLLGPPHPPGEEAPPEHSGTLLLEQPEPLGQSADEPESILPAEALGELEPLAVSEPLGELELLGQPEPLSEAQPLSSPEPLGEGGSIAPELLIAQDAPVGGASEEDLLSLEEAFVDRSAAPAATESAAAEAVALEPGDSATPATEELPPAVARGVEPSLSVSQPTFESSAPLPQAELPEDRTAGEHPEPIHQTAPETVYPELLLPERGDGQAGLEDLPPAPTAVSPGQEAPSLEAPLVTEAPPVAELPVQSEDAAEPAGLTGELPEISAEPEWRQDAQTLPIGESQAEETESADGPAVAGREETFEIDELAAATEGSLEPLGAAFDLGAFPGLQTQHLGSSDPLGSTDYLGVGSSAALLLPSVVQDLTVLRSLVEDEDDLAATLPDGPELPALAAIEADLTPVDLVPAVEPDLPPLSEREIWPGWSGDRSTPDPTALEALPVDGEAADDRSESPLGVARDLTVLRSLSEAALPLEADGIVSASPAFALPDEQSETTEIEPTRPTIDDTQEIPDADGAFDPALRTDEPAPEDDPVAAEGPLGVAQDLTVLRPLAGDGFSPTVAQDLGVLTLLGVAAGVFATAGSEAIDPVEYGPLLYALAEQAEGPLDEADGGLEALLTPLDATVPEPLPLESAAGRSAAADTATSRPLGMDVQPLGVPEVPALGLETAVPLASVADLQDFDADLPEADLEAPTLPIASERTLGQGPLLFAAQLLADQQPEEDAEEEPEVPPDDVALQSDFAQQEPDGFSGAGEDEMEVEPLVLQEYLLQLEARKNAEEEDEEEEEEDGGGSDLPTVAGEAAALSGAASAPLLFAGSGALTDALGGRDHQIPDNWSDIEELLTVSAAEIGLGTTLPADTGSSSSTGGGGGGGGGGGGGGGGGGVPEAASTYSGYMGDSMEQVLLSGQLPAHVPPPAGAAAAAAAAPGDPEEAEEEGEGENADLEMLAQEIYGLLRQRLEVERERSGHHYLGRMPW'

    @classmethod
    def setUpClass(cls):
        resource.setrlimit(resource.RLIMIT_STACK, (65532000, 65532000))
        cls._aligner = Aligner(85)

    def test_local_convergence(self):
        s1 = self.s1[233:270]
        s11 = self.s1[230:252]
        s2 = self.s2[3167:3184]
        s21 = self.s2[3167:3185]

        opa = self._aligner.optimal_pairwise_alignment(pyopa.Sequence(s11), pyopa.Sequence(s21), modif='Local')
        self.assertTrue(True)

    def test_global_convergence(self):
        opa = self._aligner.optimal_pairwise_alignment(pyopa.Sequence(self.s1), pyopa.Sequence(self.s2), modif='Global')
        self.assertTrue(True)
