# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_opensim', [dirname(__file__)])
        except ImportError:
            import _opensim
            return _opensim
        if fp is not None:
            try:
                _mod = imp.load_module('_opensim', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _opensim = swig_import_helper()
    del swig_import_helper
else:
    import _opensim
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _opensim.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """
        value(SwigPyIterator self) -> PyObject *

        Parameters:
            self: swig::SwigPyIterator const *

        """
        return _opensim.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters:
            n: size_t

        incr(SwigPyIterator self) -> SwigPyIterator

        Parameters:
            self: swig::SwigPyIterator *

        """
        return _opensim.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters:
            n: size_t

        decr(SwigPyIterator self) -> SwigPyIterator

        Parameters:
            self: swig::SwigPyIterator *

        """
        return _opensim.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters:
            x: swig::SwigPyIterator const &

        """
        return _opensim.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters:
            x: swig::SwigPyIterator const &

        """
        return _opensim.SwigPyIterator_equal(self, x)


    def copy(self):
        """
        copy(SwigPyIterator self) -> SwigPyIterator

        Parameters:
            self: swig::SwigPyIterator const *

        """
        return _opensim.SwigPyIterator_copy(self)


    def next(self):
        """
        next(SwigPyIterator self) -> PyObject *

        Parameters:
            self: swig::SwigPyIterator *

        """
        return _opensim.SwigPyIterator_next(self)


    def __next__(self):
        """
        __next__(SwigPyIterator self) -> PyObject *

        Parameters:
            self: swig::SwigPyIterator *

        """
        return _opensim.SwigPyIterator___next__(self)


    def previous(self):
        """
        previous(SwigPyIterator self) -> PyObject *

        Parameters:
            self: swig::SwigPyIterator *

        """
        return _opensim.SwigPyIterator_previous(self)


    def advance(self, n):
        """
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t

        """
        return _opensim.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters:
            x: swig::SwigPyIterator const &

        """
        return _opensim.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters:
            x: swig::SwigPyIterator const &

        """
        return _opensim.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t

        """
        return _opensim.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t

        """
        return _opensim.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t

        """
        return _opensim.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters:
            x: swig::SwigPyIterator const &

        """
        return _opensim.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _opensim.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_opensim.GET_SYSTEM_INFO_swigconstant(_opensim)
GET_SYSTEM_INFO = _opensim.GET_SYSTEM_INFO

_opensim.GET_COMPILER_INFO_swigconstant(_opensim)
GET_COMPILER_INFO = _opensim.GET_COMPILER_INFO

_opensim.GET_OS_NAME_swigconstant(_opensim)
GET_OS_NAME = _opensim.GET_OS_NAME

def GetVersionAndDate():
    """GetVersionAndDate() -> std::string"""
    return _opensim.GetVersionAndDate()

def GetVersion():
    """GetVersion() -> std::string"""
    return _opensim.GetVersion()

def GetOSInfoVerbose():
    """GetOSInfoVerbose() -> std::string"""
    return _opensim.GetOSInfoVerbose()

def GetOSInfo():
    """GetOSInfo() -> std::string"""
    return _opensim.GetOSInfo()

def GetCompilerVersion():
    """GetCompilerVersion() -> std::string"""
    return _opensim.GetCompilerVersion()

_opensim.SimTK_PI_swigconstant(_opensim)
SimTK_PI = _opensim.SimTK_PI

_opensim.SimTK_E_swigconstant(_opensim)
SimTK_E = _opensim.SimTK_E

_opensim.SimTK_LN2_swigconstant(_opensim)
SimTK_LN2 = _opensim.SimTK_LN2

_opensim.SimTK_LN10_swigconstant(_opensim)
SimTK_LN10 = _opensim.SimTK_LN10

_opensim.SimTK_LOG2E_swigconstant(_opensim)
SimTK_LOG2E = _opensim.SimTK_LOG2E

_opensim.SimTK_LOG10E_swigconstant(_opensim)
SimTK_LOG10E = _opensim.SimTK_LOG10E

_opensim.SimTK_SQRT2_swigconstant(_opensim)
SimTK_SQRT2 = _opensim.SimTK_SQRT2

_opensim.SimTK_OOSQRT2_swigconstant(_opensim)
SimTK_OOSQRT2 = _opensim.SimTK_OOSQRT2

_opensim.SimTK_CBRT2_swigconstant(_opensim)
SimTK_CBRT2 = _opensim.SimTK_CBRT2

_opensim.SimTK_OOCBRT2_swigconstant(_opensim)
SimTK_OOCBRT2 = _opensim.SimTK_OOCBRT2

_opensim.SimTK_SIXRT2_swigconstant(_opensim)
SimTK_SIXRT2 = _opensim.SimTK_SIXRT2

_opensim.SimTK_OOSIXRT2_swigconstant(_opensim)
SimTK_OOSIXRT2 = _opensim.SimTK_OOSIXRT2

_opensim.SimTK_SQRT3_swigconstant(_opensim)
SimTK_SQRT3 = _opensim.SimTK_SQRT3

_opensim.SimTK_CBRT3_swigconstant(_opensim)
SimTK_CBRT3 = _opensim.SimTK_CBRT3

_opensim.SimTK_AVOGADROS_NUMBER_swigconstant(_opensim)
SimTK_AVOGADROS_NUMBER = _opensim.SimTK_AVOGADROS_NUMBER

_opensim.SimTK_MASS_OF_PROTON_IN_MD_swigconstant(_opensim)
SimTK_MASS_OF_PROTON_IN_MD = _opensim.SimTK_MASS_OF_PROTON_IN_MD

_opensim.SimTK_MASS_OF_NEUTRON_IN_MD_swigconstant(_opensim)
SimTK_MASS_OF_NEUTRON_IN_MD = _opensim.SimTK_MASS_OF_NEUTRON_IN_MD

_opensim.SimTK_MASS_OF_ELECTRON_IN_MD_swigconstant(_opensim)
SimTK_MASS_OF_ELECTRON_IN_MD = _opensim.SimTK_MASS_OF_ELECTRON_IN_MD

_opensim.SimTK_CHARGE_OF_PROTON_IN_SI_swigconstant(_opensim)
SimTK_CHARGE_OF_PROTON_IN_SI = _opensim.SimTK_CHARGE_OF_PROTON_IN_SI

_opensim.SimTK_CHARGE_OF_PROTON_IN_MD_swigconstant(_opensim)
SimTK_CHARGE_OF_PROTON_IN_MD = _opensim.SimTK_CHARGE_OF_PROTON_IN_MD

_opensim.SimTK_MOLAR_CHARGE_IN_SI_swigconstant(_opensim)
SimTK_MOLAR_CHARGE_IN_SI = _opensim.SimTK_MOLAR_CHARGE_IN_SI

_opensim.SimTK_MOLAR_CHARGE_IN_MD_swigconstant(_opensim)
SimTK_MOLAR_CHARGE_IN_MD = _opensim.SimTK_MOLAR_CHARGE_IN_MD

_opensim.SimTK_LIGHTSPEED_IN_SI_swigconstant(_opensim)
SimTK_LIGHTSPEED_IN_SI = _opensim.SimTK_LIGHTSPEED_IN_SI

_opensim.SimTK_LIGHTSPEED_IN_MD_swigconstant(_opensim)
SimTK_LIGHTSPEED_IN_MD = _opensim.SimTK_LIGHTSPEED_IN_MD

_opensim.SimTK_GRAVITATIONAL_CONSTANT_IN_SI_swigconstant(_opensim)
SimTK_GRAVITATIONAL_CONSTANT_IN_SI = _opensim.SimTK_GRAVITATIONAL_CONSTANT_IN_SI

_opensim.SimTK_GRAVITATIONAL_CONSTANT_IN_MD_swigconstant(_opensim)
SimTK_GRAVITATIONAL_CONSTANT_IN_MD = _opensim.SimTK_GRAVITATIONAL_CONSTANT_IN_MD

_opensim.SimTK_MAGNETIC_PERMEABILITY_IN_SI_swigconstant(_opensim)
SimTK_MAGNETIC_PERMEABILITY_IN_SI = _opensim.SimTK_MAGNETIC_PERMEABILITY_IN_SI

_opensim.SimTK_MAGNETIC_PERMEABILITY_IN_MD_swigconstant(_opensim)
SimTK_MAGNETIC_PERMEABILITY_IN_MD = _opensim.SimTK_MAGNETIC_PERMEABILITY_IN_MD

_opensim.SimTK_ELECTRIC_PERMITTIVITY_IN_SI_swigconstant(_opensim)
SimTK_ELECTRIC_PERMITTIVITY_IN_SI = _opensim.SimTK_ELECTRIC_PERMITTIVITY_IN_SI

_opensim.SimTK_ELECTRIC_PERMITTIVITY_IN_MD_swigconstant(_opensim)
SimTK_ELECTRIC_PERMITTIVITY_IN_MD = _opensim.SimTK_ELECTRIC_PERMITTIVITY_IN_MD

_opensim.SimTK_COULOMB_CONSTANT_IN_SI_swigconstant(_opensim)
SimTK_COULOMB_CONSTANT_IN_SI = _opensim.SimTK_COULOMB_CONSTANT_IN_SI

_opensim.SimTK_COULOMB_CONSTANT_IN_MD_swigconstant(_opensim)
SimTK_COULOMB_CONSTANT_IN_MD = _opensim.SimTK_COULOMB_CONSTANT_IN_MD

_opensim.SimTK_COULOMB_CONSTANT_IN_KCAL_ANGSTROM_swigconstant(_opensim)
SimTK_COULOMB_CONSTANT_IN_KCAL_ANGSTROM = _opensim.SimTK_COULOMB_CONSTANT_IN_KCAL_ANGSTROM

_opensim.SimTK_MOLAR_GAS_CONSTANT_SI_swigconstant(_opensim)
SimTK_MOLAR_GAS_CONSTANT_SI = _opensim.SimTK_MOLAR_GAS_CONSTANT_SI

_opensim.SimTK_MOLAR_GAS_CONSTANT_MD_swigconstant(_opensim)
SimTK_MOLAR_GAS_CONSTANT_MD = _opensim.SimTK_MOLAR_GAS_CONSTANT_MD

_opensim.SimTK_MOLAR_GAS_CONSTANT_KCAL_ANGSTROM_swigconstant(_opensim)
SimTK_MOLAR_GAS_CONSTANT_KCAL_ANGSTROM = _opensim.SimTK_MOLAR_GAS_CONSTANT_KCAL_ANGSTROM

_opensim.SimTK_BOLTZMANN_CONSTANT_SI_swigconstant(_opensim)
SimTK_BOLTZMANN_CONSTANT_SI = _opensim.SimTK_BOLTZMANN_CONSTANT_SI

_opensim.SimTK_BOLTZMANN_CONSTANT_MD_swigconstant(_opensim)
SimTK_BOLTZMANN_CONSTANT_MD = _opensim.SimTK_BOLTZMANN_CONSTANT_MD

_opensim.SimTK_BOLTZMANN_CONSTANT_KCAL_ANGSTROM_swigconstant(_opensim)
SimTK_BOLTZMANN_CONSTANT_KCAL_ANGSTROM = _opensim.SimTK_BOLTZMANN_CONSTANT_KCAL_ANGSTROM

_opensim.SimTK_RADIAN_TO_DEGREE_swigconstant(_opensim)
SimTK_RADIAN_TO_DEGREE = _opensim.SimTK_RADIAN_TO_DEGREE

_opensim.SimTK_DEGREE_TO_RADIAN_swigconstant(_opensim)
SimTK_DEGREE_TO_RADIAN = _opensim.SimTK_DEGREE_TO_RADIAN

_opensim.SimTK_NS_TO_S_swigconstant(_opensim)
SimTK_NS_TO_S = _opensim.SimTK_NS_TO_S

_opensim.SimTK_S_TO_NS_swigconstant(_opensim)
SimTK_S_TO_NS = _opensim.SimTK_S_TO_NS

_opensim.SimTK_KCAL_TO_KJOULE_swigconstant(_opensim)
SimTK_KCAL_TO_KJOULE = _opensim.SimTK_KCAL_TO_KJOULE

_opensim.SimTK_KJOULE_TO_KCAL_swigconstant(_opensim)
SimTK_KJOULE_TO_KCAL = _opensim.SimTK_KJOULE_TO_KCAL

_opensim.SimTK_DALTON_TO_GRAM_swigconstant(_opensim)
SimTK_DALTON_TO_GRAM = _opensim.SimTK_DALTON_TO_GRAM

_opensim.SimTK_E_TO_COULOMB_swigconstant(_opensim)
SimTK_E_TO_COULOMB = _opensim.SimTK_E_TO_COULOMB

_opensim.SimTK_EV_TO_JOULE_swigconstant(_opensim)
SimTK_EV_TO_JOULE = _opensim.SimTK_EV_TO_JOULE
class Vec2(_object):
    """Proxy of C++ SimTK::Vec<(2)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2, name)
    __repr__ = _swig_repr

    def size():
        """size() -> int"""
        return _opensim.Vec2_size()

    if _newclass:
        size = staticmethod(size)
    __swig_getmethods__["size"] = lambda x: size

    def nrow():
        """nrow() -> int"""
        return _opensim.Vec2_nrow()

    if _newclass:
        nrow = staticmethod(nrow)
    __swig_getmethods__["nrow"] = lambda x: nrow

    def ncol():
        """ncol() -> int"""
        return _opensim.Vec2_ncol()

    if _newclass:
        ncol = staticmethod(ncol)
    __swig_getmethods__["ncol"] = lambda x: ncol

    def __init__(self, *args):
        """
        __init__(SimTK::Vec<(2)> self) -> Vec2
        __init__(SimTK::Vec<(2)> self, Vec2 src) -> Vec2

        Parameters:
            src: SimTK::Vec< 2 > const &

        __init__(SimTK::Vec<(2)> self, double const & e) -> Vec2

        Parameters:
            e: double const &

        __init__(SimTK::Vec<(2)> self, int i) -> Vec2

        Parameters:
            i: int

        __init__(SimTK::Vec<(2)> self, SimTK::Vec< 2 >::E const & e0, SimTK::Vec< 2 >::E const & e1) -> Vec2

        Parameters:
            e0: SimTK::Vec< 2 >::E const &
            e1: SimTK::Vec< 2 >::E const &

        __init__(SimTK::Vec<(2)> self, SimTK::Vec< 2 >::E const & e0, SimTK::Vec< 2 >::E const & e1, SimTK::Vec< 2 >::E const & e2) -> Vec2

        Parameters:
            e0: SimTK::Vec< 2 >::E const &
            e1: SimTK::Vec< 2 >::E const &
            e2: SimTK::Vec< 2 >::E const &

        __init__(SimTK::Vec<(2)> self, SimTK::Vec< 2 >::E const & e0, SimTK::Vec< 2 >::E const & e1, SimTK::Vec< 2 >::E const & e2, SimTK::Vec< 2 >::E const & e3) -> Vec2

        Parameters:
            e0: SimTK::Vec< 2 >::E const &
            e1: SimTK::Vec< 2 >::E const &
            e2: SimTK::Vec< 2 >::E const &
            e3: SimTK::Vec< 2 >::E const &

        __init__(SimTK::Vec<(2)> self, SimTK::Vec< 2 >::E const & e0, SimTK::Vec< 2 >::E const & e1, SimTK::Vec< 2 >::E const & e2, SimTK::Vec< 2 >::E const & e3, SimTK::Vec< 2 >::E const & e4) -> Vec2

        Parameters:
            e0: SimTK::Vec< 2 >::E const &
            e1: SimTK::Vec< 2 >::E const &
            e2: SimTK::Vec< 2 >::E const &
            e3: SimTK::Vec< 2 >::E const &
            e4: SimTK::Vec< 2 >::E const &

        __init__(SimTK::Vec<(2)> self, SimTK::Vec< 2 >::E const & e0, SimTK::Vec< 2 >::E const & e1, SimTK::Vec< 2 >::E const & e2, SimTK::Vec< 2 >::E const & e3, SimTK::Vec< 2 >::E const & e4, SimTK::Vec< 2 >::E const & e5) -> Vec2

        Parameters:
            e0: SimTK::Vec< 2 >::E const &
            e1: SimTK::Vec< 2 >::E const &
            e2: SimTK::Vec< 2 >::E const &
            e3: SimTK::Vec< 2 >::E const &
            e4: SimTK::Vec< 2 >::E const &
            e5: SimTK::Vec< 2 >::E const &

        __init__(SimTK::Vec<(2)> self, SimTK::Vec< 2 >::E const & e0, SimTK::Vec< 2 >::E const & e1, SimTK::Vec< 2 >::E const & e2, SimTK::Vec< 2 >::E const & e3, SimTK::Vec< 2 >::E const & e4, SimTK::Vec< 2 >::E const & e5, SimTK::Vec< 2 >::E const & e6) -> Vec2

        Parameters:
            e0: SimTK::Vec< 2 >::E const &
            e1: SimTK::Vec< 2 >::E const &
            e2: SimTK::Vec< 2 >::E const &
            e3: SimTK::Vec< 2 >::E const &
            e4: SimTK::Vec< 2 >::E const &
            e5: SimTK::Vec< 2 >::E const &
            e6: SimTK::Vec< 2 >::E const &

        __init__(SimTK::Vec<(2)> self, SimTK::Vec< 2 >::E const & e0, SimTK::Vec< 2 >::E const & e1, SimTK::Vec< 2 >::E const & e2, SimTK::Vec< 2 >::E const & e3, SimTK::Vec< 2 >::E const & e4, SimTK::Vec< 2 >::E const & e5, SimTK::Vec< 2 >::E const & e6, SimTK::Vec< 2 >::E const & e7) -> Vec2

        Parameters:
            e0: SimTK::Vec< 2 >::E const &
            e1: SimTK::Vec< 2 >::E const &
            e2: SimTK::Vec< 2 >::E const &
            e3: SimTK::Vec< 2 >::E const &
            e4: SimTK::Vec< 2 >::E const &
            e5: SimTK::Vec< 2 >::E const &
            e6: SimTK::Vec< 2 >::E const &
            e7: SimTK::Vec< 2 >::E const &

        __init__(SimTK::Vec<(2)> self, SimTK::Vec< 2 >::E const & e0, SimTK::Vec< 2 >::E const & e1, SimTK::Vec< 2 >::E const & e2, SimTK::Vec< 2 >::E const & e3, SimTK::Vec< 2 >::E const & e4, SimTK::Vec< 2 >::E const & e5, SimTK::Vec< 2 >::E const & e6, SimTK::Vec< 2 >::E const & e7, SimTK::Vec< 2 >::E const & e8) -> Vec2

        Parameters:
            e0: SimTK::Vec< 2 >::E const &
            e1: SimTK::Vec< 2 >::E const &
            e2: SimTK::Vec< 2 >::E const &
            e3: SimTK::Vec< 2 >::E const &
            e4: SimTK::Vec< 2 >::E const &
            e5: SimTK::Vec< 2 >::E const &
            e6: SimTK::Vec< 2 >::E const &
            e7: SimTK::Vec< 2 >::E const &
            e8: SimTK::Vec< 2 >::E const &

        """
        this = _opensim.new_Vec2(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setToNaN(self):
        """
        setToNaN(Vec2 self)

        Parameters:
            self: SimTK::Vec< 2 > *

        """
        return _opensim.Vec2_setToNaN(self)


    def setToZero(self):
        """
        setToZero(Vec2 self)

        Parameters:
            self: SimTK::Vec< 2 > *

        """
        return _opensim.Vec2_setToZero(self)


    def isNaN(self):
        """
        isNaN(Vec2 self) -> bool

        Parameters:
            self: SimTK::Vec< 2 > const *

        """
        return _opensim.Vec2_isNaN(self)


    def isInf(self):
        """
        isInf(Vec2 self) -> bool

        Parameters:
            self: SimTK::Vec< 2 > const *

        """
        return _opensim.Vec2_isInf(self)


    def isFinite(self):
        """
        isFinite(Vec2 self) -> bool

        Parameters:
            self: SimTK::Vec< 2 > const *

        """
        return _opensim.Vec2_isFinite(self)


    def getDefaultTolerance():
        """getDefaultTolerance() -> double"""
        return _opensim.Vec2_getDefaultTolerance()

    if _newclass:
        getDefaultTolerance = staticmethod(getDefaultTolerance)
    __swig_getmethods__["getDefaultTolerance"] = lambda x: getDefaultTolerance

    def isNumericallyEqual(self, *args):
        """
        isNumericallyEqual(Vec2 self, double const & e, double tol) -> bool

        Parameters:
            e: double const &
            tol: double

        isNumericallyEqual(Vec2 self, double const & e) -> bool

        Parameters:
            e: double const &

        """
        return _opensim.Vec2_isNumericallyEqual(self, *args)


    def toString(self):
        """
        toString(Vec2 self) -> std::string

        Parameters:
            self: SimTK::Vec< 2 > const *

        """
        return _opensim.Vec2_toString(self)


    def set(self, i, value):
        """
        set(Vec2 self, int i, SimTK::Vec< 2 >::E const & value)

        Parameters:
            i: int
            value: SimTK::Vec< 2 >::E const &

        """
        return _opensim.Vec2_set(self, i, value)


    def get(self, i):
        """
        get(Vec2 self, int i) -> SimTK::Vec< 2 >::E const &

        Parameters:
            i: int

        """
        return _opensim.Vec2_get(self, i)

    __swig_destroy__ = _opensim.delete_Vec2
    __del__ = lambda self: None
Vec2_swigregister = _opensim.Vec2_swigregister
Vec2_swigregister(Vec2)
cvar = _opensim.cvar

def Vec2_size():
    """Vec2_size() -> int"""
    return _opensim.Vec2_size()

def Vec2_nrow():
    """Vec2_nrow() -> int"""
    return _opensim.Vec2_nrow()

def Vec2_ncol():
    """Vec2_ncol() -> int"""
    return _opensim.Vec2_ncol()

def Vec2_getDefaultTolerance():
    """Vec2_getDefaultTolerance() -> double"""
    return _opensim.Vec2_getDefaultTolerance()

class Vec3(_object):
    """Proxy of C++ SimTK::Vec<(3)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3, name)
    __repr__ = _swig_repr

    def size():
        """size() -> int"""
        return _opensim.Vec3_size()

    if _newclass:
        size = staticmethod(size)
    __swig_getmethods__["size"] = lambda x: size

    def nrow():
        """nrow() -> int"""
        return _opensim.Vec3_nrow()

    if _newclass:
        nrow = staticmethod(nrow)
    __swig_getmethods__["nrow"] = lambda x: nrow

    def ncol():
        """ncol() -> int"""
        return _opensim.Vec3_ncol()

    if _newclass:
        ncol = staticmethod(ncol)
    __swig_getmethods__["ncol"] = lambda x: ncol

    def __init__(self, *args):
        """
        __init__(SimTK::Vec<(3)> self) -> Vec3
        __init__(SimTK::Vec<(3)> self, Vec3 src) -> Vec3

        Parameters:
            src: SimTK::Vec< 3 > const &

        __init__(SimTK::Vec<(3)> self, double const & e) -> Vec3

        Parameters:
            e: double const &

        __init__(SimTK::Vec<(3)> self, int i) -> Vec3

        Parameters:
            i: int

        __init__(SimTK::Vec<(3)> self, SimTK::Vec< 3 >::E const & e0, SimTK::Vec< 3 >::E const & e1) -> Vec3

        Parameters:
            e0: SimTK::Vec< 3 >::E const &
            e1: SimTK::Vec< 3 >::E const &

        __init__(SimTK::Vec<(3)> self, SimTK::Vec< 3 >::E const & e0, SimTK::Vec< 3 >::E const & e1, SimTK::Vec< 3 >::E const & e2) -> Vec3

        Parameters:
            e0: SimTK::Vec< 3 >::E const &
            e1: SimTK::Vec< 3 >::E const &
            e2: SimTK::Vec< 3 >::E const &

        __init__(SimTK::Vec<(3)> self, SimTK::Vec< 3 >::E const & e0, SimTK::Vec< 3 >::E const & e1, SimTK::Vec< 3 >::E const & e2, SimTK::Vec< 3 >::E const & e3) -> Vec3

        Parameters:
            e0: SimTK::Vec< 3 >::E const &
            e1: SimTK::Vec< 3 >::E const &
            e2: SimTK::Vec< 3 >::E const &
            e3: SimTK::Vec< 3 >::E const &

        __init__(SimTK::Vec<(3)> self, SimTK::Vec< 3 >::E const & e0, SimTK::Vec< 3 >::E const & e1, SimTK::Vec< 3 >::E const & e2, SimTK::Vec< 3 >::E const & e3, SimTK::Vec< 3 >::E const & e4) -> Vec3

        Parameters:
            e0: SimTK::Vec< 3 >::E const &
            e1: SimTK::Vec< 3 >::E const &
            e2: SimTK::Vec< 3 >::E const &
            e3: SimTK::Vec< 3 >::E const &
            e4: SimTK::Vec< 3 >::E const &

        __init__(SimTK::Vec<(3)> self, SimTK::Vec< 3 >::E const & e0, SimTK::Vec< 3 >::E const & e1, SimTK::Vec< 3 >::E const & e2, SimTK::Vec< 3 >::E const & e3, SimTK::Vec< 3 >::E const & e4, SimTK::Vec< 3 >::E const & e5) -> Vec3

        Parameters:
            e0: SimTK::Vec< 3 >::E const &
            e1: SimTK::Vec< 3 >::E const &
            e2: SimTK::Vec< 3 >::E const &
            e3: SimTK::Vec< 3 >::E const &
            e4: SimTK::Vec< 3 >::E const &
            e5: SimTK::Vec< 3 >::E const &

        __init__(SimTK::Vec<(3)> self, SimTK::Vec< 3 >::E const & e0, SimTK::Vec< 3 >::E const & e1, SimTK::Vec< 3 >::E const & e2, SimTK::Vec< 3 >::E const & e3, SimTK::Vec< 3 >::E const & e4, SimTK::Vec< 3 >::E const & e5, SimTK::Vec< 3 >::E const & e6) -> Vec3

        Parameters:
            e0: SimTK::Vec< 3 >::E const &
            e1: SimTK::Vec< 3 >::E const &
            e2: SimTK::Vec< 3 >::E const &
            e3: SimTK::Vec< 3 >::E const &
            e4: SimTK::Vec< 3 >::E const &
            e5: SimTK::Vec< 3 >::E const &
            e6: SimTK::Vec< 3 >::E const &

        __init__(SimTK::Vec<(3)> self, SimTK::Vec< 3 >::E const & e0, SimTK::Vec< 3 >::E const & e1, SimTK::Vec< 3 >::E const & e2, SimTK::Vec< 3 >::E const & e3, SimTK::Vec< 3 >::E const & e4, SimTK::Vec< 3 >::E const & e5, SimTK::Vec< 3 >::E const & e6, SimTK::Vec< 3 >::E const & e7) -> Vec3

        Parameters:
            e0: SimTK::Vec< 3 >::E const &
            e1: SimTK::Vec< 3 >::E const &
            e2: SimTK::Vec< 3 >::E const &
            e3: SimTK::Vec< 3 >::E const &
            e4: SimTK::Vec< 3 >::E const &
            e5: SimTK::Vec< 3 >::E const &
            e6: SimTK::Vec< 3 >::E const &
            e7: SimTK::Vec< 3 >::E const &

        __init__(SimTK::Vec<(3)> self, SimTK::Vec< 3 >::E const & e0, SimTK::Vec< 3 >::E const & e1, SimTK::Vec< 3 >::E const & e2, SimTK::Vec< 3 >::E const & e3, SimTK::Vec< 3 >::E const & e4, SimTK::Vec< 3 >::E const & e5, SimTK::Vec< 3 >::E const & e6, SimTK::Vec< 3 >::E const & e7, SimTK::Vec< 3 >::E const & e8) -> Vec3

        Parameters:
            e0: SimTK::Vec< 3 >::E const &
            e1: SimTK::Vec< 3 >::E const &
            e2: SimTK::Vec< 3 >::E const &
            e3: SimTK::Vec< 3 >::E const &
            e4: SimTK::Vec< 3 >::E const &
            e5: SimTK::Vec< 3 >::E const &
            e6: SimTK::Vec< 3 >::E const &
            e7: SimTK::Vec< 3 >::E const &
            e8: SimTK::Vec< 3 >::E const &

        """
        this = _opensim.new_Vec3(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setToNaN(self):
        """
        setToNaN(Vec3 self)

        Parameters:
            self: SimTK::Vec< 3 > *

        """
        return _opensim.Vec3_setToNaN(self)


    def setToZero(self):
        """
        setToZero(Vec3 self)

        Parameters:
            self: SimTK::Vec< 3 > *

        """
        return _opensim.Vec3_setToZero(self)


    def isNaN(self):
        """
        isNaN(Vec3 self) -> bool

        Parameters:
            self: SimTK::Vec< 3 > const *

        """
        return _opensim.Vec3_isNaN(self)


    def isInf(self):
        """
        isInf(Vec3 self) -> bool

        Parameters:
            self: SimTK::Vec< 3 > const *

        """
        return _opensim.Vec3_isInf(self)


    def isFinite(self):
        """
        isFinite(Vec3 self) -> bool

        Parameters:
            self: SimTK::Vec< 3 > const *

        """
        return _opensim.Vec3_isFinite(self)


    def getDefaultTolerance():
        """getDefaultTolerance() -> double"""
        return _opensim.Vec3_getDefaultTolerance()

    if _newclass:
        getDefaultTolerance = staticmethod(getDefaultTolerance)
    __swig_getmethods__["getDefaultTolerance"] = lambda x: getDefaultTolerance

    def isNumericallyEqual(self, *args):
        """
        isNumericallyEqual(Vec3 self, double const & e, double tol) -> bool

        Parameters:
            e: double const &
            tol: double

        isNumericallyEqual(Vec3 self, double const & e) -> bool

        Parameters:
            e: double const &

        """
        return _opensim.Vec3_isNumericallyEqual(self, *args)


    def toString(self):
        """
        toString(Vec3 self) -> std::string

        Parameters:
            self: SimTK::Vec< 3 > const *

        """
        return _opensim.Vec3_toString(self)


    def set(self, i, value):
        """
        set(Vec3 self, int i, SimTK::Vec< 3 >::E const & value)

        Parameters:
            i: int
            value: SimTK::Vec< 3 >::E const &

        """
        return _opensim.Vec3_set(self, i, value)


    def get(self, i):
        """
        get(Vec3 self, int i) -> SimTK::Vec< 3 >::E const &

        Parameters:
            i: int

        """
        return _opensim.Vec3_get(self, i)

    __swig_destroy__ = _opensim.delete_Vec3
    __del__ = lambda self: None
Vec3_swigregister = _opensim.Vec3_swigregister
Vec3_swigregister(Vec3)

def Vec3_size():
    """Vec3_size() -> int"""
    return _opensim.Vec3_size()

def Vec3_nrow():
    """Vec3_nrow() -> int"""
    return _opensim.Vec3_nrow()

def Vec3_ncol():
    """Vec3_ncol() -> int"""
    return _opensim.Vec3_ncol()

def Vec3_getDefaultTolerance():
    """Vec3_getDefaultTolerance() -> double"""
    return _opensim.Vec3_getDefaultTolerance()

class Vec4(_object):
    """Proxy of C++ SimTK::Vec<(4)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec4, name)
    __repr__ = _swig_repr

    def size():
        """size() -> int"""
        return _opensim.Vec4_size()

    if _newclass:
        size = staticmethod(size)
    __swig_getmethods__["size"] = lambda x: size

    def nrow():
        """nrow() -> int"""
        return _opensim.Vec4_nrow()

    if _newclass:
        nrow = staticmethod(nrow)
    __swig_getmethods__["nrow"] = lambda x: nrow

    def ncol():
        """ncol() -> int"""
        return _opensim.Vec4_ncol()

    if _newclass:
        ncol = staticmethod(ncol)
    __swig_getmethods__["ncol"] = lambda x: ncol

    def __init__(self, *args):
        """
        __init__(SimTK::Vec<(4)> self) -> Vec4
        __init__(SimTK::Vec<(4)> self, Vec4 src) -> Vec4

        Parameters:
            src: SimTK::Vec< 4 > const &

        __init__(SimTK::Vec<(4)> self, double const & e) -> Vec4

        Parameters:
            e: double const &

        __init__(SimTK::Vec<(4)> self, int i) -> Vec4

        Parameters:
            i: int

        __init__(SimTK::Vec<(4)> self, SimTK::Vec< 4 >::E const & e0, SimTK::Vec< 4 >::E const & e1) -> Vec4

        Parameters:
            e0: SimTK::Vec< 4 >::E const &
            e1: SimTK::Vec< 4 >::E const &

        __init__(SimTK::Vec<(4)> self, SimTK::Vec< 4 >::E const & e0, SimTK::Vec< 4 >::E const & e1, SimTK::Vec< 4 >::E const & e2) -> Vec4

        Parameters:
            e0: SimTK::Vec< 4 >::E const &
            e1: SimTK::Vec< 4 >::E const &
            e2: SimTK::Vec< 4 >::E const &

        __init__(SimTK::Vec<(4)> self, SimTK::Vec< 4 >::E const & e0, SimTK::Vec< 4 >::E const & e1, SimTK::Vec< 4 >::E const & e2, SimTK::Vec< 4 >::E const & e3) -> Vec4

        Parameters:
            e0: SimTK::Vec< 4 >::E const &
            e1: SimTK::Vec< 4 >::E const &
            e2: SimTK::Vec< 4 >::E const &
            e3: SimTK::Vec< 4 >::E const &

        __init__(SimTK::Vec<(4)> self, SimTK::Vec< 4 >::E const & e0, SimTK::Vec< 4 >::E const & e1, SimTK::Vec< 4 >::E const & e2, SimTK::Vec< 4 >::E const & e3, SimTK::Vec< 4 >::E const & e4) -> Vec4

        Parameters:
            e0: SimTK::Vec< 4 >::E const &
            e1: SimTK::Vec< 4 >::E const &
            e2: SimTK::Vec< 4 >::E const &
            e3: SimTK::Vec< 4 >::E const &
            e4: SimTK::Vec< 4 >::E const &

        __init__(SimTK::Vec<(4)> self, SimTK::Vec< 4 >::E const & e0, SimTK::Vec< 4 >::E const & e1, SimTK::Vec< 4 >::E const & e2, SimTK::Vec< 4 >::E const & e3, SimTK::Vec< 4 >::E const & e4, SimTK::Vec< 4 >::E const & e5) -> Vec4

        Parameters:
            e0: SimTK::Vec< 4 >::E const &
            e1: SimTK::Vec< 4 >::E const &
            e2: SimTK::Vec< 4 >::E const &
            e3: SimTK::Vec< 4 >::E const &
            e4: SimTK::Vec< 4 >::E const &
            e5: SimTK::Vec< 4 >::E const &

        __init__(SimTK::Vec<(4)> self, SimTK::Vec< 4 >::E const & e0, SimTK::Vec< 4 >::E const & e1, SimTK::Vec< 4 >::E const & e2, SimTK::Vec< 4 >::E const & e3, SimTK::Vec< 4 >::E const & e4, SimTK::Vec< 4 >::E const & e5, SimTK::Vec< 4 >::E const & e6) -> Vec4

        Parameters:
            e0: SimTK::Vec< 4 >::E const &
            e1: SimTK::Vec< 4 >::E const &
            e2: SimTK::Vec< 4 >::E const &
            e3: SimTK::Vec< 4 >::E const &
            e4: SimTK::Vec< 4 >::E const &
            e5: SimTK::Vec< 4 >::E const &
            e6: SimTK::Vec< 4 >::E const &

        __init__(SimTK::Vec<(4)> self, SimTK::Vec< 4 >::E const & e0, SimTK::Vec< 4 >::E const & e1, SimTK::Vec< 4 >::E const & e2, SimTK::Vec< 4 >::E const & e3, SimTK::Vec< 4 >::E const & e4, SimTK::Vec< 4 >::E const & e5, SimTK::Vec< 4 >::E const & e6, SimTK::Vec< 4 >::E const & e7) -> Vec4

        Parameters:
            e0: SimTK::Vec< 4 >::E const &
            e1: SimTK::Vec< 4 >::E const &
            e2: SimTK::Vec< 4 >::E const &
            e3: SimTK::Vec< 4 >::E const &
            e4: SimTK::Vec< 4 >::E const &
            e5: SimTK::Vec< 4 >::E const &
            e6: SimTK::Vec< 4 >::E const &
            e7: SimTK::Vec< 4 >::E const &

        __init__(SimTK::Vec<(4)> self, SimTK::Vec< 4 >::E const & e0, SimTK::Vec< 4 >::E const & e1, SimTK::Vec< 4 >::E const & e2, SimTK::Vec< 4 >::E const & e3, SimTK::Vec< 4 >::E const & e4, SimTK::Vec< 4 >::E const & e5, SimTK::Vec< 4 >::E const & e6, SimTK::Vec< 4 >::E const & e7, SimTK::Vec< 4 >::E const & e8) -> Vec4

        Parameters:
            e0: SimTK::Vec< 4 >::E const &
            e1: SimTK::Vec< 4 >::E const &
            e2: SimTK::Vec< 4 >::E const &
            e3: SimTK::Vec< 4 >::E const &
            e4: SimTK::Vec< 4 >::E const &
            e5: SimTK::Vec< 4 >::E const &
            e6: SimTK::Vec< 4 >::E const &
            e7: SimTK::Vec< 4 >::E const &
            e8: SimTK::Vec< 4 >::E const &

        """
        this = _opensim.new_Vec4(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setToNaN(self):
        """
        setToNaN(Vec4 self)

        Parameters:
            self: SimTK::Vec< 4 > *

        """
        return _opensim.Vec4_setToNaN(self)


    def setToZero(self):
        """
        setToZero(Vec4 self)

        Parameters:
            self: SimTK::Vec< 4 > *

        """
        return _opensim.Vec4_setToZero(self)


    def isNaN(self):
        """
        isNaN(Vec4 self) -> bool

        Parameters:
            self: SimTK::Vec< 4 > const *

        """
        return _opensim.Vec4_isNaN(self)


    def isInf(self):
        """
        isInf(Vec4 self) -> bool

        Parameters:
            self: SimTK::Vec< 4 > const *

        """
        return _opensim.Vec4_isInf(self)


    def isFinite(self):
        """
        isFinite(Vec4 self) -> bool

        Parameters:
            self: SimTK::Vec< 4 > const *

        """
        return _opensim.Vec4_isFinite(self)


    def getDefaultTolerance():
        """getDefaultTolerance() -> double"""
        return _opensim.Vec4_getDefaultTolerance()

    if _newclass:
        getDefaultTolerance = staticmethod(getDefaultTolerance)
    __swig_getmethods__["getDefaultTolerance"] = lambda x: getDefaultTolerance

    def isNumericallyEqual(self, *args):
        """
        isNumericallyEqual(Vec4 self, double const & e, double tol) -> bool

        Parameters:
            e: double const &
            tol: double

        isNumericallyEqual(Vec4 self, double const & e) -> bool

        Parameters:
            e: double const &

        """
        return _opensim.Vec4_isNumericallyEqual(self, *args)


    def toString(self):
        """
        toString(Vec4 self) -> std::string

        Parameters:
            self: SimTK::Vec< 4 > const *

        """
        return _opensim.Vec4_toString(self)


    def set(self, i, value):
        """
        set(Vec4 self, int i, SimTK::Vec< 4 >::E const & value)

        Parameters:
            i: int
            value: SimTK::Vec< 4 >::E const &

        """
        return _opensim.Vec4_set(self, i, value)


    def get(self, i):
        """
        get(Vec4 self, int i) -> SimTK::Vec< 4 >::E const &

        Parameters:
            i: int

        """
        return _opensim.Vec4_get(self, i)

    __swig_destroy__ = _opensim.delete_Vec4
    __del__ = lambda self: None
Vec4_swigregister = _opensim.Vec4_swigregister
Vec4_swigregister(Vec4)

def Vec4_size():
    """Vec4_size() -> int"""
    return _opensim.Vec4_size()

def Vec4_nrow():
    """Vec4_nrow() -> int"""
    return _opensim.Vec4_nrow()

def Vec4_ncol():
    """Vec4_ncol() -> int"""
    return _opensim.Vec4_ncol()

def Vec4_getDefaultTolerance():
    """Vec4_getDefaultTolerance() -> double"""
    return _opensim.Vec4_getDefaultTolerance()

class Vec6(_object):
    """Proxy of C++ SimTK::Vec<(6)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec6, name)
    __repr__ = _swig_repr

    def size():
        """size() -> int"""
        return _opensim.Vec6_size()

    if _newclass:
        size = staticmethod(size)
    __swig_getmethods__["size"] = lambda x: size

    def nrow():
        """nrow() -> int"""
        return _opensim.Vec6_nrow()

    if _newclass:
        nrow = staticmethod(nrow)
    __swig_getmethods__["nrow"] = lambda x: nrow

    def ncol():
        """ncol() -> int"""
        return _opensim.Vec6_ncol()

    if _newclass:
        ncol = staticmethod(ncol)
    __swig_getmethods__["ncol"] = lambda x: ncol

    def __init__(self, *args):
        """
        __init__(SimTK::Vec<(6)> self) -> Vec6
        __init__(SimTK::Vec<(6)> self, Vec6 src) -> Vec6

        Parameters:
            src: SimTK::Vec< 6 > const &

        __init__(SimTK::Vec<(6)> self, double const & e) -> Vec6

        Parameters:
            e: double const &

        __init__(SimTK::Vec<(6)> self, int i) -> Vec6

        Parameters:
            i: int

        __init__(SimTK::Vec<(6)> self, SimTK::Vec< 6 >::E const & e0, SimTK::Vec< 6 >::E const & e1) -> Vec6

        Parameters:
            e0: SimTK::Vec< 6 >::E const &
            e1: SimTK::Vec< 6 >::E const &

        __init__(SimTK::Vec<(6)> self, SimTK::Vec< 6 >::E const & e0, SimTK::Vec< 6 >::E const & e1, SimTK::Vec< 6 >::E const & e2) -> Vec6

        Parameters:
            e0: SimTK::Vec< 6 >::E const &
            e1: SimTK::Vec< 6 >::E const &
            e2: SimTK::Vec< 6 >::E const &

        __init__(SimTK::Vec<(6)> self, SimTK::Vec< 6 >::E const & e0, SimTK::Vec< 6 >::E const & e1, SimTK::Vec< 6 >::E const & e2, SimTK::Vec< 6 >::E const & e3) -> Vec6

        Parameters:
            e0: SimTK::Vec< 6 >::E const &
            e1: SimTK::Vec< 6 >::E const &
            e2: SimTK::Vec< 6 >::E const &
            e3: SimTK::Vec< 6 >::E const &

        __init__(SimTK::Vec<(6)> self, SimTK::Vec< 6 >::E const & e0, SimTK::Vec< 6 >::E const & e1, SimTK::Vec< 6 >::E const & e2, SimTK::Vec< 6 >::E const & e3, SimTK::Vec< 6 >::E const & e4) -> Vec6

        Parameters:
            e0: SimTK::Vec< 6 >::E const &
            e1: SimTK::Vec< 6 >::E const &
            e2: SimTK::Vec< 6 >::E const &
            e3: SimTK::Vec< 6 >::E const &
            e4: SimTK::Vec< 6 >::E const &

        __init__(SimTK::Vec<(6)> self, SimTK::Vec< 6 >::E const & e0, SimTK::Vec< 6 >::E const & e1, SimTK::Vec< 6 >::E const & e2, SimTK::Vec< 6 >::E const & e3, SimTK::Vec< 6 >::E const & e4, SimTK::Vec< 6 >::E const & e5) -> Vec6

        Parameters:
            e0: SimTK::Vec< 6 >::E const &
            e1: SimTK::Vec< 6 >::E const &
            e2: SimTK::Vec< 6 >::E const &
            e3: SimTK::Vec< 6 >::E const &
            e4: SimTK::Vec< 6 >::E const &
            e5: SimTK::Vec< 6 >::E const &

        __init__(SimTK::Vec<(6)> self, SimTK::Vec< 6 >::E const & e0, SimTK::Vec< 6 >::E const & e1, SimTK::Vec< 6 >::E const & e2, SimTK::Vec< 6 >::E const & e3, SimTK::Vec< 6 >::E const & e4, SimTK::Vec< 6 >::E const & e5, SimTK::Vec< 6 >::E const & e6) -> Vec6

        Parameters:
            e0: SimTK::Vec< 6 >::E const &
            e1: SimTK::Vec< 6 >::E const &
            e2: SimTK::Vec< 6 >::E const &
            e3: SimTK::Vec< 6 >::E const &
            e4: SimTK::Vec< 6 >::E const &
            e5: SimTK::Vec< 6 >::E const &
            e6: SimTK::Vec< 6 >::E const &

        __init__(SimTK::Vec<(6)> self, SimTK::Vec< 6 >::E const & e0, SimTK::Vec< 6 >::E const & e1, SimTK::Vec< 6 >::E const & e2, SimTK::Vec< 6 >::E const & e3, SimTK::Vec< 6 >::E const & e4, SimTK::Vec< 6 >::E const & e5, SimTK::Vec< 6 >::E const & e6, SimTK::Vec< 6 >::E const & e7) -> Vec6

        Parameters:
            e0: SimTK::Vec< 6 >::E const &
            e1: SimTK::Vec< 6 >::E const &
            e2: SimTK::Vec< 6 >::E const &
            e3: SimTK::Vec< 6 >::E const &
            e4: SimTK::Vec< 6 >::E const &
            e5: SimTK::Vec< 6 >::E const &
            e6: SimTK::Vec< 6 >::E const &
            e7: SimTK::Vec< 6 >::E const &

        __init__(SimTK::Vec<(6)> self, SimTK::Vec< 6 >::E const & e0, SimTK::Vec< 6 >::E const & e1, SimTK::Vec< 6 >::E const & e2, SimTK::Vec< 6 >::E const & e3, SimTK::Vec< 6 >::E const & e4, SimTK::Vec< 6 >::E const & e5, SimTK::Vec< 6 >::E const & e6, SimTK::Vec< 6 >::E const & e7, SimTK::Vec< 6 >::E const & e8) -> Vec6

        Parameters:
            e0: SimTK::Vec< 6 >::E const &
            e1: SimTK::Vec< 6 >::E const &
            e2: SimTK::Vec< 6 >::E const &
            e3: SimTK::Vec< 6 >::E const &
            e4: SimTK::Vec< 6 >::E const &
            e5: SimTK::Vec< 6 >::E const &
            e6: SimTK::Vec< 6 >::E const &
            e7: SimTK::Vec< 6 >::E const &
            e8: SimTK::Vec< 6 >::E const &

        """
        this = _opensim.new_Vec6(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setToNaN(self):
        """
        setToNaN(Vec6 self)

        Parameters:
            self: SimTK::Vec< 6 > *

        """
        return _opensim.Vec6_setToNaN(self)


    def setToZero(self):
        """
        setToZero(Vec6 self)

        Parameters:
            self: SimTK::Vec< 6 > *

        """
        return _opensim.Vec6_setToZero(self)


    def isNaN(self):
        """
        isNaN(Vec6 self) -> bool

        Parameters:
            self: SimTK::Vec< 6 > const *

        """
        return _opensim.Vec6_isNaN(self)


    def isInf(self):
        """
        isInf(Vec6 self) -> bool

        Parameters:
            self: SimTK::Vec< 6 > const *

        """
        return _opensim.Vec6_isInf(self)


    def isFinite(self):
        """
        isFinite(Vec6 self) -> bool

        Parameters:
            self: SimTK::Vec< 6 > const *

        """
        return _opensim.Vec6_isFinite(self)


    def getDefaultTolerance():
        """getDefaultTolerance() -> double"""
        return _opensim.Vec6_getDefaultTolerance()

    if _newclass:
        getDefaultTolerance = staticmethod(getDefaultTolerance)
    __swig_getmethods__["getDefaultTolerance"] = lambda x: getDefaultTolerance

    def isNumericallyEqual(self, *args):
        """
        isNumericallyEqual(Vec6 self, double const & e, double tol) -> bool

        Parameters:
            e: double const &
            tol: double

        isNumericallyEqual(Vec6 self, double const & e) -> bool

        Parameters:
            e: double const &

        """
        return _opensim.Vec6_isNumericallyEqual(self, *args)


    def toString(self):
        """
        toString(Vec6 self) -> std::string

        Parameters:
            self: SimTK::Vec< 6 > const *

        """
        return _opensim.Vec6_toString(self)


    def set(self, i, value):
        """
        set(Vec6 self, int i, SimTK::Vec< 6 >::E const & value)

        Parameters:
            i: int
            value: SimTK::Vec< 6 >::E const &

        """
        return _opensim.Vec6_set(self, i, value)


    def get(self, i):
        """
        get(Vec6 self, int i) -> SimTK::Vec< 6 >::E const &

        Parameters:
            i: int

        """
        return _opensim.Vec6_get(self, i)

    __swig_destroy__ = _opensim.delete_Vec6
    __del__ = lambda self: None
Vec6_swigregister = _opensim.Vec6_swigregister
Vec6_swigregister(Vec6)

def Vec6_size():
    """Vec6_size() -> int"""
    return _opensim.Vec6_size()

def Vec6_nrow():
    """Vec6_nrow() -> int"""
    return _opensim.Vec6_nrow()

def Vec6_ncol():
    """Vec6_ncol() -> int"""
    return _opensim.Vec6_ncol()

def Vec6_getDefaultTolerance():
    """Vec6_getDefaultTolerance() -> double"""
    return _opensim.Vec6_getDefaultTolerance()

class Mat33(_object):
    """Proxy of C++ SimTK::Mat<(3,3)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mat33, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mat33, name)
    __repr__ = _swig_repr

    def size():
        """size() -> int"""
        return _opensim.Mat33_size()

    if _newclass:
        size = staticmethod(size)
    __swig_getmethods__["size"] = lambda x: size

    def nrow():
        """nrow() -> int"""
        return _opensim.Mat33_nrow()

    if _newclass:
        nrow = staticmethod(nrow)
    __swig_getmethods__["nrow"] = lambda x: nrow

    def ncol():
        """ncol() -> int"""
        return _opensim.Mat33_ncol()

    if _newclass:
        ncol = staticmethod(ncol)
    __swig_getmethods__["ncol"] = lambda x: ncol

    def __init__(self, *args):
        """
        __init__(SimTK::Mat<(3,3)> self) -> Mat33
        __init__(SimTK::Mat<(3,3)> self, Mat33 src) -> Mat33

        Parameters:
            src: SimTK::Mat< 3,3 > const &

        __init__(SimTK::Mat<(3,3)> self, double const & e) -> Mat33

        Parameters:
            e: double const &

        __init__(SimTK::Mat<(3,3)> self, int i) -> Mat33

        Parameters:
            i: int

        __init__(SimTK::Mat<(3,3)> self, double const & e0, double const & e1) -> Mat33

        Parameters:
            e0: double const &
            e1: double const &

        __init__(SimTK::Mat<(3,3)> self, double const & e0, double const & e1, double const & e2) -> Mat33

        Parameters:
            e0: double const &
            e1: double const &
            e2: double const &

        __init__(SimTK::Mat<(3,3)> self, double const & e0, double const & e1, double const & e2, double const & e3) -> Mat33

        Parameters:
            e0: double const &
            e1: double const &
            e2: double const &
            e3: double const &

        __init__(SimTK::Mat<(3,3)> self, double const & e0, double const & e1, double const & e2, double const & e3, double const & e4) -> Mat33

        Parameters:
            e0: double const &
            e1: double const &
            e2: double const &
            e3: double const &
            e4: double const &

        __init__(SimTK::Mat<(3,3)> self, double const & e0, double const & e1, double const & e2, double const & e3, double const & e4, double const & e5) -> Mat33

        Parameters:
            e0: double const &
            e1: double const &
            e2: double const &
            e3: double const &
            e4: double const &
            e5: double const &

        __init__(SimTK::Mat<(3,3)> self, double const & e0, double const & e1, double const & e2, double const & e3, double const & e4, double const & e5, double const & e6) -> Mat33

        Parameters:
            e0: double const &
            e1: double const &
            e2: double const &
            e3: double const &
            e4: double const &
            e5: double const &
            e6: double const &

        __init__(SimTK::Mat<(3,3)> self, double const & e0, double const & e1, double const & e2, double const & e3, double const & e4, double const & e5, double const & e6, double const & e7) -> Mat33

        Parameters:
            e0: double const &
            e1: double const &
            e2: double const &
            e3: double const &
            e4: double const &
            e5: double const &
            e6: double const &
            e7: double const &

        __init__(SimTK::Mat<(3,3)> self, double const & e0, double const & e1, double const & e2, double const & e3, double const & e4, double const & e5, double const & e6, double const & e7, double const & e8) -> Mat33

        Parameters:
            e0: double const &
            e1: double const &
            e2: double const &
            e3: double const &
            e4: double const &
            e5: double const &
            e6: double const &
            e7: double const &
            e8: double const &

        __init__(SimTK::Mat<(3,3)> self, double const & e0, double const & e1, double const & e2, double const & e3, double const & e4, double const & e5, double const & e6, double const & e7, double const & e8, double const & e9) -> Mat33

        Parameters:
            e0: double const &
            e1: double const &
            e2: double const &
            e3: double const &
            e4: double const &
            e5: double const &
            e6: double const &
            e7: double const &
            e8: double const &
            e9: double const &

        __init__(SimTK::Mat<(3,3)> self, double const & e0, double const & e1, double const & e2, double const & e3, double const & e4, double const & e5, double const & e6, double const & e7, double const & e8, double const & e9, double const & e10) -> Mat33

        Parameters:
            e0: double const &
            e1: double const &
            e2: double const &
            e3: double const &
            e4: double const &
            e5: double const &
            e6: double const &
            e7: double const &
            e8: double const &
            e9: double const &
            e10: double const &

        __init__(SimTK::Mat<(3,3)> self, double const & e0, double const & e1, double const & e2, double const & e3, double const & e4, double const & e5, double const & e6, double const & e7, double const & e8, double const & e9, double const & e10, double const & e11) -> Mat33

        Parameters:
            e0: double const &
            e1: double const &
            e2: double const &
            e3: double const &
            e4: double const &
            e5: double const &
            e6: double const &
            e7: double const &
            e8: double const &
            e9: double const &
            e10: double const &
            e11: double const &

        __init__(SimTK::Mat<(3,3)> self, double const & e0, double const & e1, double const & e2, double const & e3, double const & e4, double const & e5, double const & e6, double const & e7, double const & e8, double const & e9, double const & e10, double const & e11, double const & e12) -> Mat33

        Parameters:
            e0: double const &
            e1: double const &
            e2: double const &
            e3: double const &
            e4: double const &
            e5: double const &
            e6: double const &
            e7: double const &
            e8: double const &
            e9: double const &
            e10: double const &
            e11: double const &
            e12: double const &

        __init__(SimTK::Mat<(3,3)> self, double const & e0, double const & e1, double const & e2, double const & e3, double const & e4, double const & e5, double const & e6, double const & e7, double const & e8, double const & e9, double const & e10, double const & e11, double const & e12, double const & e13) -> Mat33

        Parameters:
            e0: double const &
            e1: double const &
            e2: double const &
            e3: double const &
            e4: double const &
            e5: double const &
            e6: double const &
            e7: double const &
            e8: double const &
            e9: double const &
            e10: double const &
            e11: double const &
            e12: double const &
            e13: double const &

        __init__(SimTK::Mat<(3,3)> self, double const & e0, double const & e1, double const & e2, double const & e3, double const & e4, double const & e5, double const & e6, double const & e7, double const & e8, double const & e9, double const & e10, double const & e11, double const & e12, double const & e13, double const & e14) -> Mat33

        Parameters:
            e0: double const &
            e1: double const &
            e2: double const &
            e3: double const &
            e4: double const &
            e5: double const &
            e6: double const &
            e7: double const &
            e8: double const &
            e9: double const &
            e10: double const &
            e11: double const &
            e12: double const &
            e13: double const &
            e14: double const &

        __init__(SimTK::Mat<(3,3)> self, double const & e0, double const & e1, double const & e2, double const & e3, double const & e4, double const & e5, double const & e6, double const & e7, double const & e8, double const & e9, double const & e10, double const & e11, double const & e12, double const & e13, double const & e14, double const & e15) -> Mat33

        Parameters:
            e0: double const &
            e1: double const &
            e2: double const &
            e3: double const &
            e4: double const &
            e5: double const &
            e6: double const &
            e7: double const &
            e8: double const &
            e9: double const &
            e10: double const &
            e11: double const &
            e12: double const &
            e13: double const &
            e14: double const &
            e15: double const &

        """
        this = _opensim.new_Mat33(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setToNaN(self):
        """
        setToNaN(Mat33 self)

        Parameters:
            self: SimTK::Mat< 3,3 > *

        """
        return _opensim.Mat33_setToNaN(self)


    def setToZero(self):
        """
        setToZero(Mat33 self)

        Parameters:
            self: SimTK::Mat< 3,3 > *

        """
        return _opensim.Mat33_setToZero(self)


    def isNaN(self):
        """
        isNaN(Mat33 self) -> bool

        Parameters:
            self: SimTK::Mat< 3,3 > const *

        """
        return _opensim.Mat33_isNaN(self)


    def isInf(self):
        """
        isInf(Mat33 self) -> bool

        Parameters:
            self: SimTK::Mat< 3,3 > const *

        """
        return _opensim.Mat33_isInf(self)


    def isFinite(self):
        """
        isFinite(Mat33 self) -> bool

        Parameters:
            self: SimTK::Mat< 3,3 > const *

        """
        return _opensim.Mat33_isFinite(self)


    def getDefaultTolerance():
        """getDefaultTolerance() -> double"""
        return _opensim.Mat33_getDefaultTolerance()

    if _newclass:
        getDefaultTolerance = staticmethod(getDefaultTolerance)
    __swig_getmethods__["getDefaultTolerance"] = lambda x: getDefaultTolerance

    def isNumericallyEqual(self, *args):
        """
        isNumericallyEqual(Mat33 self, double const & e, double tol) -> bool

        Parameters:
            e: double const &
            tol: double

        isNumericallyEqual(Mat33 self, double const & e) -> bool

        Parameters:
            e: double const &

        """
        return _opensim.Mat33_isNumericallyEqual(self, *args)


    def isNumericallySymmetric(self, *args):
        """
        isNumericallySymmetric(Mat33 self, double tol) -> bool

        Parameters:
            tol: double

        isNumericallySymmetric(Mat33 self) -> bool

        Parameters:
            self: SimTK::Mat< 3,3 > const *

        """
        return _opensim.Mat33_isNumericallySymmetric(self, *args)


    def isExactlySymmetric(self):
        """
        isExactlySymmetric(Mat33 self) -> bool

        Parameters:
            self: SimTK::Mat< 3,3 > const *

        """
        return _opensim.Mat33_isExactlySymmetric(self)


    def toString(self):
        """
        toString(Mat33 self) -> std::string

        Parameters:
            self: SimTK::Mat< 3,3 > const *

        """
        return _opensim.Mat33_toString(self)


    def get(self, i, j):
        """
        get(Mat33 self, int i, int j) -> double const &

        Parameters:
            i: int
            j: int

        """
        return _opensim.Mat33_get(self, i, j)


    def set(self, i, j, value):
        """
        set(Mat33 self, int i, int j, double const & value)

        Parameters:
            i: int
            j: int
            value: double const &

        """
        return _opensim.Mat33_set(self, i, j, value)

    __swig_destroy__ = _opensim.delete_Mat33
    __del__ = lambda self: None
Mat33_swigregister = _opensim.Mat33_swigregister
Mat33_swigregister(Mat33)

def Mat33_size():
    """Mat33_size() -> int"""
    return _opensim.Mat33_size()

def Mat33_nrow():
    """Mat33_nrow() -> int"""
    return _opensim.Mat33_nrow()

def Mat33_ncol():
    """Mat33_ncol() -> int"""
    return _opensim.Mat33_ncol()

def Mat33_getDefaultTolerance():
    """Mat33_getDefaultTolerance() -> double"""
    return _opensim.Mat33_getDefaultTolerance()

class MatrixBaseDouble(_object):
    """Proxy of C++ SimTK::MatrixBase<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixBaseDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixBaseDouble, name)
    __repr__ = _swig_repr

    def nrow(self):
        """
        nrow(MatrixBaseDouble self) -> int

        Parameters:
            self: SimTK::MatrixBase< double > const *

        """
        return _opensim.MatrixBaseDouble_nrow(self)


    def ncol(self):
        """
        ncol(MatrixBaseDouble self) -> int

        Parameters:
            self: SimTK::MatrixBase< double > const *

        """
        return _opensim.MatrixBaseDouble_ncol(self)


    def isResizeable(self):
        """
        isResizeable(MatrixBaseDouble self) -> bool

        Parameters:
            self: SimTK::MatrixBase< double > const *

        """
        return _opensim.MatrixBaseDouble_isResizeable(self)

    NScalarsPerElement = _opensim.MatrixBaseDouble_NScalarsPerElement
    CppNScalarsPerElement = _opensim.MatrixBaseDouble_CppNScalarsPerElement

    def __init__(self, *args):
        """
        __init__(SimTK::MatrixBase<(double)> self) -> MatrixBaseDouble
        __init__(SimTK::MatrixBase<(double)> self, int m, int n) -> MatrixBaseDouble

        Parameters:
            m: int
            n: int

        """
        this = _opensim.new_MatrixBaseDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def clear(self):
        """
        clear(MatrixBaseDouble self)

        Parameters:
            self: SimTK::MatrixBase< double > *

        """
        return _opensim.MatrixBaseDouble_clear(self)


    def elementwiseAssign(self, s):
        """
        elementwiseAssign(MatrixBaseDouble self, int s) -> MatrixBaseDouble

        Parameters:
            s: int

        """
        return _opensim.MatrixBaseDouble_elementwiseAssign(self, s)


    def elementwiseInvertInPlace(self):
        """
        elementwiseInvertInPlace(MatrixBaseDouble self) -> MatrixBaseDouble

        Parameters:
            self: SimTK::MatrixBase< double > *

        """
        return _opensim.MatrixBaseDouble_elementwiseInvertInPlace(self)


    def setTo(self, t):
        """
        setTo(MatrixBaseDouble self, double const & t) -> MatrixBaseDouble

        Parameters:
            t: double const &

        """
        return _opensim.MatrixBaseDouble_setTo(self, t)


    def setToNaN(self):
        """
        setToNaN(MatrixBaseDouble self) -> MatrixBaseDouble

        Parameters:
            self: SimTK::MatrixBase< double > *

        """
        return _opensim.MatrixBaseDouble_setToNaN(self)


    def setToZero(self):
        """
        setToZero(MatrixBaseDouble self) -> MatrixBaseDouble

        Parameters:
            self: SimTK::MatrixBase< double > *

        """
        return _opensim.MatrixBaseDouble_setToZero(self)


    def getElt(self, i, j):
        """
        getElt(MatrixBaseDouble self, int i, int j) -> double const &

        Parameters:
            i: int
            j: int

        """
        return _opensim.MatrixBaseDouble_getElt(self, i, j)


    def negateInPlace(self):
        """
        negateInPlace(MatrixBaseDouble self) -> MatrixBaseDouble

        Parameters:
            self: SimTK::MatrixBase< double > *

        """
        return _opensim.MatrixBaseDouble_negateInPlace(self)


    def resize(self, m, n):
        """
        resize(MatrixBaseDouble self, int m, int n) -> MatrixBaseDouble

        Parameters:
            m: int
            n: int

        """
        return _opensim.MatrixBaseDouble_resize(self, m, n)


    def resizeKeep(self, m, n):
        """
        resizeKeep(MatrixBaseDouble self, int m, int n) -> MatrixBaseDouble

        Parameters:
            m: int
            n: int

        """
        return _opensim.MatrixBaseDouble_resizeKeep(self, m, n)


    def lockShape(self):
        """
        lockShape(MatrixBaseDouble self)

        Parameters:
            self: SimTK::MatrixBase< double > *

        """
        return _opensim.MatrixBaseDouble_lockShape(self)


    def unlockShape(self):
        """
        unlockShape(MatrixBaseDouble self)

        Parameters:
            self: SimTK::MatrixBase< double > *

        """
        return _opensim.MatrixBaseDouble_unlockShape(self)

    __swig_destroy__ = _opensim.delete_MatrixBaseDouble
    __del__ = lambda self: None
MatrixBaseDouble_swigregister = _opensim.MatrixBaseDouble_swigregister
MatrixBaseDouble_swigregister(MatrixBaseDouble)

class VectorBaseDouble(MatrixBaseDouble):
    """Proxy of C++ SimTK::VectorBase<(double)> class"""
    __swig_setmethods__ = {}
    for _s in [MatrixBaseDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorBaseDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixBaseDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorBaseDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SimTK::VectorBase<(double)> self, int m=0) -> VectorBaseDouble

        Parameters:
            m: int

        __init__(SimTK::VectorBase<(double)> self) -> VectorBaseDouble
        __init__(SimTK::VectorBase<(double)> self, VectorBaseDouble source) -> VectorBaseDouble

        Parameters:
            source: SimTK::VectorBase< double > const &

        """
        this = _opensim.new_VectorBaseDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def size(self):
        """
        size(VectorBaseDouble self) -> int

        Parameters:
            self: SimTK::VectorBase< double > const *

        """
        return _opensim.VectorBaseDouble_size(self)


    def nrow(self):
        """
        nrow(VectorBaseDouble self) -> int

        Parameters:
            self: SimTK::VectorBase< double > const *

        """
        return _opensim.VectorBaseDouble_nrow(self)


    def ncol(self):
        """
        ncol(VectorBaseDouble self) -> int

        Parameters:
            self: SimTK::VectorBase< double > const *

        """
        return _opensim.VectorBaseDouble_ncol(self)


    def resize(self, m):
        """
        resize(VectorBaseDouble self, int m) -> VectorBaseDouble

        Parameters:
            m: int

        """
        return _opensim.VectorBaseDouble_resize(self, m)


    def resizeKeep(self, m):
        """
        resizeKeep(VectorBaseDouble self, int m) -> VectorBaseDouble

        Parameters:
            m: int

        """
        return _opensim.VectorBaseDouble_resizeKeep(self, m)


    def clear(self):
        """
        clear(VectorBaseDouble self)

        Parameters:
            self: SimTK::VectorBase< double > *

        """
        return _opensim.VectorBaseDouble_clear(self)


    def sum(self):
        """
        sum(VectorBaseDouble self) -> double

        Parameters:
            self: SimTK::VectorBase< double > const *

        """
        return _opensim.VectorBaseDouble_sum(self)

    __swig_destroy__ = _opensim.delete_VectorBaseDouble
    __del__ = lambda self: None
VectorBaseDouble_swigregister = _opensim.VectorBaseDouble_swigregister
VectorBaseDouble_swigregister(VectorBaseDouble)

class Vector(VectorBaseDouble):
    """Proxy of C++ SimTK::Vector_<(double)> class"""
    __swig_setmethods__ = {}
    for _s in [VectorBaseDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorBaseDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SimTK::Vector_<(double)> self) -> Vector
        __init__(SimTK::Vector_<(double)> self, Vector src) -> Vector

        Parameters:
            src: SimTK::Vector_< double > const &

        __init__(SimTK::Vector_<(double)> self, int m, double const & initialValue) -> Vector

        Parameters:
            m: int
            initialValue: double const &

        """
        this = _opensim.new_Vector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def toString(self):
        """
        toString(Vector self) -> std::string

        Parameters:
            self: SimTK::Vector_< double > const *

        """
        return _opensim.Vector_toString(self)


    def get(self, i):
        """
        get(Vector self, int i) -> double const &

        Parameters:
            i: int

        """
        return _opensim.Vector_get(self, i)


    def set(self, i, value):
        """
        set(Vector self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        """
        return _opensim.Vector_set(self, i, value)

    __swig_destroy__ = _opensim.delete_Vector
    __del__ = lambda self: None
Vector_swigregister = _opensim.Vector_swigregister
Vector_swigregister(Vector)

class Matrix(MatrixBaseDouble):
    """Proxy of C++ SimTK::Matrix_<(double)> class"""
    __swig_setmethods__ = {}
    for _s in [MatrixBaseDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixBaseDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SimTK::Matrix_<(double)> self) -> Matrix
        __init__(SimTK::Matrix_<(double)> self, Matrix src) -> Matrix

        Parameters:
            src: SimTK::Matrix_< double > const &

        __init__(SimTK::Matrix_<(double)> self, int m, int n) -> Matrix

        Parameters:
            m: int
            n: int

        __init__(SimTK::Matrix_<(double)> self, int m, int n, double const & initialValue) -> Matrix

        Parameters:
            m: int
            n: int
            initialValue: double const &

        """
        this = _opensim.new_Matrix(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def toString(self):
        """
        toString(Matrix self) -> std::string

        Parameters:
            self: SimTK::Matrix_< double > const *

        """
        return _opensim.Matrix_toString(self)


    def get(self, i, j):
        """
        get(Matrix self, int i, int j) -> double const &

        Parameters:
            i: int
            j: int

        """
        return _opensim.Matrix_get(self, i, j)


    def set(self, i, j, value):
        """
        set(Matrix self, int i, int j, double const & value)

        Parameters:
            i: int
            j: int
            value: double const &

        """
        return _opensim.Matrix_set(self, i, j, value)

    __swig_destroy__ = _opensim.delete_Matrix
    __del__ = lambda self: None
Matrix_swigregister = _opensim.Matrix_swigregister
Matrix_swigregister(Matrix)


def findRelativeVelocity(X_FA, V_FA, X_FB, V_FB):
    """
    findRelativeVelocity(Transform const & X_FA, SpatialVec V_FA, Transform const & X_FB, SpatialVec V_FB) -> SpatialVec

    Parameters:
        X_FA: Transform const &
        V_FA: SimTK::SpatialVec const &
        X_FB: Transform const &
        V_FB: SimTK::SpatialVec const &

    """
    return _opensim.findRelativeVelocity(X_FA, V_FA, X_FB, V_FB)

def findRelativeVelocityInF(p_AB_F, V_FA, V_FB):
    """
    findRelativeVelocityInF(Vec3 p_AB_F, SpatialVec V_FA, SpatialVec V_FB) -> SpatialVec

    Parameters:
        p_AB_F: SimTK::Vec3 const &
        V_FA: SimTK::SpatialVec const &
        V_FB: SimTK::SpatialVec const &

    """
    return _opensim.findRelativeVelocityInF(p_AB_F, V_FA, V_FB)

def findRelativeAcceleration(X_FA, V_FA, A_FA, X_FB, V_FB, A_FB):
    """
    findRelativeAcceleration(Transform const & X_FA, SpatialVec V_FA, SpatialVec A_FA, Transform const & X_FB, SpatialVec V_FB, SpatialVec A_FB) -> SpatialVec

    Parameters:
        X_FA: Transform const &
        V_FA: SimTK::SpatialVec const &
        A_FA: SimTK::SpatialVec const &
        X_FB: Transform const &
        V_FB: SimTK::SpatialVec const &
        A_FB: SimTK::SpatialVec const &

    """
    return _opensim.findRelativeAcceleration(X_FA, V_FA, A_FA, X_FB, V_FB, A_FB)

def findRelativeAccelerationInF(p_AB_F, V_FA, A_FA, V_FB, A_FB):
    """
    findRelativeAccelerationInF(Vec3 p_AB_F, SpatialVec V_FA, SpatialVec A_FA, SpatialVec V_FB, SpatialVec A_FB) -> SpatialVec

    Parameters:
        p_AB_F: SimTK::Vec3 const &
        V_FA: SimTK::SpatialVec const &
        A_FA: SimTK::SpatialVec const &
        V_FB: SimTK::SpatialVec const &
        A_FB: SimTK::SpatialVec const &

    """
    return _opensim.findRelativeAccelerationInF(p_AB_F, V_FA, A_FA, V_FB, A_FB)

def reverseRelativeVelocity(X_AB, V_AB):
    """
    reverseRelativeVelocity(Transform const & X_AB, SpatialVec V_AB) -> SpatialVec

    Parameters:
        X_AB: Transform const &
        V_AB: SimTK::SpatialVec const &

    """
    return _opensim.reverseRelativeVelocity(X_AB, V_AB)

def reverseRelativeVelocityInA(X_AB, V_AB):
    """
    reverseRelativeVelocityInA(Transform const & X_AB, SpatialVec V_AB) -> SpatialVec

    Parameters:
        X_AB: Transform const &
        V_AB: SimTK::SpatialVec const &

    """
    return _opensim.reverseRelativeVelocityInA(X_AB, V_AB)

def shiftVelocityBy(V_AB, r_A):
    """
    shiftVelocityBy(SpatialVec V_AB, Vec3 r_A) -> SpatialVec

    Parameters:
        V_AB: SimTK::SpatialVec const &
        r_A: SimTK::Vec3 const &

    """
    return _opensim.shiftVelocityBy(V_AB, r_A)

def shiftVelocityFromTo(V_A_BP, fromP_A, toQ_A):
    """
    shiftVelocityFromTo(SpatialVec V_A_BP, Vec3 fromP_A, Vec3 toQ_A) -> SpatialVec

    Parameters:
        V_A_BP: SimTK::SpatialVec const &
        fromP_A: SimTK::Vec3 const &
        toQ_A: SimTK::Vec3 const &

    """
    return _opensim.shiftVelocityFromTo(V_A_BP, fromP_A, toQ_A)

def shiftForceBy(F_AP, r_A):
    """
    shiftForceBy(SpatialVec F_AP, Vec3 r_A) -> SpatialVec

    Parameters:
        F_AP: SimTK::SpatialVec const &
        r_A: SimTK::Vec3 const &

    """
    return _opensim.shiftForceBy(F_AP, r_A)

def shiftForceFromTo(F_AP, fromP_A, toQ_A):
    """
    shiftForceFromTo(SpatialVec F_AP, Vec3 fromP_A, Vec3 toQ_A) -> SpatialVec

    Parameters:
        F_AP: SimTK::SpatialVec const &
        fromP_A: SimTK::Vec3 const &
        toQ_A: SimTK::Vec3 const &

    """
    return _opensim.shiftForceFromTo(F_AP, fromP_A, toQ_A)

def shiftAccelerationBy(A_AB, w_AB, r_A):
    """
    shiftAccelerationBy(SpatialVec A_AB, Vec3 w_AB, Vec3 r_A) -> SpatialVec

    Parameters:
        A_AB: SimTK::SpatialVec const &
        w_AB: SimTK::Vec3 const &
        r_A: SimTK::Vec3 const &

    """
    return _opensim.shiftAccelerationBy(A_AB, w_AB, r_A)

def shiftAccelerationFromTo(A_A_BP, w_AB, fromP_A, toQ_A):
    """
    shiftAccelerationFromTo(SpatialVec A_A_BP, Vec3 w_AB, Vec3 fromP_A, Vec3 toQ_A) -> SpatialVec

    Parameters:
        A_A_BP: SimTK::SpatialVec const &
        w_AB: SimTK::Vec3 const &
        fromP_A: SimTK::Vec3 const &
        toQ_A: SimTK::Vec3 const &

    """
    return _opensim.shiftAccelerationFromTo(A_A_BP, w_AB, fromP_A, toQ_A)
class SpatialVec(_object):
    """Proxy of C++ SimTK::Vec<(2,SimTK::Vec3)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpatialVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpatialVec, name)
    __repr__ = _swig_repr

    def size():
        """size() -> int"""
        return _opensim.SpatialVec_size()

    if _newclass:
        size = staticmethod(size)
    __swig_getmethods__["size"] = lambda x: size

    def nrow():
        """nrow() -> int"""
        return _opensim.SpatialVec_nrow()

    if _newclass:
        nrow = staticmethod(nrow)
    __swig_getmethods__["nrow"] = lambda x: nrow

    def ncol():
        """ncol() -> int"""
        return _opensim.SpatialVec_ncol()

    if _newclass:
        ncol = staticmethod(ncol)
    __swig_getmethods__["ncol"] = lambda x: ncol

    def __init__(self, *args):
        """
        __init__(SimTK::Vec<(2,SimTK::Vec3)> self) -> SpatialVec
        __init__(SimTK::Vec<(2,SimTK::Vec3)> self, SpatialVec src) -> SpatialVec

        Parameters:
            src: SimTK::Vec< 2,SimTK::Vec3 > const &

        __init__(SimTK::Vec<(2,SimTK::Vec3)> self, Vec3 e) -> SpatialVec

        Parameters:
            e: SimTK::Vec< 3,double,1 > const &

        __init__(SimTK::Vec<(2,SimTK::Vec3)> self, int i) -> SpatialVec

        Parameters:
            i: int

        __init__(SimTK::Vec<(2,SimTK::Vec3)> self, Vec3 e0, Vec3 e1) -> SpatialVec

        Parameters:
            e0: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e1: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &

        __init__(SimTK::Vec<(2,SimTK::Vec3)> self, Vec3 e0, Vec3 e1, Vec3 e2) -> SpatialVec

        Parameters:
            e0: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e1: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e2: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &

        __init__(SimTK::Vec<(2,SimTK::Vec3)> self, Vec3 e0, Vec3 e1, Vec3 e2, Vec3 e3) -> SpatialVec

        Parameters:
            e0: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e1: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e2: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e3: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &

        __init__(SimTK::Vec<(2,SimTK::Vec3)> self, Vec3 e0, Vec3 e1, Vec3 e2, Vec3 e3, Vec3 e4) -> SpatialVec

        Parameters:
            e0: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e1: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e2: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e3: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e4: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &

        __init__(SimTK::Vec<(2,SimTK::Vec3)> self, Vec3 e0, Vec3 e1, Vec3 e2, Vec3 e3, Vec3 e4, Vec3 e5) -> SpatialVec

        Parameters:
            e0: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e1: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e2: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e3: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e4: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e5: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &

        __init__(SimTK::Vec<(2,SimTK::Vec3)> self, Vec3 e0, Vec3 e1, Vec3 e2, Vec3 e3, Vec3 e4, Vec3 e5, Vec3 e6) -> SpatialVec

        Parameters:
            e0: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e1: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e2: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e3: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e4: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e5: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e6: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &

        __init__(SimTK::Vec<(2,SimTK::Vec3)> self, Vec3 e0, Vec3 e1, Vec3 e2, Vec3 e3, Vec3 e4, Vec3 e5, Vec3 e6, Vec3 e7) -> SpatialVec

        Parameters:
            e0: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e1: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e2: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e3: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e4: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e5: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e6: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e7: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &

        __init__(SimTK::Vec<(2,SimTK::Vec3)> self, Vec3 e0, Vec3 e1, Vec3 e2, Vec3 e3, Vec3 e4, Vec3 e5, Vec3 e6, Vec3 e7, Vec3 e8) -> SpatialVec

        Parameters:
            e0: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e1: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e2: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e3: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e4: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e5: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e6: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e7: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
            e8: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &

        """
        this = _opensim.new_SpatialVec(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setToNaN(self):
        """
        setToNaN(SpatialVec self)

        Parameters:
            self: SimTK::Vec< 2,SimTK::Vec3 > *

        """
        return _opensim.SpatialVec_setToNaN(self)


    def setToZero(self):
        """
        setToZero(SpatialVec self)

        Parameters:
            self: SimTK::Vec< 2,SimTK::Vec3 > *

        """
        return _opensim.SpatialVec_setToZero(self)


    def isNaN(self):
        """
        isNaN(SpatialVec self) -> bool

        Parameters:
            self: SimTK::Vec< 2,SimTK::Vec3 > const *

        """
        return _opensim.SpatialVec_isNaN(self)


    def isInf(self):
        """
        isInf(SpatialVec self) -> bool

        Parameters:
            self: SimTK::Vec< 2,SimTK::Vec3 > const *

        """
        return _opensim.SpatialVec_isInf(self)


    def isFinite(self):
        """
        isFinite(SpatialVec self) -> bool

        Parameters:
            self: SimTK::Vec< 2,SimTK::Vec3 > const *

        """
        return _opensim.SpatialVec_isFinite(self)


    def getDefaultTolerance():
        """getDefaultTolerance() -> double"""
        return _opensim.SpatialVec_getDefaultTolerance()

    if _newclass:
        getDefaultTolerance = staticmethod(getDefaultTolerance)
    __swig_getmethods__["getDefaultTolerance"] = lambda x: getDefaultTolerance

    def isNumericallyEqual(self, *args):
        """
        isNumericallyEqual(SpatialVec self, Vec3 e, double tol) -> bool

        Parameters:
            e: SimTK::Vec< 3,double,1 > const &
            tol: double

        isNumericallyEqual(SpatialVec self, Vec3 e) -> bool

        Parameters:
            e: SimTK::Vec< 3,double,1 > const &

        """
        return _opensim.SpatialVec_isNumericallyEqual(self, *args)


    def toString(self):
        """
        toString(SpatialVec self) -> std::string

        Parameters:
            self: SimTK::Vec< 2,SimTK::Vec3 > const *

        """
        return _opensim.SpatialVec_toString(self)


    def set(self, i, value):
        """
        set(SpatialVec self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &

        """
        return _opensim.SpatialVec_set(self, i, value)


    def get(self, i):
        """
        get(SpatialVec self, int i) -> Vec3

        Parameters:
            i: int

        """
        return _opensim.SpatialVec_get(self, i)

    __swig_destroy__ = _opensim.delete_SpatialVec
    __del__ = lambda self: None
SpatialVec_swigregister = _opensim.SpatialVec_swigregister
SpatialVec_swigregister(SpatialVec)

def SpatialVec_size():
    """SpatialVec_size() -> int"""
    return _opensim.SpatialVec_size()

def SpatialVec_nrow():
    """SpatialVec_nrow() -> int"""
    return _opensim.SpatialVec_nrow()

def SpatialVec_ncol():
    """SpatialVec_ncol() -> int"""
    return _opensim.SpatialVec_ncol()

def SpatialVec_getDefaultTolerance():
    """SpatialVec_getDefaultTolerance() -> double"""
    return _opensim.SpatialVec_getDefaultTolerance()

class VectorOfSpatialVec(_object):
    """Proxy of C++ SimTK::Vector_<(SimTK::SpatialVec)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfSpatialVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfSpatialVec, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SimTK::Vector_<(SimTK::SpatialVec)> self) -> VectorOfSpatialVec
        __init__(SimTK::Vector_<(SimTK::SpatialVec)> self, VectorOfSpatialVec src) -> VectorOfSpatialVec

        Parameters:
            src: SimTK::Vector_< SimTK::SpatialVec > const &

        __init__(SimTK::Vector_<(SimTK::SpatialVec)> self, int m, SpatialVec initialValue) -> VectorOfSpatialVec

        Parameters:
            m: int
            initialValue: SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > const &

        """
        this = _opensim.new_VectorOfSpatialVec(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def toString(self):
        """
        toString(VectorOfSpatialVec self) -> std::string

        Parameters:
            self: SimTK::Vector_< SimTK::SpatialVec > const *

        """
        return _opensim.VectorOfSpatialVec_toString(self)


    def get(self, i):
        """
        get(VectorOfSpatialVec self, int i) -> SpatialVec

        Parameters:
            i: int

        """
        return _opensim.VectorOfSpatialVec_get(self, i)


    def set(self, i, value):
        """
        set(VectorOfSpatialVec self, int i, SpatialVec value)

        Parameters:
            i: int
            value: SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > const &

        """
        return _opensim.VectorOfSpatialVec_set(self, i, value)

    __swig_destroy__ = _opensim.delete_VectorOfSpatialVec
    __del__ = lambda self: None
VectorOfSpatialVec_swigregister = _opensim.VectorOfSpatialVec_swigregister
VectorOfSpatialVec_swigregister(VectorOfSpatialVec)

class VectorOfVec3(_object):
    """Proxy of C++ SimTK::Vector_<(SimTK::Vec3)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfVec3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfVec3, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SimTK::Vector_<(SimTK::Vec3)> self) -> VectorOfVec3
        __init__(SimTK::Vector_<(SimTK::Vec3)> self, VectorOfVec3 src) -> VectorOfVec3

        Parameters:
            src: SimTK::Vector_< SimTK::Vec3 > const &

        __init__(SimTK::Vector_<(SimTK::Vec3)> self, int m, Vec3 initialValue) -> VectorOfVec3

        Parameters:
            m: int
            initialValue: SimTK::Vec< 3,double,1 > const &

        """
        this = _opensim.new_VectorOfVec3(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def toString(self):
        """
        toString(VectorOfVec3 self) -> std::string

        Parameters:
            self: SimTK::Vector_< SimTK::Vec3 > const *

        """
        return _opensim.VectorOfVec3_toString(self)


    def get(self, i):
        """
        get(VectorOfVec3 self, int i) -> Vec3

        Parameters:
            i: int

        """
        return _opensim.VectorOfVec3_get(self, i)


    def set(self, i, value):
        """
        set(VectorOfVec3 self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec< 3,double,1 > const &

        """
        return _opensim.VectorOfVec3_set(self, i, value)

    __swig_destroy__ = _opensim.delete_VectorOfVec3
    __del__ = lambda self: None
VectorOfVec3_swigregister = _opensim.VectorOfVec3_swigregister
VectorOfVec3_swigregister(VectorOfVec3)

class CoordinateAxis(_object):
    """Proxy of C++ SimTK::CoordinateAxis class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoordinateAxis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoordinateAxis, name)
    __repr__ = _swig_repr

    def __init__(self, i):
        """
        __init__(SimTK::CoordinateAxis self, int i) -> CoordinateAxis

        Parameters:
            i: int

        """
        this = _opensim.new_CoordinateAxis(i)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getNextAxis(self):
        """
        getNextAxis(CoordinateAxis self) -> CoordinateAxis

        Parameters:
            self: SimTK::CoordinateAxis const *

        """
        return _opensim.CoordinateAxis_getNextAxis(self)


    def getPreviousAxis(self):
        """
        getPreviousAxis(CoordinateAxis self) -> CoordinateAxis

        Parameters:
            self: SimTK::CoordinateAxis const *

        """
        return _opensim.CoordinateAxis_getPreviousAxis(self)


    def getThirdAxis(self, axis2):
        """
        getThirdAxis(CoordinateAxis self, CoordinateAxis axis2) -> CoordinateAxis

        Parameters:
            axis2: SimTK::CoordinateAxis const &

        """
        return _opensim.CoordinateAxis_getThirdAxis(self, axis2)


    def isXAxis(self):
        """
        isXAxis(CoordinateAxis self) -> bool

        Parameters:
            self: SimTK::CoordinateAxis const *

        """
        return _opensim.CoordinateAxis_isXAxis(self)


    def isYAxis(self):
        """
        isYAxis(CoordinateAxis self) -> bool

        Parameters:
            self: SimTK::CoordinateAxis const *

        """
        return _opensim.CoordinateAxis_isYAxis(self)


    def isZAxis(self):
        """
        isZAxis(CoordinateAxis self) -> bool

        Parameters:
            self: SimTK::CoordinateAxis const *

        """
        return _opensim.CoordinateAxis_isZAxis(self)


    def isNextAxis(self, axis2):
        """
        isNextAxis(CoordinateAxis self, CoordinateAxis axis2) -> bool

        Parameters:
            axis2: SimTK::CoordinateAxis const &

        """
        return _opensim.CoordinateAxis_isNextAxis(self, axis2)


    def isPreviousAxis(self, axis2):
        """
        isPreviousAxis(CoordinateAxis self, CoordinateAxis axis2) -> bool

        Parameters:
            axis2: SimTK::CoordinateAxis const &

        """
        return _opensim.CoordinateAxis_isPreviousAxis(self, axis2)


    def isSameAxis(self, axis2):
        """
        isSameAxis(CoordinateAxis self, CoordinateAxis axis2) -> bool

        Parameters:
            axis2: SimTK::CoordinateAxis const &

        """
        return _opensim.CoordinateAxis_isSameAxis(self, axis2)


    def areAllSameAxes(self, axis2, axis3):
        """
        areAllSameAxes(CoordinateAxis self, CoordinateAxis axis2, CoordinateAxis axis3) -> bool

        Parameters:
            axis2: SimTK::CoordinateAxis const &
            axis3: SimTK::CoordinateAxis const &

        """
        return _opensim.CoordinateAxis_areAllSameAxes(self, axis2, axis3)


    def isDifferentAxis(self, axis2):
        """
        isDifferentAxis(CoordinateAxis self, CoordinateAxis axis2) -> bool

        Parameters:
            axis2: SimTK::CoordinateAxis const &

        """
        return _opensim.CoordinateAxis_isDifferentAxis(self, axis2)


    def areAllDifferentAxes(self, axis2, axis3):
        """
        areAllDifferentAxes(CoordinateAxis self, CoordinateAxis axis2, CoordinateAxis axis3) -> bool

        Parameters:
            axis2: SimTK::CoordinateAxis const &
            axis3: SimTK::CoordinateAxis const &

        """
        return _opensim.CoordinateAxis_areAllDifferentAxes(self, axis2, axis3)


    def isForwardCyclical(self, axis2):
        """
        isForwardCyclical(CoordinateAxis self, CoordinateAxis axis2) -> bool

        Parameters:
            axis2: SimTK::CoordinateAxis const &

        """
        return _opensim.CoordinateAxis_isForwardCyclical(self, axis2)


    def isReverseCyclical(self, axis2):
        """
        isReverseCyclical(CoordinateAxis self, CoordinateAxis axis2) -> bool

        Parameters:
            axis2: SimTK::CoordinateAxis const &

        """
        return _opensim.CoordinateAxis_isReverseCyclical(self, axis2)


    def dotProduct(self, axis2):
        """
        dotProduct(CoordinateAxis self, CoordinateAxis axis2) -> int

        Parameters:
            axis2: SimTK::CoordinateAxis const &

        """
        return _opensim.CoordinateAxis_dotProduct(self, axis2)


    def crossProductSign(self, axis2):
        """
        crossProductSign(CoordinateAxis self, CoordinateAxis axis2) -> int

        Parameters:
            axis2: SimTK::CoordinateAxis const &

        """
        return _opensim.CoordinateAxis_crossProductSign(self, axis2)


    def crossProductAxis(self, axis2):
        """
        crossProductAxis(CoordinateAxis self, CoordinateAxis axis2) -> CoordinateAxis

        Parameters:
            axis2: SimTK::CoordinateAxis const &

        """
        return _opensim.CoordinateAxis_crossProductAxis(self, axis2)


    def crossProduct(self, axis2, sign):
        """
        crossProduct(CoordinateAxis self, CoordinateAxis axis2, int & sign) -> CoordinateAxis

        Parameters:
            axis2: SimTK::CoordinateAxis const &
            sign: int &

        """
        return _opensim.CoordinateAxis_crossProduct(self, axis2, sign)


    def getCoordinateAxis(i):
        """
        getCoordinateAxis(int i) -> CoordinateAxis

        Parameters:
            i: int

        """
        return _opensim.CoordinateAxis_getCoordinateAxis(i)

    if _newclass:
        getCoordinateAxis = staticmethod(getCoordinateAxis)
    __swig_getmethods__["getCoordinateAxis"] = lambda x: getCoordinateAxis

    def isIndexInRange(i):
        """
        isIndexInRange(int i) -> bool

        Parameters:
            i: int

        """
        return _opensim.CoordinateAxis_isIndexInRange(i)

    if _newclass:
        isIndexInRange = staticmethod(isIndexInRange)
    __swig_getmethods__["isIndexInRange"] = lambda x: isIndexInRange
    __swig_destroy__ = _opensim.delete_CoordinateAxis
    __del__ = lambda self: None
CoordinateAxis_swigregister = _opensim.CoordinateAxis_swigregister
CoordinateAxis_swigregister(CoordinateAxis)

def CoordinateAxis_getCoordinateAxis(i):
    """
    CoordinateAxis_getCoordinateAxis(int i) -> CoordinateAxis

    Parameters:
        i: int

    """
    return _opensim.CoordinateAxis_getCoordinateAxis(i)

def CoordinateAxis_isIndexInRange(i):
    """
    CoordinateAxis_isIndexInRange(int i) -> bool

    Parameters:
        i: int

    """
    return _opensim.CoordinateAxis_isIndexInRange(i)


def __eq__(a1, a2):
    """
    __eq__(CoordinateAxis a1, CoordinateAxis a2) -> bool

    Parameters:
        a1: SimTK::CoordinateAxis const &
        a2: SimTK::CoordinateAxis const &

    """
    return _opensim.__eq__(a1, a2)

def __ne__(a1, a2):
    """
    __ne__(CoordinateAxis a1, CoordinateAxis a2) -> bool

    Parameters:
        a1: SimTK::CoordinateAxis const &
        a2: SimTK::CoordinateAxis const &

    """
    return _opensim.__ne__(a1, a2)
class CoordinateDirection(_object):
    """Proxy of C++ SimTK::CoordinateDirection class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoordinateDirection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoordinateDirection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SimTK::CoordinateDirection self, CoordinateAxis axis) -> CoordinateDirection

        Parameters:
            axis: SimTK::CoordinateAxis const &

        __init__(SimTK::CoordinateDirection self, CoordinateAxis axis, int direction) -> CoordinateDirection

        Parameters:
            axis: SimTK::CoordinateAxis const &
            direction: int

        """
        this = _opensim.new_CoordinateDirection(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getAxis(self):
        """
        getAxis(CoordinateDirection self) -> CoordinateAxis

        Parameters:
            self: SimTK::CoordinateDirection const *

        """
        return _opensim.CoordinateDirection_getAxis(self)


    def getDirection(self):
        """
        getDirection(CoordinateDirection self) -> int

        Parameters:
            self: SimTK::CoordinateDirection const *

        """
        return _opensim.CoordinateDirection_getDirection(self)


    def hasSameAxis(self, dir2):
        """
        hasSameAxis(CoordinateDirection self, CoordinateDirection dir2) -> bool

        Parameters:
            dir2: SimTK::CoordinateDirection const &

        """
        return _opensim.CoordinateDirection_hasSameAxis(self, dir2)


    def isSameAxisAndDirection(self, dir2):
        """
        isSameAxisAndDirection(CoordinateDirection self, CoordinateDirection dir2) -> bool

        Parameters:
            dir2: SimTK::CoordinateDirection const &

        """
        return _opensim.CoordinateDirection_isSameAxisAndDirection(self, dir2)


    def dotProduct(self, dir2):
        """
        dotProduct(CoordinateDirection self, CoordinateDirection dir2) -> int

        Parameters:
            dir2: SimTK::CoordinateDirection const &

        """
        return _opensim.CoordinateDirection_dotProduct(self, dir2)


    def crossProductSign(self, dir2):
        """
        crossProductSign(CoordinateDirection self, CoordinateDirection dir2) -> int

        Parameters:
            dir2: SimTK::CoordinateDirection const &

        """
        return _opensim.CoordinateDirection_crossProductSign(self, dir2)


    def crossProductAxis(self, dir2):
        """
        crossProductAxis(CoordinateDirection self, CoordinateDirection dir2) -> CoordinateAxis

        Parameters:
            dir2: SimTK::CoordinateDirection const &

        """
        return _opensim.CoordinateDirection_crossProductAxis(self, dir2)


    def crossProduct(self, dir2, sign):
        """
        crossProduct(CoordinateDirection self, CoordinateDirection dir2, int & sign) -> CoordinateAxis

        Parameters:
            dir2: SimTK::CoordinateDirection const &
            sign: int &

        """
        return _opensim.CoordinateDirection_crossProduct(self, dir2, sign)

    __swig_destroy__ = _opensim.delete_CoordinateDirection
    __del__ = lambda self: None
CoordinateDirection_swigregister = _opensim.CoordinateDirection_swigregister
CoordinateDirection_swigregister(CoordinateDirection)


_opensim.BodyRotationSequence_swigconstant(_opensim)
BodyRotationSequence = _opensim.BodyRotationSequence

_opensim.SpaceRotationSequence_swigconstant(_opensim)
SpaceRotationSequence = _opensim.SpaceRotationSequence
class Rotation(Mat33):
    """Proxy of C++ SimTK::Rotation_<(double)> class"""
    __swig_setmethods__ = {}
    for _s in [Mat33]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rotation, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat33]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rotation, name)
    __repr__ = _swig_repr

    def setRotationToIdentityMatrix(self):
        """
        setRotationToIdentityMatrix(Rotation self) -> Rotation

        Parameters:
            self: SimTK::Rotation_< double > *

        """
        return _opensim.Rotation_setRotationToIdentityMatrix(self)


    def setRotationToNaN(self):
        """
        setRotationToNaN(Rotation self) -> Rotation

        Parameters:
            self: SimTK::Rotation_< double > *

        """
        return _opensim.Rotation_setRotationToNaN(self)


    def setRotationFromAngleAboutAxis(self, angle, axis):
        """
        setRotationFromAngleAboutAxis(Rotation self, double angle, CoordinateAxis axis) -> Rotation

        Parameters:
            angle: double
            axis: SimTK::CoordinateAxis const &

        """
        return _opensim.Rotation_setRotationFromAngleAboutAxis(self, angle, axis)


    def setRotationFromAngleAboutX(self, *args):
        """
        setRotationFromAngleAboutX(Rotation self, double angle) -> Rotation

        Parameters:
            angle: double

        setRotationFromAngleAboutX(Rotation self, double cosAngle, double sinAngle) -> Rotation

        Parameters:
            cosAngle: double
            sinAngle: double

        """
        return _opensim.Rotation_setRotationFromAngleAboutX(self, *args)


    def setRotationFromAngleAboutY(self, *args):
        """
        setRotationFromAngleAboutY(Rotation self, double angle) -> Rotation

        Parameters:
            angle: double

        setRotationFromAngleAboutY(Rotation self, double cosAngle, double sinAngle) -> Rotation

        Parameters:
            cosAngle: double
            sinAngle: double

        """
        return _opensim.Rotation_setRotationFromAngleAboutY(self, *args)


    def setRotationFromAngleAboutZ(self, *args):
        """
        setRotationFromAngleAboutZ(Rotation self, double angle) -> Rotation

        Parameters:
            angle: double

        setRotationFromAngleAboutZ(Rotation self, double cosAngle, double sinAngle) -> Rotation

        Parameters:
            cosAngle: double
            sinAngle: double

        """
        return _opensim.Rotation_setRotationFromAngleAboutZ(self, *args)


    def setRotationFromAngleAboutNonUnitVector(self, angle, nonUnitVector):
        """
        setRotationFromAngleAboutNonUnitVector(Rotation self, double angle, Vec3 nonUnitVector) -> Rotation

        Parameters:
            angle: double
            nonUnitVector: SimTK::Vec3 const &

        """
        return _opensim.Rotation_setRotationFromAngleAboutNonUnitVector(self, angle, nonUnitVector)


    def setRotationFromTwoAnglesTwoAxes(self, bodyOrSpace, angle1, axis1, angle2, axis2):
        """
        setRotationFromTwoAnglesTwoAxes(Rotation self, SimTK::BodyOrSpaceType bodyOrSpace, double angle1, CoordinateAxis axis1, double angle2, CoordinateAxis axis2) -> Rotation

        Parameters:
            bodyOrSpace: enum SimTK::BodyOrSpaceType
            angle1: double
            axis1: SimTK::CoordinateAxis const &
            angle2: double
            axis2: SimTK::CoordinateAxis const &

        """
        return _opensim.Rotation_setRotationFromTwoAnglesTwoAxes(self, bodyOrSpace, angle1, axis1, angle2, axis2)


    def setRotationFromThreeAnglesThreeAxes(self, bodyOrSpace, angle1, axis1, angle2, axis2, angle3, axis3):
        """
        setRotationFromThreeAnglesThreeAxes(Rotation self, SimTK::BodyOrSpaceType bodyOrSpace, double angle1, CoordinateAxis axis1, double angle2, CoordinateAxis axis2, double angle3, CoordinateAxis axis3) -> Rotation

        Parameters:
            bodyOrSpace: enum SimTK::BodyOrSpaceType
            angle1: double
            axis1: SimTK::CoordinateAxis const &
            angle2: double
            axis2: SimTK::CoordinateAxis const &
            angle3: double
            axis3: SimTK::CoordinateAxis const &

        """
        return _opensim.Rotation_setRotationFromThreeAnglesThreeAxes(self, bodyOrSpace, angle1, axis1, angle2, axis2, angle3, axis3)


    def setRotationToBodyFixedXY(self, v):
        """
        setRotationToBodyFixedXY(Rotation self, Vec2 v)

        Parameters:
            v: SimTK::Vec2 const &

        """
        return _opensim.Rotation_setRotationToBodyFixedXY(self, v)


    def setRotationFromApproximateMat33(self, m):
        """
        setRotationFromApproximateMat33(Rotation self, Mat33 m) -> Rotation

        Parameters:
            m: SimTK::Mat33 const &

        """
        return _opensim.Rotation_setRotationFromApproximateMat33(self, m)


    def convertOneAxisRotationToOneAngle(self, axis1):
        """
        convertOneAxisRotationToOneAngle(Rotation self, CoordinateAxis axis1) -> double

        Parameters:
            axis1: SimTK::CoordinateAxis const &

        """
        return _opensim.Rotation_convertOneAxisRotationToOneAngle(self, axis1)


    def convertTwoAxesRotationToTwoAngles(self, bodyOrSpace, axis1, axis2):
        """
        convertTwoAxesRotationToTwoAngles(Rotation self, SimTK::BodyOrSpaceType bodyOrSpace, CoordinateAxis axis1, CoordinateAxis axis2) -> Vec2

        Parameters:
            bodyOrSpace: enum SimTK::BodyOrSpaceType
            axis1: SimTK::CoordinateAxis const &
            axis2: SimTK::CoordinateAxis const &

        """
        return _opensim.Rotation_convertTwoAxesRotationToTwoAngles(self, bodyOrSpace, axis1, axis2)


    def convertThreeAxesRotationToThreeAngles(self, bodyOrSpace, axis1, axis2, axis3):
        """
        convertThreeAxesRotationToThreeAngles(Rotation self, SimTK::BodyOrSpaceType bodyOrSpace, CoordinateAxis axis1, CoordinateAxis axis2, CoordinateAxis axis3) -> Vec3

        Parameters:
            bodyOrSpace: enum SimTK::BodyOrSpaceType
            axis1: SimTK::CoordinateAxis const &
            axis2: SimTK::CoordinateAxis const &
            axis3: SimTK::CoordinateAxis const &

        """
        return _opensim.Rotation_convertThreeAxesRotationToThreeAngles(self, bodyOrSpace, axis1, axis2, axis3)


    def convertRotationToAngleAxis(self):
        """
        convertRotationToAngleAxis(Rotation self) -> Vec4

        Parameters:
            self: SimTK::Rotation_< double > const *

        """
        return _opensim.Rotation_convertRotationToAngleAxis(self)


    def convertRotationToBodyFixedXY(self):
        """
        convertRotationToBodyFixedXY(Rotation self) -> Vec2

        Parameters:
            self: SimTK::Rotation_< double > const *

        """
        return _opensim.Rotation_convertRotationToBodyFixedXY(self)


    def convertRotationToBodyFixedXYZ(self):
        """
        convertRotationToBodyFixedXYZ(Rotation self) -> Vec3

        Parameters:
            self: SimTK::Rotation_< double > const *

        """
        return _opensim.Rotation_convertRotationToBodyFixedXYZ(self)


    def isSameRotationToWithinAngle(self, R, okPointingAngleErrorRads):
        """
        isSameRotationToWithinAngle(Rotation self, Rotation R, double okPointingAngleErrorRads) -> bool

        Parameters:
            R: SimTK::Rotation_< double > const &
            okPointingAngleErrorRads: double

        """
        return _opensim.Rotation_isSameRotationToWithinAngle(self, R, okPointingAngleErrorRads)


    def isSameRotationToWithinAngleOfMachinePrecision(self, R):
        """
        isSameRotationToWithinAngleOfMachinePrecision(Rotation self, Rotation R) -> bool

        Parameters:
            R: SimTK::Rotation_< double > const &

        """
        return _opensim.Rotation_isSameRotationToWithinAngleOfMachinePrecision(self, R)


    def getMaxAbsDifferenceInRotationElements(self, R):
        """
        getMaxAbsDifferenceInRotationElements(Rotation self, Rotation R) -> double

        Parameters:
            R: SimTK::Rotation_< double > const &

        """
        return _opensim.Rotation_getMaxAbsDifferenceInRotationElements(self, R)


    def areAllRotationElementsSameToEpsilon(self, R, epsilon):
        """
        areAllRotationElementsSameToEpsilon(Rotation self, Rotation R, double epsilon) -> bool

        Parameters:
            R: SimTK::Rotation_< double > const &
            epsilon: double

        """
        return _opensim.Rotation_areAllRotationElementsSameToEpsilon(self, R, epsilon)


    def areAllRotationElementsSameToMachinePrecision(self, R):
        """
        areAllRotationElementsSameToMachinePrecision(Rotation self, Rotation R) -> bool

        Parameters:
            R: SimTK::Rotation_< double > const &

        """
        return _opensim.Rotation_areAllRotationElementsSameToMachinePrecision(self, R)


    def __init__(self, *args):
        """
        __init__(SimTK::Rotation_<(double)> self) -> Rotation
        __init__(SimTK::Rotation_<(double)> self, Rotation R) -> Rotation

        Parameters:
            R: SimTK::Rotation_< double > const &

        __init__(SimTK::Rotation_<(double)> self, double angle, CoordinateAxis axis) -> Rotation

        Parameters:
            angle: double
            axis: SimTK::CoordinateAxis const &

        __init__(SimTK::Rotation_<(double)> self, double angle, Vec3 nonUnitVector) -> Rotation

        Parameters:
            angle: double
            nonUnitVector: SimTK::Vec3 const &

        __init__(SimTK::Rotation_<(double)> self, SimTK::BodyOrSpaceType bodyOrSpace, double angle1, CoordinateAxis axis1, double angle2, CoordinateAxis axis2) -> Rotation

        Parameters:
            bodyOrSpace: enum SimTK::BodyOrSpaceType
            angle1: double
            axis1: SimTK::CoordinateAxis const &
            angle2: double
            axis2: SimTK::CoordinateAxis const &

        __init__(SimTK::Rotation_<(double)> self, SimTK::BodyOrSpaceType bodyOrSpace, double angle1, CoordinateAxis axis1, double angle2, CoordinateAxis axis2, double angle3, CoordinateAxis axis3) -> Rotation

        Parameters:
            bodyOrSpace: enum SimTK::BodyOrSpaceType
            angle1: double
            axis1: SimTK::CoordinateAxis const &
            angle2: double
            axis2: SimTK::CoordinateAxis const &
            angle3: double
            axis3: SimTK::CoordinateAxis const &

        __init__(SimTK::Rotation_<(double)> self, Mat33 m, bool arg3) -> Rotation

        Parameters:
            m: SimTK::Mat33 const &
            arg3: bool

        __init__(SimTK::Rotation_<(double)> self, Mat33 m) -> Rotation

        Parameters:
            m: SimTK::Mat33 const &

        __init__(SimTK::Rotation_<(double)> self, InverseRotation arg2) -> Rotation

        Parameters:
            arg2: SimTK::InverseRotation_< double > const &

        """
        this = _opensim.new_Rotation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def invert(self):
        """
        invert(Rotation self) -> InverseRotation

        Parameters:
            self: SimTK::Rotation_< double > const *

        """
        return _opensim.Rotation_invert(self)


    def transpose(self):
        """
        transpose(Rotation self) -> InverseRotation

        Parameters:
            self: SimTK::Rotation_< double > const *

        """
        return _opensim.Rotation_transpose(self)


    def __invert__(self, *args):
        """
        __invert__(Rotation self) -> InverseRotation
        __invert__(Rotation self) -> InverseRotation

        Parameters:
            self: SimTK::Rotation_< double > *

        """
        return _opensim.Rotation___invert__(self, *args)


    def __imul__(self, *args):
        """
        __imul__(Rotation self, Rotation R) -> Rotation

        Parameters:
            R: SimTK::Rotation_< double > const &

        __imul__(Rotation self, InverseRotation arg2) -> Rotation

        Parameters:
            arg2: SimTK::InverseRotation_< double > const &

        """
        return _opensim.Rotation___imul__(self, *args)


    def __idiv__(self, *args):
        """
        __idiv__(Rotation self, Rotation R) -> Rotation

        Parameters:
            R: SimTK::Rotation_< double > const &

        __idiv__(Rotation self, InverseRotation arg2) -> Rotation

        Parameters:
            arg2: SimTK::InverseRotation_< double > const &

        """
        return _opensim.Rotation___idiv__(self, *args)


    def asMat33(self):
        """
        asMat33(Rotation self) -> Mat33

        Parameters:
            self: SimTK::Rotation_< double > const *

        """
        return _opensim.Rotation_asMat33(self)


    def toMat33(self):
        """
        toMat33(Rotation self) -> Mat33

        Parameters:
            self: SimTK::Rotation_< double > const *

        """
        return _opensim.Rotation_toMat33(self)


    def setRotationToBodyFixedXYZ(self, *args):
        """
        setRotationToBodyFixedXYZ(Rotation self, Vec3 v)

        Parameters:
            v: SimTK::Vec3 const &

        setRotationToBodyFixedXYZ(Rotation self, Vec3 c, Vec3 s)

        Parameters:
            c: SimTK::Vec3 const &
            s: SimTK::Vec3 const &

        """
        return _opensim.Rotation_setRotationToBodyFixedXYZ(self, *args)


    def convertAngVelToBodyFixed321Dot(q, w_PB_B):
        """
        convertAngVelToBodyFixed321Dot(Vec3 q, Vec3 w_PB_B) -> Vec3

        Parameters:
            q: SimTK::Vec3 const &
            w_PB_B: SimTK::Vec3 const &

        """
        return _opensim.Rotation_convertAngVelToBodyFixed321Dot(q, w_PB_B)

    if _newclass:
        convertAngVelToBodyFixed321Dot = staticmethod(convertAngVelToBodyFixed321Dot)
    __swig_getmethods__["convertAngVelToBodyFixed321Dot"] = lambda x: convertAngVelToBodyFixed321Dot

    def convertBodyFixed321DotToAngVel(q, qd):
        """
        convertBodyFixed321DotToAngVel(Vec3 q, Vec3 qd) -> Vec3

        Parameters:
            q: SimTK::Vec3 const &
            qd: SimTK::Vec3 const &

        """
        return _opensim.Rotation_convertBodyFixed321DotToAngVel(q, qd)

    if _newclass:
        convertBodyFixed321DotToAngVel = staticmethod(convertBodyFixed321DotToAngVel)
    __swig_getmethods__["convertBodyFixed321DotToAngVel"] = lambda x: convertBodyFixed321DotToAngVel

    def convertAngVelDotToBodyFixed321DotDot(q, w_PB_B, wdot_PB_B):
        """
        convertAngVelDotToBodyFixed321DotDot(Vec3 q, Vec3 w_PB_B, Vec3 wdot_PB_B) -> Vec3

        Parameters:
            q: SimTK::Vec3 const &
            w_PB_B: SimTK::Vec3 const &
            wdot_PB_B: SimTK::Vec3 const &

        """
        return _opensim.Rotation_convertAngVelDotToBodyFixed321DotDot(q, w_PB_B, wdot_PB_B)

    if _newclass:
        convertAngVelDotToBodyFixed321DotDot = staticmethod(convertAngVelDotToBodyFixed321DotDot)
    __swig_getmethods__["convertAngVelDotToBodyFixed321DotDot"] = lambda x: convertAngVelDotToBodyFixed321DotDot

    def calcNForBodyXYZInBodyFrame(*args):
        """
        calcNForBodyXYZInBodyFrame(Vec3 q) -> Mat33

        Parameters:
            q: SimTK::Vec3 const &

        calcNForBodyXYZInBodyFrame(Vec3 cq, Vec3 sq) -> Mat33

        Parameters:
            cq: SimTK::Vec3 const &
            sq: SimTK::Vec3 const &

        """
        return _opensim.Rotation_calcNForBodyXYZInBodyFrame(*args)

    if _newclass:
        calcNForBodyXYZInBodyFrame = staticmethod(calcNForBodyXYZInBodyFrame)
    __swig_getmethods__["calcNForBodyXYZInBodyFrame"] = lambda x: calcNForBodyXYZInBodyFrame

    def calcNForBodyXYZInParentFrame(*args):
        """
        calcNForBodyXYZInParentFrame(Vec3 q) -> Mat33

        Parameters:
            q: SimTK::Vec3 const &

        calcNForBodyXYZInParentFrame(Vec3 cq, Vec3 sq) -> Mat33

        Parameters:
            cq: SimTK::Vec3 const &
            sq: SimTK::Vec3 const &

        """
        return _opensim.Rotation_calcNForBodyXYZInParentFrame(*args)

    if _newclass:
        calcNForBodyXYZInParentFrame = staticmethod(calcNForBodyXYZInParentFrame)
    __swig_getmethods__["calcNForBodyXYZInParentFrame"] = lambda x: calcNForBodyXYZInParentFrame

    def multiplyByBodyXYZ_N_P(cosxy, sinxy, oocosy, w_PB):
        """
        multiplyByBodyXYZ_N_P(Vec2 cosxy, Vec2 sinxy, double oocosy, Vec3 w_PB) -> Vec3

        Parameters:
            cosxy: SimTK::Vec2 const &
            sinxy: SimTK::Vec2 const &
            oocosy: double
            w_PB: SimTK::Vec3 const &

        """
        return _opensim.Rotation_multiplyByBodyXYZ_N_P(cosxy, sinxy, oocosy, w_PB)

    if _newclass:
        multiplyByBodyXYZ_N_P = staticmethod(multiplyByBodyXYZ_N_P)
    __swig_getmethods__["multiplyByBodyXYZ_N_P"] = lambda x: multiplyByBodyXYZ_N_P

    def multiplyByBodyXYZ_NT_P(cosxy, sinxy, oocosy, q):
        """
        multiplyByBodyXYZ_NT_P(Vec2 cosxy, Vec2 sinxy, double oocosy, Vec3 q) -> Vec3

        Parameters:
            cosxy: SimTK::Vec2 const &
            sinxy: SimTK::Vec2 const &
            oocosy: double
            q: SimTK::Vec3 const &

        """
        return _opensim.Rotation_multiplyByBodyXYZ_NT_P(cosxy, sinxy, oocosy, q)

    if _newclass:
        multiplyByBodyXYZ_NT_P = staticmethod(multiplyByBodyXYZ_NT_P)
    __swig_getmethods__["multiplyByBodyXYZ_NT_P"] = lambda x: multiplyByBodyXYZ_NT_P

    def convertAngVelInParentToBodyXYZDot(cosxy, sinxy, oocosy, w_PB):
        """
        convertAngVelInParentToBodyXYZDot(Vec2 cosxy, Vec2 sinxy, double oocosy, Vec3 w_PB) -> Vec3

        Parameters:
            cosxy: SimTK::Vec2 const &
            sinxy: SimTK::Vec2 const &
            oocosy: double
            w_PB: SimTK::Vec3 const &

        """
        return _opensim.Rotation_convertAngVelInParentToBodyXYZDot(cosxy, sinxy, oocosy, w_PB)

    if _newclass:
        convertAngVelInParentToBodyXYZDot = staticmethod(convertAngVelInParentToBodyXYZDot)
    __swig_getmethods__["convertAngVelInParentToBodyXYZDot"] = lambda x: convertAngVelInParentToBodyXYZDot

    def convertAngAccInParentToBodyXYZDotDot(cosxy, sinxy, oocosy, qdot, b_PB):
        """
        convertAngAccInParentToBodyXYZDotDot(Vec2 cosxy, Vec2 sinxy, double oocosy, Vec3 qdot, Vec3 b_PB) -> Vec3

        Parameters:
            cosxy: SimTK::Vec2 const &
            sinxy: SimTK::Vec2 const &
            oocosy: double
            qdot: SimTK::Vec3 const &
            b_PB: SimTK::Vec3 const &

        """
        return _opensim.Rotation_convertAngAccInParentToBodyXYZDotDot(cosxy, sinxy, oocosy, qdot, b_PB)

    if _newclass:
        convertAngAccInParentToBodyXYZDotDot = staticmethod(convertAngAccInParentToBodyXYZDotDot)
    __swig_getmethods__["convertAngAccInParentToBodyXYZDotDot"] = lambda x: convertAngAccInParentToBodyXYZDotDot

    def multiplyByBodyXYZ_NInv_P(cosxy, sinxy, qdot):
        """
        multiplyByBodyXYZ_NInv_P(Vec2 cosxy, Vec2 sinxy, Vec3 qdot) -> Vec3

        Parameters:
            cosxy: SimTK::Vec2 const &
            sinxy: SimTK::Vec2 const &
            qdot: SimTK::Vec3 const &

        """
        return _opensim.Rotation_multiplyByBodyXYZ_NInv_P(cosxy, sinxy, qdot)

    if _newclass:
        multiplyByBodyXYZ_NInv_P = staticmethod(multiplyByBodyXYZ_NInv_P)
    __swig_getmethods__["multiplyByBodyXYZ_NInv_P"] = lambda x: multiplyByBodyXYZ_NInv_P

    def multiplyByBodyXYZ_NInvT_P(cosxy, sinxy, v_P):
        """
        multiplyByBodyXYZ_NInvT_P(Vec2 cosxy, Vec2 sinxy, Vec3 v_P) -> Vec3

        Parameters:
            cosxy: SimTK::Vec2 const &
            sinxy: SimTK::Vec2 const &
            v_P: SimTK::Vec3 const &

        """
        return _opensim.Rotation_multiplyByBodyXYZ_NInvT_P(cosxy, sinxy, v_P)

    if _newclass:
        multiplyByBodyXYZ_NInvT_P = staticmethod(multiplyByBodyXYZ_NInvT_P)
    __swig_getmethods__["multiplyByBodyXYZ_NInvT_P"] = lambda x: multiplyByBodyXYZ_NInvT_P

    def calcNDotForBodyXYZInBodyFrame(*args):
        """
        calcNDotForBodyXYZInBodyFrame(Vec3 q, Vec3 qdot) -> Mat33

        Parameters:
            q: SimTK::Vec3 const &
            qdot: SimTK::Vec3 const &

        calcNDotForBodyXYZInBodyFrame(Vec3 cq, Vec3 sq, Vec3 qdot) -> Mat33

        Parameters:
            cq: SimTK::Vec3 const &
            sq: SimTK::Vec3 const &
            qdot: SimTK::Vec3 const &

        """
        return _opensim.Rotation_calcNDotForBodyXYZInBodyFrame(*args)

    if _newclass:
        calcNDotForBodyXYZInBodyFrame = staticmethod(calcNDotForBodyXYZInBodyFrame)
    __swig_getmethods__["calcNDotForBodyXYZInBodyFrame"] = lambda x: calcNDotForBodyXYZInBodyFrame

    def calcNDotForBodyXYZInParentFrame(*args):
        """
        calcNDotForBodyXYZInParentFrame(Vec3 q, Vec3 qdot) -> Mat33

        Parameters:
            q: SimTK::Vec3 const &
            qdot: SimTK::Vec3 const &

        calcNDotForBodyXYZInParentFrame(Vec2 cq, Vec2 sq, double ooc1, Vec3 qdot) -> Mat33

        Parameters:
            cq: SimTK::Vec2 const &
            sq: SimTK::Vec2 const &
            ooc1: double
            qdot: SimTK::Vec3 const &

        """
        return _opensim.Rotation_calcNDotForBodyXYZInParentFrame(*args)

    if _newclass:
        calcNDotForBodyXYZInParentFrame = staticmethod(calcNDotForBodyXYZInParentFrame)
    __swig_getmethods__["calcNDotForBodyXYZInParentFrame"] = lambda x: calcNDotForBodyXYZInParentFrame

    def calcNInvForBodyXYZInBodyFrame(*args):
        """
        calcNInvForBodyXYZInBodyFrame(Vec3 q) -> Mat33

        Parameters:
            q: SimTK::Vec3 const &

        calcNInvForBodyXYZInBodyFrame(Vec3 cq, Vec3 sq) -> Mat33

        Parameters:
            cq: SimTK::Vec3 const &
            sq: SimTK::Vec3 const &

        """
        return _opensim.Rotation_calcNInvForBodyXYZInBodyFrame(*args)

    if _newclass:
        calcNInvForBodyXYZInBodyFrame = staticmethod(calcNInvForBodyXYZInBodyFrame)
    __swig_getmethods__["calcNInvForBodyXYZInBodyFrame"] = lambda x: calcNInvForBodyXYZInBodyFrame

    def calcNInvForBodyXYZInParentFrame(*args):
        """
        calcNInvForBodyXYZInParentFrame(Vec3 q) -> Mat33

        Parameters:
            q: SimTK::Vec3 const &

        calcNInvForBodyXYZInParentFrame(Vec3 cq, Vec3 sq) -> Mat33

        Parameters:
            cq: SimTK::Vec3 const &
            sq: SimTK::Vec3 const &

        """
        return _opensim.Rotation_calcNInvForBodyXYZInParentFrame(*args)

    if _newclass:
        calcNInvForBodyXYZInParentFrame = staticmethod(calcNInvForBodyXYZInParentFrame)
    __swig_getmethods__["calcNInvForBodyXYZInParentFrame"] = lambda x: calcNInvForBodyXYZInParentFrame

    def convertAngVelInBodyFrameToBodyXYZDot(*args):
        """
        convertAngVelInBodyFrameToBodyXYZDot(Vec3 q, Vec3 w_PB_B) -> Vec3

        Parameters:
            q: SimTK::Vec3 const &
            w_PB_B: SimTK::Vec3 const &

        convertAngVelInBodyFrameToBodyXYZDot(Vec3 cq, Vec3 sq, Vec3 w_PB_B) -> Vec3

        Parameters:
            cq: SimTK::Vec3 const &
            sq: SimTK::Vec3 const &
            w_PB_B: SimTK::Vec3 const &

        """
        return _opensim.Rotation_convertAngVelInBodyFrameToBodyXYZDot(*args)

    if _newclass:
        convertAngVelInBodyFrameToBodyXYZDot = staticmethod(convertAngVelInBodyFrameToBodyXYZDot)
    __swig_getmethods__["convertAngVelInBodyFrameToBodyXYZDot"] = lambda x: convertAngVelInBodyFrameToBodyXYZDot

    def convertBodyXYZDotToAngVelInBodyFrame(*args):
        """
        convertBodyXYZDotToAngVelInBodyFrame(Vec3 q, Vec3 qdot) -> Vec3

        Parameters:
            q: SimTK::Vec3 const &
            qdot: SimTK::Vec3 const &

        convertBodyXYZDotToAngVelInBodyFrame(Vec3 cq, Vec3 sq, Vec3 qdot) -> Vec3

        Parameters:
            cq: SimTK::Vec3 const &
            sq: SimTK::Vec3 const &
            qdot: SimTK::Vec3 const &

        """
        return _opensim.Rotation_convertBodyXYZDotToAngVelInBodyFrame(*args)

    if _newclass:
        convertBodyXYZDotToAngVelInBodyFrame = staticmethod(convertBodyXYZDotToAngVelInBodyFrame)
    __swig_getmethods__["convertBodyXYZDotToAngVelInBodyFrame"] = lambda x: convertBodyXYZDotToAngVelInBodyFrame

    def convertAngVelDotInBodyFrameToBodyXYZDotDot(*args):
        """
        convertAngVelDotInBodyFrameToBodyXYZDotDot(Vec3 q, Vec3 w_PB_B, Vec3 wdot_PB_B) -> Vec3

        Parameters:
            q: SimTK::Vec3 const &
            w_PB_B: SimTK::Vec3 const &
            wdot_PB_B: SimTK::Vec3 const &

        convertAngVelDotInBodyFrameToBodyXYZDotDot(Vec3 cq, Vec3 sq, Vec3 w_PB_B, Vec3 wdot_PB_B) -> Vec3

        Parameters:
            cq: SimTK::Vec3 const &
            sq: SimTK::Vec3 const &
            w_PB_B: SimTK::Vec3 const &
            wdot_PB_B: SimTK::Vec3 const &

        """
        return _opensim.Rotation_convertAngVelDotInBodyFrameToBodyXYZDotDot(*args)

    if _newclass:
        convertAngVelDotInBodyFrameToBodyXYZDotDot = staticmethod(convertAngVelDotInBodyFrameToBodyXYZDotDot)
    __swig_getmethods__["convertAngVelDotInBodyFrameToBodyXYZDotDot"] = lambda x: convertAngVelDotInBodyFrameToBodyXYZDotDot

    def convertAngVelToQuaternionDot(q, w_PB_P):
        """
        convertAngVelToQuaternionDot(Vec4 q, Vec3 w_PB_P) -> Vec4

        Parameters:
            q: SimTK::Vec4 const &
            w_PB_P: SimTK::Vec3 const &

        """
        return _opensim.Rotation_convertAngVelToQuaternionDot(q, w_PB_P)

    if _newclass:
        convertAngVelToQuaternionDot = staticmethod(convertAngVelToQuaternionDot)
    __swig_getmethods__["convertAngVelToQuaternionDot"] = lambda x: convertAngVelToQuaternionDot

    def convertQuaternionDotToAngVel(q, qdot):
        """
        convertQuaternionDotToAngVel(Vec4 q, Vec4 qdot) -> Vec3

        Parameters:
            q: SimTK::Vec4 const &
            qdot: SimTK::Vec4 const &

        """
        return _opensim.Rotation_convertQuaternionDotToAngVel(q, qdot)

    if _newclass:
        convertQuaternionDotToAngVel = staticmethod(convertQuaternionDotToAngVel)
    __swig_getmethods__["convertQuaternionDotToAngVel"] = lambda x: convertQuaternionDotToAngVel

    def convertAngVelDotToQuaternionDotDot(q, w_PB, b_PB):
        """
        convertAngVelDotToQuaternionDotDot(Vec4 q, Vec3 w_PB, Vec3 b_PB) -> Vec4

        Parameters:
            q: SimTK::Vec4 const &
            w_PB: SimTK::Vec3 const &
            b_PB: SimTK::Vec3 const &

        """
        return _opensim.Rotation_convertAngVelDotToQuaternionDotDot(q, w_PB, b_PB)

    if _newclass:
        convertAngVelDotToQuaternionDotDot = staticmethod(convertAngVelDotToQuaternionDotDot)
    __swig_getmethods__["convertAngVelDotToQuaternionDotDot"] = lambda x: convertAngVelDotToQuaternionDotDot
    __swig_destroy__ = _opensim.delete_Rotation
    __del__ = lambda self: None
Rotation_swigregister = _opensim.Rotation_swigregister
Rotation_swigregister(Rotation)

def Rotation_convertAngVelToBodyFixed321Dot(q, w_PB_B):
    """
    Rotation_convertAngVelToBodyFixed321Dot(Vec3 q, Vec3 w_PB_B) -> Vec3

    Parameters:
        q: SimTK::Vec3 const &
        w_PB_B: SimTK::Vec3 const &

    """
    return _opensim.Rotation_convertAngVelToBodyFixed321Dot(q, w_PB_B)

def Rotation_convertBodyFixed321DotToAngVel(q, qd):
    """
    Rotation_convertBodyFixed321DotToAngVel(Vec3 q, Vec3 qd) -> Vec3

    Parameters:
        q: SimTK::Vec3 const &
        qd: SimTK::Vec3 const &

    """
    return _opensim.Rotation_convertBodyFixed321DotToAngVel(q, qd)

def Rotation_convertAngVelDotToBodyFixed321DotDot(q, w_PB_B, wdot_PB_B):
    """
    Rotation_convertAngVelDotToBodyFixed321DotDot(Vec3 q, Vec3 w_PB_B, Vec3 wdot_PB_B) -> Vec3

    Parameters:
        q: SimTK::Vec3 const &
        w_PB_B: SimTK::Vec3 const &
        wdot_PB_B: SimTK::Vec3 const &

    """
    return _opensim.Rotation_convertAngVelDotToBodyFixed321DotDot(q, w_PB_B, wdot_PB_B)

def Rotation_calcNForBodyXYZInBodyFrame(*args):
    """
    calcNForBodyXYZInBodyFrame(Vec3 q) -> Mat33

    Parameters:
        q: SimTK::Vec3 const &

    Rotation_calcNForBodyXYZInBodyFrame(Vec3 cq, Vec3 sq) -> Mat33

    Parameters:
        cq: SimTK::Vec3 const &
        sq: SimTK::Vec3 const &

    """
    return _opensim.Rotation_calcNForBodyXYZInBodyFrame(*args)

def Rotation_calcNForBodyXYZInParentFrame(*args):
    """
    calcNForBodyXYZInParentFrame(Vec3 q) -> Mat33

    Parameters:
        q: SimTK::Vec3 const &

    Rotation_calcNForBodyXYZInParentFrame(Vec3 cq, Vec3 sq) -> Mat33

    Parameters:
        cq: SimTK::Vec3 const &
        sq: SimTK::Vec3 const &

    """
    return _opensim.Rotation_calcNForBodyXYZInParentFrame(*args)

def Rotation_multiplyByBodyXYZ_N_P(cosxy, sinxy, oocosy, w_PB):
    """
    Rotation_multiplyByBodyXYZ_N_P(Vec2 cosxy, Vec2 sinxy, double oocosy, Vec3 w_PB) -> Vec3

    Parameters:
        cosxy: SimTK::Vec2 const &
        sinxy: SimTK::Vec2 const &
        oocosy: double
        w_PB: SimTK::Vec3 const &

    """
    return _opensim.Rotation_multiplyByBodyXYZ_N_P(cosxy, sinxy, oocosy, w_PB)

def Rotation_multiplyByBodyXYZ_NT_P(cosxy, sinxy, oocosy, q):
    """
    Rotation_multiplyByBodyXYZ_NT_P(Vec2 cosxy, Vec2 sinxy, double oocosy, Vec3 q) -> Vec3

    Parameters:
        cosxy: SimTK::Vec2 const &
        sinxy: SimTK::Vec2 const &
        oocosy: double
        q: SimTK::Vec3 const &

    """
    return _opensim.Rotation_multiplyByBodyXYZ_NT_P(cosxy, sinxy, oocosy, q)

def Rotation_convertAngVelInParentToBodyXYZDot(cosxy, sinxy, oocosy, w_PB):
    """
    Rotation_convertAngVelInParentToBodyXYZDot(Vec2 cosxy, Vec2 sinxy, double oocosy, Vec3 w_PB) -> Vec3

    Parameters:
        cosxy: SimTK::Vec2 const &
        sinxy: SimTK::Vec2 const &
        oocosy: double
        w_PB: SimTK::Vec3 const &

    """
    return _opensim.Rotation_convertAngVelInParentToBodyXYZDot(cosxy, sinxy, oocosy, w_PB)

def Rotation_convertAngAccInParentToBodyXYZDotDot(cosxy, sinxy, oocosy, qdot, b_PB):
    """
    Rotation_convertAngAccInParentToBodyXYZDotDot(Vec2 cosxy, Vec2 sinxy, double oocosy, Vec3 qdot, Vec3 b_PB) -> Vec3

    Parameters:
        cosxy: SimTK::Vec2 const &
        sinxy: SimTK::Vec2 const &
        oocosy: double
        qdot: SimTK::Vec3 const &
        b_PB: SimTK::Vec3 const &

    """
    return _opensim.Rotation_convertAngAccInParentToBodyXYZDotDot(cosxy, sinxy, oocosy, qdot, b_PB)

def Rotation_multiplyByBodyXYZ_NInv_P(cosxy, sinxy, qdot):
    """
    Rotation_multiplyByBodyXYZ_NInv_P(Vec2 cosxy, Vec2 sinxy, Vec3 qdot) -> Vec3

    Parameters:
        cosxy: SimTK::Vec2 const &
        sinxy: SimTK::Vec2 const &
        qdot: SimTK::Vec3 const &

    """
    return _opensim.Rotation_multiplyByBodyXYZ_NInv_P(cosxy, sinxy, qdot)

def Rotation_multiplyByBodyXYZ_NInvT_P(cosxy, sinxy, v_P):
    """
    Rotation_multiplyByBodyXYZ_NInvT_P(Vec2 cosxy, Vec2 sinxy, Vec3 v_P) -> Vec3

    Parameters:
        cosxy: SimTK::Vec2 const &
        sinxy: SimTK::Vec2 const &
        v_P: SimTK::Vec3 const &

    """
    return _opensim.Rotation_multiplyByBodyXYZ_NInvT_P(cosxy, sinxy, v_P)

def Rotation_calcNDotForBodyXYZInBodyFrame(*args):
    """
    calcNDotForBodyXYZInBodyFrame(Vec3 q, Vec3 qdot) -> Mat33

    Parameters:
        q: SimTK::Vec3 const &
        qdot: SimTK::Vec3 const &

    Rotation_calcNDotForBodyXYZInBodyFrame(Vec3 cq, Vec3 sq, Vec3 qdot) -> Mat33

    Parameters:
        cq: SimTK::Vec3 const &
        sq: SimTK::Vec3 const &
        qdot: SimTK::Vec3 const &

    """
    return _opensim.Rotation_calcNDotForBodyXYZInBodyFrame(*args)

def Rotation_calcNDotForBodyXYZInParentFrame(*args):
    """
    calcNDotForBodyXYZInParentFrame(Vec3 q, Vec3 qdot) -> Mat33

    Parameters:
        q: SimTK::Vec3 const &
        qdot: SimTK::Vec3 const &

    Rotation_calcNDotForBodyXYZInParentFrame(Vec2 cq, Vec2 sq, double ooc1, Vec3 qdot) -> Mat33

    Parameters:
        cq: SimTK::Vec2 const &
        sq: SimTK::Vec2 const &
        ooc1: double
        qdot: SimTK::Vec3 const &

    """
    return _opensim.Rotation_calcNDotForBodyXYZInParentFrame(*args)

def Rotation_calcNInvForBodyXYZInBodyFrame(*args):
    """
    calcNInvForBodyXYZInBodyFrame(Vec3 q) -> Mat33

    Parameters:
        q: SimTK::Vec3 const &

    Rotation_calcNInvForBodyXYZInBodyFrame(Vec3 cq, Vec3 sq) -> Mat33

    Parameters:
        cq: SimTK::Vec3 const &
        sq: SimTK::Vec3 const &

    """
    return _opensim.Rotation_calcNInvForBodyXYZInBodyFrame(*args)

def Rotation_calcNInvForBodyXYZInParentFrame(*args):
    """
    calcNInvForBodyXYZInParentFrame(Vec3 q) -> Mat33

    Parameters:
        q: SimTK::Vec3 const &

    Rotation_calcNInvForBodyXYZInParentFrame(Vec3 cq, Vec3 sq) -> Mat33

    Parameters:
        cq: SimTK::Vec3 const &
        sq: SimTK::Vec3 const &

    """
    return _opensim.Rotation_calcNInvForBodyXYZInParentFrame(*args)

def Rotation_convertAngVelInBodyFrameToBodyXYZDot(*args):
    """
    convertAngVelInBodyFrameToBodyXYZDot(Vec3 q, Vec3 w_PB_B) -> Vec3

    Parameters:
        q: SimTK::Vec3 const &
        w_PB_B: SimTK::Vec3 const &

    Rotation_convertAngVelInBodyFrameToBodyXYZDot(Vec3 cq, Vec3 sq, Vec3 w_PB_B) -> Vec3

    Parameters:
        cq: SimTK::Vec3 const &
        sq: SimTK::Vec3 const &
        w_PB_B: SimTK::Vec3 const &

    """
    return _opensim.Rotation_convertAngVelInBodyFrameToBodyXYZDot(*args)

def Rotation_convertBodyXYZDotToAngVelInBodyFrame(*args):
    """
    convertBodyXYZDotToAngVelInBodyFrame(Vec3 q, Vec3 qdot) -> Vec3

    Parameters:
        q: SimTK::Vec3 const &
        qdot: SimTK::Vec3 const &

    Rotation_convertBodyXYZDotToAngVelInBodyFrame(Vec3 cq, Vec3 sq, Vec3 qdot) -> Vec3

    Parameters:
        cq: SimTK::Vec3 const &
        sq: SimTK::Vec3 const &
        qdot: SimTK::Vec3 const &

    """
    return _opensim.Rotation_convertBodyXYZDotToAngVelInBodyFrame(*args)

def Rotation_convertAngVelDotInBodyFrameToBodyXYZDotDot(*args):
    """
    convertAngVelDotInBodyFrameToBodyXYZDotDot(Vec3 q, Vec3 w_PB_B, Vec3 wdot_PB_B) -> Vec3

    Parameters:
        q: SimTK::Vec3 const &
        w_PB_B: SimTK::Vec3 const &
        wdot_PB_B: SimTK::Vec3 const &

    Rotation_convertAngVelDotInBodyFrameToBodyXYZDotDot(Vec3 cq, Vec3 sq, Vec3 w_PB_B, Vec3 wdot_PB_B) -> Vec3

    Parameters:
        cq: SimTK::Vec3 const &
        sq: SimTK::Vec3 const &
        w_PB_B: SimTK::Vec3 const &
        wdot_PB_B: SimTK::Vec3 const &

    """
    return _opensim.Rotation_convertAngVelDotInBodyFrameToBodyXYZDotDot(*args)

def Rotation_convertAngVelToQuaternionDot(q, w_PB_P):
    """
    Rotation_convertAngVelToQuaternionDot(Vec4 q, Vec3 w_PB_P) -> Vec4

    Parameters:
        q: SimTK::Vec4 const &
        w_PB_P: SimTK::Vec3 const &

    """
    return _opensim.Rotation_convertAngVelToQuaternionDot(q, w_PB_P)

def Rotation_convertQuaternionDotToAngVel(q, qdot):
    """
    Rotation_convertQuaternionDotToAngVel(Vec4 q, Vec4 qdot) -> Vec3

    Parameters:
        q: SimTK::Vec4 const &
        qdot: SimTK::Vec4 const &

    """
    return _opensim.Rotation_convertQuaternionDotToAngVel(q, qdot)

def Rotation_convertAngVelDotToQuaternionDotDot(q, w_PB, b_PB):
    """
    Rotation_convertAngVelDotToQuaternionDotDot(Vec4 q, Vec3 w_PB, Vec3 b_PB) -> Vec4

    Parameters:
        q: SimTK::Vec4 const &
        w_PB: SimTK::Vec3 const &
        b_PB: SimTK::Vec3 const &

    """
    return _opensim.Rotation_convertAngVelDotToQuaternionDotDot(q, w_PB, b_PB)

class InverseRotation(_object):
    """Proxy of C++ SimTK::InverseRotation_<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseRotation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InverseRotation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SimTK::InverseRotation_<(double)> self) -> InverseRotation
        __init__(SimTK::InverseRotation_<(double)> self, InverseRotation R) -> InverseRotation

        Parameters:
            R: SimTK::InverseRotation_< double > const &

        """
        this = _opensim.new_InverseRotation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def invert(self):
        """
        invert(InverseRotation self) -> Rotation

        Parameters:
            self: SimTK::InverseRotation_< double > const *

        """
        return _opensim.InverseRotation_invert(self)


    def transpose(self):
        """
        transpose(InverseRotation self) -> Rotation

        Parameters:
            self: SimTK::InverseRotation_< double > const *

        """
        return _opensim.InverseRotation_transpose(self)


    def __invert__(self, *args):
        """
        __invert__(InverseRotation self) -> Rotation
        __invert__(InverseRotation self) -> Rotation

        Parameters:
            self: SimTK::InverseRotation_< double > *

        """
        return _opensim.InverseRotation___invert__(self, *args)

    __swig_destroy__ = _opensim.delete_InverseRotation
    __del__ = lambda self: None
InverseRotation_swigregister = _opensim.InverseRotation_swigregister
InverseRotation_swigregister(InverseRotation)

class Transform(_object):
    """Proxy of C++ SimTK::Transform_<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Transform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Transform, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SimTK::Transform_<(double)> self) -> Transform
        __init__(SimTK::Transform_<(double)> self, Rotation R, Vec3 p) -> Transform

        Parameters:
            R: SimTK::Rotation_< double > const &
            p: SimTK::Vec< 3,double > const &

        __init__(SimTK::Transform_<(double)> self, Rotation R) -> Transform

        Parameters:
            R: SimTK::Rotation_< double > const &

        __init__(SimTK::Transform_<(double)> self, Vec3 p) -> Transform

        Parameters:
            p: SimTK::Vec< 3,double > const &

        """
        this = _opensim.new_Transform(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set(self, R, p):
        """
        set(Transform self, Rotation R, Vec3 p) -> Transform

        Parameters:
            R: SimTK::Rotation_< double > const &
            p: SimTK::Vec< 3,double > const &

        """
        return _opensim.Transform_set(self, R, p)


    def setToZero(self):
        """
        setToZero(Transform self) -> Transform

        Parameters:
            self: SimTK::Transform_< double > *

        """
        return _opensim.Transform_setToZero(self)


    def setToNaN(self):
        """
        setToNaN(Transform self) -> Transform

        Parameters:
            self: SimTK::Transform_< double > *

        """
        return _opensim.Transform_setToNaN(self)


    def invert(self):
        """
        invert(Transform self) -> SimTK::InverseTransform_< double > const &

        Parameters:
            self: SimTK::Transform_< double > const *

        """
        return _opensim.Transform_invert(self)


    def updInvert(self):
        """
        updInvert(Transform self) -> SimTK::InverseTransform_< double > &

        Parameters:
            self: SimTK::Transform_< double > *

        """
        return _opensim.Transform_updInvert(self)


    def __invert__(self, *args):
        """
        __invert__(Transform self) -> SimTK::InverseTransform_< double > const
        __invert__(Transform self) -> SimTK::InverseTransform_< double > &

        Parameters:
            self: SimTK::Transform_< double > *

        """
        return _opensim.Transform___invert__(self, *args)


    def compose(self, *args):
        """
        compose(Transform self, Transform X_FY) -> Transform

        Parameters:
            X_FY: SimTK::Transform_< double > const &

        compose(Transform self, SimTK::InverseTransform_< double > const & X_FY) -> Transform

        Parameters:
            X_FY: SimTK::InverseTransform_< double > const &

        """
        return _opensim.Transform_compose(self, *args)


    def xformFrameVecToBase(self, vF):
        """
        xformFrameVecToBase(Transform self, Vec3 vF) -> Vec3

        Parameters:
            vF: SimTK::Vec< 3,double > const &

        """
        return _opensim.Transform_xformFrameVecToBase(self, vF)


    def xformBaseVecToFrame(self, vB):
        """
        xformBaseVecToFrame(Transform self, Vec3 vB) -> Vec3

        Parameters:
            vB: SimTK::Vec< 3,double > const &

        """
        return _opensim.Transform_xformBaseVecToFrame(self, vB)


    def shiftFrameStationToBase(self, sF):
        """
        shiftFrameStationToBase(Transform self, Vec3 sF) -> Vec3

        Parameters:
            sF: SimTK::Vec< 3,double > const &

        """
        return _opensim.Transform_shiftFrameStationToBase(self, sF)


    def shiftBaseStationToFrame(self, sB):
        """
        shiftBaseStationToFrame(Transform self, Vec3 sB) -> Vec3

        Parameters:
            sB: SimTK::Vec< 3,double > const &

        """
        return _opensim.Transform_shiftBaseStationToFrame(self, sB)


    def R(self):
        """
        R(Transform self) -> Rotation

        Parameters:
            self: SimTK::Transform_< double > const *

        """
        return _opensim.Transform_R(self)


    def RInv(self):
        """
        RInv(Transform self) -> InverseRotation

        Parameters:
            self: SimTK::Transform_< double > const *

        """
        return _opensim.Transform_RInv(self)


    def p(self):
        """
        p(Transform self) -> Vec3

        Parameters:
            self: SimTK::Transform_< double > const *

        """
        return _opensim.Transform_p(self)


    def setP(self, p):
        """
        setP(Transform self, Vec3 p) -> Transform

        Parameters:
            p: SimTK::Vec< 3,double > const &

        """
        return _opensim.Transform_setP(self, p)


    def pInv(self):
        """
        pInv(Transform self) -> Vec3

        Parameters:
            self: SimTK::Transform_< double > const *

        """
        return _opensim.Transform_pInv(self)


    def setPInv(self, p_FB):
        """
        setPInv(Transform self, Vec3 p_FB) -> Transform

        Parameters:
            p_FB: SimTK::Vec< 3,double > const &

        """
        return _opensim.Transform_setPInv(self, p_FB)


    def asMat34(self):
        """
        asMat34(Transform self) -> SimTK::Mat< 3,4,double > const &

        Parameters:
            self: SimTK::Transform_< double > const *

        """
        return _opensim.Transform_asMat34(self)


    def toMat34(self):
        """
        toMat34(Transform self) -> SimTK::Mat< 3,4,double >

        Parameters:
            self: SimTK::Transform_< double > const *

        """
        return _opensim.Transform_toMat34(self)


    def toMat44(self):
        """
        toMat44(Transform self) -> SimTK::Mat< 4,4,double >

        Parameters:
            self: SimTK::Transform_< double > const *

        """
        return _opensim.Transform_toMat44(self)


    def T(self):
        """
        T(Transform self) -> Vec3

        Parameters:
            self: SimTK::Transform_< double > const *

        """
        return _opensim.Transform_T(self)

    __swig_destroy__ = _opensim.delete_Transform
    __del__ = lambda self: None
Transform_swigregister = _opensim.Transform_swigregister
Transform_swigregister(Transform)

class Inertia(_object):
    """Proxy of C++ SimTK::Inertia_<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Inertia, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Inertia, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SimTK::Inertia_<(double)> self) -> Inertia
        __init__(SimTK::Inertia_<(double)> self, double const & moment) -> Inertia

        Parameters:
            moment: double const &

        __init__(SimTK::Inertia_<(double)> self, Vec3 p, double const & mass) -> Inertia

        Parameters:
            p: SimTK::Vec3 const &
            mass: double const &

        __init__(SimTK::Inertia_<(double)> self, Vec3 moments, Vec3 products) -> Inertia

        Parameters:
            moments: SimTK::Vec3 const &
            products: SimTK::Vec3 const &

        __init__(SimTK::Inertia_<(double)> self, Vec3 moments) -> Inertia

        Parameters:
            moments: SimTK::Vec3 const &

        __init__(SimTK::Inertia_<(double)> self, double const & xx, double const & yy, double const & zz) -> Inertia

        Parameters:
            xx: double const &
            yy: double const &
            zz: double const &

        __init__(SimTK::Inertia_<(double)> self, double const & xx, double const & yy, double const & zz, double const & xy, double const & xz, double const & yz) -> Inertia

        Parameters:
            xx: double const &
            yy: double const &
            zz: double const &
            xy: double const &
            xz: double const &
            yz: double const &

        """
        this = _opensim.new_Inertia(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getMoments(self):
        """
        getMoments(Inertia self) -> Vec3

        Parameters:
            self: SimTK::Inertia_< double > const *

        """
        return _opensim.Inertia_getMoments(self)


    def getProducts(self):
        """
        getProducts(Inertia self) -> Vec3

        Parameters:
            self: SimTK::Inertia_< double > const *

        """
        return _opensim.Inertia_getProducts(self)


    def isNaN(self):
        """
        isNaN(Inertia self) -> bool

        Parameters:
            self: SimTK::Inertia_< double > const *

        """
        return _opensim.Inertia_isNaN(self)


    def isInf(self):
        """
        isInf(Inertia self) -> bool

        Parameters:
            self: SimTK::Inertia_< double > const *

        """
        return _opensim.Inertia_isInf(self)


    def isFinite(self):
        """
        isFinite(Inertia self) -> bool

        Parameters:
            self: SimTK::Inertia_< double > const *

        """
        return _opensim.Inertia_isFinite(self)

    __swig_destroy__ = _opensim.delete_Inertia
    __del__ = lambda self: None
Inertia_swigregister = _opensim.Inertia_swigregister
Inertia_swigregister(Inertia)

class MassProperties(_object):
    """Proxy of C++ SimTK::MassProperties_<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MassProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MassProperties, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SimTK::MassProperties_<(double)> self) -> MassProperties"""
        this = _opensim.new_MassProperties()
        try:
            self.this.append(this)
        except:
            self.this = this

    def isExactlyMassless(self):
        """
        isExactlyMassless(MassProperties self) -> bool

        Parameters:
            self: SimTK::MassProperties_< double > const *

        """
        return _opensim.MassProperties_isExactlyMassless(self)


    def isNearlyMassless(self, *args):
        """
        isNearlyMassless(MassProperties self, double const & tol) -> bool

        Parameters:
            tol: double const &

        isNearlyMassless(MassProperties self) -> bool

        Parameters:
            self: SimTK::MassProperties_< double > const *

        """
        return _opensim.MassProperties_isNearlyMassless(self, *args)


    def isExactlyCentral(self):
        """
        isExactlyCentral(MassProperties self) -> bool

        Parameters:
            self: SimTK::MassProperties_< double > const *

        """
        return _opensim.MassProperties_isExactlyCentral(self)


    def isNearlyCentral(self, *args):
        """
        isNearlyCentral(MassProperties self, double const & tol) -> bool

        Parameters:
            tol: double const &

        isNearlyCentral(MassProperties self) -> bool

        Parameters:
            self: SimTK::MassProperties_< double > const *

        """
        return _opensim.MassProperties_isNearlyCentral(self, *args)


    def isNaN(self):
        """
        isNaN(MassProperties self) -> bool

        Parameters:
            self: SimTK::MassProperties_< double > const *

        """
        return _opensim.MassProperties_isNaN(self)


    def isInf(self):
        """
        isInf(MassProperties self) -> bool

        Parameters:
            self: SimTK::MassProperties_< double > const *

        """
        return _opensim.MassProperties_isInf(self)


    def isFinite(self):
        """
        isFinite(MassProperties self) -> bool

        Parameters:
            self: SimTK::MassProperties_< double > const *

        """
        return _opensim.MassProperties_isFinite(self)

    __swig_destroy__ = _opensim.delete_MassProperties
    __del__ = lambda self: None
MassProperties_swigregister = _opensim.MassProperties_swigregister
MassProperties_swigregister(MassProperties)


_opensim.SimTK_DEFAULT_PRECISION_swigconstant(_opensim)
SimTK_DEFAULT_PRECISION = _opensim.SimTK_DEFAULT_PRECISION

def SimTK_version_SimTKcommon(major, minor, build):
    """
    SimTK_version_SimTKcommon(int * major, int * minor, int * build)

    Parameters:
        major: int *
        minor: int *
        build: int *

    """
    return _opensim.SimTK_version_SimTKcommon(major, minor, build)

def SimTK_about_SimTKcommon(key, maxlen, value):
    """
    SimTK_about_SimTKcommon(char const * key, int maxlen, char * value)

    Parameters:
        key: char const *
        maxlen: int
        value: char *

    """
    return _opensim.SimTK_about_SimTKcommon(key, maxlen, value)

def canStoreInNonnegativeInt(*args):
    """
    canStoreInNonnegativeInt(bool arg1) -> bool

    Parameters:
        arg1: bool

    canStoreInNonnegativeInt(char c) -> bool

    Parameters:
        c: char

    canStoreInNonnegativeInt(unsigned char arg1) -> bool

    Parameters:
        arg1: unsigned char

    canStoreInNonnegativeInt(signed char c) -> bool

    Parameters:
        c: signed char

    canStoreInNonnegativeInt(short s) -> bool

    Parameters:
        s: short

    canStoreInNonnegativeInt(unsigned short arg1) -> bool

    Parameters:
        arg1: unsigned short

    canStoreInNonnegativeInt(int i) -> bool

    Parameters:
        i: int

    canStoreInNonnegativeInt(long l) -> bool

    Parameters:
        l: long

    canStoreInNonnegativeInt(long long l) -> bool

    Parameters:
        l: long long

    canStoreInNonnegativeInt(unsigned int u) -> bool

    Parameters:
        u: unsigned int

    canStoreInNonnegativeInt(unsigned long u) -> bool

    Parameters:
        u: unsigned long

    canStoreInNonnegativeInt(unsigned long long u) -> bool

    Parameters:
        u: unsigned long long

    """
    return _opensim.canStoreInNonnegativeInt(*args)

def isSizeInRange(*args):
    """
    isSizeInRange(char sz, char mx) -> bool

    Parameters:
        sz: char
        mx: char

    isSizeInRange(signed char sz, signed char mx) -> bool

    Parameters:
        sz: signed char
        mx: signed char

    isSizeInRange(short sz, short mx) -> bool

    Parameters:
        sz: short
        mx: short

    isSizeInRange(int sz, int mx) -> bool

    Parameters:
        sz: int
        mx: int

    isSizeInRange(long sz, long mx) -> bool

    Parameters:
        sz: long
        mx: long

    isSizeInRange(long long sz, long long mx) -> bool

    Parameters:
        sz: long long
        mx: long long

    isSizeInRange(unsigned char sz, unsigned char mx) -> bool

    Parameters:
        sz: unsigned char
        mx: unsigned char

    isSizeInRange(unsigned short sz, unsigned short mx) -> bool

    Parameters:
        sz: unsigned short
        mx: unsigned short

    isSizeInRange(unsigned int sz, unsigned int mx) -> bool

    Parameters:
        sz: unsigned int
        mx: unsigned int

    isSizeInRange(unsigned long sz, unsigned long mx) -> bool

    Parameters:
        sz: unsigned long
        mx: unsigned long

    isSizeInRange(unsigned long long sz, unsigned long long mx) -> bool

    Parameters:
        sz: unsigned long long
        mx: unsigned long long

    """
    return _opensim.isSizeInRange(*args)

def isIndexInRange(*args):
    """
    isIndexInRange(char ix, char sz) -> bool

    Parameters:
        ix: char
        sz: char

    isIndexInRange(signed char ix, signed char sz) -> bool

    Parameters:
        ix: signed char
        sz: signed char

    isIndexInRange(short ix, short sz) -> bool

    Parameters:
        ix: short
        sz: short

    isIndexInRange(int ix, int sz) -> bool

    Parameters:
        ix: int
        sz: int

    isIndexInRange(long ix, long sz) -> bool

    Parameters:
        ix: long
        sz: long

    isIndexInRange(long long ix, long long sz) -> bool

    Parameters:
        ix: long long
        sz: long long

    isIndexInRange(unsigned char ix, unsigned char sz) -> bool

    Parameters:
        ix: unsigned char
        sz: unsigned char

    isIndexInRange(unsigned short ix, unsigned short sz) -> bool

    Parameters:
        ix: unsigned short
        sz: unsigned short

    isIndexInRange(unsigned int ix, unsigned int sz) -> bool

    Parameters:
        ix: unsigned int
        sz: unsigned int

    isIndexInRange(unsigned long ix, unsigned long sz) -> bool

    Parameters:
        ix: unsigned long
        sz: unsigned long

    isIndexInRange(unsigned long long ix, unsigned long long sz) -> bool

    Parameters:
        ix: unsigned long long
        sz: unsigned long long

    """
    return _opensim.isIndexInRange(*args)

def isNonnegative(*args):
    """
    isNonnegative(bool arg1) -> bool

    Parameters:
        arg1: bool

    isNonnegative(char n) -> bool

    Parameters:
        n: char

    isNonnegative(signed char n) -> bool

    Parameters:
        n: signed char

    isNonnegative(short n) -> bool

    Parameters:
        n: short

    isNonnegative(int n) -> bool

    Parameters:
        n: int

    isNonnegative(long n) -> bool

    Parameters:
        n: long

    isNonnegative(long long n) -> bool

    Parameters:
        n: long long

    isNonnegative(unsigned char arg1) -> bool

    Parameters:
        arg1: unsigned char

    isNonnegative(unsigned short arg1) -> bool

    Parameters:
        arg1: unsigned short

    isNonnegative(unsigned int arg1) -> bool

    Parameters:
        arg1: unsigned int

    isNonnegative(unsigned long arg1) -> bool

    Parameters:
        arg1: unsigned long

    isNonnegative(unsigned long long arg1) -> bool

    Parameters:
        arg1: unsigned long long

    """
    return _opensim.isNonnegative(*args)
class Segment(_object):
    """Proxy of C++ SimTK::Segment class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Segment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Segment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SimTK::Segment self) -> Segment
        __init__(SimTK::Segment self, int l, int ofs=0) -> Segment

        Parameters:
            l: int
            ofs: int

        __init__(SimTK::Segment self, int l) -> Segment

        Parameters:
            l: int

        """
        this = _opensim.new_Segment(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["length"] = _opensim.Segment_length_set
    __swig_getmethods__["length"] = _opensim.Segment_length_get
    if _newclass:
        length = _swig_property(_opensim.Segment_length_get, _opensim.Segment_length_set)
    __swig_setmethods__["offset"] = _opensim.Segment_offset_set
    __swig_getmethods__["offset"] = _opensim.Segment_offset_get
    if _newclass:
        offset = _swig_property(_opensim.Segment_offset_get, _opensim.Segment_offset_set)
    __swig_destroy__ = _opensim.delete_Segment
    __del__ = lambda self: None
Segment_swigregister = _opensim.Segment_swigregister
Segment_swigregister(Segment)
InvalidIndex = cvar.InvalidIndex

class DontCopy(_object):
    """Proxy of C++ SimTK::DontCopy class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DontCopy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DontCopy, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SimTK::DontCopy self) -> DontCopy"""
        this = _opensim.new_DontCopy()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_DontCopy
    __del__ = lambda self: None
DontCopy_swigregister = _opensim.DontCopy_swigregister
DontCopy_swigregister(DontCopy)

class TrustMe(_object):
    """Proxy of C++ SimTK::TrustMe class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrustMe, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TrustMe, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SimTK::TrustMe self) -> TrustMe"""
        this = _opensim.new_TrustMe()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_TrustMe
    __del__ = lambda self: None
TrustMe_swigregister = _opensim.TrustMe_swigregister
TrustMe_swigregister(TrustMe)

class FalseType(_object):
    """Proxy of C++ SimTK::FalseType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FalseType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FalseType, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SimTK::FalseType self) -> FalseType"""
        this = _opensim.new_FalseType()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_FalseType
    __del__ = lambda self: None
FalseType_swigregister = _opensim.FalseType_swigregister
FalseType_swigregister(FalseType)

class TrueType(_object):
    """Proxy of C++ SimTK::TrueType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrueType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TrueType, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SimTK::TrueType self) -> TrueType"""
        this = _opensim.new_TrueType()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_TrueType
    __del__ = lambda self: None
TrueType_swigregister = _opensim.TrueType_swigregister
TrueType_swigregister(TrueType)

class ArrayIndexUnsigned(_object):
    """Proxy of C++ SimTK::ArrayIndexTraits<(unsigned int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayIndexUnsigned, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayIndexUnsigned, name)
    __repr__ = _swig_repr

    def max_size():
        """max_size() -> SimTK::ArrayIndexTraits< unsigned int >::size_type"""
        return _opensim.ArrayIndexUnsigned_max_size()

    if _newclass:
        max_size = staticmethod(max_size)
    __swig_getmethods__["max_size"] = lambda x: max_size

    def __init__(self):
        """__init__(SimTK::ArrayIndexTraits<(unsigned int)> self) -> ArrayIndexUnsigned"""
        this = _opensim.new_ArrayIndexUnsigned()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_ArrayIndexUnsigned
    __del__ = lambda self: None
ArrayIndexUnsigned_swigregister = _opensim.ArrayIndexUnsigned_swigregister
ArrayIndexUnsigned_swigregister(ArrayIndexUnsigned)

def ArrayIndexUnsigned_max_size():
    """ArrayIndexUnsigned_max_size() -> SimTK::ArrayIndexTraits< unsigned int >::size_type"""
    return _opensim.ArrayIndexUnsigned_max_size()

class ArrayIndexInt(_object):
    """Proxy of C++ SimTK::ArrayIndexTraits<(int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayIndexInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayIndexInt, name)
    __repr__ = _swig_repr

    def max_size():
        """max_size() -> SimTK::ArrayIndexTraits< int >::size_type"""
        return _opensim.ArrayIndexInt_max_size()

    if _newclass:
        max_size = staticmethod(max_size)
    __swig_getmethods__["max_size"] = lambda x: max_size

    def __init__(self):
        """__init__(SimTK::ArrayIndexTraits<(int)> self) -> ArrayIndexInt"""
        this = _opensim.new_ArrayIndexInt()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_ArrayIndexInt
    __del__ = lambda self: None
ArrayIndexInt_swigregister = _opensim.ArrayIndexInt_swigregister
ArrayIndexInt_swigregister(ArrayIndexInt)

def ArrayIndexInt_max_size():
    """ArrayIndexInt_max_size() -> SimTK::ArrayIndexTraits< int >::size_type"""
    return _opensim.ArrayIndexInt_max_size()

class DecorativeGeometry(_object):
    """Proxy of C++ SimTK::DecorativeGeometry class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecorativeGeometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DecorativeGeometry, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _opensim.delete_DecorativeGeometry
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(SimTK::DecorativeGeometry self) -> DecorativeGeometry
        __init__(SimTK::DecorativeGeometry self, DecorativeGeometry source) -> DecorativeGeometry

        Parameters:
            source: SimTK::DecorativeGeometry const &

        """
        this = _opensim.new_DecorativeGeometry(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    DrawPoints = _opensim.DecorativeGeometry_DrawPoints
    DrawWireframe = _opensim.DecorativeGeometry_DrawWireframe
    DrawSurface = _opensim.DecorativeGeometry_DrawSurface
    DrawDefault = _opensim.DecorativeGeometry_DrawDefault

    def setBodyId(self, bodyId):
        """
        setBodyId(DecorativeGeometry self, int bodyId) -> DecorativeGeometry

        Parameters:
            bodyId: int

        """
        return _opensim.DecorativeGeometry_setBodyId(self, bodyId)


    def setTransform(self, X_BG):
        """
        setTransform(DecorativeGeometry self, Transform X_BG) -> DecorativeGeometry

        Parameters:
            X_BG: SimTK::Transform const &

        """
        return _opensim.DecorativeGeometry_setTransform(self, X_BG)


    def setResolution(self, arg2):
        """
        setResolution(DecorativeGeometry self, SimTK::Real arg2) -> DecorativeGeometry

        Parameters:
            arg2: SimTK::Real

        """
        return _opensim.DecorativeGeometry_setResolution(self, arg2)


    def setScaleFactors(self, scale):
        """
        setScaleFactors(DecorativeGeometry self, Vec3 scale) -> DecorativeGeometry

        Parameters:
            scale: SimTK::Vec3 const &

        """
        return _opensim.DecorativeGeometry_setScaleFactors(self, scale)


    def setScale(self, scale):
        """
        setScale(DecorativeGeometry self, SimTK::Real scale) -> DecorativeGeometry

        Parameters:
            scale: SimTK::Real

        """
        return _opensim.DecorativeGeometry_setScale(self, scale)


    def getBodyId(self):
        """
        getBodyId(DecorativeGeometry self) -> int

        Parameters:
            self: SimTK::DecorativeGeometry const *

        """
        return _opensim.DecorativeGeometry_getBodyId(self)


    def getResolution(self):
        """
        getResolution(DecorativeGeometry self) -> SimTK::Real

        Parameters:
            self: SimTK::DecorativeGeometry const *

        """
        return _opensim.DecorativeGeometry_getResolution(self)


    def getTransform(self):
        """
        getTransform(DecorativeGeometry self) -> Transform

        Parameters:
            self: SimTK::DecorativeGeometry const *

        """
        return _opensim.DecorativeGeometry_getTransform(self)


    def getScaleFactors(self):
        """
        getScaleFactors(DecorativeGeometry self) -> Vec3

        Parameters:
            self: SimTK::DecorativeGeometry const *

        """
        return _opensim.DecorativeGeometry_getScaleFactors(self)


    def setColor(self, rgb):
        """
        setColor(DecorativeGeometry self, Vec3 rgb) -> DecorativeGeometry

        Parameters:
            rgb: SimTK::Vec3 const &

        """
        return _opensim.DecorativeGeometry_setColor(self, rgb)


    def setOpacity(self, arg2):
        """
        setOpacity(DecorativeGeometry self, SimTK::Real arg2) -> DecorativeGeometry

        Parameters:
            arg2: SimTK::Real

        """
        return _opensim.DecorativeGeometry_setOpacity(self, arg2)


    def setLineThickness(self, arg2):
        """
        setLineThickness(DecorativeGeometry self, SimTK::Real arg2) -> DecorativeGeometry

        Parameters:
            arg2: SimTK::Real

        """
        return _opensim.DecorativeGeometry_setLineThickness(self, arg2)


    def getColor(self):
        """
        getColor(DecorativeGeometry self) -> Vec3

        Parameters:
            self: SimTK::DecorativeGeometry const *

        """
        return _opensim.DecorativeGeometry_getColor(self)


    def getOpacity(self):
        """
        getOpacity(DecorativeGeometry self) -> SimTK::Real

        Parameters:
            self: SimTK::DecorativeGeometry const *

        """
        return _opensim.DecorativeGeometry_getOpacity(self)


    def getLineThickness(self):
        """
        getLineThickness(DecorativeGeometry self) -> SimTK::Real

        Parameters:
            self: SimTK::DecorativeGeometry const *

        """
        return _opensim.DecorativeGeometry_getLineThickness(self)


    def setFaceCamera(self, shouldFace):
        """
        setFaceCamera(DecorativeGeometry self, int shouldFace) -> DecorativeGeometry

        Parameters:
            shouldFace: int

        """
        return _opensim.DecorativeGeometry_setFaceCamera(self, shouldFace)


    def getFaceCamera(self):
        """
        getFaceCamera(DecorativeGeometry self) -> int

        Parameters:
            self: SimTK::DecorativeGeometry const *

        """
        return _opensim.DecorativeGeometry_getFaceCamera(self)


    def setRepresentation(self, arg2):
        """
        setRepresentation(DecorativeGeometry self, SimTK::DecorativeGeometry::Representation const & arg2) -> DecorativeGeometry

        Parameters:
            arg2: SimTK::DecorativeGeometry::Representation const &

        """
        return _opensim.DecorativeGeometry_setRepresentation(self, arg2)


    def getRepresentation(self):
        """
        getRepresentation(DecorativeGeometry self) -> SimTK::DecorativeGeometry::Representation

        Parameters:
            self: SimTK::DecorativeGeometry const *

        """
        return _opensim.DecorativeGeometry_getRepresentation(self)


    def implementGeometry(self, arg2):
        """
        implementGeometry(DecorativeGeometry self, DecorativeGeometryImplementation arg2)

        Parameters:
            arg2: SimTK::DecorativeGeometryImplementation &

        """
        return _opensim.DecorativeGeometry_implementGeometry(self, arg2)

DecorativeGeometry_swigregister = _opensim.DecorativeGeometry_swigregister
DecorativeGeometry_swigregister(DecorativeGeometry)
Black = cvar.Black
Gray = cvar.Gray
Red = cvar.Red
Green = cvar.Green
Blue = cvar.Blue
Yellow = cvar.Yellow
Orange = cvar.Orange
Magenta = cvar.Magenta
Purple = cvar.Purple
Cyan = cvar.Cyan
White = cvar.White

class DecorativePoint(DecorativeGeometry):
    """Proxy of C++ SimTK::DecorativePoint class"""
    __swig_setmethods__ = {}
    for _s in [DecorativeGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecorativePoint, name, value)
    __swig_getmethods__ = {}
    for _s in [DecorativeGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DecorativePoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SimTK::DecorativePoint self, Vec3 p) -> DecorativePoint

        Parameters:
            p: SimTK::Vec3 const &

        __init__(SimTK::DecorativePoint self) -> DecorativePoint
        """
        this = _opensim.new_DecorativePoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setPoint(self, p):
        """
        setPoint(DecorativePoint self, Vec3 p) -> DecorativePoint

        Parameters:
            p: SimTK::Vec3 const &

        """
        return _opensim.DecorativePoint_setPoint(self, p)


    def getPoint(self):
        """
        getPoint(DecorativePoint self) -> Vec3

        Parameters:
            self: SimTK::DecorativePoint const *

        """
        return _opensim.DecorativePoint_getPoint(self)


    def setBodyId(self, b):
        """
        setBodyId(DecorativePoint self, int b) -> DecorativePoint

        Parameters:
            b: int

        """
        return _opensim.DecorativePoint_setBodyId(self, b)


    def setTransform(self, X_BD):
        """
        setTransform(DecorativePoint self, Transform X_BD) -> DecorativePoint

        Parameters:
            X_BD: SimTK::Transform const &

        """
        return _opensim.DecorativePoint_setTransform(self, X_BD)


    def setResolution(self, r):
        """
        setResolution(DecorativePoint self, SimTK::Real r) -> DecorativePoint

        Parameters:
            r: SimTK::Real

        """
        return _opensim.DecorativePoint_setResolution(self, r)


    def setScaleFactors(self, s):
        """
        setScaleFactors(DecorativePoint self, Vec3 s) -> DecorativePoint

        Parameters:
            s: SimTK::Vec3 const &

        """
        return _opensim.DecorativePoint_setScaleFactors(self, s)


    def setColor(self, rgb):
        """
        setColor(DecorativePoint self, Vec3 rgb) -> DecorativePoint

        Parameters:
            rgb: SimTK::Vec3 const &

        """
        return _opensim.DecorativePoint_setColor(self, rgb)


    def setOpacity(self, o):
        """
        setOpacity(DecorativePoint self, SimTK::Real o) -> DecorativePoint

        Parameters:
            o: SimTK::Real

        """
        return _opensim.DecorativePoint_setOpacity(self, o)


    def setLineThickness(self, t):
        """
        setLineThickness(DecorativePoint self, SimTK::Real t) -> DecorativePoint

        Parameters:
            t: SimTK::Real

        """
        return _opensim.DecorativePoint_setLineThickness(self, t)


    def setRepresentation(self, r):
        """
        setRepresentation(DecorativePoint self, SimTK::DecorativeGeometry::Representation const & r) -> DecorativePoint

        Parameters:
            r: SimTK::DecorativeGeometry::Representation const &

        """
        return _opensim.DecorativePoint_setRepresentation(self, r)

    __swig_destroy__ = _opensim.delete_DecorativePoint
    __del__ = lambda self: None
DecorativePoint_swigregister = _opensim.DecorativePoint_swigregister
DecorativePoint_swigregister(DecorativePoint)

class DecorativeLine(DecorativeGeometry):
    """Proxy of C++ SimTK::DecorativeLine class"""
    __swig_setmethods__ = {}
    for _s in [DecorativeGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecorativeLine, name, value)
    __swig_getmethods__ = {}
    for _s in [DecorativeGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DecorativeLine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SimTK::DecorativeLine self, Vec3 p1, Vec3 p2) -> DecorativeLine

        Parameters:
            p1: SimTK::Vec3 const &
            p2: SimTK::Vec3 const &

        __init__(SimTK::DecorativeLine self, Vec3 p1) -> DecorativeLine

        Parameters:
            p1: SimTK::Vec3 const &

        __init__(SimTK::DecorativeLine self) -> DecorativeLine
        """
        this = _opensim.new_DecorativeLine(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setPoint1(self, p1):
        """
        setPoint1(DecorativeLine self, Vec3 p1) -> DecorativeLine

        Parameters:
            p1: SimTK::Vec3 const &

        """
        return _opensim.DecorativeLine_setPoint1(self, p1)


    def setPoint2(self, p2):
        """
        setPoint2(DecorativeLine self, Vec3 p2) -> DecorativeLine

        Parameters:
            p2: SimTK::Vec3 const &

        """
        return _opensim.DecorativeLine_setPoint2(self, p2)


    def setEndpoints(self, p1, p2):
        """
        setEndpoints(DecorativeLine self, Vec3 p1, Vec3 p2) -> DecorativeLine

        Parameters:
            p1: SimTK::Vec3 const &
            p2: SimTK::Vec3 const &

        """
        return _opensim.DecorativeLine_setEndpoints(self, p1, p2)


    def setBodyId(self, b):
        """
        setBodyId(DecorativeLine self, int b) -> DecorativeLine

        Parameters:
            b: int

        """
        return _opensim.DecorativeLine_setBodyId(self, b)


    def setTransform(self, X_BD):
        """
        setTransform(DecorativeLine self, Transform X_BD) -> DecorativeLine

        Parameters:
            X_BD: SimTK::Transform const &

        """
        return _opensim.DecorativeLine_setTransform(self, X_BD)


    def setResolution(self, r):
        """
        setResolution(DecorativeLine self, SimTK::Real r) -> DecorativeLine

        Parameters:
            r: SimTK::Real

        """
        return _opensim.DecorativeLine_setResolution(self, r)


    def setScaleFactors(self, s):
        """
        setScaleFactors(DecorativeLine self, Vec3 s) -> DecorativeLine

        Parameters:
            s: SimTK::Vec3 const &

        """
        return _opensim.DecorativeLine_setScaleFactors(self, s)


    def setColor(self, rgb):
        """
        setColor(DecorativeLine self, Vec3 rgb) -> DecorativeLine

        Parameters:
            rgb: SimTK::Vec3 const &

        """
        return _opensim.DecorativeLine_setColor(self, rgb)


    def setOpacity(self, o):
        """
        setOpacity(DecorativeLine self, SimTK::Real o) -> DecorativeLine

        Parameters:
            o: SimTK::Real

        """
        return _opensim.DecorativeLine_setOpacity(self, o)


    def setLineThickness(self, t):
        """
        setLineThickness(DecorativeLine self, SimTK::Real t) -> DecorativeLine

        Parameters:
            t: SimTK::Real

        """
        return _opensim.DecorativeLine_setLineThickness(self, t)


    def setRepresentation(self, r):
        """
        setRepresentation(DecorativeLine self, SimTK::DecorativeGeometry::Representation const & r) -> DecorativeLine

        Parameters:
            r: SimTK::DecorativeGeometry::Representation const &

        """
        return _opensim.DecorativeLine_setRepresentation(self, r)


    def getPoint1(self):
        """
        getPoint1(DecorativeLine self) -> Vec3

        Parameters:
            self: SimTK::DecorativeLine const *

        """
        return _opensim.DecorativeLine_getPoint1(self)


    def getPoint2(self):
        """
        getPoint2(DecorativeLine self) -> Vec3

        Parameters:
            self: SimTK::DecorativeLine const *

        """
        return _opensim.DecorativeLine_getPoint2(self)


    def isInstanceOf(arg1):
        """
        isInstanceOf(DecorativeGeometry arg1) -> bool

        Parameters:
            arg1: SimTK::DecorativeGeometry const &

        """
        return _opensim.DecorativeLine_isInstanceOf(arg1)

    if _newclass:
        isInstanceOf = staticmethod(isInstanceOf)
    __swig_getmethods__["isInstanceOf"] = lambda x: isInstanceOf

    def downcast(arg1):
        """
        downcast(DecorativeGeometry arg1) -> DecorativeLine

        Parameters:
            arg1: SimTK::DecorativeGeometry const &

        """
        return _opensim.DecorativeLine_downcast(arg1)

    if _newclass:
        downcast = staticmethod(downcast)
    __swig_getmethods__["downcast"] = lambda x: downcast

    def updDowncast(arg1):
        """
        updDowncast(DecorativeGeometry arg1) -> DecorativeLine

        Parameters:
            arg1: SimTK::DecorativeGeometry &

        """
        return _opensim.DecorativeLine_updDowncast(arg1)

    if _newclass:
        updDowncast = staticmethod(updDowncast)
    __swig_getmethods__["updDowncast"] = lambda x: updDowncast
    __swig_destroy__ = _opensim.delete_DecorativeLine
    __del__ = lambda self: None
DecorativeLine_swigregister = _opensim.DecorativeLine_swigregister
DecorativeLine_swigregister(DecorativeLine)

def DecorativeLine_isInstanceOf(arg2):
    """
    DecorativeLine_isInstanceOf(DecorativeGeometry arg2) -> bool

    Parameters:
        arg1: SimTK::DecorativeGeometry const &

    """
    return _opensim.DecorativeLine_isInstanceOf(arg2)

def DecorativeLine_downcast(arg2):
    """
    DecorativeLine_downcast(DecorativeGeometry arg2) -> DecorativeLine

    Parameters:
        arg1: SimTK::DecorativeGeometry const &

    """
    return _opensim.DecorativeLine_downcast(arg2)

def DecorativeLine_updDowncast(arg2):
    """
    DecorativeLine_updDowncast(DecorativeGeometry arg2) -> DecorativeLine

    Parameters:
        arg1: SimTK::DecorativeGeometry &

    """
    return _opensim.DecorativeLine_updDowncast(arg2)

class DecorativeCircle(DecorativeGeometry):
    """Proxy of C++ SimTK::DecorativeCircle class"""
    __swig_setmethods__ = {}
    for _s in [DecorativeGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecorativeCircle, name, value)
    __swig_getmethods__ = {}
    for _s in [DecorativeGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DecorativeCircle, name)
    __repr__ = _swig_repr

    def __init__(self, radius=0.5):
        """
        __init__(SimTK::DecorativeCircle self, SimTK::Real radius=0.5) -> DecorativeCircle

        Parameters:
            radius: SimTK::Real

        __init__(SimTK::DecorativeCircle self) -> DecorativeCircle
        """
        this = _opensim.new_DecorativeCircle(radius)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setRadius(self, arg2):
        """
        setRadius(DecorativeCircle self, SimTK::Real arg2) -> DecorativeCircle

        Parameters:
            arg2: SimTK::Real

        """
        return _opensim.DecorativeCircle_setRadius(self, arg2)


    def getRadius(self):
        """
        getRadius(DecorativeCircle self) -> SimTK::Real

        Parameters:
            self: SimTK::DecorativeCircle const *

        """
        return _opensim.DecorativeCircle_getRadius(self)


    def setBodyId(self, b):
        """
        setBodyId(DecorativeCircle self, int b) -> DecorativeCircle

        Parameters:
            b: int

        """
        return _opensim.DecorativeCircle_setBodyId(self, b)


    def setTransform(self, X_BD):
        """
        setTransform(DecorativeCircle self, Transform X_BD) -> DecorativeCircle

        Parameters:
            X_BD: SimTK::Transform const &

        """
        return _opensim.DecorativeCircle_setTransform(self, X_BD)


    def setResolution(self, r):
        """
        setResolution(DecorativeCircle self, SimTK::Real r) -> DecorativeCircle

        Parameters:
            r: SimTK::Real

        """
        return _opensim.DecorativeCircle_setResolution(self, r)


    def setScaleFactors(self, s):
        """
        setScaleFactors(DecorativeCircle self, Vec3 s) -> DecorativeCircle

        Parameters:
            s: SimTK::Vec3 const &

        """
        return _opensim.DecorativeCircle_setScaleFactors(self, s)


    def setColor(self, rgb):
        """
        setColor(DecorativeCircle self, Vec3 rgb) -> DecorativeCircle

        Parameters:
            rgb: SimTK::Vec3 const &

        """
        return _opensim.DecorativeCircle_setColor(self, rgb)


    def setOpacity(self, o):
        """
        setOpacity(DecorativeCircle self, SimTK::Real o) -> DecorativeCircle

        Parameters:
            o: SimTK::Real

        """
        return _opensim.DecorativeCircle_setOpacity(self, o)


    def setLineThickness(self, t):
        """
        setLineThickness(DecorativeCircle self, SimTK::Real t) -> DecorativeCircle

        Parameters:
            t: SimTK::Real

        """
        return _opensim.DecorativeCircle_setLineThickness(self, t)


    def setRepresentation(self, r):
        """
        setRepresentation(DecorativeCircle self, SimTK::DecorativeGeometry::Representation const & r) -> DecorativeCircle

        Parameters:
            r: SimTK::DecorativeGeometry::Representation const &

        """
        return _opensim.DecorativeCircle_setRepresentation(self, r)

    __swig_destroy__ = _opensim.delete_DecorativeCircle
    __del__ = lambda self: None
DecorativeCircle_swigregister = _opensim.DecorativeCircle_swigregister
DecorativeCircle_swigregister(DecorativeCircle)

class DecorativeSphere(DecorativeGeometry):
    """Proxy of C++ SimTK::DecorativeSphere class"""
    __swig_setmethods__ = {}
    for _s in [DecorativeGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecorativeSphere, name, value)
    __swig_getmethods__ = {}
    for _s in [DecorativeGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DecorativeSphere, name)
    __repr__ = _swig_repr

    def __init__(self, radius=0.5):
        """
        __init__(SimTK::DecorativeSphere self, SimTK::Real radius=0.5) -> DecorativeSphere

        Parameters:
            radius: SimTK::Real

        __init__(SimTK::DecorativeSphere self) -> DecorativeSphere
        """
        this = _opensim.new_DecorativeSphere(radius)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setRadius(self, arg2):
        """
        setRadius(DecorativeSphere self, SimTK::Real arg2) -> DecorativeSphere

        Parameters:
            arg2: SimTK::Real

        """
        return _opensim.DecorativeSphere_setRadius(self, arg2)


    def getRadius(self):
        """
        getRadius(DecorativeSphere self) -> SimTK::Real

        Parameters:
            self: SimTK::DecorativeSphere const *

        """
        return _opensim.DecorativeSphere_getRadius(self)


    def setBodyId(self, b):
        """
        setBodyId(DecorativeSphere self, int b) -> DecorativeSphere

        Parameters:
            b: int

        """
        return _opensim.DecorativeSphere_setBodyId(self, b)


    def setTransform(self, X_BD):
        """
        setTransform(DecorativeSphere self, Transform X_BD) -> DecorativeSphere

        Parameters:
            X_BD: SimTK::Transform const &

        """
        return _opensim.DecorativeSphere_setTransform(self, X_BD)


    def setResolution(self, r):
        """
        setResolution(DecorativeSphere self, SimTK::Real r) -> DecorativeSphere

        Parameters:
            r: SimTK::Real

        """
        return _opensim.DecorativeSphere_setResolution(self, r)


    def setScaleFactors(self, s):
        """
        setScaleFactors(DecorativeSphere self, Vec3 s) -> DecorativeSphere

        Parameters:
            s: SimTK::Vec3 const &

        """
        return _opensim.DecorativeSphere_setScaleFactors(self, s)


    def setColor(self, rgb):
        """
        setColor(DecorativeSphere self, Vec3 rgb) -> DecorativeSphere

        Parameters:
            rgb: SimTK::Vec3 const &

        """
        return _opensim.DecorativeSphere_setColor(self, rgb)


    def setOpacity(self, o):
        """
        setOpacity(DecorativeSphere self, SimTK::Real o) -> DecorativeSphere

        Parameters:
            o: SimTK::Real

        """
        return _opensim.DecorativeSphere_setOpacity(self, o)


    def setLineThickness(self, t):
        """
        setLineThickness(DecorativeSphere self, SimTK::Real t) -> DecorativeSphere

        Parameters:
            t: SimTK::Real

        """
        return _opensim.DecorativeSphere_setLineThickness(self, t)


    def setRepresentation(self, r):
        """
        setRepresentation(DecorativeSphere self, SimTK::DecorativeGeometry::Representation const & r) -> DecorativeSphere

        Parameters:
            r: SimTK::DecorativeGeometry::Representation const &

        """
        return _opensim.DecorativeSphere_setRepresentation(self, r)

    __swig_destroy__ = _opensim.delete_DecorativeSphere
    __del__ = lambda self: None
DecorativeSphere_swigregister = _opensim.DecorativeSphere_swigregister
DecorativeSphere_swigregister(DecorativeSphere)

class DecorativeEllipsoid(DecorativeGeometry):
    """Proxy of C++ SimTK::DecorativeEllipsoid class"""
    __swig_setmethods__ = {}
    for _s in [DecorativeGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecorativeEllipsoid, name, value)
    __swig_getmethods__ = {}
    for _s in [DecorativeGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DecorativeEllipsoid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SimTK::DecorativeEllipsoid self, Vec3 radii) -> DecorativeEllipsoid

        Parameters:
            radii: SimTK::Vec3 const &

        __init__(SimTK::DecorativeEllipsoid self) -> DecorativeEllipsoid
        """
        this = _opensim.new_DecorativeEllipsoid(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setRadii(self, arg2):
        """
        setRadii(DecorativeEllipsoid self, Vec3 arg2) -> DecorativeEllipsoid

        Parameters:
            arg2: SimTK::Vec3 const &

        """
        return _opensim.DecorativeEllipsoid_setRadii(self, arg2)


    def getRadii(self):
        """
        getRadii(DecorativeEllipsoid self) -> Vec3

        Parameters:
            self: SimTK::DecorativeEllipsoid const *

        """
        return _opensim.DecorativeEllipsoid_getRadii(self)


    def setBodyId(self, b):
        """
        setBodyId(DecorativeEllipsoid self, int b) -> DecorativeEllipsoid

        Parameters:
            b: int

        """
        return _opensim.DecorativeEllipsoid_setBodyId(self, b)


    def setTransform(self, X_BD):
        """
        setTransform(DecorativeEllipsoid self, Transform X_BD) -> DecorativeEllipsoid

        Parameters:
            X_BD: SimTK::Transform const &

        """
        return _opensim.DecorativeEllipsoid_setTransform(self, X_BD)


    def setResolution(self, r):
        """
        setResolution(DecorativeEllipsoid self, SimTK::Real r) -> DecorativeEllipsoid

        Parameters:
            r: SimTK::Real

        """
        return _opensim.DecorativeEllipsoid_setResolution(self, r)


    def setScaleFactors(self, s):
        """
        setScaleFactors(DecorativeEllipsoid self, Vec3 s) -> DecorativeEllipsoid

        Parameters:
            s: SimTK::Vec3 const &

        """
        return _opensim.DecorativeEllipsoid_setScaleFactors(self, s)


    def setColor(self, rgb):
        """
        setColor(DecorativeEllipsoid self, Vec3 rgb) -> DecorativeEllipsoid

        Parameters:
            rgb: SimTK::Vec3 const &

        """
        return _opensim.DecorativeEllipsoid_setColor(self, rgb)


    def setOpacity(self, o):
        """
        setOpacity(DecorativeEllipsoid self, SimTK::Real o) -> DecorativeEllipsoid

        Parameters:
            o: SimTK::Real

        """
        return _opensim.DecorativeEllipsoid_setOpacity(self, o)


    def setLineThickness(self, t):
        """
        setLineThickness(DecorativeEllipsoid self, SimTK::Real t) -> DecorativeEllipsoid

        Parameters:
            t: SimTK::Real

        """
        return _opensim.DecorativeEllipsoid_setLineThickness(self, t)


    def setRepresentation(self, r):
        """
        setRepresentation(DecorativeEllipsoid self, SimTK::DecorativeGeometry::Representation const & r) -> DecorativeEllipsoid

        Parameters:
            r: SimTK::DecorativeGeometry::Representation const &

        """
        return _opensim.DecorativeEllipsoid_setRepresentation(self, r)

    __swig_destroy__ = _opensim.delete_DecorativeEllipsoid
    __del__ = lambda self: None
DecorativeEllipsoid_swigregister = _opensim.DecorativeEllipsoid_swigregister
DecorativeEllipsoid_swigregister(DecorativeEllipsoid)

class DecorativeBrick(DecorativeGeometry):
    """Proxy of C++ SimTK::DecorativeBrick class"""
    __swig_setmethods__ = {}
    for _s in [DecorativeGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecorativeBrick, name, value)
    __swig_getmethods__ = {}
    for _s in [DecorativeGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DecorativeBrick, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SimTK::DecorativeBrick self, Vec3 halfLengths) -> DecorativeBrick

        Parameters:
            halfLengths: SimTK::Vec3 const &

        __init__(SimTK::DecorativeBrick self) -> DecorativeBrick
        """
        this = _opensim.new_DecorativeBrick(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setHalfLengths(self, arg2):
        """
        setHalfLengths(DecorativeBrick self, Vec3 arg2) -> DecorativeBrick

        Parameters:
            arg2: SimTK::Vec3 const &

        """
        return _opensim.DecorativeBrick_setHalfLengths(self, arg2)


    def getHalfLengths(self):
        """
        getHalfLengths(DecorativeBrick self) -> Vec3

        Parameters:
            self: SimTK::DecorativeBrick const *

        """
        return _opensim.DecorativeBrick_getHalfLengths(self)


    def setBodyId(self, b):
        """
        setBodyId(DecorativeBrick self, int b) -> DecorativeBrick

        Parameters:
            b: int

        """
        return _opensim.DecorativeBrick_setBodyId(self, b)


    def setTransform(self, X_BD):
        """
        setTransform(DecorativeBrick self, Transform X_BD) -> DecorativeBrick

        Parameters:
            X_BD: SimTK::Transform const &

        """
        return _opensim.DecorativeBrick_setTransform(self, X_BD)


    def setResolution(self, r):
        """
        setResolution(DecorativeBrick self, SimTK::Real r) -> DecorativeBrick

        Parameters:
            r: SimTK::Real

        """
        return _opensim.DecorativeBrick_setResolution(self, r)


    def setScaleFactors(self, s):
        """
        setScaleFactors(DecorativeBrick self, Vec3 s) -> DecorativeBrick

        Parameters:
            s: SimTK::Vec3 const &

        """
        return _opensim.DecorativeBrick_setScaleFactors(self, s)


    def setColor(self, rgb):
        """
        setColor(DecorativeBrick self, Vec3 rgb) -> DecorativeBrick

        Parameters:
            rgb: SimTK::Vec3 const &

        """
        return _opensim.DecorativeBrick_setColor(self, rgb)


    def setOpacity(self, o):
        """
        setOpacity(DecorativeBrick self, SimTK::Real o) -> DecorativeBrick

        Parameters:
            o: SimTK::Real

        """
        return _opensim.DecorativeBrick_setOpacity(self, o)


    def setLineThickness(self, t):
        """
        setLineThickness(DecorativeBrick self, SimTK::Real t) -> DecorativeBrick

        Parameters:
            t: SimTK::Real

        """
        return _opensim.DecorativeBrick_setLineThickness(self, t)


    def setRepresentation(self, r):
        """
        setRepresentation(DecorativeBrick self, SimTK::DecorativeGeometry::Representation const & r) -> DecorativeBrick

        Parameters:
            r: SimTK::DecorativeGeometry::Representation const &

        """
        return _opensim.DecorativeBrick_setRepresentation(self, r)

    __swig_destroy__ = _opensim.delete_DecorativeBrick
    __del__ = lambda self: None
DecorativeBrick_swigregister = _opensim.DecorativeBrick_swigregister
DecorativeBrick_swigregister(DecorativeBrick)

class DecorativeCylinder(DecorativeGeometry):
    """Proxy of C++ SimTK::DecorativeCylinder class"""
    __swig_setmethods__ = {}
    for _s in [DecorativeGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecorativeCylinder, name, value)
    __swig_getmethods__ = {}
    for _s in [DecorativeGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DecorativeCylinder, name)
    __repr__ = _swig_repr

    def __init__(self, radius=0.5, halfHeight=0.5):
        """
        __init__(SimTK::DecorativeCylinder self, SimTK::Real radius=0.5, SimTK::Real halfHeight=0.5) -> DecorativeCylinder

        Parameters:
            radius: SimTK::Real
            halfHeight: SimTK::Real

        __init__(SimTK::DecorativeCylinder self, SimTK::Real radius=0.5) -> DecorativeCylinder

        Parameters:
            radius: SimTK::Real

        __init__(SimTK::DecorativeCylinder self) -> DecorativeCylinder
        """
        this = _opensim.new_DecorativeCylinder(radius, halfHeight)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setRadius(self, arg2):
        """
        setRadius(DecorativeCylinder self, SimTK::Real arg2) -> DecorativeCylinder

        Parameters:
            arg2: SimTK::Real

        """
        return _opensim.DecorativeCylinder_setRadius(self, arg2)


    def setHalfHeight(self, arg2):
        """
        setHalfHeight(DecorativeCylinder self, SimTK::Real arg2) -> DecorativeCylinder

        Parameters:
            arg2: SimTK::Real

        """
        return _opensim.DecorativeCylinder_setHalfHeight(self, arg2)


    def getRadius(self):
        """
        getRadius(DecorativeCylinder self) -> SimTK::Real

        Parameters:
            self: SimTK::DecorativeCylinder const *

        """
        return _opensim.DecorativeCylinder_getRadius(self)


    def getHalfHeight(self):
        """
        getHalfHeight(DecorativeCylinder self) -> SimTK::Real

        Parameters:
            self: SimTK::DecorativeCylinder const *

        """
        return _opensim.DecorativeCylinder_getHalfHeight(self)


    def setBodyId(self, b):
        """
        setBodyId(DecorativeCylinder self, int b) -> DecorativeCylinder

        Parameters:
            b: int

        """
        return _opensim.DecorativeCylinder_setBodyId(self, b)


    def setTransform(self, X_BD):
        """
        setTransform(DecorativeCylinder self, Transform X_BD) -> DecorativeCylinder

        Parameters:
            X_BD: SimTK::Transform const &

        """
        return _opensim.DecorativeCylinder_setTransform(self, X_BD)


    def setResolution(self, r):
        """
        setResolution(DecorativeCylinder self, SimTK::Real r) -> DecorativeCylinder

        Parameters:
            r: SimTK::Real

        """
        return _opensim.DecorativeCylinder_setResolution(self, r)


    def setScaleFactors(self, s):
        """
        setScaleFactors(DecorativeCylinder self, Vec3 s) -> DecorativeCylinder

        Parameters:
            s: SimTK::Vec3 const &

        """
        return _opensim.DecorativeCylinder_setScaleFactors(self, s)


    def setColor(self, rgb):
        """
        setColor(DecorativeCylinder self, Vec3 rgb) -> DecorativeCylinder

        Parameters:
            rgb: SimTK::Vec3 const &

        """
        return _opensim.DecorativeCylinder_setColor(self, rgb)


    def setOpacity(self, o):
        """
        setOpacity(DecorativeCylinder self, SimTK::Real o) -> DecorativeCylinder

        Parameters:
            o: SimTK::Real

        """
        return _opensim.DecorativeCylinder_setOpacity(self, o)


    def setLineThickness(self, t):
        """
        setLineThickness(DecorativeCylinder self, SimTK::Real t) -> DecorativeCylinder

        Parameters:
            t: SimTK::Real

        """
        return _opensim.DecorativeCylinder_setLineThickness(self, t)


    def setRepresentation(self, r):
        """
        setRepresentation(DecorativeCylinder self, SimTK::DecorativeGeometry::Representation const & r) -> DecorativeCylinder

        Parameters:
            r: SimTK::DecorativeGeometry::Representation const &

        """
        return _opensim.DecorativeCylinder_setRepresentation(self, r)

    __swig_destroy__ = _opensim.delete_DecorativeCylinder
    __del__ = lambda self: None
DecorativeCylinder_swigregister = _opensim.DecorativeCylinder_swigregister
DecorativeCylinder_swigregister(DecorativeCylinder)

class DecorativeFrame(DecorativeGeometry):
    """Proxy of C++ SimTK::DecorativeFrame class"""
    __swig_setmethods__ = {}
    for _s in [DecorativeGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecorativeFrame, name, value)
    __swig_getmethods__ = {}
    for _s in [DecorativeGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DecorativeFrame, name)
    __repr__ = _swig_repr

    def __init__(self, axisLength=1):
        """
        __init__(SimTK::DecorativeFrame self, SimTK::Real axisLength=1) -> DecorativeFrame

        Parameters:
            axisLength: SimTK::Real

        __init__(SimTK::DecorativeFrame self) -> DecorativeFrame
        """
        this = _opensim.new_DecorativeFrame(axisLength)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setAxisLength(self, arg2):
        """
        setAxisLength(DecorativeFrame self, SimTK::Real arg2) -> DecorativeFrame

        Parameters:
            arg2: SimTK::Real

        """
        return _opensim.DecorativeFrame_setAxisLength(self, arg2)


    def getAxisLength(self):
        """
        getAxisLength(DecorativeFrame self) -> SimTK::Real

        Parameters:
            self: SimTK::DecorativeFrame const *

        """
        return _opensim.DecorativeFrame_getAxisLength(self)


    def setBodyId(self, b):
        """
        setBodyId(DecorativeFrame self, int b) -> DecorativeFrame

        Parameters:
            b: int

        """
        return _opensim.DecorativeFrame_setBodyId(self, b)


    def setTransform(self, X_BD):
        """
        setTransform(DecorativeFrame self, Transform X_BD) -> DecorativeFrame

        Parameters:
            X_BD: SimTK::Transform const &

        """
        return _opensim.DecorativeFrame_setTransform(self, X_BD)


    def setResolution(self, r):
        """
        setResolution(DecorativeFrame self, SimTK::Real r) -> DecorativeFrame

        Parameters:
            r: SimTK::Real

        """
        return _opensim.DecorativeFrame_setResolution(self, r)


    def setScaleFactors(self, s):
        """
        setScaleFactors(DecorativeFrame self, Vec3 s) -> DecorativeFrame

        Parameters:
            s: SimTK::Vec3 const &

        """
        return _opensim.DecorativeFrame_setScaleFactors(self, s)


    def setColor(self, rgb):
        """
        setColor(DecorativeFrame self, Vec3 rgb) -> DecorativeFrame

        Parameters:
            rgb: SimTK::Vec3 const &

        """
        return _opensim.DecorativeFrame_setColor(self, rgb)


    def setOpacity(self, o):
        """
        setOpacity(DecorativeFrame self, SimTK::Real o) -> DecorativeFrame

        Parameters:
            o: SimTK::Real

        """
        return _opensim.DecorativeFrame_setOpacity(self, o)


    def setLineThickness(self, t):
        """
        setLineThickness(DecorativeFrame self, SimTK::Real t) -> DecorativeFrame

        Parameters:
            t: SimTK::Real

        """
        return _opensim.DecorativeFrame_setLineThickness(self, t)


    def setRepresentation(self, r):
        """
        setRepresentation(DecorativeFrame self, SimTK::DecorativeGeometry::Representation const & r) -> DecorativeFrame

        Parameters:
            r: SimTK::DecorativeGeometry::Representation const &

        """
        return _opensim.DecorativeFrame_setRepresentation(self, r)

    __swig_destroy__ = _opensim.delete_DecorativeFrame
    __del__ = lambda self: None
DecorativeFrame_swigregister = _opensim.DecorativeFrame_swigregister
DecorativeFrame_swigregister(DecorativeFrame)

class DecorativeText(DecorativeGeometry):
    """Proxy of C++ SimTK::DecorativeText class"""
    __swig_setmethods__ = {}
    for _s in [DecorativeGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecorativeText, name, value)
    __swig_getmethods__ = {}
    for _s in [DecorativeGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DecorativeText, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SimTK::DecorativeText self, std::string const & label) -> DecorativeText

        Parameters:
            label: std::string const &

        __init__(SimTK::DecorativeText self) -> DecorativeText
        """
        this = _opensim.new_DecorativeText(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setText(self, label):
        """
        setText(DecorativeText self, std::string const & label) -> DecorativeText

        Parameters:
            label: std::string const &

        """
        return _opensim.DecorativeText_setText(self, label)


    def getText(self):
        """
        getText(DecorativeText self) -> std::string const &

        Parameters:
            self: SimTK::DecorativeText const *

        """
        return _opensim.DecorativeText_getText(self)


    def setIsScreenText(self, isScreen):
        """
        setIsScreenText(DecorativeText self, bool isScreen) -> DecorativeText

        Parameters:
            isScreen: bool

        """
        return _opensim.DecorativeText_setIsScreenText(self, isScreen)


    def getIsScreenText(self):
        """
        getIsScreenText(DecorativeText self) -> bool

        Parameters:
            self: SimTK::DecorativeText const *

        """
        return _opensim.DecorativeText_getIsScreenText(self)


    def setBodyId(self, b):
        """
        setBodyId(DecorativeText self, int b) -> DecorativeText

        Parameters:
            b: int

        """
        return _opensim.DecorativeText_setBodyId(self, b)


    def setTransform(self, X_BD):
        """
        setTransform(DecorativeText self, Transform X_BD) -> DecorativeText

        Parameters:
            X_BD: SimTK::Transform const &

        """
        return _opensim.DecorativeText_setTransform(self, X_BD)


    def setResolution(self, r):
        """
        setResolution(DecorativeText self, SimTK::Real r) -> DecorativeText

        Parameters:
            r: SimTK::Real

        """
        return _opensim.DecorativeText_setResolution(self, r)


    def setScaleFactors(self, s):
        """
        setScaleFactors(DecorativeText self, Vec3 s) -> DecorativeText

        Parameters:
            s: SimTK::Vec3 const &

        """
        return _opensim.DecorativeText_setScaleFactors(self, s)


    def setColor(self, rgb):
        """
        setColor(DecorativeText self, Vec3 rgb) -> DecorativeText

        Parameters:
            rgb: SimTK::Vec3 const &

        """
        return _opensim.DecorativeText_setColor(self, rgb)


    def setOpacity(self, o):
        """
        setOpacity(DecorativeText self, SimTK::Real o) -> DecorativeText

        Parameters:
            o: SimTK::Real

        """
        return _opensim.DecorativeText_setOpacity(self, o)


    def setLineThickness(self, t):
        """
        setLineThickness(DecorativeText self, SimTK::Real t) -> DecorativeText

        Parameters:
            t: SimTK::Real

        """
        return _opensim.DecorativeText_setLineThickness(self, t)


    def setRepresentation(self, r):
        """
        setRepresentation(DecorativeText self, SimTK::DecorativeGeometry::Representation const & r) -> DecorativeText

        Parameters:
            r: SimTK::DecorativeGeometry::Representation const &

        """
        return _opensim.DecorativeText_setRepresentation(self, r)

    __swig_destroy__ = _opensim.delete_DecorativeText
    __del__ = lambda self: None
DecorativeText_swigregister = _opensim.DecorativeText_swigregister
DecorativeText_swigregister(DecorativeText)

class DecorativeMesh(DecorativeGeometry):
    """Proxy of C++ SimTK::DecorativeMesh class"""
    __swig_setmethods__ = {}
    for _s in [DecorativeGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecorativeMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [DecorativeGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DecorativeMesh, name)
    __repr__ = _swig_repr

    def __init__(self, mesh):
        """
        __init__(SimTK::DecorativeMesh self, PolygonalMesh const & mesh) -> DecorativeMesh

        Parameters:
            mesh: PolygonalMesh const &

        """
        this = _opensim.new_DecorativeMesh(mesh)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getMesh(self):
        """
        getMesh(DecorativeMesh self) -> PolygonalMesh const &

        Parameters:
            self: SimTK::DecorativeMesh const *

        """
        return _opensim.DecorativeMesh_getMesh(self)


    def setBodyId(self, b):
        """
        setBodyId(DecorativeMesh self, int b) -> DecorativeMesh

        Parameters:
            b: int

        """
        return _opensim.DecorativeMesh_setBodyId(self, b)


    def setTransform(self, X_BD):
        """
        setTransform(DecorativeMesh self, Transform X_BD) -> DecorativeMesh

        Parameters:
            X_BD: SimTK::Transform const &

        """
        return _opensim.DecorativeMesh_setTransform(self, X_BD)


    def setResolution(self, r):
        """
        setResolution(DecorativeMesh self, SimTK::Real r) -> DecorativeMesh

        Parameters:
            r: SimTK::Real

        """
        return _opensim.DecorativeMesh_setResolution(self, r)


    def setScaleFactors(self, s):
        """
        setScaleFactors(DecorativeMesh self, Vec3 s) -> DecorativeMesh

        Parameters:
            s: SimTK::Vec3 const &

        """
        return _opensim.DecorativeMesh_setScaleFactors(self, s)


    def setColor(self, rgb):
        """
        setColor(DecorativeMesh self, Vec3 rgb) -> DecorativeMesh

        Parameters:
            rgb: SimTK::Vec3 const &

        """
        return _opensim.DecorativeMesh_setColor(self, rgb)


    def setOpacity(self, o):
        """
        setOpacity(DecorativeMesh self, SimTK::Real o) -> DecorativeMesh

        Parameters:
            o: SimTK::Real

        """
        return _opensim.DecorativeMesh_setOpacity(self, o)


    def setLineThickness(self, t):
        """
        setLineThickness(DecorativeMesh self, SimTK::Real t) -> DecorativeMesh

        Parameters:
            t: SimTK::Real

        """
        return _opensim.DecorativeMesh_setLineThickness(self, t)


    def setRepresentation(self, r):
        """
        setRepresentation(DecorativeMesh self, SimTK::DecorativeGeometry::Representation const & r) -> DecorativeMesh

        Parameters:
            r: SimTK::DecorativeGeometry::Representation const &

        """
        return _opensim.DecorativeMesh_setRepresentation(self, r)

    __swig_destroy__ = _opensim.delete_DecorativeMesh
    __del__ = lambda self: None
DecorativeMesh_swigregister = _opensim.DecorativeMesh_swigregister
DecorativeMesh_swigregister(DecorativeMesh)

class Decorations(DecorativeGeometry):
    """Proxy of C++ SimTK::Decorations class"""
    __swig_setmethods__ = {}
    for _s in [DecorativeGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Decorations, name, value)
    __swig_getmethods__ = {}
    for _s in [DecorativeGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Decorations, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SimTK::Decorations self) -> Decorations
        __init__(SimTK::Decorations self, DecorativeGeometry decoration) -> Decorations

        Parameters:
            decoration: SimTK::DecorativeGeometry const &

        """
        this = _opensim.new_Decorations(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def addDecoration(self, *args):
        """
        addDecoration(Decorations self, DecorativeGeometry decoration) -> Decorations

        Parameters:
            decoration: SimTK::DecorativeGeometry const &

        addDecoration(Decorations self, Transform placement, DecorativeGeometry decoration) -> Decorations

        Parameters:
            placement: SimTK::Transform const &
            decoration: SimTK::DecorativeGeometry const &

        """
        return _opensim.Decorations_addDecoration(self, *args)


    def getNumDecorations(self):
        """
        getNumDecorations(Decorations self) -> int

        Parameters:
            self: SimTK::Decorations const *

        """
        return _opensim.Decorations_getNumDecorations(self)


    def getDecoration(self, i):
        """
        getDecoration(Decorations self, int i) -> DecorativeGeometry

        Parameters:
            i: int

        """
        return _opensim.Decorations_getDecoration(self, i)


    def setBodyId(self, b):
        """
        setBodyId(Decorations self, int b) -> Decorations

        Parameters:
            b: int

        """
        return _opensim.Decorations_setBodyId(self, b)


    def setTransform(self, X_BD):
        """
        setTransform(Decorations self, Transform X_BD) -> Decorations

        Parameters:
            X_BD: SimTK::Transform const &

        """
        return _opensim.Decorations_setTransform(self, X_BD)


    def setResolution(self, r):
        """
        setResolution(Decorations self, SimTK::Real r) -> Decorations

        Parameters:
            r: SimTK::Real

        """
        return _opensim.Decorations_setResolution(self, r)


    def setScaleFactors(self, s):
        """
        setScaleFactors(Decorations self, Vec3 s) -> Decorations

        Parameters:
            s: SimTK::Vec3 const &

        """
        return _opensim.Decorations_setScaleFactors(self, s)


    def setColor(self, rgb):
        """
        setColor(Decorations self, Vec3 rgb) -> Decorations

        Parameters:
            rgb: SimTK::Vec3 const &

        """
        return _opensim.Decorations_setColor(self, rgb)


    def setOpacity(self, o):
        """
        setOpacity(Decorations self, SimTK::Real o) -> Decorations

        Parameters:
            o: SimTK::Real

        """
        return _opensim.Decorations_setOpacity(self, o)


    def setLineThickness(self, t):
        """
        setLineThickness(Decorations self, SimTK::Real t) -> Decorations

        Parameters:
            t: SimTK::Real

        """
        return _opensim.Decorations_setLineThickness(self, t)


    def setRepresentation(self, r):
        """
        setRepresentation(Decorations self, SimTK::DecorativeGeometry::Representation const & r) -> Decorations

        Parameters:
            r: SimTK::DecorativeGeometry::Representation const &

        """
        return _opensim.Decorations_setRepresentation(self, r)

    __swig_destroy__ = _opensim.delete_Decorations
    __del__ = lambda self: None
Decorations_swigregister = _opensim.Decorations_swigregister
Decorations_swigregister(Decorations)

class DecorativeGeometryImplementation(_object):
    """Proxy of C++ SimTK::DecorativeGeometryImplementation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecorativeGeometryImplementation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DecorativeGeometryImplementation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _opensim.delete_DecorativeGeometryImplementation
    __del__ = lambda self: None

    def implementPointGeometry(self, arg2):
        """
        implementPointGeometry(DecorativeGeometryImplementation self, DecorativePoint arg2)

        Parameters:
            arg2: SimTK::DecorativePoint const &

        """
        return _opensim.DecorativeGeometryImplementation_implementPointGeometry(self, arg2)


    def implementLineGeometry(self, arg2):
        """
        implementLineGeometry(DecorativeGeometryImplementation self, DecorativeLine arg2)

        Parameters:
            arg2: SimTK::DecorativeLine const &

        """
        return _opensim.DecorativeGeometryImplementation_implementLineGeometry(self, arg2)


    def implementBrickGeometry(self, arg2):
        """
        implementBrickGeometry(DecorativeGeometryImplementation self, DecorativeBrick arg2)

        Parameters:
            arg2: SimTK::DecorativeBrick const &

        """
        return _opensim.DecorativeGeometryImplementation_implementBrickGeometry(self, arg2)


    def implementCylinderGeometry(self, arg2):
        """
        implementCylinderGeometry(DecorativeGeometryImplementation self, DecorativeCylinder arg2)

        Parameters:
            arg2: SimTK::DecorativeCylinder const &

        """
        return _opensim.DecorativeGeometryImplementation_implementCylinderGeometry(self, arg2)


    def implementCircleGeometry(self, arg2):
        """
        implementCircleGeometry(DecorativeGeometryImplementation self, DecorativeCircle arg2)

        Parameters:
            arg2: SimTK::DecorativeCircle const &

        """
        return _opensim.DecorativeGeometryImplementation_implementCircleGeometry(self, arg2)


    def implementSphereGeometry(self, arg2):
        """
        implementSphereGeometry(DecorativeGeometryImplementation self, DecorativeSphere arg2)

        Parameters:
            arg2: SimTK::DecorativeSphere const &

        """
        return _opensim.DecorativeGeometryImplementation_implementSphereGeometry(self, arg2)


    def implementEllipsoidGeometry(self, arg2):
        """
        implementEllipsoidGeometry(DecorativeGeometryImplementation self, DecorativeEllipsoid arg2)

        Parameters:
            arg2: SimTK::DecorativeEllipsoid const &

        """
        return _opensim.DecorativeGeometryImplementation_implementEllipsoidGeometry(self, arg2)


    def implementFrameGeometry(self, arg2):
        """
        implementFrameGeometry(DecorativeGeometryImplementation self, DecorativeFrame arg2)

        Parameters:
            arg2: SimTK::DecorativeFrame const &

        """
        return _opensim.DecorativeGeometryImplementation_implementFrameGeometry(self, arg2)


    def implementTextGeometry(self, arg2):
        """
        implementTextGeometry(DecorativeGeometryImplementation self, DecorativeText arg2)

        Parameters:
            arg2: SimTK::DecorativeText const &

        """
        return _opensim.DecorativeGeometryImplementation_implementTextGeometry(self, arg2)


    def implementMeshGeometry(self, arg2):
        """
        implementMeshGeometry(DecorativeGeometryImplementation self, DecorativeMesh arg2)

        Parameters:
            arg2: SimTK::DecorativeMesh const &

        """
        return _opensim.DecorativeGeometryImplementation_implementMeshGeometry(self, arg2)

DecorativeGeometryImplementation_swigregister = _opensim.DecorativeGeometryImplementation_swigregister
DecorativeGeometryImplementation_swigregister(DecorativeGeometryImplementation)

class ArrayDecorativeGeometry(_object):
    """Proxy of C++ SimTK::Array_<(SimTK::DecorativeGeometry)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayDecorativeGeometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayDecorativeGeometry, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SimTK::Array_<(SimTK::DecorativeGeometry)> self) -> ArrayDecorativeGeometry
        __init__(SimTK::Array_<(SimTK::DecorativeGeometry)> self, SimTK::Array_< SimTK::DecorativeGeometry >::size_type n) -> ArrayDecorativeGeometry

        Parameters:
            n: SimTK::Array_< SimTK::DecorativeGeometry >::size_type

        __init__(SimTK::Array_<(SimTK::DecorativeGeometry)> self, SimTK::Array_< SimTK::DecorativeGeometry >::size_type n, DecorativeGeometry initVal) -> ArrayDecorativeGeometry

        Parameters:
            n: SimTK::Array_< SimTK::DecorativeGeometry >::size_type
            initVal: SimTK::DecorativeGeometry const &

        __init__(SimTK::Array_<(SimTK::DecorativeGeometry)> self, ArrayDecorativeGeometry src) -> ArrayDecorativeGeometry

        Parameters:
            src: SimTK::Array_< SimTK::DecorativeGeometry > const &

        __init__(SimTK::Array_<(SimTK::DecorativeGeometry)> self, DecorativeGeometry first, DecorativeGeometry last1, DontCopy arg4) -> ArrayDecorativeGeometry

        Parameters:
            first: SimTK::DecorativeGeometry *
            last1: SimTK::DecorativeGeometry const *
            arg4: SimTK::DontCopy const &

        """
        this = _opensim.new_ArrayDecorativeGeometry(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_ArrayDecorativeGeometry
    __del__ = lambda self: None

    def deallocate(self):
        """
        deallocate(ArrayDecorativeGeometry self) -> ArrayDecorativeGeometry

        Parameters:
            self: SimTK::Array_< SimTK::DecorativeGeometry > *

        """
        return _opensim.ArrayDecorativeGeometry_deallocate(self)


    def assign(self, n, fillValue):
        """
        assign(ArrayDecorativeGeometry self, SimTK::Array_< SimTK::DecorativeGeometry >::size_type n, DecorativeGeometry fillValue)

        Parameters:
            n: SimTK::Array_< SimTK::DecorativeGeometry >::size_type
            fillValue: SimTK::DecorativeGeometry const &

        """
        return _opensim.ArrayDecorativeGeometry_assign(self, n, fillValue)


    def fill(self, fillValue):
        """
        fill(ArrayDecorativeGeometry self, DecorativeGeometry fillValue)

        Parameters:
            fillValue: SimTK::DecorativeGeometry const &

        """
        return _opensim.ArrayDecorativeGeometry_fill(self, fillValue)


    def swap(self, other):
        """
        swap(ArrayDecorativeGeometry self, ArrayDecorativeGeometry other)

        Parameters:
            other: SimTK::Array_< SimTK::DecorativeGeometry > &

        """
        return _opensim.ArrayDecorativeGeometry_swap(self, other)


    def adoptData(self, *args):
        """
        adoptData(ArrayDecorativeGeometry self, DecorativeGeometry newData, SimTK::Array_< SimTK::DecorativeGeometry >::size_type dataSize, SimTK::Array_< SimTK::DecorativeGeometry >::size_type dataCapacity) -> ArrayDecorativeGeometry

        Parameters:
            newData: SimTK::DecorativeGeometry *
            dataSize: SimTK::Array_< SimTK::DecorativeGeometry >::size_type
            dataCapacity: SimTK::Array_< SimTK::DecorativeGeometry >::size_type

        adoptData(ArrayDecorativeGeometry self, DecorativeGeometry newData, SimTK::Array_< SimTK::DecorativeGeometry >::size_type dataSize) -> ArrayDecorativeGeometry

        Parameters:
            newData: SimTK::DecorativeGeometry *
            dataSize: SimTK::Array_< SimTK::DecorativeGeometry >::size_type

        """
        return _opensim.ArrayDecorativeGeometry_adoptData(self, *args)


    def shareData(self, *args):
        """
        shareData(ArrayDecorativeGeometry self, DecorativeGeometry newData, SimTK::Array_< SimTK::DecorativeGeometry >::size_type dataSize) -> ArrayDecorativeGeometry

        Parameters:
            newData: SimTK::DecorativeGeometry *
            dataSize: SimTK::Array_< SimTK::DecorativeGeometry >::size_type

        shareData(ArrayDecorativeGeometry self, DecorativeGeometry first, DecorativeGeometry last1) -> ArrayDecorativeGeometry

        Parameters:
            first: SimTK::DecorativeGeometry *
            last1: SimTK::DecorativeGeometry const *

        """
        return _opensim.ArrayDecorativeGeometry_shareData(self, *args)


    def size(self):
        """
        size(ArrayDecorativeGeometry self) -> SimTK::Array_< SimTK::DecorativeGeometry >::size_type

        Parameters:
            self: SimTK::Array_< SimTK::DecorativeGeometry > const *

        """
        return _opensim.ArrayDecorativeGeometry_size(self)


    def max_size(self):
        """
        max_size(ArrayDecorativeGeometry self) -> SimTK::Array_< SimTK::DecorativeGeometry >::size_type

        Parameters:
            self: SimTK::Array_< SimTK::DecorativeGeometry > const *

        """
        return _opensim.ArrayDecorativeGeometry_max_size(self)


    def empty(self):
        """
        empty(ArrayDecorativeGeometry self) -> bool

        Parameters:
            self: SimTK::Array_< SimTK::DecorativeGeometry > const *

        """
        return _opensim.ArrayDecorativeGeometry_empty(self)


    def capacity(self):
        """
        capacity(ArrayDecorativeGeometry self) -> SimTK::Array_< SimTK::DecorativeGeometry >::size_type

        Parameters:
            self: SimTK::Array_< SimTK::DecorativeGeometry > const *

        """
        return _opensim.ArrayDecorativeGeometry_capacity(self)


    def resize(self, *args):
        """
        resize(ArrayDecorativeGeometry self, SimTK::Array_< SimTK::DecorativeGeometry >::size_type n)

        Parameters:
            n: SimTK::Array_< SimTK::DecorativeGeometry >::size_type

        resize(ArrayDecorativeGeometry self, SimTK::Array_< SimTK::DecorativeGeometry >::size_type n, DecorativeGeometry initVal)

        Parameters:
            n: SimTK::Array_< SimTK::DecorativeGeometry >::size_type
            initVal: SimTK::DecorativeGeometry const &

        """
        return _opensim.ArrayDecorativeGeometry_resize(self, *args)


    def reserve(self, n):
        """
        reserve(ArrayDecorativeGeometry self, SimTK::Array_< SimTK::DecorativeGeometry >::size_type n)

        Parameters:
            n: SimTK::Array_< SimTK::DecorativeGeometry >::size_type

        """
        return _opensim.ArrayDecorativeGeometry_reserve(self, n)


    def shrink_to_fit(self):
        """
        shrink_to_fit(ArrayDecorativeGeometry self)

        Parameters:
            self: SimTK::Array_< SimTK::DecorativeGeometry > *

        """
        return _opensim.ArrayDecorativeGeometry_shrink_to_fit(self)


    def allocated(self):
        """
        allocated(ArrayDecorativeGeometry self) -> SimTK::Array_< SimTK::DecorativeGeometry >::size_type

        Parameters:
            self: SimTK::Array_< SimTK::DecorativeGeometry > const *

        """
        return _opensim.ArrayDecorativeGeometry_allocated(self)


    def isOwner(self):
        """
        isOwner(ArrayDecorativeGeometry self) -> bool

        Parameters:
            self: SimTK::Array_< SimTK::DecorativeGeometry > const *

        """
        return _opensim.ArrayDecorativeGeometry_isOwner(self)


    def cbegin(self):
        """
        cbegin(ArrayDecorativeGeometry self) -> DecorativeGeometry

        Parameters:
            self: SimTK::Array_< SimTK::DecorativeGeometry > const *

        """
        return _opensim.ArrayDecorativeGeometry_cbegin(self)


    def begin(self, *args):
        """
        begin(ArrayDecorativeGeometry self) -> DecorativeGeometry
        begin(ArrayDecorativeGeometry self) -> DecorativeGeometry

        Parameters:
            self: SimTK::Array_< SimTK::DecorativeGeometry > *

        """
        return _opensim.ArrayDecorativeGeometry_begin(self, *args)


    def cend(self):
        """
        cend(ArrayDecorativeGeometry self) -> DecorativeGeometry

        Parameters:
            self: SimTK::Array_< SimTK::DecorativeGeometry > const *

        """
        return _opensim.ArrayDecorativeGeometry_cend(self)


    def end(self, *args):
        """
        end(ArrayDecorativeGeometry self) -> DecorativeGeometry
        end(ArrayDecorativeGeometry self) -> DecorativeGeometry

        Parameters:
            self: SimTK::Array_< SimTK::DecorativeGeometry > *

        """
        return _opensim.ArrayDecorativeGeometry_end(self, *args)


    def crbegin(self):
        """
        crbegin(ArrayDecorativeGeometry self) -> SimTK::Array_< SimTK::DecorativeGeometry >::const_reverse_iterator

        Parameters:
            self: SimTK::Array_< SimTK::DecorativeGeometry > const *

        """
        return _opensim.ArrayDecorativeGeometry_crbegin(self)


    def rbegin(self, *args):
        """
        rbegin(ArrayDecorativeGeometry self) -> SimTK::Array_< SimTK::DecorativeGeometry >::const_reverse_iterator
        rbegin(ArrayDecorativeGeometry self) -> SimTK::Array_< SimTK::DecorativeGeometry >::reverse_iterator

        Parameters:
            self: SimTK::Array_< SimTK::DecorativeGeometry > *

        """
        return _opensim.ArrayDecorativeGeometry_rbegin(self, *args)


    def crend(self):
        """
        crend(ArrayDecorativeGeometry self) -> SimTK::Array_< SimTK::DecorativeGeometry >::const_reverse_iterator

        Parameters:
            self: SimTK::Array_< SimTK::DecorativeGeometry > const *

        """
        return _opensim.ArrayDecorativeGeometry_crend(self)


    def rend(self, *args):
        """
        rend(ArrayDecorativeGeometry self) -> SimTK::Array_< SimTK::DecorativeGeometry >::const_reverse_iterator
        rend(ArrayDecorativeGeometry self) -> SimTK::Array_< SimTK::DecorativeGeometry >::reverse_iterator

        Parameters:
            self: SimTK::Array_< SimTK::DecorativeGeometry > *

        """
        return _opensim.ArrayDecorativeGeometry_rend(self, *args)


    def cdata(self):
        """
        cdata(ArrayDecorativeGeometry self) -> DecorativeGeometry

        Parameters:
            self: SimTK::Array_< SimTK::DecorativeGeometry > const *

        """
        return _opensim.ArrayDecorativeGeometry_cdata(self)


    def data(self, *args):
        """
        data(ArrayDecorativeGeometry self) -> DecorativeGeometry
        data(ArrayDecorativeGeometry self) -> DecorativeGeometry

        Parameters:
            self: SimTK::Array_< SimTK::DecorativeGeometry > *

        """
        return _opensim.ArrayDecorativeGeometry_data(self, *args)


    def at(self, *args):
        """
        at(ArrayDecorativeGeometry self, SimTK::Array_< SimTK::DecorativeGeometry >::index_type i) -> DecorativeGeometry

        Parameters:
            i: SimTK::Array_< SimTK::DecorativeGeometry >::index_type

        at(ArrayDecorativeGeometry self, SimTK::Array_< SimTK::DecorativeGeometry >::index_type i) -> DecorativeGeometry

        Parameters:
            i: SimTK::Array_< SimTK::DecorativeGeometry >::index_type

        """
        return _opensim.ArrayDecorativeGeometry_at(self, *args)


    def getElt(self, i):
        """
        getElt(ArrayDecorativeGeometry self, SimTK::Array_< SimTK::DecorativeGeometry >::index_type i) -> DecorativeGeometry

        Parameters:
            i: SimTK::Array_< SimTK::DecorativeGeometry >::index_type

        """
        return _opensim.ArrayDecorativeGeometry_getElt(self, i)


    def updElt(self, i):
        """
        updElt(ArrayDecorativeGeometry self, SimTK::Array_< SimTK::DecorativeGeometry >::index_type i) -> DecorativeGeometry

        Parameters:
            i: SimTK::Array_< SimTK::DecorativeGeometry >::index_type

        """
        return _opensim.ArrayDecorativeGeometry_updElt(self, i)


    def front(self, *args):
        """
        front(ArrayDecorativeGeometry self) -> DecorativeGeometry
        front(ArrayDecorativeGeometry self) -> DecorativeGeometry

        Parameters:
            self: SimTK::Array_< SimTK::DecorativeGeometry > *

        """
        return _opensim.ArrayDecorativeGeometry_front(self, *args)


    def back(self, *args):
        """
        back(ArrayDecorativeGeometry self) -> DecorativeGeometry
        back(ArrayDecorativeGeometry self) -> DecorativeGeometry

        Parameters:
            self: SimTK::Array_< SimTK::DecorativeGeometry > *

        """
        return _opensim.ArrayDecorativeGeometry_back(self, *args)


    def push_back(self, *args):
        """
        push_back(ArrayDecorativeGeometry self, DecorativeGeometry value)

        Parameters:
            value: SimTK::DecorativeGeometry const &

        push_back(ArrayDecorativeGeometry self)

        Parameters:
            self: SimTK::Array_< SimTK::DecorativeGeometry > *

        """
        return _opensim.ArrayDecorativeGeometry_push_back(self, *args)


    def raw_push_back(self):
        """
        raw_push_back(ArrayDecorativeGeometry self) -> DecorativeGeometry

        Parameters:
            self: SimTK::Array_< SimTK::DecorativeGeometry > *

        """
        return _opensim.ArrayDecorativeGeometry_raw_push_back(self)


    def pop_back(self):
        """
        pop_back(ArrayDecorativeGeometry self)

        Parameters:
            self: SimTK::Array_< SimTK::DecorativeGeometry > *

        """
        return _opensim.ArrayDecorativeGeometry_pop_back(self)


    def erase(self, *args):
        """
        erase(ArrayDecorativeGeometry self, DecorativeGeometry first, DecorativeGeometry last1) -> DecorativeGeometry

        Parameters:
            first: SimTK::DecorativeGeometry *
            last1: SimTK::DecorativeGeometry const *

        erase(ArrayDecorativeGeometry self, DecorativeGeometry p) -> DecorativeGeometry

        Parameters:
            p: SimTK::DecorativeGeometry *

        """
        return _opensim.ArrayDecorativeGeometry_erase(self, *args)


    def eraseFast(self, p):
        """
        eraseFast(ArrayDecorativeGeometry self, DecorativeGeometry p) -> DecorativeGeometry

        Parameters:
            p: SimTK::DecorativeGeometry *

        """
        return _opensim.ArrayDecorativeGeometry_eraseFast(self, p)


    def clear(self):
        """
        clear(ArrayDecorativeGeometry self)

        Parameters:
            self: SimTK::Array_< SimTK::DecorativeGeometry > *

        """
        return _opensim.ArrayDecorativeGeometry_clear(self)


    def insert(self, *args):
        """
        insert(ArrayDecorativeGeometry self, DecorativeGeometry p, SimTK::Array_< SimTK::DecorativeGeometry >::size_type n, DecorativeGeometry value) -> DecorativeGeometry

        Parameters:
            p: SimTK::DecorativeGeometry *
            n: SimTK::Array_< SimTK::DecorativeGeometry >::size_type
            value: SimTK::DecorativeGeometry const &

        insert(ArrayDecorativeGeometry self, DecorativeGeometry p, DecorativeGeometry value) -> DecorativeGeometry

        Parameters:
            p: SimTK::DecorativeGeometry *
            value: SimTK::DecorativeGeometry const &

        """
        return _opensim.ArrayDecorativeGeometry_insert(self, *args)

ArrayDecorativeGeometry_swigregister = _opensim.ArrayDecorativeGeometry_swigregister
ArrayDecorativeGeometry_swigregister(ArrayDecorativeGeometry)

class Stage(_object):
    """Proxy of C++ SimTK::Stage class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stage, name)
    __repr__ = _swig_repr
    Empty = _opensim.Stage_Empty
    Topology = _opensim.Stage_Topology
    Model = _opensim.Stage_Model
    Instance = _opensim.Stage_Instance
    Time = _opensim.Stage_Time
    Position = _opensim.Stage_Position
    Velocity = _opensim.Stage_Velocity
    Dynamics = _opensim.Stage_Dynamics
    Acceleration = _opensim.Stage_Acceleration
    Report = _opensim.Stage_Report
    Infinity = _opensim.Stage_Infinity
    LowestValid = _opensim.Stage_LowestValid
    HighestValid = _opensim.Stage_HighestValid
    LowestRuntime = _opensim.Stage_LowestRuntime
    HighestRuntime = _opensim.Stage_HighestRuntime
    NValid = _opensim.Stage_NValid
    NRuntime = _opensim.Stage_NRuntime

    def __init__(self, *args):
        """
        __init__(SimTK::Stage self) -> Stage
        __init__(SimTK::Stage self, int l) -> Stage

        Parameters:
            l: int

        """
        this = _opensim.new_Stage(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def next(self):
        """
        next(Stage self) -> Stage

        Parameters:
            self: SimTK::Stage const *

        """
        return _opensim.Stage_next(self)


    def prev(self):
        """
        prev(Stage self) -> Stage

        Parameters:
            self: SimTK::Stage const *

        """
        return _opensim.Stage_prev(self)


    def getName(self):
        """
        getName(Stage self) -> String

        Parameters:
            self: SimTK::Stage const *

        """
        return _opensim.Stage_getName(self)


    def invalidate(self, tooHigh):
        """
        invalidate(Stage self, Stage tooHigh)

        Parameters:
            tooHigh: SimTK::Stage

        """
        return _opensim.Stage_invalidate(self, tooHigh)


    def isInRuntimeRange(self):
        """
        isInRuntimeRange(Stage self) -> bool

        Parameters:
            self: SimTK::Stage const *

        """
        return _opensim.Stage_isInRuntimeRange(self)

    __swig_destroy__ = _opensim.delete_Stage
    __del__ = lambda self: None
Stage_swigregister = _opensim.Stage_swigregister
Stage_swigregister(Stage)

class State(_object):
    """Proxy of C++ SimTK::State class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, State, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, State, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _opensim.delete_State
    __del__ = lambda self: None

    def clear(self):
        """
        clear(State self)

        Parameters:
            self: SimTK::State *

        """
        return _opensim.State_clear(self)


    def setNumSubsystems(self, i):
        """
        setNumSubsystems(State self, int i)

        Parameters:
            i: int

        """
        return _opensim.State_setNumSubsystems(self, i)


    def __init__(self, *args):
        """
        __init__(SimTK::State self) -> State
        __init__(SimTK::State self, State arg2) -> State

        Parameters:
            arg2: SimTK::State const &

        """
        this = _opensim.new_State(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getNumSubsystems(self):
        """
        getNumSubsystems(State self) -> int

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getNumSubsystems(self)


    def getSystemStage(self):
        """
        getSystemStage(State self) -> Stage

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getSystemStage(self)


    def invalidateAll(self, arg2):
        """
        invalidateAll(State self, Stage arg2)

        Parameters:
            arg2: SimTK::Stage

        """
        return _opensim.State_invalidateAll(self, arg2)


    def invalidateAllCacheAtOrAbove(self, arg2):
        """
        invalidateAllCacheAtOrAbove(State self, Stage arg2)

        Parameters:
            arg2: SimTK::Stage

        """
        return _opensim.State_invalidateAllCacheAtOrAbove(self, arg2)


    def getNY(self):
        """
        getNY(State self) -> int

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getNY(self)


    def getNYErr(self):
        """
        getNYErr(State self) -> int

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getNYErr(self)


    def getNMultipliers(self):
        """
        getNMultipliers(State self) -> int

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getNMultipliers(self)


    def getNEventTriggers(self):
        """
        getNEventTriggers(State self) -> int

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getNEventTriggers(self)


    def getNEventTriggersByStage(self, arg2):
        """
        getNEventTriggersByStage(State self, Stage arg2) -> int

        Parameters:
            arg2: SimTK::Stage

        """
        return _opensim.State_getNEventTriggersByStage(self, arg2)


    def getEventTriggerStartByStage(self, arg2):
        """
        getEventTriggerStartByStage(State self, Stage arg2) -> SystemEventTriggerIndex

        Parameters:
            arg2: SimTK::Stage

        """
        return _opensim.State_getEventTriggerStartByStage(self, arg2)


    def getQStart(self, *args):
        """
        getQStart(State self) -> SystemYIndex
        getQStart(State self, SubsystemIndex arg2) -> SystemQIndex

        Parameters:
            arg2: SubsystemIndex

        """
        return _opensim.State_getQStart(self, *args)


    def getNQ(self, *args):
        """
        getNQ(State self) -> int
        getNQ(State self, SubsystemIndex arg2) -> int

        Parameters:
            arg2: SubsystemIndex

        """
        return _opensim.State_getNQ(self, *args)


    def getUStart(self, *args):
        """
        getUStart(State self) -> SystemYIndex
        getUStart(State self, SubsystemIndex arg2) -> SystemUIndex

        Parameters:
            arg2: SubsystemIndex

        """
        return _opensim.State_getUStart(self, *args)


    def getNU(self, *args):
        """
        getNU(State self) -> int
        getNU(State self, SubsystemIndex arg2) -> int

        Parameters:
            arg2: SubsystemIndex

        """
        return _opensim.State_getNU(self, *args)


    def getZStart(self, *args):
        """
        getZStart(State self) -> SystemYIndex
        getZStart(State self, SubsystemIndex arg2) -> SystemZIndex

        Parameters:
            arg2: SubsystemIndex

        """
        return _opensim.State_getZStart(self, *args)


    def getNZ(self, *args):
        """
        getNZ(State self) -> int
        getNZ(State self, SubsystemIndex arg2) -> int

        Parameters:
            arg2: SubsystemIndex

        """
        return _opensim.State_getNZ(self, *args)


    def getQErrStart(self, *args):
        """
        getQErrStart(State self) -> SystemYErrIndex
        getQErrStart(State self, SubsystemIndex arg2) -> SystemQErrIndex

        Parameters:
            arg2: SubsystemIndex

        """
        return _opensim.State_getQErrStart(self, *args)


    def getNQErr(self, *args):
        """
        getNQErr(State self) -> int
        getNQErr(State self, SubsystemIndex arg2) -> int

        Parameters:
            arg2: SubsystemIndex

        """
        return _opensim.State_getNQErr(self, *args)


    def getUErrStart(self, *args):
        """
        getUErrStart(State self) -> SystemYErrIndex
        getUErrStart(State self, SubsystemIndex arg2) -> SystemUErrIndex

        Parameters:
            arg2: SubsystemIndex

        """
        return _opensim.State_getUErrStart(self, *args)


    def getNUErr(self, *args):
        """
        getNUErr(State self) -> int
        getNUErr(State self, SubsystemIndex arg2) -> int

        Parameters:
            arg2: SubsystemIndex

        """
        return _opensim.State_getNUErr(self, *args)


    def getUDotErrStart(self, arg2):
        """
        getUDotErrStart(State self, SubsystemIndex arg2) -> SystemUDotErrIndex

        Parameters:
            arg2: SubsystemIndex

        """
        return _opensim.State_getUDotErrStart(self, arg2)


    def getNUDotErr(self, *args):
        """
        getNUDotErr(State self) -> int
        getNUDotErr(State self, SubsystemIndex arg2) -> int

        Parameters:
            arg2: SubsystemIndex

        """
        return _opensim.State_getNUDotErr(self, *args)


    def getEventTriggers(self):
        """
        getEventTriggers(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getEventTriggers(self)


    def getEventTriggersByStage(self, *args):
        """
        getEventTriggersByStage(State self, Stage arg2) -> Vector

        Parameters:
            arg2: SimTK::Stage

        getEventTriggersByStage(State self, SubsystemIndex arg2, Stage arg3) -> Vector

        Parameters:
            arg2: SubsystemIndex
            arg3: SimTK::Stage

        """
        return _opensim.State_getEventTriggersByStage(self, *args)


    def updEventTriggers(self):
        """
        updEventTriggers(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_updEventTriggers(self)


    def updEventTriggersByStage(self, *args):
        """
        updEventTriggersByStage(State self, Stage arg2) -> Vector

        Parameters:
            arg2: SimTK::Stage

        updEventTriggersByStage(State self, SubsystemIndex arg2, Stage arg3) -> Vector

        Parameters:
            arg2: SubsystemIndex
            arg3: SimTK::Stage

        """
        return _opensim.State_updEventTriggersByStage(self, *args)


    def getTime(self):
        """
        getTime(State self) -> double const &

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getTime(self)


    def getY(self):
        """
        getY(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getY(self)


    def getQ(self, *args):
        """
        getQ(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        getQ(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getQ(self, *args)


    def getU(self, *args):
        """
        getU(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        getU(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getU(self, *args)


    def getZ(self, *args):
        """
        getZ(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        getZ(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getZ(self, *args)


    def getUWeights(self, *args):
        """
        getUWeights(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        getUWeights(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getUWeights(self, *args)


    def getZWeights(self, *args):
        """
        getZWeights(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        getZWeights(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getZWeights(self, *args)


    def updUWeights(self, *args):
        """
        updUWeights(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        updUWeights(State self) -> Vector

        Parameters:
            self: SimTK::State *

        """
        return _opensim.State_updUWeights(self, *args)


    def updZWeights(self, *args):
        """
        updZWeights(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        updZWeights(State self) -> Vector

        Parameters:
            self: SimTK::State *

        """
        return _opensim.State_updZWeights(self, *args)


    def updTime(self):
        """
        updTime(State self) -> double &

        Parameters:
            self: SimTK::State *

        """
        return _opensim.State_updTime(self)


    def updY(self):
        """
        updY(State self) -> Vector

        Parameters:
            self: SimTK::State *

        """
        return _opensim.State_updY(self)


    def setTime(self, t):
        """
        setTime(State self, double t)

        Parameters:
            t: double

        """
        return _opensim.State_setTime(self, t)


    def setY(self, y):
        """
        setY(State self, Vector y)

        Parameters:
            y: SimTK::Vector const &

        """
        return _opensim.State_setY(self, y)


    def updQ(self, *args):
        """
        updQ(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        updQ(State self) -> Vector

        Parameters:
            self: SimTK::State *

        """
        return _opensim.State_updQ(self, *args)


    def updU(self, *args):
        """
        updU(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        updU(State self) -> Vector

        Parameters:
            self: SimTK::State *

        """
        return _opensim.State_updU(self, *args)


    def updZ(self, *args):
        """
        updZ(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        updZ(State self) -> Vector

        Parameters:
            self: SimTK::State *

        """
        return _opensim.State_updZ(self, *args)


    def setQ(self, q):
        """
        setQ(State self, Vector q)

        Parameters:
            q: SimTK::Vector const &

        """
        return _opensim.State_setQ(self, q)


    def setU(self, u):
        """
        setU(State self, Vector u)

        Parameters:
            u: SimTK::Vector const &

        """
        return _opensim.State_setU(self, u)


    def setZ(self, z):
        """
        setZ(State self, Vector z)

        Parameters:
            z: SimTK::Vector const &

        """
        return _opensim.State_setZ(self, z)


    def getYDot(self):
        """
        getYDot(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getYDot(self)


    def getQDot(self, *args):
        """
        getQDot(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        getQDot(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getQDot(self, *args)


    def getZDot(self, *args):
        """
        getZDot(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        getZDot(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getZDot(self, *args)


    def getUDot(self, *args):
        """
        getUDot(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        getUDot(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getUDot(self, *args)


    def getQDotDot(self, *args):
        """
        getQDotDot(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        getQDotDot(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getQDotDot(self, *args)


    def updYDot(self):
        """
        updYDot(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_updYDot(self)


    def updQDot(self, *args):
        """
        updQDot(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        updQDot(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_updQDot(self, *args)


    def updZDot(self, *args):
        """
        updZDot(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        updZDot(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_updZDot(self, *args)


    def updUDot(self, *args):
        """
        updUDot(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        updUDot(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_updUDot(self, *args)


    def updQDotDot(self, *args):
        """
        updQDotDot(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        updQDotDot(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_updQDotDot(self, *args)


    def getYErr(self):
        """
        getYErr(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getYErr(self)


    def getQErr(self, *args):
        """
        getQErr(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        getQErr(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getQErr(self, *args)


    def getUErr(self, *args):
        """
        getUErr(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        getUErr(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getUErr(self, *args)


    def getUDotErr(self, *args):
        """
        getUDotErr(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        getUDotErr(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getUDotErr(self, *args)


    def getMultipliers(self, *args):
        """
        getMultipliers(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        getMultipliers(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getMultipliers(self, *args)


    def getQErrWeights(self, *args):
        """
        getQErrWeights(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        getQErrWeights(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getQErrWeights(self, *args)


    def getUErrWeights(self, *args):
        """
        getUErrWeights(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        getUErrWeights(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_getUErrWeights(self, *args)


    def updQErrWeights(self, *args):
        """
        updQErrWeights(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        updQErrWeights(State self) -> Vector

        Parameters:
            self: SimTK::State *

        """
        return _opensim.State_updQErrWeights(self, *args)


    def updUErrWeights(self, *args):
        """
        updUErrWeights(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        updUErrWeights(State self) -> Vector

        Parameters:
            self: SimTK::State *

        """
        return _opensim.State_updUErrWeights(self, *args)


    def updYErr(self):
        """
        updYErr(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_updYErr(self)


    def updQErr(self, *args):
        """
        updQErr(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        updQErr(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_updQErr(self, *args)


    def updUErr(self, *args):
        """
        updUErr(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        updUErr(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_updUErr(self, *args)


    def updUDotErr(self, *args):
        """
        updUDotErr(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        updUDotErr(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_updUDotErr(self, *args)


    def updMultipliers(self, *args):
        """
        updMultipliers(State self, SubsystemIndex arg2) -> Vector

        Parameters:
            arg2: SubsystemIndex

        updMultipliers(State self) -> Vector

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_updMultipliers(self, *args)


    def getSystemStageVersions(self, versions):
        """
        getSystemStageVersions(State self, SimTK::Array_< SimTK::StageVersion > & versions)

        Parameters:
            versions: SimTK::Array_< SimTK::StageVersion > &

        """
        return _opensim.State_getSystemStageVersions(self, versions)


    def getLowestSystemStageDifference(self, prevVersions):
        """
        getLowestSystemStageDifference(State self, SimTK::Array_< SimTK::StageVersion > const & prevVersions) -> Stage

        Parameters:
            prevVersions: SimTK::Array_< SimTK::StageVersion > const &

        """
        return _opensim.State_getLowestSystemStageDifference(self, prevVersions)


    def setSystemTopologyStageVersion(self, topoVersion):
        """
        setSystemTopologyStageVersion(State self, SimTK::StageVersion topoVersion)

        Parameters:
            topoVersion: SimTK::StageVersion

        """
        return _opensim.State_setSystemTopologyStageVersion(self, topoVersion)


    def autoUpdateDiscreteVariables(self):
        """
        autoUpdateDiscreteVariables(State self)

        Parameters:
            self: SimTK::State *

        """
        return _opensim.State_autoUpdateDiscreteVariables(self)


    def cacheToString(self):
        """
        cacheToString(State self) -> String

        Parameters:
            self: SimTK::State const *

        """
        return _opensim.State_cacheToString(self)

State_swigregister = _opensim.State_swigregister
State_swigregister(State)


def __lshift__(*args):
    """
    __lshift__(std::ostream & o, Stage g) -> std::ostream

    Parameters:
        o: std::ostream &
        g: SimTK::Stage

    __lshift__(std::ostream & o, State s) -> std::ostream &

    Parameters:
        o: std::ostream &
        s: SimTK::State const &

    """
    return _opensim.__lshift__(*args)
class OpenSimException(Exception):
    """Proxy of C++ OpenSim::Exception class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpenSimException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OpenSimException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Exception(std::string const & aMsg, std::string const & aFile, int aLine=-1) -> OpenSimException

        Parameters:
            aMsg: std::string const &
            aFile: std::string const &
            aLine: int

        Exception(std::string const & aMsg, std::string const & aFile) -> OpenSimException

        Parameters:
            aMsg: std::string const &
            aFile: std::string const &

        Exception(std::string const & aMsg) -> OpenSimException

        Parameters:
            aMsg: std::string const &

        __init__(OpenSim::Exception self) -> OpenSimException
        """
        this = _opensim.new_OpenSimException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_OpenSimException
    __del__ = lambda self: None

    def setMessage(self, aMsg):
        """
        setMessage(OpenSimException self, std::string const & aMsg)

        Parameters:
            aMsg: std::string const &

        """
        return _opensim.OpenSimException_setMessage(self, aMsg)


    def getMessage(self):
        """
        getMessage(OpenSimException self) -> char const *

        Parameters:
            self: OpenSim::Exception const *

        """
        return _opensim.OpenSimException_getMessage(self)


    def what(self):
        """
        what(OpenSimException self) -> char const *

        Parameters:
            self: OpenSim::Exception const *

        """
        return _opensim.OpenSimException_what(self)

OpenSimException_swigregister = _opensim.OpenSimException_swigregister
OpenSimException_swigregister(OpenSimException)

class AbstractProperty(_object):
    """Proxy of C++ OpenSim::AbstractProperty class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractProperty, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setAllowableListSize(self, *args):
        """
        setAllowableListSize(AbstractProperty self, int aMin, int aMax)

        Parameters:
            aMin: int
            aMax: int

        setAllowableListSize(AbstractProperty self, int aNum)

        Parameters:
            aNum: int

        """
        return _opensim.AbstractProperty_setAllowableListSize(self, *args)

    __swig_destroy__ = _opensim.delete_AbstractProperty
    __del__ = lambda self: None

    def clone(self):
        """
        clone(AbstractProperty self) -> AbstractProperty

        Parameters:
            self: OpenSim::AbstractProperty const *

        """
        return _opensim.AbstractProperty_clone(self)


    def toString(self):
        """
        toString(AbstractProperty self) -> std::string

        Parameters:
            self: OpenSim::AbstractProperty const *

        """
        return _opensim.AbstractProperty_toString(self)


    def getTypeName(self):
        """
        getTypeName(AbstractProperty self) -> std::string

        Parameters:
            self: OpenSim::AbstractProperty const *

        """
        return _opensim.AbstractProperty_getTypeName(self)


    def isObjectProperty(self):
        """
        isObjectProperty(AbstractProperty self) -> bool

        Parameters:
            self: OpenSim::AbstractProperty const *

        """
        return _opensim.AbstractProperty_isObjectProperty(self)


    def isUnnamedProperty(self):
        """
        isUnnamedProperty(AbstractProperty self) -> bool

        Parameters:
            self: OpenSim::AbstractProperty const *

        """
        return _opensim.AbstractProperty_isUnnamedProperty(self)


    def equals(self, other):
        """
        equals(AbstractProperty self, AbstractProperty other) -> bool

        Parameters:
            other: OpenSim::AbstractProperty const &

        """
        return _opensim.AbstractProperty_equals(self, other)


    def isSamePropertyClass(self, other):
        """
        isSamePropertyClass(AbstractProperty self, AbstractProperty other) -> bool

        Parameters:
            other: OpenSim::AbstractProperty const &

        """
        return _opensim.AbstractProperty_isSamePropertyClass(self, other)


    def size(self):
        """
        size(AbstractProperty self) -> int

        Parameters:
            self: OpenSim::AbstractProperty const *

        """
        return _opensim.AbstractProperty_size(self)


    def empty(self):
        """
        empty(AbstractProperty self) -> bool

        Parameters:
            self: OpenSim::AbstractProperty const *

        """
        return _opensim.AbstractProperty_empty(self)


    def clear(self):
        """
        clear(AbstractProperty self)

        Parameters:
            self: OpenSim::AbstractProperty *

        """
        return _opensim.AbstractProperty_clear(self)


    def getValueAsObject(self, index=-1):
        """
        getValueAsObject(AbstractProperty self, int index=-1) -> OpenSimObject

        Parameters:
            index: int

        getValueAsObject(AbstractProperty self) -> OpenSimObject

        Parameters:
            self: OpenSim::AbstractProperty const *

        """
        return _opensim.AbstractProperty_getValueAsObject(self, index)


    def updValueAsObject(self, index=-1):
        """
        updValueAsObject(AbstractProperty self, int index=-1) -> OpenSimObject

        Parameters:
            index: int

        updValueAsObject(AbstractProperty self) -> OpenSimObject

        Parameters:
            self: OpenSim::AbstractProperty *

        """
        return _opensim.AbstractProperty_updValueAsObject(self, index)


    def setValueAsObject(self, obj, index=-1):
        """
        setValueAsObject(AbstractProperty self, OpenSimObject obj, int index=-1)

        Parameters:
            obj: OpenSim::Object const &
            index: int

        setValueAsObject(AbstractProperty self, OpenSimObject obj)

        Parameters:
            obj: OpenSim::Object const &

        """
        return _opensim.AbstractProperty_setValueAsObject(self, obj, index)


    def setAllPropertiesUseDefault(self, shouldUseDefault):
        """
        setAllPropertiesUseDefault(AbstractProperty self, bool shouldUseDefault)

        Parameters:
            shouldUseDefault: bool

        """
        return _opensim.AbstractProperty_setAllPropertiesUseDefault(self, shouldUseDefault)


    def readFromXMLParentElement(self, parent, versionNumber):
        """
        readFromXMLParentElement(AbstractProperty self, SimTK::Xml::Element & parent, int versionNumber)

        Parameters:
            parent: SimTK::Xml::Element &
            versionNumber: int

        """
        return _opensim.AbstractProperty_readFromXMLParentElement(self, parent, versionNumber)


    def writeToXMLParentElement(self, parent):
        """
        writeToXMLParentElement(AbstractProperty self, SimTK::Xml::Element & parent)

        Parameters:
            parent: SimTK::Xml::Element &

        """
        return _opensim.AbstractProperty_writeToXMLParentElement(self, parent)


    def setName(self, name):
        """
        setName(AbstractProperty self, std::string const & name)

        Parameters:
            name: std::string const &

        """
        return _opensim.AbstractProperty_setName(self, name)


    def setComment(self, aComment):
        """
        setComment(AbstractProperty self, std::string const & aComment)

        Parameters:
            aComment: std::string const &

        """
        return _opensim.AbstractProperty_setComment(self, aComment)


    def setValueIsDefault(self, isDefault):
        """
        setValueIsDefault(AbstractProperty self, bool isDefault)

        Parameters:
            isDefault: bool

        """
        return _opensim.AbstractProperty_setValueIsDefault(self, isDefault)


    def getName(self):
        """
        getName(AbstractProperty self) -> std::string const &

        Parameters:
            self: OpenSim::AbstractProperty const *

        """
        return _opensim.AbstractProperty_getName(self)


    def getComment(self):
        """
        getComment(AbstractProperty self) -> std::string const &

        Parameters:
            self: OpenSim::AbstractProperty const *

        """
        return _opensim.AbstractProperty_getComment(self)


    def getValueIsDefault(self):
        """
        getValueIsDefault(AbstractProperty self) -> bool

        Parameters:
            self: OpenSim::AbstractProperty const *

        """
        return _opensim.AbstractProperty_getValueIsDefault(self)


    def getMinListSize(self):
        """
        getMinListSize(AbstractProperty self) -> int

        Parameters:
            self: OpenSim::AbstractProperty const *

        """
        return _opensim.AbstractProperty_getMinListSize(self)


    def getMaxListSize(self):
        """
        getMaxListSize(AbstractProperty self) -> int

        Parameters:
            self: OpenSim::AbstractProperty const *

        """
        return _opensim.AbstractProperty_getMaxListSize(self)


    def isOptionalProperty(self):
        """
        isOptionalProperty(AbstractProperty self) -> bool

        Parameters:
            self: OpenSim::AbstractProperty const *

        """
        return _opensim.AbstractProperty_isOptionalProperty(self)


    def isListProperty(self):
        """
        isListProperty(AbstractProperty self) -> bool

        Parameters:
            self: OpenSim::AbstractProperty const *

        """
        return _opensim.AbstractProperty_isListProperty(self)


    def isOneValueProperty(self):
        """
        isOneValueProperty(AbstractProperty self) -> bool

        Parameters:
            self: OpenSim::AbstractProperty const *

        """
        return _opensim.AbstractProperty_isOneValueProperty(self)


    def isOneObjectProperty(self):
        """
        isOneObjectProperty(AbstractProperty self) -> bool

        Parameters:
            self: OpenSim::AbstractProperty const *

        """
        return _opensim.AbstractProperty_isOneObjectProperty(self)

AbstractProperty_swigregister = _opensim.AbstractProperty_swigregister
AbstractProperty_swigregister(AbstractProperty)
Array_CAPMIN = cvar.Array_CAPMIN

class PropertyGroup(_object):
    """Proxy of C++ OpenSim::PropertyGroup class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyGroup, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::PropertyGroup self) -> PropertyGroup
        __init__(OpenSim::PropertyGroup self, std::string & aName) -> PropertyGroup

        Parameters:
            aName: std::string &

        __init__(OpenSim::PropertyGroup self, PropertyGroup aGroup) -> PropertyGroup

        Parameters:
            aGroup: OpenSim::PropertyGroup const &

        """
        this = _opensim.new_PropertyGroup(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_PropertyGroup
    __del__ = lambda self: None

    def clone(self):
        """
        clone(PropertyGroup self) -> PropertyGroup

        Parameters:
            self: OpenSim::PropertyGroup const *

        """
        return _opensim.PropertyGroup_clone(self)


    def copyData(self, aGroup):
        """
        copyData(PropertyGroup self, PropertyGroup aGroup)

        Parameters:
            aGroup: OpenSim::PropertyGroup const &

        """
        return _opensim.PropertyGroup_copyData(self, aGroup)


    def clear(self):
        """
        clear(PropertyGroup self)

        Parameters:
            self: OpenSim::PropertyGroup *

        """
        return _opensim.PropertyGroup_clear(self)


    def contains(self, aName):
        """
        contains(PropertyGroup self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.PropertyGroup_contains(self, aName)


    def add(self, aProperty):
        """
        add(PropertyGroup self, Property_Deprecated * aProperty)

        Parameters:
            aProperty: Property_Deprecated *

        """
        return _opensim.PropertyGroup_add(self, aProperty)


    def remove(self, aProperty):
        """
        remove(PropertyGroup self, Property_Deprecated * aProperty)

        Parameters:
            aProperty: Property_Deprecated *

        """
        return _opensim.PropertyGroup_remove(self, aProperty)


    def get(self, aIndex):
        """
        get(PropertyGroup self, int aIndex) -> Property_Deprecated *

        Parameters:
            aIndex: int

        """
        return _opensim.PropertyGroup_get(self, aIndex)


    def getPropertyIndex(self, aProperty):
        """
        getPropertyIndex(PropertyGroup self, Property_Deprecated * aProperty) -> int

        Parameters:
            aProperty: Property_Deprecated *

        """
        return _opensim.PropertyGroup_getPropertyIndex(self, aProperty)


    def setName(self, aName):
        """
        setName(PropertyGroup self, std::string const & aName)

        Parameters:
            aName: std::string const &

        """
        return _opensim.PropertyGroup_setName(self, aName)


    def getName(self):
        """
        getName(PropertyGroup self) -> std::string const &

        Parameters:
            self: OpenSim::PropertyGroup const *

        """
        return _opensim.PropertyGroup_getName(self)

PropertyGroup_swigregister = _opensim.PropertyGroup_swigregister
PropertyGroup_swigregister(PropertyGroup)

class ArrayPtrsPropertyGroup(_object):
    """Proxy of C++ OpenSim::ArrayPtrs<(OpenSim::PropertyGroup)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayPtrsPropertyGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayPtrsPropertyGroup, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _opensim.delete_ArrayPtrsPropertyGroup
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::ArrayPtrs<(OpenSim::PropertyGroup)> self, int aCapacity=1) -> ArrayPtrsPropertyGroup

        Parameters:
            aCapacity: int

        __init__(OpenSim::ArrayPtrs<(OpenSim::PropertyGroup)> self) -> ArrayPtrsPropertyGroup
        __init__(OpenSim::ArrayPtrs<(OpenSim::PropertyGroup)> self, ArrayPtrsPropertyGroup aArray) -> ArrayPtrsPropertyGroup

        Parameters:
            aArray: OpenSim::ArrayPtrs< OpenSim::PropertyGroup > const &

        """
        this = _opensim.new_ArrayPtrsPropertyGroup(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def clearAndDestroy(self):
        """
        clearAndDestroy(ArrayPtrsPropertyGroup self)

        Parameters:
            self: OpenSim::ArrayPtrs< OpenSim::PropertyGroup > *

        """
        return _opensim.ArrayPtrsPropertyGroup_clearAndDestroy(self)


    def setSize(self, aSize):
        """
        setSize(ArrayPtrsPropertyGroup self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.ArrayPtrsPropertyGroup_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayPtrsPropertyGroup self) -> int

        Parameters:
            self: OpenSim::ArrayPtrs< OpenSim::PropertyGroup > const *

        """
        return _opensim.ArrayPtrsPropertyGroup_getSize(self)


    def size(self):
        """
        size(ArrayPtrsPropertyGroup self) -> int

        Parameters:
            self: OpenSim::ArrayPtrs< OpenSim::PropertyGroup > const *

        """
        return _opensim.ArrayPtrsPropertyGroup_size(self)


    def getIndex(self, *args):
        """
        getIndex(ArrayPtrsPropertyGroup self, PropertyGroup aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::PropertyGroup const *
            aStartIndex: int

        getIndex(ArrayPtrsPropertyGroup self, PropertyGroup aObject) -> int

        Parameters:
            aObject: OpenSim::PropertyGroup const *

        getIndex(ArrayPtrsPropertyGroup self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(ArrayPtrsPropertyGroup self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.ArrayPtrsPropertyGroup_getIndex(self, *args)


    def append(self, *args):
        """
        append(ArrayPtrsPropertyGroup self, PropertyGroup aObject) -> bool

        Parameters:
            aObject: OpenSim::PropertyGroup *

        append(ArrayPtrsPropertyGroup self, ArrayPtrsPropertyGroup aArray) -> bool

        Parameters:
            aArray: OpenSim::ArrayPtrs< OpenSim::PropertyGroup > &

        """
        return _opensim.ArrayPtrsPropertyGroup_append(self, *args)


    def insert(self, aIndex, aObject):
        """
        insert(ArrayPtrsPropertyGroup self, int aIndex, PropertyGroup aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::PropertyGroup *

        """
        return _opensim.ArrayPtrsPropertyGroup_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(ArrayPtrsPropertyGroup self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(ArrayPtrsPropertyGroup self, PropertyGroup aObject) -> bool

        Parameters:
            aObject: OpenSim::PropertyGroup const *

        """
        return _opensim.ArrayPtrsPropertyGroup_remove(self, *args)


    def set(self, aIndex, aObject):
        """
        set(ArrayPtrsPropertyGroup self, int aIndex, PropertyGroup aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::PropertyGroup *

        """
        return _opensim.ArrayPtrsPropertyGroup_set(self, aIndex, aObject)


    def get(self, *args):
        """
        get(ArrayPtrsPropertyGroup self, int aIndex) -> PropertyGroup

        Parameters:
            aIndex: int

        get(ArrayPtrsPropertyGroup self, std::string const & aName) -> PropertyGroup

        Parameters:
            aName: std::string const &

        """
        return _opensim.ArrayPtrsPropertyGroup_get(self, *args)


    def getLast(self):
        """
        getLast(ArrayPtrsPropertyGroup self) -> PropertyGroup

        Parameters:
            self: OpenSim::ArrayPtrs< OpenSim::PropertyGroup > const *

        """
        return _opensim.ArrayPtrsPropertyGroup_getLast(self)


    def searchBinary(self, aObject, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayPtrsPropertyGroup self, PropertyGroup aObject, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters:
            aObject: OpenSim::PropertyGroup const &
            aFindFirst: bool
            aLo: int
            aHi: int

        searchBinary(ArrayPtrsPropertyGroup self, PropertyGroup aObject, bool aFindFirst=False, int aLo=-1) -> int

        Parameters:
            aObject: OpenSim::PropertyGroup const &
            aFindFirst: bool
            aLo: int

        searchBinary(ArrayPtrsPropertyGroup self, PropertyGroup aObject, bool aFindFirst=False) -> int

        Parameters:
            aObject: OpenSim::PropertyGroup const &
            aFindFirst: bool

        searchBinary(ArrayPtrsPropertyGroup self, PropertyGroup aObject) -> int

        Parameters:
            aObject: OpenSim::PropertyGroup const &

        """
        return _opensim.ArrayPtrsPropertyGroup_searchBinary(self, aObject, aFindFirst, aLo, aHi)

ArrayPtrsPropertyGroup_swigregister = _opensim.ArrayPtrsPropertyGroup_swigregister
ArrayPtrsPropertyGroup_swigregister(ArrayPtrsPropertyGroup)

class OpenSimObject(_object):
    """Proxy of C++ OpenSim::Object class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpenSimObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OpenSimObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _opensim.delete_OpenSimObject
    __del__ = lambda self: None

    def clone(self):
        """
        clone(OpenSimObject self) -> OpenSimObject

        Parameters:
            self: OpenSim::Object const *

        """
        return _opensim.OpenSimObject_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(OpenSimObject self) -> std::string const &

        Parameters:
            self: OpenSim::Object const *

        """
        return _opensim.OpenSimObject_getConcreteClassName(self)


    def getDisplayer(self):
        """
        getDisplayer(OpenSimObject self) -> VisibleObject

        Parameters:
            self: OpenSim::Object const *

        """
        return _opensim.OpenSimObject_getDisplayer(self)


    def updDisplayer(self):
        """
        updDisplayer(OpenSimObject self) -> VisibleObject

        Parameters:
            self: OpenSim::Object *

        """
        return _opensim.OpenSimObject_updDisplayer(self)


    def isEqualTo(self, aObject):
        """
        isEqualTo(OpenSimObject self, OpenSimObject aObject) -> bool

        Parameters:
            aObject: OpenSim::Object const &

        """
        return _opensim.OpenSimObject_isEqualTo(self, aObject)


    def setName(self, name):
        """
        setName(OpenSimObject self, std::string const & name)

        Parameters:
            name: std::string const &

        """
        return _opensim.OpenSimObject_setName(self, name)


    def getName(self):
        """
        getName(OpenSimObject self) -> std::string const &

        Parameters:
            self: OpenSim::Object const *

        """
        return _opensim.OpenSimObject_getName(self)


    def setDescription(self, description):
        """
        setDescription(OpenSimObject self, std::string const & description)

        Parameters:
            description: std::string const &

        """
        return _opensim.OpenSimObject_setDescription(self, description)


    def getDescription(self):
        """
        getDescription(OpenSimObject self) -> std::string const &

        Parameters:
            self: OpenSim::Object const *

        """
        return _opensim.OpenSimObject_getDescription(self)


    def getAuthors(self):
        """
        getAuthors(OpenSimObject self) -> std::string const &

        Parameters:
            self: OpenSim::Object const *

        """
        return _opensim.OpenSimObject_getAuthors(self)


    def setAuthors(self, authors):
        """
        setAuthors(OpenSimObject self, std::string const & authors)

        Parameters:
            authors: std::string const &

        """
        return _opensim.OpenSimObject_setAuthors(self, authors)


    def getReferences(self):
        """
        getReferences(OpenSimObject self) -> std::string const &

        Parameters:
            self: OpenSim::Object const *

        """
        return _opensim.OpenSimObject_getReferences(self)


    def setReferences(self, references):
        """
        setReferences(OpenSimObject self, std::string const & references)

        Parameters:
            references: std::string const &

        """
        return _opensim.OpenSimObject_setReferences(self, references)


    def getNumProperties(self):
        """
        getNumProperties(OpenSimObject self) -> int

        Parameters:
            self: OpenSim::Object const *

        """
        return _opensim.OpenSimObject_getNumProperties(self)


    def getPropertyByIndex(self, propertyIndex):
        """
        getPropertyByIndex(OpenSimObject self, int propertyIndex) -> AbstractProperty

        Parameters:
            propertyIndex: int

        """
        return _opensim.OpenSimObject_getPropertyByIndex(self, propertyIndex)


    def updPropertyByIndex(self, propertyIndex):
        """
        updPropertyByIndex(OpenSimObject self, int propertyIndex) -> AbstractProperty

        Parameters:
            propertyIndex: int

        """
        return _opensim.OpenSimObject_updPropertyByIndex(self, propertyIndex)


    def hasProperty(self, name):
        """
        hasProperty(OpenSimObject self, std::string const & name) -> bool

        Parameters:
            name: std::string const &

        """
        return _opensim.OpenSimObject_hasProperty(self, name)


    def getPropertyByName(self, name):
        """
        getPropertyByName(OpenSimObject self, std::string const & name) -> AbstractProperty

        Parameters:
            name: std::string const &

        """
        return _opensim.OpenSimObject_getPropertyByName(self, name)


    def updPropertyByName(self, name):
        """
        updPropertyByName(OpenSimObject self, std::string const & name) -> AbstractProperty

        Parameters:
            name: std::string const &

        """
        return _opensim.OpenSimObject_updPropertyByName(self, name)


    def setObjectIsUpToDateWithProperties(self):
        """
        setObjectIsUpToDateWithProperties(OpenSimObject self)

        Parameters:
            self: OpenSim::Object *

        """
        return _opensim.OpenSimObject_setObjectIsUpToDateWithProperties(self)


    def isObjectUpToDateWithProperties(self):
        """
        isObjectUpToDateWithProperties(OpenSimObject self) -> bool

        Parameters:
            self: OpenSim::Object const *

        """
        return _opensim.OpenSimObject_isObjectUpToDateWithProperties(self)


    def PrintPropertyInfo(*args):
        """
        PrintPropertyInfo(std::ostream & os, std::string const & classNameDotPropertyName)

        Parameters:
            os: std::ostream &
            classNameDotPropertyName: std::string const &

        PrintPropertyInfo(std::ostream & os, std::string const & className, std::string const & propertyName)

        Parameters:
            os: std::ostream &
            className: std::string const &
            propertyName: std::string const &

        """
        return _opensim.OpenSimObject_PrintPropertyInfo(*args)

    if _newclass:
        PrintPropertyInfo = staticmethod(PrintPropertyInfo)
    __swig_getmethods__["PrintPropertyInfo"] = lambda x: PrintPropertyInfo

    def registerType(defaultObject):
        """
        registerType(OpenSimObject defaultObject)

        Parameters:
            defaultObject: OpenSim::Object const &

        """
        return _opensim.OpenSimObject_registerType(defaultObject)

    if _newclass:
        registerType = staticmethod(registerType)
    __swig_getmethods__["registerType"] = lambda x: registerType

    def renameType(oldTypeName, newTypeName):
        """
        renameType(std::string const & oldTypeName, std::string const & newTypeName)

        Parameters:
            oldTypeName: std::string const &
            newTypeName: std::string const &

        """
        return _opensim.OpenSimObject_renameType(oldTypeName, newTypeName)

    if _newclass:
        renameType = staticmethod(renameType)
    __swig_getmethods__["renameType"] = lambda x: renameType

    def getDefaultInstanceOfType(concreteClassName):
        """
        getDefaultInstanceOfType(std::string const & concreteClassName) -> OpenSimObject

        Parameters:
            concreteClassName: std::string const &

        """
        return _opensim.OpenSimObject_getDefaultInstanceOfType(concreteClassName)

    if _newclass:
        getDefaultInstanceOfType = staticmethod(getDefaultInstanceOfType)
    __swig_getmethods__["getDefaultInstanceOfType"] = lambda x: getDefaultInstanceOfType

    def newInstanceOfType(concreteClassName):
        """
        newInstanceOfType(std::string const & concreteClassName) -> OpenSimObject

        Parameters:
            concreteClassName: std::string const &

        """
        return _opensim.OpenSimObject_newInstanceOfType(concreteClassName)

    if _newclass:
        newInstanceOfType = staticmethod(newInstanceOfType)
    __swig_getmethods__["newInstanceOfType"] = lambda x: newInstanceOfType

    def getRegisteredTypenames(typeNames):
        """
        getRegisteredTypenames(ArrayStr typeNames)

        Parameters:
            typeNames: OpenSim::Array< std::string > &

        """
        return _opensim.OpenSimObject_getRegisteredTypenames(typeNames)

    if _newclass:
        getRegisteredTypenames = staticmethod(getRegisteredTypenames)
    __swig_getmethods__["getRegisteredTypenames"] = lambda x: getRegisteredTypenames

    def makeObjectFromFile(fileName):
        """
        makeObjectFromFile(std::string const & fileName) -> OpenSimObject

        Parameters:
            fileName: std::string const &

        """
        return _opensim.OpenSimObject_makeObjectFromFile(fileName)

    if _newclass:
        makeObjectFromFile = staticmethod(makeObjectFromFile)
    __swig_getmethods__["makeObjectFromFile"] = lambda x: makeObjectFromFile

    def readObjectFromXMLNodeOrFile(self, objectElement, versionNumber):
        """
        readObjectFromXMLNodeOrFile(OpenSimObject self, SimTK::Xml::Element & objectElement, int versionNumber)

        Parameters:
            objectElement: SimTK::Xml::Element &
            versionNumber: int

        """
        return _opensim.OpenSimObject_readObjectFromXMLNodeOrFile(self, objectElement, versionNumber)


    def updateFromXMLNode(self, objectElement, versionNumber):
        """
        updateFromXMLNode(OpenSimObject self, SimTK::Xml::Element & objectElement, int versionNumber)

        Parameters:
            objectElement: SimTK::Xml::Element &
            versionNumber: int

        """
        return _opensim.OpenSimObject_updateFromXMLNode(self, objectElement, versionNumber)


    def updateXMLNode(self, parent):
        """
        updateXMLNode(OpenSimObject self, SimTK::Xml::Element & parent)

        Parameters:
            parent: SimTK::Xml::Element &

        """
        return _opensim.OpenSimObject_updateXMLNode(self, parent)


    def getInlined(self):
        """
        getInlined(OpenSimObject self) -> bool

        Parameters:
            self: OpenSim::Object const *

        """
        return _opensim.OpenSimObject_getInlined(self)


    def setInlined(self, *args):
        """
        setInlined(OpenSimObject self, bool aInlined, std::string const & aFileName)

        Parameters:
            aInlined: bool
            aFileName: std::string const &

        setInlined(OpenSimObject self, bool aInlined)

        Parameters:
            aInlined: bool

        """
        return _opensim.OpenSimObject_setInlined(self, *args)


    def getDocumentFileName(self):
        """
        getDocumentFileName(OpenSimObject self) -> std::string

        Parameters:
            self: OpenSim::Object const *

        """
        return _opensim.OpenSimObject_getDocumentFileName(self)


    def setAllPropertiesUseDefault(self, aUseDefault):
        """
        setAllPropertiesUseDefault(OpenSimObject self, bool aUseDefault)

        Parameters:
            aUseDefault: bool

        """
        return _opensim.OpenSimObject_setAllPropertiesUseDefault(self, aUseDefault)


    def printToXML(self, fileName):
        """
        printToXML(OpenSimObject self, std::string const & fileName) -> bool

        Parameters:
            fileName: std::string const &

        """
        return _opensim.OpenSimObject_printToXML(self, fileName)


    def dump(self, dumpName=False):
        """
        dump(OpenSimObject self, bool dumpName=False) -> std::string

        Parameters:
            dumpName: bool

        dump(OpenSimObject self) -> std::string

        Parameters:
            self: OpenSim::Object *

        """
        return _opensim.OpenSimObject_dump(self, dumpName)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.OpenSimObject_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def setSerializeAllDefaults(shouldSerializeDefaults):
        """
        setSerializeAllDefaults(bool shouldSerializeDefaults)

        Parameters:
            shouldSerializeDefaults: bool

        """
        return _opensim.OpenSimObject_setSerializeAllDefaults(shouldSerializeDefaults)

    if _newclass:
        setSerializeAllDefaults = staticmethod(setSerializeAllDefaults)
    __swig_getmethods__["setSerializeAllDefaults"] = lambda x: setSerializeAllDefaults

    def getSerializeAllDefaults():
        """getSerializeAllDefaults() -> bool"""
        return _opensim.OpenSimObject_getSerializeAllDefaults()

    if _newclass:
        getSerializeAllDefaults = staticmethod(getSerializeAllDefaults)
    __swig_getmethods__["getSerializeAllDefaults"] = lambda x: getSerializeAllDefaults

    def clearObjectIsUpToDateWithProperties(self):
        """
        clearObjectIsUpToDateWithProperties(OpenSimObject self)

        Parameters:
            self: OpenSim::Object *

        """
        return _opensim.OpenSimObject_clearObjectIsUpToDateWithProperties(self)


    def isKindOf(type):
        """
        isKindOf(char const * type) -> bool

        Parameters:
            type: char const *

        """
        return _opensim.OpenSimObject_isKindOf(type)

    if _newclass:
        isKindOf = staticmethod(isKindOf)
    __swig_getmethods__["isKindOf"] = lambda x: isKindOf

    def isA(self, type):
        """
        isA(OpenSimObject self, char const * type) -> bool

        Parameters:
            type: char const *

        """
        return _opensim.OpenSimObject_isA(self, type)


    def setDebugLevel(newLevel):
        """
        setDebugLevel(int newLevel)

        Parameters:
            newLevel: int

        """
        return _opensim.OpenSimObject_setDebugLevel(newLevel)

    if _newclass:
        setDebugLevel = staticmethod(setDebugLevel)
    __swig_getmethods__["setDebugLevel"] = lambda x: setDebugLevel

    def getDebugLevel():
        """getDebugLevel() -> int"""
        return _opensim.OpenSimObject_getDebugLevel()

    if _newclass:
        getDebugLevel = staticmethod(getDebugLevel)
    __swig_getmethods__["getDebugLevel"] = lambda x: getDebugLevel

    def toString(self):
        """
        toString(OpenSimObject self) -> std::string const &

        Parameters:
            self: OpenSim::Object const *

        """
        return _opensim.OpenSimObject_toString(self)


    def SafeCopy(aObject):
        """
        SafeCopy(OpenSimObject aObject) -> OpenSimObject

        Parameters:
            aObject: OpenSim::Object const *

        """
        return _opensim.OpenSimObject_SafeCopy(aObject)

    if _newclass:
        SafeCopy = staticmethod(SafeCopy)
    __swig_getmethods__["SafeCopy"] = lambda x: SafeCopy

    def RegisterType(defaultObject):
        """
        RegisterType(OpenSimObject defaultObject)

        Parameters:
            defaultObject: OpenSim::Object const &

        """
        return _opensim.OpenSimObject_RegisterType(defaultObject)

    if _newclass:
        RegisterType = staticmethod(RegisterType)
    __swig_getmethods__["RegisterType"] = lambda x: RegisterType

    def RenameType(oldName, newName):
        """
        RenameType(std::string const & oldName, std::string const & newName)

        Parameters:
            oldName: std::string const &
            newName: std::string const &

        """
        return _opensim.OpenSimObject_RenameType(oldName, newName)

    if _newclass:
        RenameType = staticmethod(RenameType)
    __swig_getmethods__["RenameType"] = lambda x: RenameType
    def _markAdopted(self):
        if self.this and self.thisown:
            self.thisown = False

OpenSimObject_swigregister = _opensim.OpenSimObject_swigregister
OpenSimObject_swigregister(OpenSimObject)
ObjectDEFAULT_NAME = cvar.ObjectDEFAULT_NAME

def OpenSimObject_PrintPropertyInfo(*args):
    """
    PrintPropertyInfo(std::ostream & os, std::string const & classNameDotPropertyName)

    Parameters:
        os: std::ostream &
        classNameDotPropertyName: std::string const &

    OpenSimObject_PrintPropertyInfo(std::ostream & os, std::string const & className, std::string const & propertyName)

    Parameters:
        os: std::ostream &
        className: std::string const &
        propertyName: std::string const &

    """
    return _opensim.OpenSimObject_PrintPropertyInfo(*args)

def OpenSimObject_registerType(defaultObject):
    """
    OpenSimObject_registerType(OpenSimObject defaultObject)

    Parameters:
        defaultObject: OpenSim::Object const &

    """
    return _opensim.OpenSimObject_registerType(defaultObject)

def OpenSimObject_renameType(oldTypeName, newTypeName):
    """
    OpenSimObject_renameType(std::string const & oldTypeName, std::string const & newTypeName)

    Parameters:
        oldTypeName: std::string const &
        newTypeName: std::string const &

    """
    return _opensim.OpenSimObject_renameType(oldTypeName, newTypeName)

def OpenSimObject_getDefaultInstanceOfType(concreteClassName):
    """
    OpenSimObject_getDefaultInstanceOfType(std::string const & concreteClassName) -> OpenSimObject

    Parameters:
        concreteClassName: std::string const &

    """
    return _opensim.OpenSimObject_getDefaultInstanceOfType(concreteClassName)

def OpenSimObject_newInstanceOfType(concreteClassName):
    """
    OpenSimObject_newInstanceOfType(std::string const & concreteClassName) -> OpenSimObject

    Parameters:
        concreteClassName: std::string const &

    """
    return _opensim.OpenSimObject_newInstanceOfType(concreteClassName)

def OpenSimObject_getRegisteredTypenames(typeNames):
    """
    OpenSimObject_getRegisteredTypenames(ArrayStr typeNames)

    Parameters:
        typeNames: OpenSim::Array< std::string > &

    """
    return _opensim.OpenSimObject_getRegisteredTypenames(typeNames)

def OpenSimObject_makeObjectFromFile(fileName):
    """
    OpenSimObject_makeObjectFromFile(std::string const & fileName) -> OpenSimObject

    Parameters:
        fileName: std::string const &

    """
    return _opensim.OpenSimObject_makeObjectFromFile(fileName)

def OpenSimObject_getClassName():
    """OpenSimObject_getClassName() -> std::string const &"""
    return _opensim.OpenSimObject_getClassName()

def OpenSimObject_setSerializeAllDefaults(shouldSerializeDefaults):
    """
    OpenSimObject_setSerializeAllDefaults(bool shouldSerializeDefaults)

    Parameters:
        shouldSerializeDefaults: bool

    """
    return _opensim.OpenSimObject_setSerializeAllDefaults(shouldSerializeDefaults)

def OpenSimObject_getSerializeAllDefaults():
    """OpenSimObject_getSerializeAllDefaults() -> bool"""
    return _opensim.OpenSimObject_getSerializeAllDefaults()

def OpenSimObject_isKindOf(type):
    """
    OpenSimObject_isKindOf(char const * type) -> bool

    Parameters:
        type: char const *

    """
    return _opensim.OpenSimObject_isKindOf(type)

def OpenSimObject_setDebugLevel(newLevel):
    """
    OpenSimObject_setDebugLevel(int newLevel)

    Parameters:
        newLevel: int

    """
    return _opensim.OpenSimObject_setDebugLevel(newLevel)

def OpenSimObject_getDebugLevel():
    """OpenSimObject_getDebugLevel() -> int"""
    return _opensim.OpenSimObject_getDebugLevel()

def OpenSimObject_SafeCopy(aObject):
    """
    OpenSimObject_SafeCopy(OpenSimObject aObject) -> OpenSimObject

    Parameters:
        aObject: OpenSim::Object const *

    """
    return _opensim.OpenSimObject_SafeCopy(aObject)

def OpenSimObject_RegisterType(defaultObject):
    """
    OpenSimObject_RegisterType(OpenSimObject defaultObject)

    Parameters:
        defaultObject: OpenSim::Object const &

    """
    return _opensim.OpenSimObject_RegisterType(defaultObject)

def OpenSimObject_RenameType(oldName, newName):
    """
    OpenSimObject_RenameType(std::string const & oldName, std::string const & newName)

    Parameters:
        oldName: std::string const &
        newName: std::string const &

    """
    return _opensim.OpenSimObject_RenameType(oldName, newName)

class ObjectGroup(OpenSimObject):
    """Proxy of C++ OpenSim::ObjectGroup class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectGroup, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ObjectGroup

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ObjectGroup_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ObjectGroup self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ObjectGroup_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ObjectGroup_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ObjectGroup self) -> ObjectGroup

        Parameters:
            self: OpenSim::ObjectGroup const *

        """
        return _opensim.ObjectGroup_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ObjectGroup self) -> std::string const &

        Parameters:
            self: OpenSim::ObjectGroup const *

        """
        return _opensim.ObjectGroup_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ObjectGroup self) -> ObjectGroup
        __init__(OpenSim::ObjectGroup self, std::string const & aName) -> ObjectGroup

        Parameters:
            aName: std::string const &

        __init__(OpenSim::ObjectGroup self, ObjectGroup aGroup) -> ObjectGroup

        Parameters:
            aGroup: OpenSim::ObjectGroup const &

        """
        this = _opensim.new_ObjectGroup(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_ObjectGroup
    __del__ = lambda self: None

    def copyData(self, aGroup):
        """
        copyData(ObjectGroup self, ObjectGroup aGroup)

        Parameters:
            aGroup: OpenSim::ObjectGroup const &

        """
        return _opensim.ObjectGroup_copyData(self, aGroup)


    def contains(self, aName):
        """
        contains(ObjectGroup self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.ObjectGroup_contains(self, aName)


    def add(self, aObject):
        """
        add(ObjectGroup self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object *

        """
        return _opensim.ObjectGroup_add(self, aObject)


    def remove(self, aObject):
        """
        remove(ObjectGroup self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object const *

        """
        return _opensim.ObjectGroup_remove(self, aObject)


    def replace(self, aOldObject, aNewObject):
        """
        replace(ObjectGroup self, OpenSimObject aOldObject, OpenSimObject aNewObject)

        Parameters:
            aOldObject: OpenSim::Object const *
            aNewObject: OpenSim::Object *

        """
        return _opensim.ObjectGroup_replace(self, aOldObject, aNewObject)


    def setupGroup(self, aObjects):
        """
        setupGroup(ObjectGroup self, ArrayPtrsObj aObjects)

        Parameters:
            aObjects: OpenSim::ArrayPtrs< OpenSim::Object > &

        """
        return _opensim.ObjectGroup_setupGroup(self, aObjects)


    def getMembers(self):
        """
        getMembers(ObjectGroup self) -> ArrayObjPtr

        Parameters:
            self: OpenSim::ObjectGroup const *

        """
        return _opensim.ObjectGroup_getMembers(self)

ObjectGroup_swigregister = _opensim.ObjectGroup_swigregister
ObjectGroup_swigregister(ObjectGroup)

def ObjectGroup_safeDownCast(obj):
    """
    ObjectGroup_safeDownCast(OpenSimObject obj) -> ObjectGroup

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ObjectGroup_safeDownCast(obj)

def ObjectGroup_getClassName():
    """ObjectGroup_getClassName() -> std::string const &"""
    return _opensim.ObjectGroup_getClassName()

class Geometry(_object):
    """Proxy of C++ OpenSim::Geometry class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Geometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Geometry, name)
    __repr__ = _swig_repr
    _None = _opensim.Geometry__None
    Sphere = _opensim.Geometry_Sphere
    Cylinder = _opensim.Geometry_Cylinder
    Cone = _opensim.Geometry_Cone
    Ellipsoid = _opensim.Geometry_Ellipsoid
    Torus = _opensim.Geometry_Torus
    Line = _opensim.Geometry_Line
    Arrow = _opensim.Geometry_Arrow

    def __init__(self):
        """__init__(OpenSim::Geometry self) -> Geometry"""
        this = _opensim.new_Geometry()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_Geometry
    __del__ = lambda self: None

    def getShape(self):
        """
        getShape(Geometry self) -> OpenSim::Geometry::GeometryType const

        Parameters:
            self: OpenSim::Geometry const *

        """
        return _opensim.Geometry_getShape(self)


    def isAnalytic(self):
        """
        isAnalytic(Geometry self) -> bool

        Parameters:
            self: OpenSim::Geometry const *

        """
        return _opensim.Geometry_isAnalytic(self)


    def setFixed(self, aFixed):
        """
        setFixed(Geometry self, bool aFixed)

        Parameters:
            aFixed: bool

        """
        return _opensim.Geometry_setFixed(self, aFixed)


    def getFixed(self):
        """
        getFixed(Geometry self) -> bool

        Parameters:
            self: OpenSim::Geometry const *

        """
        return _opensim.Geometry_getFixed(self)

Geometry_swigregister = _opensim.Geometry_swigregister
Geometry_swigregister(Geometry)

class LineGeometry(Geometry):
    """Proxy of C++ OpenSim::LineGeometry class"""
    __swig_setmethods__ = {}
    for _s in [Geometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [Geometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LineGeometry, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::LineGeometry self, Vec3 aPoint1, Vec3 aPoint2) -> LineGeometry

        Parameters:
            aPoint1: SimTK::Vec3 &
            aPoint2: SimTK::Vec3 &

        __init__(OpenSim::LineGeometry self) -> LineGeometry
        """
        this = _opensim.new_LineGeometry(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_LineGeometry
    __del__ = lambda self: None

    def getPoints(self, *args):
        """
        getPoints(LineGeometry self, Vec3 rPoint1, Vec3 rPoint2)

        Parameters:
            rPoint1: SimTK::Vec3 &
            rPoint2: SimTK::Vec3 &

        getPoints(LineGeometry self, double [] rPoint1, double [] rPoint2)

        Parameters:
            rPoint1: double []
            rPoint2: double []

        """
        return _opensim.LineGeometry_getPoints(self, *args)


    def setPoints(self, *args):
        """
        setPoints(LineGeometry self, Vec3 aPoint1, Vec3 aPoint2)

        Parameters:
            aPoint1: SimTK::Vec3 &
            aPoint2: SimTK::Vec3 &

        setPoints(LineGeometry self, double [] aPoint1, double [] aPoint2)

        Parameters:
            aPoint1: double []
            aPoint2: double []

        """
        return _opensim.LineGeometry_setPoints(self, *args)

LineGeometry_swigregister = _opensim.LineGeometry_swigregister
LineGeometry_swigregister(LineGeometry)

class ArrowGeometry(LineGeometry):
    """Proxy of C++ OpenSim::ArrowGeometry class"""
    __swig_setmethods__ = {}
    for _s in [LineGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrowGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [LineGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArrowGeometry, name)
    __repr__ = _swig_repr

    def __init__(self, aPoint1, aUnitDirTo, aLength):
        """
        __init__(OpenSim::ArrowGeometry self, Vec3 aPoint1, Vec3 aUnitDirTo, double aLength) -> ArrowGeometry

        Parameters:
            aPoint1: SimTK::Vec3 &
            aUnitDirTo: SimTK::Vec3 &
            aLength: double

        """
        this = _opensim.new_ArrowGeometry(aPoint1, aUnitDirTo, aLength)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_ArrowGeometry
    __del__ = lambda self: None
ArrowGeometry_swigregister = _opensim.ArrowGeometry_swigregister
ArrowGeometry_swigregister(ArrowGeometry)

class AnalyticGeometry(Geometry):
    """Proxy of C++ OpenSim::AnalyticGeometry class"""
    __swig_setmethods__ = {}
    for _s in [Geometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [Geometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticGeometry, name)
    __repr__ = _swig_repr

    def __init__(self, aGeometricType):
        """
        __init__(OpenSim::AnalyticGeometry self, OpenSim::Geometry::GeometryType aGeometricType) -> AnalyticGeometry

        Parameters:
            aGeometricType: enum OpenSim::Geometry::GeometryType

        """
        this = _opensim.new_AnalyticGeometry(aGeometricType)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_AnalyticGeometry
    __del__ = lambda self: None

    def setQuadrants(self, quadrants):
        """
        setQuadrants(AnalyticGeometry self, bool const [6] quadrants)

        Parameters:
            quadrants: bool const [6]

        """
        return _opensim.AnalyticGeometry_setQuadrants(self, quadrants)


    def getQuadrants(self, quadrants):
        """
        getQuadrants(AnalyticGeometry self, bool [6] quadrants)

        Parameters:
            quadrants: bool [6]

        """
        return _opensim.AnalyticGeometry_getQuadrants(self, quadrants)


    def isPiece(self):
        """
        isPiece(AnalyticGeometry self) -> bool const

        Parameters:
            self: OpenSim::AnalyticGeometry const *

        """
        return _opensim.AnalyticGeometry_isPiece(self)

AnalyticGeometry_swigregister = _opensim.AnalyticGeometry_swigregister
AnalyticGeometry_swigregister(AnalyticGeometry)

class AnalyticSphere(AnalyticGeometry):
    """Proxy of C++ OpenSim::AnalyticSphere class"""
    __swig_setmethods__ = {}
    for _s in [AnalyticGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticSphere, name, value)
    __swig_getmethods__ = {}
    for _s in [AnalyticGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticSphere, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::AnalyticSphere self) -> AnalyticSphere
        __init__(OpenSim::AnalyticSphere self, double radius) -> AnalyticSphere

        Parameters:
            radius: double

        """
        this = _opensim.new_AnalyticSphere(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_AnalyticSphere
    __del__ = lambda self: None

    def getRadius(self):
        """
        getRadius(AnalyticSphere self) -> double const &

        Parameters:
            self: OpenSim::AnalyticSphere const *

        """
        return _opensim.AnalyticSphere_getRadius(self)


    def setSphereRadius(self, radius):
        """
        setSphereRadius(AnalyticSphere self, double radius)

        Parameters:
            radius: double

        """
        return _opensim.AnalyticSphere_setSphereRadius(self, radius)


    def createSphere(radius):
        """
        createSphere(double radius) -> AnalyticGeometry

        Parameters:
            radius: double

        """
        return _opensim.AnalyticSphere_createSphere(radius)

    if _newclass:
        createSphere = staticmethod(createSphere)
    __swig_getmethods__["createSphere"] = lambda x: createSphere
AnalyticSphere_swigregister = _opensim.AnalyticSphere_swigregister
AnalyticSphere_swigregister(AnalyticSphere)

def AnalyticSphere_createSphere(radius):
    """
    AnalyticSphere_createSphere(double radius) -> AnalyticGeometry

    Parameters:
        radius: double

    """
    return _opensim.AnalyticSphere_createSphere(radius)

class AnalyticEllipsoid(AnalyticGeometry):
    """Proxy of C++ OpenSim::AnalyticEllipsoid class"""
    __swig_setmethods__ = {}
    for _s in [AnalyticGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticEllipsoid, name, value)
    __swig_getmethods__ = {}
    for _s in [AnalyticGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticEllipsoid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::AnalyticEllipsoid self) -> AnalyticEllipsoid
        __init__(OpenSim::AnalyticEllipsoid self, double radius1, double radius2, double radius3) -> AnalyticEllipsoid

        Parameters:
            radius1: double
            radius2: double
            radius3: double

        """
        this = _opensim.new_AnalyticEllipsoid(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_AnalyticEllipsoid
    __del__ = lambda self: None

    def setEllipsoidParams(self, radius1, radius2, radius3):
        """
        setEllipsoidParams(AnalyticEllipsoid self, double radius1, double radius2, double radius3)

        Parameters:
            radius1: double
            radius2: double
            radius3: double

        """
        return _opensim.AnalyticEllipsoid_setEllipsoidParams(self, radius1, radius2, radius3)


    def getEllipsoidParams(self, params):
        """
        getEllipsoidParams(AnalyticEllipsoid self, double [] params)

        Parameters:
            params: double []

        """
        return _opensim.AnalyticEllipsoid_getEllipsoidParams(self, params)

AnalyticEllipsoid_swigregister = _opensim.AnalyticEllipsoid_swigregister
AnalyticEllipsoid_swigregister(AnalyticEllipsoid)

class AnalyticCylinder(AnalyticGeometry):
    """Proxy of C++ OpenSim::AnalyticCylinder class"""
    __swig_setmethods__ = {}
    for _s in [AnalyticGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticCylinder, name, value)
    __swig_getmethods__ = {}
    for _s in [AnalyticGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticCylinder, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::AnalyticCylinder self) -> AnalyticCylinder
        __init__(OpenSim::AnalyticCylinder self, double const radius, double const height) -> AnalyticCylinder

        Parameters:
            radius: double const
            height: double const

        """
        this = _opensim.new_AnalyticCylinder(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_AnalyticCylinder
    __del__ = lambda self: None

    def getCylinderParams(self, params):
        """
        getCylinderParams(AnalyticCylinder self, double [] params)

        Parameters:
            params: double []

        """
        return _opensim.AnalyticCylinder_getCylinderParams(self, params)

AnalyticCylinder_swigregister = _opensim.AnalyticCylinder_swigregister
AnalyticCylinder_swigregister(AnalyticCylinder)

class AnalyticTorus(AnalyticGeometry):
    """Proxy of C++ OpenSim::AnalyticTorus class"""
    __swig_setmethods__ = {}
    for _s in [AnalyticGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticTorus, name, value)
    __swig_getmethods__ = {}
    for _s in [AnalyticGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticTorus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::AnalyticTorus self) -> AnalyticTorus
        __init__(OpenSim::AnalyticTorus self, double const ringRadius, double const crossSectionRadius) -> AnalyticTorus

        Parameters:
            ringRadius: double const
            crossSectionRadius: double const

        """
        this = _opensim.new_AnalyticTorus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_AnalyticTorus
    __del__ = lambda self: None

    def getTorusParams(self, params):
        """
        getTorusParams(AnalyticTorus self, double [] params)

        Parameters:
            params: double []

        """
        return _opensim.AnalyticTorus_getTorusParams(self, params)

AnalyticTorus_swigregister = _opensim.AnalyticTorus_swigregister
AnalyticTorus_swigregister(AnalyticTorus)

class PolyhedralGeometry(Geometry):
    """Proxy of C++ OpenSim::PolyhedralGeometry class"""
    __swig_setmethods__ = {}
    for _s in [Geometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolyhedralGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [Geometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolyhedralGeometry, name)
    __repr__ = _swig_repr

    def __init__(self, geomFile):
        """
        __init__(OpenSim::PolyhedralGeometry self, std::string const & geomFile) -> PolyhedralGeometry

        Parameters:
            geomFile: std::string const &

        """
        this = _opensim.new_PolyhedralGeometry(geomFile)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getGeometryFilename(self):
        """
        getGeometryFilename(PolyhedralGeometry self) -> std::string const &

        Parameters:
            self: OpenSim::PolyhedralGeometry const *

        """
        return _opensim.PolyhedralGeometry_getGeometryFilename(self)

    __swig_destroy__ = _opensim.delete_PolyhedralGeometry
    __del__ = lambda self: None
PolyhedralGeometry_swigregister = _opensim.PolyhedralGeometry_swigregister
PolyhedralGeometry_swigregister(PolyhedralGeometry)

class DisplayGeometry(OpenSimObject):
    """Proxy of C++ OpenSim::DisplayGeometry class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisplayGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DisplayGeometry, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> DisplayGeometry

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.DisplayGeometry_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(DisplayGeometry self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.DisplayGeometry_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.DisplayGeometry_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(DisplayGeometry self) -> DisplayGeometry

        Parameters:
            self: OpenSim::DisplayGeometry const *

        """
        return _opensim.DisplayGeometry_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(DisplayGeometry self) -> std::string const &

        Parameters:
            self: OpenSim::DisplayGeometry const *

        """
        return _opensim.DisplayGeometry_getConcreteClassName(self)

    _None = _opensim.DisplayGeometry__None
    WireFrame = _opensim.DisplayGeometry_WireFrame
    SolidFill = _opensim.DisplayGeometry_SolidFill
    FlatShaded = _opensim.DisplayGeometry_FlatShaded
    GouraudShaded = _opensim.DisplayGeometry_GouraudShaded

    def __init__(self, *args):
        """
        __init__(OpenSim::DisplayGeometry self) -> DisplayGeometry
        __init__(OpenSim::DisplayGeometry self, std::string const & aFileName) -> DisplayGeometry

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::DisplayGeometry self, DisplayGeometry aDisplayGeometry) -> DisplayGeometry

        Parameters:
            aDisplayGeometry: OpenSim::DisplayGeometry const &

        """
        this = _opensim.new_DisplayGeometry(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_DisplayGeometry
    __del__ = lambda self: None

    def getGeometryFile(self):
        """
        getGeometryFile(DisplayGeometry self) -> std::string const &

        Parameters:
            self: OpenSim::DisplayGeometry const *

        """
        return _opensim.DisplayGeometry_getGeometryFile(self)


    def setGeometryFile(self, aGeometryFile):
        """
        setGeometryFile(DisplayGeometry self, std::string const & aGeometryFile)

        Parameters:
            aGeometryFile: std::string const &

        """
        return _opensim.DisplayGeometry_setGeometryFile(self, aGeometryFile)


    def getColor(self, *args):
        """
        getColor(DisplayGeometry self) -> Vec3
        getColor(DisplayGeometry self, double [3] aColor)

        Parameters:
            aColor: double [3]

        """
        return _opensim.DisplayGeometry_getColor(self, *args)


    def setColor(self, *args):
        """
        setColor(DisplayGeometry self, Vec3 aColor)

        Parameters:
            aColor: SimTK::Vec3 const &

        setColor(DisplayGeometry self, double [3] aColor)

        Parameters:
            aColor: double [3]

        """
        return _opensim.DisplayGeometry_setColor(self, *args)


    def getTextureFile(self):
        """
        getTextureFile(DisplayGeometry self) -> std::string const &

        Parameters:
            self: OpenSim::DisplayGeometry const *

        """
        return _opensim.DisplayGeometry_getTextureFile(self)


    def setTextureFile(self, aTextureFile):
        """
        setTextureFile(DisplayGeometry self, std::string const & aTextureFile)

        Parameters:
            aTextureFile: std::string const &

        """
        return _opensim.DisplayGeometry_setTextureFile(self, aTextureFile)


    def getTransform(self):
        """
        getTransform(DisplayGeometry self) -> Transform

        Parameters:
            self: OpenSim::DisplayGeometry const *

        """
        return _opensim.DisplayGeometry_getTransform(self)


    def setTransform(self, aTransform):
        """
        setTransform(DisplayGeometry self, Transform aTransform)

        Parameters:
            aTransform: SimTK::Transform const &

        """
        return _opensim.DisplayGeometry_setTransform(self, aTransform)


    def setRotationsAndTRanslations(self, aArray):
        """
        setRotationsAndTRanslations(DisplayGeometry self, double [] aArray)

        Parameters:
            aArray: double []

        """
        return _opensim.DisplayGeometry_setRotationsAndTRanslations(self, aArray)


    def getRotationsAndTranslationsAsArray6(self, aArray):
        """
        getRotationsAndTranslationsAsArray6(DisplayGeometry self, double [] aArray)

        Parameters:
            aArray: double []

        """
        return _opensim.DisplayGeometry_getRotationsAndTranslationsAsArray6(self, aArray)


    def getScaleFactors(self, *args):
        """
        getScaleFactors(DisplayGeometry self) -> Vec3
        getScaleFactors(DisplayGeometry self, double [] aScaleFactors)

        Parameters:
            aScaleFactors: double []

        """
        return _opensim.DisplayGeometry_getScaleFactors(self, *args)


    def setScaleFactors(self, *args):
        """
        setScaleFactors(DisplayGeometry self, double const [] aScaleFactors)

        Parameters:
            aScaleFactors: double const []

        setScaleFactors(DisplayGeometry self, Vec3 aScaleFactors)

        Parameters:
            aScaleFactors: SimTK::Vec3 const &

        """
        return _opensim.DisplayGeometry_setScaleFactors(self, *args)


    def getDisplayPreference(self):
        """
        getDisplayPreference(DisplayGeometry self) -> OpenSim::DisplayGeometry::DisplayPreference

        Parameters:
            self: OpenSim::DisplayGeometry const *

        """
        return _opensim.DisplayGeometry_getDisplayPreference(self)


    def setDisplayPreference(self, aPreference):
        """
        setDisplayPreference(DisplayGeometry self, OpenSim::DisplayGeometry::DisplayPreference const & aPreference)

        Parameters:
            aPreference: OpenSim::DisplayGeometry::DisplayPreference const &

        """
        return _opensim.DisplayGeometry_setDisplayPreference(self, aPreference)


    def getOpacity(self):
        """
        getOpacity(DisplayGeometry self) -> double

        Parameters:
            self: OpenSim::DisplayGeometry const *

        """
        return _opensim.DisplayGeometry_getOpacity(self)


    def setOpacity(self, aOpacity):
        """
        setOpacity(DisplayGeometry self, double const & aOpacity)

        Parameters:
            aOpacity: double const &

        """
        return _opensim.DisplayGeometry_setOpacity(self, aOpacity)

DisplayGeometry_swigregister = _opensim.DisplayGeometry_swigregister
DisplayGeometry_swigregister(DisplayGeometry)

def DisplayGeometry_safeDownCast(obj):
    """
    DisplayGeometry_safeDownCast(OpenSimObject obj) -> DisplayGeometry

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.DisplayGeometry_safeDownCast(obj)

def DisplayGeometry_getClassName():
    """DisplayGeometry_getClassName() -> std::string const &"""
    return _opensim.DisplayGeometry_getClassName()

class SetGeometry(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::DisplayGeometry)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetGeometry, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetGeometry

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetGeometry_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetGeometry self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetGeometry_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetGeometry_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetGeometry self) -> SetGeometry

        Parameters:
            self: OpenSim::Set< OpenSim::DisplayGeometry > const *

        """
        return _opensim.SetGeometry_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetGeometry self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::DisplayGeometry > const *

        """
        return _opensim.SetGeometry_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetGeometry
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::DisplayGeometry)> self) -> SetGeometry
        __init__(OpenSim::Set<(OpenSim::DisplayGeometry)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetGeometry

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::DisplayGeometry)> self, std::string const & aFileName) -> SetGeometry

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::DisplayGeometry)> self, SetGeometry aSet) -> SetGeometry

        Parameters:
            aSet: OpenSim::Set< OpenSim::DisplayGeometry > const &

        """
        this = _opensim.new_SetGeometry(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetGeometry self)

        Parameters:
            self: OpenSim::Set< OpenSim::DisplayGeometry > *

        """
        return _opensim.SetGeometry_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetGeometry self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetGeometry_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetGeometry self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetGeometry_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetGeometry self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::DisplayGeometry > const *

        """
        return _opensim.SetGeometry_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetGeometry self, DisplayGeometry aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::DisplayGeometry const *
            aStartIndex: int

        getIndex(SetGeometry self, DisplayGeometry aObject) -> int

        Parameters:
            aObject: OpenSim::DisplayGeometry const *

        getIndex(SetGeometry self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetGeometry self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetGeometry_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetGeometry self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetGeometry_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetGeometry self, DisplayGeometry aObject) -> bool

        Parameters:
            aObject: OpenSim::DisplayGeometry *

        """
        return _opensim.SetGeometry_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetGeometry self, DisplayGeometry aObject) -> bool

        Parameters:
            aObject: OpenSim::DisplayGeometry const &

        """
        return _opensim.SetGeometry_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetGeometry self, int aIndex, DisplayGeometry aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::DisplayGeometry *

        """
        return _opensim.SetGeometry_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetGeometry self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetGeometry self, DisplayGeometry aObject) -> bool

        Parameters:
            aObject: OpenSim::DisplayGeometry const *

        """
        return _opensim.SetGeometry_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetGeometry self)

        Parameters:
            self: OpenSim::Set< OpenSim::DisplayGeometry > *

        """
        return _opensim.SetGeometry_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetGeometry self, int aIndex, DisplayGeometry aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::DisplayGeometry *
            preserveGroups: bool

        set(SetGeometry self, int aIndex, DisplayGeometry aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::DisplayGeometry *

        """
        return _opensim.SetGeometry_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetGeometry self, int aIndex) -> DisplayGeometry

        Parameters:
            aIndex: int

        get(SetGeometry self, std::string const & aName) -> DisplayGeometry

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetGeometry_get(self, *args)


    def contains(self, aName):
        """
        contains(SetGeometry self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetGeometry_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetGeometry self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetGeometry_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetGeometry self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::DisplayGeometry > const *

        """
        return _opensim.SetGeometry_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetGeometry self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetGeometry_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetGeometry self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetGeometry_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetGeometry self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetGeometry_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetGeometry self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetGeometry_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetGeometry self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetGeometry_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetGeometry self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetGeometry self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetGeometry_getGroup(self, *args)

SetGeometry_swigregister = _opensim.SetGeometry_swigregister
SetGeometry_swigregister(SetGeometry)

def SetGeometry_safeDownCast(obj):
    """
    SetGeometry_safeDownCast(OpenSimObject obj) -> SetGeometry

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetGeometry_safeDownCast(obj)

def SetGeometry_getClassName():
    """SetGeometry_getClassName() -> std::string const &"""
    return _opensim.SetGeometry_getClassName()

class GeometrySet(SetGeometry):
    """Proxy of C++ OpenSim::GeometrySet class"""
    __swig_setmethods__ = {}
    for _s in [SetGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometrySet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometrySet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> GeometrySet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.GeometrySet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(GeometrySet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.GeometrySet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.GeometrySet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(GeometrySet self) -> GeometrySet

        Parameters:
            self: OpenSim::GeometrySet const *

        """
        return _opensim.GeometrySet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(GeometrySet self) -> std::string const &

        Parameters:
            self: OpenSim::GeometrySet const *

        """
        return _opensim.GeometrySet_getConcreteClassName(self)


    def __init__(self):
        """__init__(OpenSim::GeometrySet self) -> GeometrySet"""
        this = _opensim.new_GeometrySet()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_GeometrySet
    __del__ = lambda self: None
    def adoptAndAppend(self, aGeometry):
        aGeometry._markAdopted()
        return super(GeometrySet, self).adoptAndAppend(aGeometry)

GeometrySet_swigregister = _opensim.GeometrySet_swigregister
GeometrySet_swigregister(GeometrySet)

def GeometrySet_safeDownCast(obj):
    """
    GeometrySet_safeDownCast(OpenSimObject obj) -> GeometrySet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.GeometrySet_safeDownCast(obj)

def GeometrySet_getClassName():
    """GeometrySet_getClassName() -> std::string const &"""
    return _opensim.GeometrySet_getClassName()

class VisibleObject(OpenSimObject):
    """Proxy of C++ OpenSim::VisibleObject class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisibleObject, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisibleObject, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> VisibleObject

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.VisibleObject_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(VisibleObject self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.VisibleObject_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.VisibleObject_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(VisibleObject self) -> VisibleObject

        Parameters:
            self: OpenSim::VisibleObject const *

        """
        return _opensim.VisibleObject_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(VisibleObject self) -> std::string const &

        Parameters:
            self: OpenSim::VisibleObject const *

        """
        return _opensim.VisibleObject_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::VisibleObject self) -> VisibleObject
        __init__(OpenSim::VisibleObject self, std::string const & aFileName) -> VisibleObject

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::VisibleObject self, VisibleObject aVisibleObject) -> VisibleObject

        Parameters:
            aVisibleObject: OpenSim::VisibleObject const &

        """
        this = _opensim.new_VisibleObject(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_VisibleObject
    __del__ = lambda self: None

    def setOwner(self, aObject):
        """
        setOwner(VisibleObject self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object *

        """
        return _opensim.VisibleObject_setOwner(self, aObject)


    def getOwner(self):
        """
        getOwner(VisibleObject self) -> OpenSimObject

        Parameters:
            self: OpenSim::VisibleObject *

        """
        return _opensim.VisibleObject_getOwner(self)


    def setNumGeometryFiles(self, n):
        """
        setNumGeometryFiles(VisibleObject self, int n)

        Parameters:
            n: int

        """
        return _opensim.VisibleObject_setNumGeometryFiles(self, n)


    def setGeometryFileName(self, i, aGeometryFileName):
        """
        setGeometryFileName(VisibleObject self, int i, std::string const & aGeometryFileName)

        Parameters:
            i: int
            aGeometryFileName: std::string const &

        """
        return _opensim.VisibleObject_setGeometryFileName(self, i, aGeometryFileName)


    def getNumGeometryFiles(self):
        """
        getNumGeometryFiles(VisibleObject self) -> int const

        Parameters:
            self: OpenSim::VisibleObject const *

        """
        return _opensim.VisibleObject_getNumGeometryFiles(self)


    def getGeometryFileName(self, i):
        """
        getGeometryFileName(VisibleObject self, int i) -> std::string const &

        Parameters:
            i: int

        """
        return _opensim.VisibleObject_getGeometryFileName(self, i)


    def getGeometrySet(self):
        """
        getGeometrySet(VisibleObject self) -> GeometrySet

        Parameters:
            self: OpenSim::VisibleObject const *

        """
        return _opensim.VisibleObject_getGeometrySet(self)


    def updGeometrySet(self):
        """
        updGeometrySet(VisibleObject self) -> GeometrySet

        Parameters:
            self: OpenSim::VisibleObject *

        """
        return _opensim.VisibleObject_updGeometrySet(self)


    def getTransform(self):
        """
        getTransform(VisibleObject self) -> Transform

        Parameters:
            self: OpenSim::VisibleObject const *

        """
        return _opensim.VisibleObject_getTransform(self)


    def updTransform(self):
        """
        updTransform(VisibleObject self) -> Transform

        Parameters:
            self: OpenSim::VisibleObject *

        """
        return _opensim.VisibleObject_updTransform(self)


    def getRotationsAndTranslationsAsArray6(self, aArray):
        """
        getRotationsAndTranslationsAsArray6(VisibleObject self, double [] aArray)

        Parameters:
            aArray: double []

        """
        return _opensim.VisibleObject_getRotationsAndTranslationsAsArray6(self, aArray)


    def getTransformAsDouble16(self, flatList):
        """
        getTransformAsDouble16(VisibleObject self, double [] flatList)

        Parameters:
            flatList: double []

        """
        return _opensim.VisibleObject_getTransformAsDouble16(self, flatList)


    def setTransform(self, aTransform):
        """
        setTransform(VisibleObject self, Transform aTransform)

        Parameters:
            aTransform: SimTK::Transform const &

        """
        return _opensim.VisibleObject_setTransform(self, aTransform)


    def translate(self, t):
        """
        translate(VisibleObject self, Vec3 t)

        Parameters:
            t: SimTK::Vec3 const &

        """
        return _opensim.VisibleObject_translate(self, t)


    def setScaleFactors(self, *args):
        """
        setScaleFactors(VisibleObject self, Vec3 aScaleFactors)

        Parameters:
            aScaleFactors: SimTK::Vec3 const &

        setScaleFactors(VisibleObject self, double const [] aScaleFactors)

        Parameters:
            aScaleFactors: double const []

        """
        return _opensim.VisibleObject_setScaleFactors(self, *args)


    def getScaleFactors(self, *args):
        """
        getScaleFactors(VisibleObject self, Vec3 aScaleFactors)

        Parameters:
            aScaleFactors: SimTK::Vec3 &

        getScaleFactors(VisibleObject self, double [] aScaleFactors)

        Parameters:
            aScaleFactors: double []

        """
        return _opensim.VisibleObject_getScaleFactors(self, *args)


    def getShowAxes(self):
        """
        getShowAxes(VisibleObject self) -> bool

        Parameters:
            self: OpenSim::VisibleObject const *

        """
        return _opensim.VisibleObject_getShowAxes(self)


    def setShowAxes(self, showAxes):
        """
        setShowAxes(VisibleObject self, bool const showAxes)

        Parameters:
            showAxes: bool const

        """
        return _opensim.VisibleObject_setShowAxes(self, showAxes)


    def getDisplayPreference(self):
        """
        getDisplayPreference(VisibleObject self) -> OpenSim::DisplayGeometry::DisplayPreference

        Parameters:
            self: OpenSim::VisibleObject const *

        """
        return _opensim.VisibleObject_getDisplayPreference(self)


    def setDisplayPreference(self, aPreference):
        """
        setDisplayPreference(VisibleObject self, OpenSim::DisplayGeometry::DisplayPreference const & aPreference)

        Parameters:
            aPreference: OpenSim::DisplayGeometry::DisplayPreference const &

        """
        return _opensim.VisibleObject_setDisplayPreference(self, aPreference)


    def addDependent(self, aChild):
        """
        addDependent(VisibleObject self, VisibleObject aChild)

        Parameters:
            aChild: OpenSim::VisibleObject *

        """
        return _opensim.VisibleObject_addDependent(self, aChild)


    def hasDependent(self, aChild):
        """
        hasDependent(VisibleObject self, VisibleObject aChild) -> bool

        Parameters:
            aChild: OpenSim::VisibleObject *

        """
        return _opensim.VisibleObject_hasDependent(self, aChild)


    def removeDependent(self, aChild):
        """
        removeDependent(VisibleObject self, VisibleObject aChild)

        Parameters:
            aChild: OpenSim::VisibleObject *

        """
        return _opensim.VisibleObject_removeDependent(self, aChild)


    def countDependents(self):
        """
        countDependents(VisibleObject self) -> int

        Parameters:
            self: OpenSim::VisibleObject *

        """
        return _opensim.VisibleObject_countDependents(self)


    def getDependent(self, i):
        """
        getDependent(VisibleObject self, int i) -> VisibleObject

        Parameters:
            i: int

        """
        return _opensim.VisibleObject_getDependent(self, i)


    def addGeometry(self, aGeometry):
        """
        addGeometry(VisibleObject self, Geometry aGeometry)

        Parameters:
            aGeometry: OpenSim::Geometry *

        """
        return _opensim.VisibleObject_addGeometry(self, aGeometry)


    def removeGeometry(self, aGeometry):
        """
        removeGeometry(VisibleObject self, Geometry aGeometry)

        Parameters:
            aGeometry: OpenSim::Geometry *

        """
        return _opensim.VisibleObject_removeGeometry(self, aGeometry)


    def freeGeometry(self):
        """
        freeGeometry(VisibleObject self)

        Parameters:
            self: OpenSim::VisibleObject *

        """
        return _opensim.VisibleObject_freeGeometry(self)


    def getGeometry(self, i):
        """
        getGeometry(VisibleObject self, int i) -> Geometry

        Parameters:
            i: int

        """
        return _opensim.VisibleObject_getGeometry(self, i)


    def countGeometry(self):
        """
        countGeometry(VisibleObject self) -> int

        Parameters:
            self: OpenSim::VisibleObject const *

        """
        return _opensim.VisibleObject_countGeometry(self)


    def getDefaultGeometry(self):
        """
        getDefaultGeometry(VisibleObject self) -> Geometry

        Parameters:
            self: OpenSim::VisibleObject *

        """
        return _opensim.VisibleObject_getDefaultGeometry(self)


    def setupProperties(self):
        """
        setupProperties(VisibleObject self)

        Parameters:
            self: OpenSim::VisibleObject *

        """
        return _opensim.VisibleObject_setupProperties(self)


    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(VisibleObject self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters:
            aNode: SimTK::Xml::Element &
            versionNumber: int

        updateFromXMLNode(VisibleObject self, SimTK::Xml::Element & aNode)

        Parameters:
            aNode: SimTK::Xml::Element &

        """
        return _opensim.VisibleObject_updateFromXMLNode(self, aNode, versionNumber)

VisibleObject_swigregister = _opensim.VisibleObject_swigregister
VisibleObject_swigregister(VisibleObject)

def VisibleObject_safeDownCast(obj):
    """
    VisibleObject_safeDownCast(OpenSimObject obj) -> VisibleObject

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.VisibleObject_safeDownCast(obj)

def VisibleObject_getClassName():
    """VisibleObject_getClassName() -> std::string const &"""
    return _opensim.VisibleObject_getClassName()

class StateVector(_object):
    """Proxy of C++ OpenSim::StateVector class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::StateVector self, double aT=0.0, int aN=0, double const * aData=None) -> StateVector

        Parameters:
            aT: double
            aN: int
            aData: double const *

        __init__(OpenSim::StateVector self, double aT=0.0, int aN=0) -> StateVector

        Parameters:
            aT: double
            aN: int

        __init__(OpenSim::StateVector self, double aT=0.0) -> StateVector

        Parameters:
            aT: double

        __init__(OpenSim::StateVector self) -> StateVector
        __init__(OpenSim::StateVector self, StateVector aVector) -> StateVector

        Parameters:
            aVector: OpenSim::StateVector const &

        """
        this = _opensim.new_StateVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_StateVector
    __del__ = lambda self: None

    def setStates(self, aT, aN, aY):
        """
        setStates(StateVector self, double aT, int aN, double const [] aY)

        Parameters:
            aT: double
            aN: int
            aY: double const []

        """
        return _opensim.StateVector_setStates(self, aT, aN, aY)


    def getSize(self):
        """
        getSize(StateVector self) -> int

        Parameters:
            self: OpenSim::StateVector const *

        """
        return _opensim.StateVector_getSize(self)


    def setTime(self, aT):
        """
        setTime(StateVector self, double aT)

        Parameters:
            aT: double

        """
        return _opensim.StateVector_setTime(self, aT)


    def getTime(self):
        """
        getTime(StateVector self) -> double

        Parameters:
            self: OpenSim::StateVector const *

        """
        return _opensim.StateVector_getTime(self)


    def getDataValue(self, aIndex, rValue):
        """
        getDataValue(StateVector self, int aIndex, double & rValue) -> int

        Parameters:
            aIndex: int
            rValue: double &

        """
        return _opensim.StateVector_getDataValue(self, aIndex, rValue)


    def setDataValue(self, aIndex, aValue):
        """
        setDataValue(StateVector self, int aIndex, double & aValue)

        Parameters:
            aIndex: int
            aValue: double &

        """
        return _opensim.StateVector_setDataValue(self, aIndex, aValue)


    def getData(self):
        """
        getData(StateVector self) -> ArrayDouble

        Parameters:
            self: OpenSim::StateVector *

        """
        return _opensim.StateVector_getData(self)


    def shiftTime(self, aValue):
        """
        shiftTime(StateVector self, double aValue)

        Parameters:
            aValue: double

        """
        return _opensim.StateVector_shiftTime(self, aValue)


    def scaleTime(self, aValue):
        """
        scaleTime(StateVector self, double aValue)

        Parameters:
            aValue: double

        """
        return _opensim.StateVector_scaleTime(self, aValue)


    def add(self, *args):
        """
        add(StateVector self, double aValue)

        Parameters:
            aValue: double

        add(StateVector self, int aN, double [] aY)

        Parameters:
            aN: int
            aY: double []

        add(StateVector self, int aN, double aValue)

        Parameters:
            aN: int
            aValue: double

        add(StateVector self, StateVector aStateVector)

        Parameters:
            aStateVector: OpenSim::StateVector *

        """
        return _opensim.StateVector_add(self, *args)


    def subtract(self, *args):
        """
        subtract(StateVector self, double aValue)

        Parameters:
            aValue: double

        subtract(StateVector self, int aN, double [] aY)

        Parameters:
            aN: int
            aY: double []

        subtract(StateVector self, StateVector aStateVector)

        Parameters:
            aStateVector: OpenSim::StateVector *

        """
        return _opensim.StateVector_subtract(self, *args)


    def multiply(self, *args):
        """
        multiply(StateVector self, double aValue)

        Parameters:
            aValue: double

        multiply(StateVector self, int aN, double [] aY)

        Parameters:
            aN: int
            aY: double []

        multiply(StateVector self, StateVector aStateVector)

        Parameters:
            aStateVector: OpenSim::StateVector *

        """
        return _opensim.StateVector_multiply(self, *args)


    def divide(self, *args):
        """
        divide(StateVector self, double aValue)

        Parameters:
            aValue: double

        divide(StateVector self, int aN, double [] aY)

        Parameters:
            aN: int
            aY: double []

        divide(StateVector self, StateVector aStateVector)

        Parameters:
            aStateVector: OpenSim::StateVector *

        """
        return _opensim.StateVector_divide(self, *args)

StateVector_swigregister = _opensim.StateVector_swigregister
StateVector_swigregister(StateVector)

class StorageInterface(OpenSimObject):
    """Proxy of C++ OpenSim::StorageInterface class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StorageInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StorageInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> StorageInterface

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.StorageInterface_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(StorageInterface self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.StorageInterface_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.StorageInterface_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(StorageInterface self) -> StorageInterface

        Parameters:
            self: OpenSim::StorageInterface const *

        """
        return _opensim.StorageInterface_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(StorageInterface self) -> std::string const &

        Parameters:
            self: OpenSim::StorageInterface const *

        """
        return _opensim.StorageInterface_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_StorageInterface
    __del__ = lambda self: None

    def getSize(self):
        """
        getSize(StorageInterface self) -> int

        Parameters:
            self: OpenSim::StorageInterface const *

        """
        return _opensim.StorageInterface_getSize(self)


    def getStateVector(self, aTimeIndex):
        """
        getStateVector(StorageInterface self, int aTimeIndex) -> StateVector

        Parameters:
            aTimeIndex: int

        """
        return _opensim.StorageInterface_getStateVector(self, aTimeIndex)


    def getLastStateVector(self):
        """
        getLastStateVector(StorageInterface self) -> StateVector

        Parameters:
            self: OpenSim::StorageInterface const *

        """
        return _opensim.StorageInterface_getLastStateVector(self)


    def getFirstTime(self):
        """
        getFirstTime(StorageInterface self) -> double

        Parameters:
            self: OpenSim::StorageInterface const *

        """
        return _opensim.StorageInterface_getFirstTime(self)


    def getLastTime(self):
        """
        getLastTime(StorageInterface self) -> double

        Parameters:
            self: OpenSim::StorageInterface const *

        """
        return _opensim.StorageInterface_getLastTime(self)


    def getTimeColumn(self, rTimes, aStateIndex=-1):
        """
        getTimeColumn(StorageInterface self, ArrayDouble rTimes, int aStateIndex=-1) -> int

        Parameters:
            rTimes: OpenSim::Array< double > &
            aStateIndex: int

        getTimeColumn(StorageInterface self, ArrayDouble rTimes) -> int

        Parameters:
            rTimes: OpenSim::Array< double > &

        """
        return _opensim.StorageInterface_getTimeColumn(self, rTimes, aStateIndex)


    def getTimeColumnWithStartTime(self, rTimes, startTime=0.0):
        """
        getTimeColumnWithStartTime(StorageInterface self, ArrayDouble rTimes, double startTime=0.0)

        Parameters:
            rTimes: OpenSim::Array< double > &
            startTime: double

        getTimeColumnWithStartTime(StorageInterface self, ArrayDouble rTimes)

        Parameters:
            rTimes: OpenSim::Array< double > &

        """
        return _opensim.StorageInterface_getTimeColumnWithStartTime(self, rTimes, startTime)


    def getDataAtTime(self, aTime, aN, rData):
        """
        getDataAtTime(StorageInterface self, double aTime, int aN, ArrayDouble rData) -> int

        Parameters:
            aTime: double
            aN: int
            rData: OpenSim::Array< double > &

        """
        return _opensim.StorageInterface_getDataAtTime(self, aTime, aN, rData)


    def getDataColumn(self, columnName, data, startTime=0.0):
        """
        getDataColumn(StorageInterface self, std::string const & columnName, ArrayDouble data, double startTime=0.0)

        Parameters:
            columnName: std::string const &
            data: OpenSim::Array< double > &
            startTime: double

        getDataColumn(StorageInterface self, std::string const & columnName, ArrayDouble data)

        Parameters:
            columnName: std::string const &
            data: OpenSim::Array< double > &

        """
        return _opensim.StorageInterface_getDataColumn(self, columnName, data, startTime)


    def append(self, *args):
        """
        append(StorageInterface self, StateVector aVec, bool aCheckForDuplicateTime=True) -> int

        Parameters:
            aVec: OpenSim::StateVector const &
            aCheckForDuplicateTime: bool

        append(StorageInterface self, StateVector aVec) -> int

        Parameters:
            aVec: OpenSim::StateVector const &

        append(StorageInterface self, OpenSim::Array< OpenSim::StateVector > const & aArray) -> int

        Parameters:
            aArray: OpenSim::Array< OpenSim::StateVector > const &

        append(StorageInterface self, double aT, int aN, double const * aY, bool aCheckForDuplicateTime=True) -> int

        Parameters:
            aT: double
            aN: int
            aY: double const *
            aCheckForDuplicateTime: bool

        append(StorageInterface self, double aT, int aN, double const * aY) -> int

        Parameters:
            aT: double
            aN: int
            aY: double const *

        append(StorageInterface self, double aT, Vector aY, bool aCheckForDuplicateTime=True) -> int

        Parameters:
            aT: double
            aY: SimTK::Vector const &
            aCheckForDuplicateTime: bool

        append(StorageInterface self, double aT, Vector aY) -> int

        Parameters:
            aT: double
            aY: SimTK::Vector const &

        append(StorageInterface self, double aT, Vec3 aY, bool aCheckForDuplicateTime=True) -> int

        Parameters:
            aT: double
            aY: SimTK::Vec3 const &
            aCheckForDuplicateTime: bool

        append(StorageInterface self, double aT, Vec3 aY) -> int

        Parameters:
            aT: double
            aY: SimTK::Vec3 const &

        """
        return _opensim.StorageInterface_append(self, *args)


    def store(self, aStep, aT, aN, aY):
        """
        store(StorageInterface self, int aStep, double aT, int aN, double const * aY) -> int

        Parameters:
            aStep: int
            aT: double
            aN: int
            aY: double const *

        """
        return _opensim.StorageInterface_store(self, aStep, aT, aN, aY)


    def findIndex(self, *args):
        """
        findIndex(StorageInterface self, double aT) -> int

        Parameters:
            aT: double

        findIndex(StorageInterface self, int aI, double aT) -> int

        Parameters:
            aI: int
            aT: double

        """
        return _opensim.StorageInterface_findIndex(self, *args)


    def setOutputFileName(self, aFileName):
        """
        setOutputFileName(StorageInterface self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.StorageInterface_setOutputFileName(self, aFileName)

StorageInterface_swigregister = _opensim.StorageInterface_swigregister
StorageInterface_swigregister(StorageInterface)

def StorageInterface_safeDownCast(obj):
    """
    StorageInterface_safeDownCast(OpenSimObject obj) -> StorageInterface

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.StorageInterface_safeDownCast(obj)

def StorageInterface_getClassName():
    """StorageInterface_getClassName() -> std::string const &"""
    return _opensim.StorageInterface_getClassName()

class Storage(StorageInterface):
    """Proxy of C++ OpenSim::Storage class"""
    __swig_setmethods__ = {}
    for _s in [StorageInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Storage, name, value)
    __swig_getmethods__ = {}
    for _s in [StorageInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Storage, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Storage

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Storage_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Storage self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Storage_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Storage_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Storage self) -> Storage

        Parameters:
            self: OpenSim::Storage const *

        """
        return _opensim.Storage_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Storage self) -> std::string const &

        Parameters:
            self: OpenSim::Storage const *

        """
        return _opensim.Storage_getConcreteClassName(self)

    __swig_setmethods__["DEFAULT_HEADER_TOKEN"] = _opensim.Storage_DEFAULT_HEADER_TOKEN_set
    __swig_getmethods__["DEFAULT_HEADER_TOKEN"] = _opensim.Storage_DEFAULT_HEADER_TOKEN_get
    if _newclass:
        DEFAULT_HEADER_TOKEN = _swig_property(_opensim.Storage_DEFAULT_HEADER_TOKEN_get, _opensim.Storage_DEFAULT_HEADER_TOKEN_set)
    __swig_setmethods__["DEFAULT_HEADER_SEPARATOR"] = _opensim.Storage_DEFAULT_HEADER_SEPARATOR_set
    __swig_getmethods__["DEFAULT_HEADER_SEPARATOR"] = _opensim.Storage_DEFAULT_HEADER_SEPARATOR_get
    if _newclass:
        DEFAULT_HEADER_SEPARATOR = _swig_property(_opensim.Storage_DEFAULT_HEADER_SEPARATOR_get, _opensim.Storage_DEFAULT_HEADER_SEPARATOR_set)

    def __init__(self, *args):
        """
        __init__(OpenSim::Storage self, int aCapacity, std::string const & aName) -> Storage

        Parameters:
            aCapacity: int
            aName: std::string const &

        __init__(OpenSim::Storage self, int aCapacity) -> Storage

        Parameters:
            aCapacity: int

        __init__(OpenSim::Storage self) -> Storage
        __init__(OpenSim::Storage self, std::string const & aFileName, bool readHeadersOnly=False) -> Storage

        Parameters:
            aFileName: std::string const &
            readHeadersOnly: bool

        __init__(OpenSim::Storage self, std::string const & aFileName) -> Storage

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Storage self, Storage aStorage, bool aCopyData=True) -> Storage

        Parameters:
            aStorage: OpenSim::Storage const &
            aCopyData: bool

        __init__(OpenSim::Storage self, Storage aStorage) -> Storage

        Parameters:
            aStorage: OpenSim::Storage const &

        __init__(OpenSim::Storage self, Storage aStorage, int aStateIndex, int aN, char const * aDelimiter) -> Storage

        Parameters:
            aStorage: OpenSim::Storage const &
            aStateIndex: int
            aN: int
            aDelimiter: char const *

        __init__(OpenSim::Storage self, Storage aStorage, int aStateIndex, int aN) -> Storage

        Parameters:
            aStorage: OpenSim::Storage const &
            aStateIndex: int
            aN: int

        """
        this = _opensim.new_Storage(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_Storage
    __del__ = lambda self: None

    def getName(self):
        """
        getName(Storage self) -> std::string const &

        Parameters:
            self: OpenSim::Storage const *

        """
        return _opensim.Storage_getName(self)


    def getDescription(self):
        """
        getDescription(Storage self) -> std::string const &

        Parameters:
            self: OpenSim::Storage const *

        """
        return _opensim.Storage_getDescription(self)


    def setName(self, aName):
        """
        setName(Storage self, std::string const & aName)

        Parameters:
            aName: std::string const &

        """
        return _opensim.Storage_setName(self, aName)


    def setDescription(self, aDescription):
        """
        setDescription(Storage self, std::string const & aDescription)

        Parameters:
            aDescription: std::string const &

        """
        return _opensim.Storage_setDescription(self, aDescription)


    def getLatestVersion():
        """getLatestVersion() -> int const &"""
        return _opensim.Storage_getLatestVersion()

    if _newclass:
        getLatestVersion = staticmethod(getLatestVersion)
    __swig_getmethods__["getLatestVersion"] = lambda x: getLatestVersion

    def getFileVersion(self):
        """
        getFileVersion(Storage self) -> int const &

        Parameters:
            self: OpenSim::Storage const *

        """
        return _opensim.Storage_getFileVersion(self)


    def getSize(self):
        """
        getSize(Storage self) -> int

        Parameters:
            self: OpenSim::Storage const *

        """
        return _opensim.Storage_getSize(self)


    def getSmallestNumberOfStates(self):
        """
        getSmallestNumberOfStates(Storage self) -> int

        Parameters:
            self: OpenSim::Storage const *

        """
        return _opensim.Storage_getSmallestNumberOfStates(self)


    def getStateVector(self, aTimeIndex):
        """
        getStateVector(Storage self, int aTimeIndex) -> StateVector

        Parameters:
            aTimeIndex: int

        """
        return _opensim.Storage_getStateVector(self, aTimeIndex)


    def getLastStateVector(self):
        """
        getLastStateVector(Storage self) -> StateVector

        Parameters:
            self: OpenSim::Storage const *

        """
        return _opensim.Storage_getLastStateVector(self)


    def getFirstTime(self):
        """
        getFirstTime(Storage self) -> double

        Parameters:
            self: OpenSim::Storage const *

        """
        return _opensim.Storage_getFirstTime(self)


    def getLastTime(self):
        """
        getLastTime(Storage self) -> double

        Parameters:
            self: OpenSim::Storage const *

        """
        return _opensim.Storage_getLastTime(self)


    def getMinTimeStep(self):
        """
        getMinTimeStep(Storage self) -> double

        Parameters:
            self: OpenSim::Storage const *

        """
        return _opensim.Storage_getMinTimeStep(self)


    def getTime(self, aTimeIndex, rTime, aStateIndex=-1):
        """
        getTime(Storage self, int aTimeIndex, double & rTime, int aStateIndex=-1) -> bool

        Parameters:
            aTimeIndex: int
            rTime: double &
            aStateIndex: int

        getTime(Storage self, int aTimeIndex, double & rTime) -> bool

        Parameters:
            aTimeIndex: int
            rTime: double &

        """
        return _opensim.Storage_getTime(self, aTimeIndex, rTime, aStateIndex)


    def getTimeColumn(self, *args):
        """
        getTimeColumn(Storage self, double *& rTimes, int aStateIndex=-1) -> int

        Parameters:
            rTimes: double *&
            aStateIndex: int

        getTimeColumn(Storage self, double *& rTimes) -> int

        Parameters:
            rTimes: double *&

        getTimeColumn(Storage self, ArrayDouble rTimes, int aStateIndex=-1) -> int

        Parameters:
            rTimes: OpenSim::Array< double > &
            aStateIndex: int

        getTimeColumn(Storage self, ArrayDouble rTimes) -> int

        Parameters:
            rTimes: OpenSim::Array< double > &

        """
        return _opensim.Storage_getTimeColumn(self, *args)


    def getTimeColumnWithStartTime(self, rTimes, startTime=0.0):
        """
        getTimeColumnWithStartTime(Storage self, ArrayDouble rTimes, double startTime=0.0)

        Parameters:
            rTimes: OpenSim::Array< double > &
            startTime: double

        getTimeColumnWithStartTime(Storage self, ArrayDouble rTimes)

        Parameters:
            rTimes: OpenSim::Array< double > &

        """
        return _opensim.Storage_getTimeColumnWithStartTime(self, rTimes, startTime)


    def addKeyValuePair(self, aKey, aValue):
        """
        addKeyValuePair(Storage self, std::string const & aKey, std::string const & aValue)

        Parameters:
            aKey: std::string const &
            aValue: std::string const &

        """
        return _opensim.Storage_addKeyValuePair(self, aKey, aValue)


    def getValueForKey(self, aKey, rValue):
        """
        getValueForKey(Storage self, std::string const & aKey, std::string & rValue)

        Parameters:
            aKey: std::string const &
            rValue: std::string &

        """
        return _opensim.Storage_getValueForKey(self, aKey, rValue)


    def hasKey(self, aKey):
        """
        hasKey(Storage self, std::string const & aKey) -> bool

        Parameters:
            aKey: std::string const &

        """
        return _opensim.Storage_hasKey(self, aKey)


    def isInDegrees(self):
        """
        isInDegrees(Storage self) -> bool const

        Parameters:
            self: OpenSim::Storage const *

        """
        return _opensim.Storage_isInDegrees(self)


    def setInDegrees(self, isInDegrees):
        """
        setInDegrees(Storage self, bool const isInDegrees)

        Parameters:
            isInDegrees: bool const

        """
        return _opensim.Storage_setInDegrees(self, isInDegrees)


    def getData(self, *args):
        """
        getData(Storage self, int aTimeIndex, int aStateIndex, double & rValue) -> int

        Parameters:
            aTimeIndex: int
            aStateIndex: int
            rValue: double &

        getData(Storage self, int aTimeIndex, int aStateIndex, int aN, double ** rData) -> int

        Parameters:
            aTimeIndex: int
            aStateIndex: int
            aN: int
            rData: double **

        """
        return _opensim.Storage_getData(self, *args)


    def getDataAtTime(self, *args):
        """
        getDataAtTime(Storage self, double aTime, int aN, double ** rData) -> int

        Parameters:
            aTime: double
            aN: int
            rData: double **

        getDataAtTime(Storage self, double aTime, int aN, double * rData) -> int

        Parameters:
            aTime: double
            aN: int
            rData: double *

        getDataAtTime(Storage self, double aTime, int aN, ArrayDouble rData) -> int

        Parameters:
            aTime: double
            aN: int
            rData: OpenSim::Array< double > &

        getDataAtTime(Storage self, double aTime, int aN, Vector v) -> int

        Parameters:
            aTime: double
            aN: int
            v: SimTK::Vector &

        """
        return _opensim.Storage_getDataAtTime(self, *args)


    def setDataColumnToFixedValue(self, columnName, newValue):
        """
        setDataColumnToFixedValue(Storage self, std::string const & columnName, double newValue)

        Parameters:
            columnName: std::string const &
            newValue: double

        """
        return _opensim.Storage_setDataColumnToFixedValue(self, columnName, newValue)


    def setDataColumn(self, aStateIndex, aData):
        """
        setDataColumn(Storage self, int aStateIndex, ArrayDouble aData)

        Parameters:
            aStateIndex: int
            aData: OpenSim::Array< double > const &

        """
        return _opensim.Storage_setDataColumn(self, aStateIndex, aData)


    def getDataColumn(self, *args):
        """
        getDataColumn(Storage self, int aStateIndex, double *& rData) -> int

        Parameters:
            aStateIndex: int
            rData: double *&

        getDataColumn(Storage self, int aStateIndex, ArrayDouble rData) -> int

        Parameters:
            aStateIndex: int
            rData: OpenSim::Array< double > &

        getDataColumn(Storage self, std::string const & columnName, double *& rData) -> int

        Parameters:
            columnName: std::string const &
            rData: double *&

        getDataColumn(Storage self, std::string const & columnName, ArrayDouble data, double startTime=0.0)

        Parameters:
            columnName: std::string const &
            data: OpenSim::Array< double > &
            startTime: double

        getDataColumn(Storage self, std::string const & columnName, ArrayDouble data)

        Parameters:
            columnName: std::string const &
            data: OpenSim::Array< double > &

        """
        return _opensim.Storage_getDataColumn(self, *args)


    def getDataForIdentifier(self, identifier, rData, startTime=0.0):
        """
        getDataForIdentifier(Storage self, std::string const & identifier, OpenSim::Array< OpenSim::Array< double > > & rData, double startTime=0.0)

        Parameters:
            identifier: std::string const &
            rData: OpenSim::Array< OpenSim::Array< double > > &
            startTime: double

        getDataForIdentifier(Storage self, std::string const & identifier, OpenSim::Array< OpenSim::Array< double > > & rData)

        Parameters:
            identifier: std::string const &
            rData: OpenSim::Array< OpenSim::Array< double > > &

        """
        return _opensim.Storage_getDataForIdentifier(self, identifier, rData, startTime)


    def getColumnIndicesForIdentifier(self, identifier):
        """
        getColumnIndicesForIdentifier(Storage self, std::string const & identifier) -> ArrayInt

        Parameters:
            identifier: std::string const &

        """
        return _opensim.Storage_getColumnIndicesForIdentifier(self, identifier)


    def setStepInterval(self, aStepInterval):
        """
        setStepInterval(Storage self, int aStepInterval)

        Parameters:
            aStepInterval: int

        """
        return _opensim.Storage_setStepInterval(self, aStepInterval)


    def getStepInterval(self):
        """
        getStepInterval(Storage self) -> int

        Parameters:
            self: OpenSim::Storage const *

        """
        return _opensim.Storage_getStepInterval(self)


    def setCapacityIncrement(self, aIncrement):
        """
        setCapacityIncrement(Storage self, int aIncrement)

        Parameters:
            aIncrement: int

        """
        return _opensim.Storage_setCapacityIncrement(self, aIncrement)


    def getCapacityIncrement(self):
        """
        getCapacityIncrement(Storage self) -> int

        Parameters:
            self: OpenSim::Storage const *

        """
        return _opensim.Storage_getCapacityIncrement(self)


    def setWriteSIMMHeader(self, aTrueFalse):
        """
        setWriteSIMMHeader(Storage self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.Storage_setWriteSIMMHeader(self, aTrueFalse)


    def getWriteSIMMHeader(self):
        """
        getWriteSIMMHeader(Storage self) -> bool

        Parameters:
            self: OpenSim::Storage const *

        """
        return _opensim.Storage_getWriteSIMMHeader(self)


    def setHeaderToken(self, aToken):
        """
        setHeaderToken(Storage self, std::string const & aToken)

        Parameters:
            aToken: std::string const &

        """
        return _opensim.Storage_setHeaderToken(self, aToken)


    def getHeaderToken(self):
        """
        getHeaderToken(Storage self) -> std::string const &

        Parameters:
            self: OpenSim::Storage const *

        """
        return _opensim.Storage_getHeaderToken(self)


    def getStateIndex(self, aColumnName, startIndex=0):
        """
        getStateIndex(Storage self, std::string const & aColumnName, int startIndex=0) -> int const

        Parameters:
            aColumnName: std::string const &
            startIndex: int

        getStateIndex(Storage self, std::string const & aColumnName) -> int const

        Parameters:
            aColumnName: std::string const &

        """
        return _opensim.Storage_getStateIndex(self, aColumnName, startIndex)


    def setColumnLabels(self, aColumnLabels):
        """
        setColumnLabels(Storage self, ArrayStr aColumnLabels)

        Parameters:
            aColumnLabels: OpenSim::Array< std::string > const &

        """
        return _opensim.Storage_setColumnLabels(self, aColumnLabels)


    def getColumnLabels(self):
        """
        getColumnLabels(Storage self) -> ArrayStr

        Parameters:
            self: OpenSim::Storage const *

        """
        return _opensim.Storage_getColumnLabels(self)


    def reset(self, *args):
        """
        reset(Storage self, int aIndex=0) -> int

        Parameters:
            aIndex: int

        reset(Storage self) -> int
        reset(Storage self, double aTime) -> int

        Parameters:
            aTime: double

        """
        return _opensim.Storage_reset(self, *args)


    def purge(self):
        """
        purge(Storage self)

        Parameters:
            self: OpenSim::Storage *

        """
        return _opensim.Storage_purge(self)


    def crop(self, newStartTime, newFinalTime):
        """
        crop(Storage self, double const newStartTime, double const newFinalTime)

        Parameters:
            newStartTime: double const
            newFinalTime: double const

        """
        return _opensim.Storage_crop(self, newStartTime, newFinalTime)


    def append(self, *args):
        """
        append(Storage self, StateVector aVec, bool aCheckForDuplicateTime=True) -> int

        Parameters:
            aVec: OpenSim::StateVector const &
            aCheckForDuplicateTime: bool

        append(Storage self, StateVector aVec) -> int

        Parameters:
            aVec: OpenSim::StateVector const &

        append(Storage self, OpenSim::Array< OpenSim::StateVector > const & aArray) -> int

        Parameters:
            aArray: OpenSim::Array< OpenSim::StateVector > const &

        append(Storage self, double aT, int aN, double const * aY, bool aCheckForDuplicateTime=True) -> int

        Parameters:
            aT: double
            aN: int
            aY: double const *
            aCheckForDuplicateTime: bool

        append(Storage self, double aT, int aN, double const * aY) -> int

        Parameters:
            aT: double
            aN: int
            aY: double const *

        append(Storage self, double aT, Vector aY, bool aCheckForDuplicateTime=True) -> int

        Parameters:
            aT: double
            aY: SimTK::Vector const &
            aCheckForDuplicateTime: bool

        append(Storage self, double aT, Vector aY) -> int

        Parameters:
            aT: double
            aY: SimTK::Vector const &

        append(Storage self, double aT, ArrayDouble aY, bool aCheckForDuplicateTime=True) -> int

        Parameters:
            aT: double
            aY: OpenSim::Array< double > const &
            aCheckForDuplicateTime: bool

        append(Storage self, double aT, ArrayDouble aY) -> int

        Parameters:
            aT: double
            aY: OpenSim::Array< double > const &

        append(Storage self, double aT, Vec3 aY, bool aCheckForDuplicateTime=True) -> int

        Parameters:
            aT: double
            aY: SimTK::Vec3 const &
            aCheckForDuplicateTime: bool

        append(Storage self, double aT, Vec3 aY) -> int

        Parameters:
            aT: double
            aY: SimTK::Vec3 const &

        """
        return _opensim.Storage_append(self, *args)


    def store(self, aStep, aT, aN, aY):
        """
        store(Storage self, int aStep, double aT, int aN, double const * aY) -> int

        Parameters:
            aStep: int
            aT: double
            aN: int
            aY: double const *

        """
        return _opensim.Storage_store(self, aStep, aT, aN, aY)


    def shiftTime(self, aValue):
        """
        shiftTime(Storage self, double aValue)

        Parameters:
            aValue: double

        """
        return _opensim.Storage_shiftTime(self, aValue)


    def scaleTime(self, aValue):
        """
        scaleTime(Storage self, double aValue)

        Parameters:
            aValue: double

        """
        return _opensim.Storage_scaleTime(self, aValue)


    def add(self, *args):
        """
        add(Storage self, double aValue)

        Parameters:
            aValue: double

        add(Storage self, int aN, double [] aY)

        Parameters:
            aN: int
            aY: double []

        add(Storage self, int aN, double aValue)

        Parameters:
            aN: int
            aValue: double

        add(Storage self, StateVector aStateVector)

        Parameters:
            aStateVector: OpenSim::StateVector *

        add(Storage self, Storage aStorage)

        Parameters:
            aStorage: OpenSim::Storage *

        """
        return _opensim.Storage_add(self, *args)


    def subtract(self, *args):
        """
        subtract(Storage self, double aValue)

        Parameters:
            aValue: double

        subtract(Storage self, int aN, double [] aY)

        Parameters:
            aN: int
            aY: double []

        subtract(Storage self, StateVector aStateVector)

        Parameters:
            aStateVector: OpenSim::StateVector *

        subtract(Storage self, Storage aStorage)

        Parameters:
            aStorage: OpenSim::Storage *

        """
        return _opensim.Storage_subtract(self, *args)


    def multiplyColumn(self, aIndex, aValue):
        """
        multiplyColumn(Storage self, int aIndex, double aValue)

        Parameters:
            aIndex: int
            aValue: double

        """
        return _opensim.Storage_multiplyColumn(self, aIndex, aValue)


    def multiply(self, *args):
        """
        multiply(Storage self, double aValue)

        Parameters:
            aValue: double

        multiply(Storage self, int aN, double [] aY)

        Parameters:
            aN: int
            aY: double []

        multiply(Storage self, StateVector aStateVector)

        Parameters:
            aStateVector: OpenSim::StateVector *

        multiply(Storage self, Storage aStorage)

        Parameters:
            aStorage: OpenSim::Storage *

        """
        return _opensim.Storage_multiply(self, *args)


    def divide(self, *args):
        """
        divide(Storage self, double aValue)

        Parameters:
            aValue: double

        divide(Storage self, int aN, double [] aY)

        Parameters:
            aN: int
            aY: double []

        divide(Storage self, StateVector aStateVector)

        Parameters:
            aStateVector: OpenSim::StateVector *

        divide(Storage self, Storage aStorage)

        Parameters:
            aStorage: OpenSim::Storage *

        """
        return _opensim.Storage_divide(self, *args)


    def integrate(self, *args):
        """
        integrate(Storage self, int aI1=-2, int aI2=-1) -> Storage

        Parameters:
            aI1: int
            aI2: int

        integrate(Storage self, int aI1=-2) -> Storage

        Parameters:
            aI1: int

        integrate(Storage self) -> Storage
        integrate(Storage self, double aT1, double aT2) -> Storage

        Parameters:
            aT1: double
            aT2: double

        """
        return _opensim.Storage_integrate(self, *args)


    def computeArea(self, *args):
        """
        computeArea(Storage self, int aN, double * aArea) -> int

        Parameters:
            aN: int
            aArea: double *

        computeArea(Storage self, double aTI, double aTF, int aN, double * aArea) -> int

        Parameters:
            aTI: double
            aTF: double
            aN: int
            aArea: double *

        """
        return _opensim.Storage_computeArea(self, *args)


    def computeAverage(self, *args):
        """
        computeAverage(Storage self, int aN, double * aAve) -> int

        Parameters:
            aN: int
            aAve: double *

        computeAverage(Storage self, double aTI, double aTF, int aN, double * aAve) -> int

        Parameters:
            aTI: double
            aTF: double
            aN: int
            aAve: double *

        """
        return _opensim.Storage_computeAverage(self, *args)


    def pad(self, aPadSize):
        """
        pad(Storage self, int aPadSize)

        Parameters:
            aPadSize: int

        """
        return _opensim.Storage_pad(self, aPadSize)


    def smoothSpline(self, aOrder, aCutoffFrequency):
        """
        smoothSpline(Storage self, int aOrder, double aCutoffFrequency)

        Parameters:
            aOrder: int
            aCutoffFrequency: double

        """
        return _opensim.Storage_smoothSpline(self, aOrder, aCutoffFrequency)


    def lowpassIIR(self, aCutoffFequency):
        """
        lowpassIIR(Storage self, double aCutoffFequency)

        Parameters:
            aCutoffFequency: double

        """
        return _opensim.Storage_lowpassIIR(self, aCutoffFequency)


    def lowpassFIR(self, aOrder, aCutoffFequency):
        """
        lowpassFIR(Storage self, int aOrder, double aCutoffFequency)

        Parameters:
            aOrder: int
            aCutoffFequency: double

        """
        return _opensim.Storage_lowpassFIR(self, aOrder, aCutoffFequency)


    def addToRdStorage(self, rStorage, aStartTime, aEndTime):
        """
        addToRdStorage(Storage self, Storage rStorage, double aStartTime, double aEndTime)

        Parameters:
            rStorage: OpenSim::Storage &
            aStartTime: double
            aEndTime: double

        """
        return _opensim.Storage_addToRdStorage(self, rStorage, aStartTime, aEndTime)


    def findIndex(self, *args):
        """
        findIndex(Storage self, double aT) -> int

        Parameters:
            aT: double

        findIndex(Storage self, int aI, double aT) -> int

        Parameters:
            aI: int
            aT: double

        """
        return _opensim.Storage_findIndex(self, *args)


    def findFrameRange(self, aStartTime, aEndTime, oStartFrame, oEndFrame):
        """
        findFrameRange(Storage self, double aStartTime, double aEndTime, int & oStartFrame, int & oEndFrame)

        Parameters:
            aStartTime: double
            aEndTime: double
            oStartFrame: int &
            oEndFrame: int &

        """
        return _opensim.Storage_findFrameRange(self, aStartTime, aEndTime, oStartFrame, oEndFrame)


    def resample(self, aDT, aDegree):
        """
        resample(Storage self, double aDT, int aDegree) -> double

        Parameters:
            aDT: double
            aDegree: int

        """
        return _opensim.Storage_resample(self, aDT, aDegree)


    def resampleLinear(self, aDT):
        """
        resampleLinear(Storage self, double aDT) -> double

        Parameters:
            aDT: double

        """
        return _opensim.Storage_resampleLinear(self, aDT)


    def compareColumn(self, aOtherStorage, aColumnName, startTime, endTime=-1.0):
        """
        compareColumn(Storage self, Storage aOtherStorage, std::string const & aColumnName, double startTime, double endTime=-1.0) -> double

        Parameters:
            aOtherStorage: OpenSim::Storage &
            aColumnName: std::string const &
            startTime: double
            endTime: double

        compareColumn(Storage self, Storage aOtherStorage, std::string const & aColumnName, double startTime) -> double

        Parameters:
            aOtherStorage: OpenSim::Storage &
            aColumnName: std::string const &
            startTime: double

        """
        return _opensim.Storage_compareColumn(self, aOtherStorage, aColumnName, startTime, endTime)


    def compareColumnRMS(self, *args):
        """
        compareColumnRMS(Storage self, Storage aOtherStorage, std::string const & aColumnName, double startTime, double endTime) -> double

        Parameters:
            aOtherStorage: OpenSim::Storage &
            aColumnName: std::string const &
            startTime: double
            endTime: double

        compareColumnRMS(Storage self, Storage aOtherStorage, std::string const & aColumnName, double startTime) -> double

        Parameters:
            aOtherStorage: OpenSim::Storage &
            aColumnName: std::string const &
            startTime: double

        compareColumnRMS(Storage self, Storage aOtherStorage, std::string const & aColumnName) -> double

        Parameters:
            aOtherStorage: OpenSim::Storage &
            aColumnName: std::string const &

        """
        return _opensim.Storage_compareColumnRMS(self, *args)


    def compareWithStandard(self, standard, columnsUsed, comparisons):
        """
        compareWithStandard(Storage self, Storage standard, ArrayStr columnsUsed, ArrayDouble comparisons)

        Parameters:
            standard: OpenSim::Storage &
            columnsUsed: OpenSim::Array< std::string > &
            comparisons: OpenSim::Array< double > &

        """
        return _opensim.Storage_compareWithStandard(self, standard, columnsUsed, comparisons)


    def makeStorageLabelsUnique(self):
        """
        makeStorageLabelsUnique(Storage self) -> bool

        Parameters:
            self: OpenSim::Storage *

        """
        return _opensim.Storage_makeStorageLabelsUnique(self)


    def printToFile(self, *args):
        """
        printToFile(Storage self, std::string const & aFileName, std::string const & aMode, std::string const & aComment) -> bool

        Parameters:
            aFileName: std::string const &
            aMode: std::string const &
            aComment: std::string const &

        printToFile(Storage self, std::string const & aFileName, std::string const & aMode) -> bool

        Parameters:
            aFileName: std::string const &
            aMode: std::string const &

        printToFile(Storage self, std::string const & aFileName) -> bool

        Parameters:
            aFileName: std::string const &

        printToFile(Storage self, std::string const & aFileName, double aDT, std::string const & aMode) -> int

        Parameters:
            aFileName: std::string const &
            aDT: double
            aMode: std::string const &

        printToFile(Storage self, std::string const & aFileName, double aDT) -> int

        Parameters:
            aFileName: std::string const &
            aDT: double

        """
        return _opensim.Storage_printToFile(self, *args)


    def setOutputFileName(self, aFileName):
        """
        setOutputFileName(Storage self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.Storage_setOutputFileName(self, aFileName)


    def printResult(aStorage, aName, aDir, aDT, aExtension):
        """
        printResult(Storage aStorage, std::string const & aName, std::string const & aDir, double aDT, std::string const & aExtension)

        Parameters:
            aStorage: OpenSim::Storage const *
            aName: std::string const &
            aDir: std::string const &
            aDT: double
            aExtension: std::string const &

        """
        return _opensim.Storage_printResult(aStorage, aName, aDir, aDT, aExtension)

    if _newclass:
        printResult = staticmethod(printResult)
    __swig_getmethods__["printResult"] = lambda x: printResult

    def interpolateAt(self, targetTimes):
        """
        interpolateAt(Storage self, ArrayDouble targetTimes)

        Parameters:
            targetTimes: OpenSim::Array< double > const &

        """
        return _opensim.Storage_interpolateAt(self, targetTimes)

Storage_swigregister = _opensim.Storage_swigregister
Storage_swigregister(Storage)
Storage_DEFAULT_CAPACITY = cvar.Storage_DEFAULT_CAPACITY

def Storage_safeDownCast(obj):
    """
    Storage_safeDownCast(OpenSimObject obj) -> Storage

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Storage_safeDownCast(obj)

def Storage_getClassName():
    """Storage_getClassName() -> std::string const &"""
    return _opensim.Storage_getClassName()
Storage.MAX_RESAMPLE_SIZE = _opensim.cvar.Storage_MAX_RESAMPLE_SIZE

def Storage_getLatestVersion():
    """Storage_getLatestVersion() -> int const &"""
    return _opensim.Storage_getLatestVersion()

def Storage_printResult(aStorage, aName, aDir, aDT, aExtension):
    """
    Storage_printResult(Storage aStorage, std::string const & aName, std::string const & aDir, double aDT, std::string const & aExtension)

    Parameters:
        aStorage: OpenSim::Storage const *
        aName: std::string const &
        aDir: std::string const &
        aDT: double
        aExtension: std::string const &

    """
    return _opensim.Storage_printResult(aStorage, aName, aDir, aDT, aExtension)

class Units(_object):
    """Proxy of C++ OpenSim::Units class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Units, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Units, name)
    __repr__ = _swig_repr
    UnknownUnits = _opensim.Units_UnknownUnits
    Radians = _opensim.Units_Radians
    Degrees = _opensim.Units_Degrees
    Millimeters = _opensim.Units_Millimeters
    Centimeters = _opensim.Units_Centimeters
    Meters = _opensim.Units_Meters
    Seconds = _opensim.Units_Seconds
    Milliseconds = _opensim.Units_Milliseconds
    Newtons = _opensim.Units_Newtons

    def __init__(self, *args):
        """
        __init__(OpenSim::Units self) -> Units
        __init__(OpenSim::Units self, Units aUnits) -> Units

        Parameters:
            aUnits: OpenSim::Units const &

        __init__(OpenSim::Units self, std::string const aString) -> Units

        Parameters:
            aString: std::string const

        __init__(OpenSim::Units self, OpenSim::Units::UnitType aType) -> Units

        Parameters:
            aType: enum OpenSim::Units::UnitType

        """
        this = _opensim.new_Units(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_Units
    __del__ = lambda self: None

    def convertTo(self, *args):
        """
        convertTo(Units self, OpenSim::Units::UnitType aType, double aValue) -> double

        Parameters:
            aType: enum OpenSim::Units::UnitType
            aValue: double

        convertTo(Units self, OpenSim::Units::UnitType aType) -> double

        Parameters:
            aType: enum OpenSim::Units::UnitType

        convertTo(Units self, Units aUnit) -> double

        Parameters:
            aUnit: OpenSim::Units const &

        """
        return _opensim.Units_convertTo(self, *args)


    def getType(self):
        """
        getType(Units self) -> OpenSim::Units::UnitType

        Parameters:
            self: OpenSim::Units const *

        """
        return _opensim.Units_getType(self)


    def getLabel(self):
        """
        getLabel(Units self) -> std::string

        Parameters:
            self: OpenSim::Units const *

        """
        return _opensim.Units_getLabel(self)


    def getAbbreviation(self):
        """
        getAbbreviation(Units self) -> std::string

        Parameters:
            self: OpenSim::Units const *

        """
        return _opensim.Units_getAbbreviation(self)

Units_swigregister = _opensim.Units_swigregister
Units_swigregister(Units)

class IO(_object):
    """Proxy of C++ OpenSim::IO class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IO, name)
    __repr__ = _swig_repr

    def ConstructDateAndTimeStamp():
        """ConstructDateAndTimeStamp() -> char *"""
        return _opensim.IO_ConstructDateAndTimeStamp()

    if _newclass:
        ConstructDateAndTimeStamp = staticmethod(ConstructDateAndTimeStamp)
    __swig_getmethods__["ConstructDateAndTimeStamp"] = lambda x: ConstructDateAndTimeStamp

    def FixSlashesInFilePath(path):
        """
        FixSlashesInFilePath(std::string const & path) -> std::string

        Parameters:
            path: std::string const &

        """
        return _opensim.IO_FixSlashesInFilePath(path)

    if _newclass:
        FixSlashesInFilePath = staticmethod(FixSlashesInFilePath)
    __swig_getmethods__["FixSlashesInFilePath"] = lambda x: FixSlashesInFilePath

    def SetScientific(aTrueFalse):
        """
        SetScientific(bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.IO_SetScientific(aTrueFalse)

    if _newclass:
        SetScientific = staticmethod(SetScientific)
    __swig_getmethods__["SetScientific"] = lambda x: SetScientific

    def GetScientific():
        """GetScientific() -> bool"""
        return _opensim.IO_GetScientific()

    if _newclass:
        GetScientific = staticmethod(GetScientific)
    __swig_getmethods__["GetScientific"] = lambda x: GetScientific

    def SetGFormatForDoubleOutput(aTrueFalse):
        """
        SetGFormatForDoubleOutput(bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.IO_SetGFormatForDoubleOutput(aTrueFalse)

    if _newclass:
        SetGFormatForDoubleOutput = staticmethod(SetGFormatForDoubleOutput)
    __swig_getmethods__["SetGFormatForDoubleOutput"] = lambda x: SetGFormatForDoubleOutput

    def GetGFormatForDoubleOutput():
        """GetGFormatForDoubleOutput() -> bool"""
        return _opensim.IO_GetGFormatForDoubleOutput()

    if _newclass:
        GetGFormatForDoubleOutput = staticmethod(GetGFormatForDoubleOutput)
    __swig_getmethods__["GetGFormatForDoubleOutput"] = lambda x: GetGFormatForDoubleOutput

    def SetDigitsPad(aPad):
        """
        SetDigitsPad(int aPad)

        Parameters:
            aPad: int

        """
        return _opensim.IO_SetDigitsPad(aPad)

    if _newclass:
        SetDigitsPad = staticmethod(SetDigitsPad)
    __swig_getmethods__["SetDigitsPad"] = lambda x: SetDigitsPad

    def GetDigitsPad():
        """GetDigitsPad() -> int"""
        return _opensim.IO_GetDigitsPad()

    if _newclass:
        GetDigitsPad = staticmethod(GetDigitsPad)
    __swig_getmethods__["GetDigitsPad"] = lambda x: GetDigitsPad

    def SetPrecision(aPlaces):
        """
        SetPrecision(int aPlaces)

        Parameters:
            aPlaces: int

        """
        return _opensim.IO_SetPrecision(aPlaces)

    if _newclass:
        SetPrecision = staticmethod(SetPrecision)
    __swig_getmethods__["SetPrecision"] = lambda x: SetPrecision

    def GetPrecision():
        """GetPrecision() -> int"""
        return _opensim.IO_GetPrecision()

    if _newclass:
        GetPrecision = staticmethod(GetPrecision)
    __swig_getmethods__["GetPrecision"] = lambda x: GetPrecision

    def GetDoubleOutputFormat():
        """GetDoubleOutputFormat() -> char const *"""
        return _opensim.IO_GetDoubleOutputFormat()

    if _newclass:
        GetDoubleOutputFormat = staticmethod(GetDoubleOutputFormat)
    __swig_getmethods__["GetDoubleOutputFormat"] = lambda x: GetDoubleOutputFormat

    def SetPrintOfflineDocuments(aTrueFalse):
        """
        SetPrintOfflineDocuments(bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.IO_SetPrintOfflineDocuments(aTrueFalse)

    if _newclass:
        SetPrintOfflineDocuments = staticmethod(SetPrintOfflineDocuments)
    __swig_getmethods__["SetPrintOfflineDocuments"] = lambda x: SetPrintOfflineDocuments

    def GetPrintOfflineDocuments():
        """GetPrintOfflineDocuments() -> bool"""
        return _opensim.IO_GetPrintOfflineDocuments()

    if _newclass:
        GetPrintOfflineDocuments = staticmethod(GetPrintOfflineDocuments)
    __swig_getmethods__["GetPrintOfflineDocuments"] = lambda x: GetPrintOfflineDocuments

    def makeDir(aDirName):
        """
        makeDir(std::string const & aDirName) -> int

        Parameters:
            aDirName: std::string const &

        """
        return _opensim.IO_makeDir(aDirName)

    if _newclass:
        makeDir = staticmethod(makeDir)
    __swig_getmethods__["makeDir"] = lambda x: makeDir

    def chDir(aDirName):
        """
        chDir(std::string const & aDirName) -> int

        Parameters:
            aDirName: std::string const &

        """
        return _opensim.IO_chDir(aDirName)

    if _newclass:
        chDir = staticmethod(chDir)
    __swig_getmethods__["chDir"] = lambda x: chDir

    def getCwd():
        """getCwd() -> std::string"""
        return _opensim.IO_getCwd()

    if _newclass:
        getCwd = staticmethod(getCwd)
    __swig_getmethods__["getCwd"] = lambda x: getCwd

    def getParentDirectory(fileName):
        """
        getParentDirectory(std::string const & fileName) -> std::string

        Parameters:
            fileName: std::string const &

        """
        return _opensim.IO_getParentDirectory(fileName)

    if _newclass:
        getParentDirectory = staticmethod(getParentDirectory)
    __swig_getmethods__["getParentDirectory"] = lambda x: getParentDirectory

    def GetFileNameFromURI(aURI):
        """
        GetFileNameFromURI(std::string const & aURI) -> std::string

        Parameters:
            aURI: std::string const &

        """
        return _opensim.IO_GetFileNameFromURI(aURI)

    if _newclass:
        GetFileNameFromURI = staticmethod(GetFileNameFromURI)
    __swig_getmethods__["GetFileNameFromURI"] = lambda x: GetFileNameFromURI

    def formatText(*args):
        """
        formatText(std::string const & aComment, std::string const & leadingWhitespace, int width, std::string const & endlineTokenToInsert) -> std::string

        Parameters:
            aComment: std::string const &
            leadingWhitespace: std::string const &
            width: int
            endlineTokenToInsert: std::string const &

        formatText(std::string const & aComment, std::string const & leadingWhitespace, int width) -> std::string

        Parameters:
            aComment: std::string const &
            leadingWhitespace: std::string const &
            width: int

        """
        return _opensim.IO_formatText(*args)

    if _newclass:
        formatText = staticmethod(formatText)
    __swig_getmethods__["formatText"] = lambda x: formatText

    def GetSuffix(aStr, aLen):
        """
        GetSuffix(std::string const & aStr, int aLen) -> std::string

        Parameters:
            aStr: std::string const &
            aLen: int

        """
        return _opensim.IO_GetSuffix(aStr, aLen)

    if _newclass:
        GetSuffix = staticmethod(GetSuffix)
    __swig_getmethods__["GetSuffix"] = lambda x: GetSuffix

    def RemoveSuffix(rStr, aLen):
        """
        RemoveSuffix(std::string & rStr, int aLen)

        Parameters:
            rStr: std::string &
            aLen: int

        """
        return _opensim.IO_RemoveSuffix(rStr, aLen)

    if _newclass:
        RemoveSuffix = staticmethod(RemoveSuffix)
    __swig_getmethods__["RemoveSuffix"] = lambda x: RemoveSuffix

    def replaceSubstring(aStr, aFrom, aTo):
        """
        replaceSubstring(std::string const & aStr, std::string const & aFrom, std::string const & aTo) -> std::string

        Parameters:
            aStr: std::string const &
            aFrom: std::string const &
            aTo: std::string const &

        """
        return _opensim.IO_replaceSubstring(aStr, aFrom, aTo)

    if _newclass:
        replaceSubstring = staticmethod(replaceSubstring)
    __swig_getmethods__["replaceSubstring"] = lambda x: replaceSubstring

    def TrimLeadingWhitespace(rStr):
        """
        TrimLeadingWhitespace(std::string & rStr)

        Parameters:
            rStr: std::string &

        """
        return _opensim.IO_TrimLeadingWhitespace(rStr)

    if _newclass:
        TrimLeadingWhitespace = staticmethod(TrimLeadingWhitespace)
    __swig_getmethods__["TrimLeadingWhitespace"] = lambda x: TrimLeadingWhitespace

    def TrimTrailingWhitespace(rStr):
        """
        TrimTrailingWhitespace(std::string & rStr)

        Parameters:
            rStr: std::string &

        """
        return _opensim.IO_TrimTrailingWhitespace(rStr)

    if _newclass:
        TrimTrailingWhitespace = staticmethod(TrimTrailingWhitespace)
    __swig_getmethods__["TrimTrailingWhitespace"] = lambda x: TrimTrailingWhitespace

    def TrimWhitespace(rStr):
        """
        TrimWhitespace(std::string & rStr)

        Parameters:
            rStr: std::string &

        """
        return _opensim.IO_TrimWhitespace(rStr)

    if _newclass:
        TrimWhitespace = staticmethod(TrimWhitespace)
    __swig_getmethods__["TrimWhitespace"] = lambda x: TrimWhitespace

    def Lowercase(aStr):
        """
        Lowercase(std::string const & aStr) -> std::string

        Parameters:
            aStr: std::string const &

        """
        return _opensim.IO_Lowercase(aStr)

    if _newclass:
        Lowercase = staticmethod(Lowercase)
    __swig_getmethods__["Lowercase"] = lambda x: Lowercase

    def Uppercase(aStr):
        """
        Uppercase(std::string const & aStr) -> std::string

        Parameters:
            aStr: std::string const &

        """
        return _opensim.IO_Uppercase(aStr)

    if _newclass:
        Uppercase = staticmethod(Uppercase)
    __swig_getmethods__["Uppercase"] = lambda x: Uppercase

    def __init__(self):
        """__init__(OpenSim::IO self) -> IO"""
        this = _opensim.new_IO()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_IO
    __del__ = lambda self: None
IO_swigregister = _opensim.IO_swigregister
IO_swigregister(IO)
IO_STRLEN = cvar.IO_STRLEN

def IO_ConstructDateAndTimeStamp():
    """IO_ConstructDateAndTimeStamp() -> char *"""
    return _opensim.IO_ConstructDateAndTimeStamp()

def IO_FixSlashesInFilePath(path):
    """
    IO_FixSlashesInFilePath(std::string const & path) -> std::string

    Parameters:
        path: std::string const &

    """
    return _opensim.IO_FixSlashesInFilePath(path)

def IO_SetScientific(aTrueFalse):
    """
    IO_SetScientific(bool aTrueFalse)

    Parameters:
        aTrueFalse: bool

    """
    return _opensim.IO_SetScientific(aTrueFalse)

def IO_GetScientific():
    """IO_GetScientific() -> bool"""
    return _opensim.IO_GetScientific()

def IO_SetGFormatForDoubleOutput(aTrueFalse):
    """
    IO_SetGFormatForDoubleOutput(bool aTrueFalse)

    Parameters:
        aTrueFalse: bool

    """
    return _opensim.IO_SetGFormatForDoubleOutput(aTrueFalse)

def IO_GetGFormatForDoubleOutput():
    """IO_GetGFormatForDoubleOutput() -> bool"""
    return _opensim.IO_GetGFormatForDoubleOutput()

def IO_SetDigitsPad(aPad):
    """
    IO_SetDigitsPad(int aPad)

    Parameters:
        aPad: int

    """
    return _opensim.IO_SetDigitsPad(aPad)

def IO_GetDigitsPad():
    """IO_GetDigitsPad() -> int"""
    return _opensim.IO_GetDigitsPad()

def IO_SetPrecision(aPlaces):
    """
    IO_SetPrecision(int aPlaces)

    Parameters:
        aPlaces: int

    """
    return _opensim.IO_SetPrecision(aPlaces)

def IO_GetPrecision():
    """IO_GetPrecision() -> int"""
    return _opensim.IO_GetPrecision()

def IO_GetDoubleOutputFormat():
    """IO_GetDoubleOutputFormat() -> char const *"""
    return _opensim.IO_GetDoubleOutputFormat()

def IO_SetPrintOfflineDocuments(aTrueFalse):
    """
    IO_SetPrintOfflineDocuments(bool aTrueFalse)

    Parameters:
        aTrueFalse: bool

    """
    return _opensim.IO_SetPrintOfflineDocuments(aTrueFalse)

def IO_GetPrintOfflineDocuments():
    """IO_GetPrintOfflineDocuments() -> bool"""
    return _opensim.IO_GetPrintOfflineDocuments()

def IO_makeDir(aDirName):
    """
    IO_makeDir(std::string const & aDirName) -> int

    Parameters:
        aDirName: std::string const &

    """
    return _opensim.IO_makeDir(aDirName)

def IO_chDir(aDirName):
    """
    IO_chDir(std::string const & aDirName) -> int

    Parameters:
        aDirName: std::string const &

    """
    return _opensim.IO_chDir(aDirName)

def IO_getCwd():
    """IO_getCwd() -> std::string"""
    return _opensim.IO_getCwd()

def IO_getParentDirectory(fileName):
    """
    IO_getParentDirectory(std::string const & fileName) -> std::string

    Parameters:
        fileName: std::string const &

    """
    return _opensim.IO_getParentDirectory(fileName)

def IO_GetFileNameFromURI(aURI):
    """
    IO_GetFileNameFromURI(std::string const & aURI) -> std::string

    Parameters:
        aURI: std::string const &

    """
    return _opensim.IO_GetFileNameFromURI(aURI)

def IO_formatText(*args):
    """
    formatText(std::string const & aComment, std::string const & leadingWhitespace, int width, std::string const & endlineTokenToInsert) -> std::string

    Parameters:
        aComment: std::string const &
        leadingWhitespace: std::string const &
        width: int
        endlineTokenToInsert: std::string const &

    IO_formatText(std::string const & aComment, std::string const & leadingWhitespace, int width) -> std::string

    Parameters:
        aComment: std::string const &
        leadingWhitespace: std::string const &
        width: int

    """
    return _opensim.IO_formatText(*args)

def IO_GetSuffix(aStr, aLen):
    """
    IO_GetSuffix(std::string const & aStr, int aLen) -> std::string

    Parameters:
        aStr: std::string const &
        aLen: int

    """
    return _opensim.IO_GetSuffix(aStr, aLen)

def IO_RemoveSuffix(rStr, aLen):
    """
    IO_RemoveSuffix(std::string & rStr, int aLen)

    Parameters:
        rStr: std::string &
        aLen: int

    """
    return _opensim.IO_RemoveSuffix(rStr, aLen)

def IO_replaceSubstring(aStr, aFrom, aTo):
    """
    IO_replaceSubstring(std::string const & aStr, std::string const & aFrom, std::string const & aTo) -> std::string

    Parameters:
        aStr: std::string const &
        aFrom: std::string const &
        aTo: std::string const &

    """
    return _opensim.IO_replaceSubstring(aStr, aFrom, aTo)

def IO_TrimLeadingWhitespace(rStr):
    """
    IO_TrimLeadingWhitespace(std::string & rStr)

    Parameters:
        rStr: std::string &

    """
    return _opensim.IO_TrimLeadingWhitespace(rStr)

def IO_TrimTrailingWhitespace(rStr):
    """
    IO_TrimTrailingWhitespace(std::string & rStr)

    Parameters:
        rStr: std::string &

    """
    return _opensim.IO_TrimTrailingWhitespace(rStr)

def IO_TrimWhitespace(rStr):
    """
    IO_TrimWhitespace(std::string & rStr)

    Parameters:
        rStr: std::string &

    """
    return _opensim.IO_TrimWhitespace(rStr)

def IO_Lowercase(aStr):
    """
    IO_Lowercase(std::string const & aStr) -> std::string

    Parameters:
        aStr: std::string const &

    """
    return _opensim.IO_Lowercase(aStr)

def IO_Uppercase(aStr):
    """
    IO_Uppercase(std::string const & aStr) -> std::string

    Parameters:
        aStr: std::string const &

    """
    return _opensim.IO_Uppercase(aStr)

class Function(OpenSimObject):
    """Proxy of C++ OpenSim::Function class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Function, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Function, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Function

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Function_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Function self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Function_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Function_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Function self) -> Function

        Parameters:
            self: OpenSim::Function const *

        """
        return _opensim.Function_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Function self) -> std::string const &

        Parameters:
            self: OpenSim::Function const *

        """
        return _opensim.Function_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_Function
    __del__ = lambda self: None

    def init(self, aFunction):
        """
        init(Function self, Function aFunction)

        Parameters:
            aFunction: OpenSim::Function *

        """
        return _opensim.Function_init(self, aFunction)


    def makeFunctionOfType(aFunction, aNewTypeName):
        """
        makeFunctionOfType(Function aFunction, std::string const & aNewTypeName) -> Function

        Parameters:
            aFunction: OpenSim::Function *
            aNewTypeName: std::string const &

        """
        return _opensim.Function_makeFunctionOfType(aFunction, aNewTypeName)

    if _newclass:
        makeFunctionOfType = staticmethod(makeFunctionOfType)
    __swig_getmethods__["makeFunctionOfType"] = lambda x: makeFunctionOfType

    def calcValue(self, x):
        """
        calcValue(Function self, Vector x) -> double

        Parameters:
            x: SimTK::Vector const &

        """
        return _opensim.Function_calcValue(self, x)


    def calcDerivative(self, derivComponents, x):
        """
        calcDerivative(Function self, std::vector< int > const & derivComponents, Vector x) -> double

        Parameters:
            derivComponents: std::vector< int > const &
            x: SimTK::Vector const &

        """
        return _opensim.Function_calcDerivative(self, derivComponents, x)


    def getArgumentSize(self):
        """
        getArgumentSize(Function self) -> int

        Parameters:
            self: OpenSim::Function const *

        """
        return _opensim.Function_getArgumentSize(self)


    def getMaxDerivativeOrder(self):
        """
        getMaxDerivativeOrder(Function self) -> int

        Parameters:
            self: OpenSim::Function const *

        """
        return _opensim.Function_getMaxDerivativeOrder(self)


    def createSimTKFunction(self):
        """
        createSimTKFunction(Function self) -> SimTK::Function *

        Parameters:
            self: OpenSim::Function const *

        """
        return _opensim.Function_createSimTKFunction(self)

Function_swigregister = _opensim.Function_swigregister
Function_swigregister(Function)

def Function_safeDownCast(obj):
    """
    Function_safeDownCast(OpenSimObject obj) -> Function

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Function_safeDownCast(obj)

def Function_getClassName():
    """Function_getClassName() -> std::string const &"""
    return _opensim.Function_getClassName()

def Function_makeFunctionOfType(aFunction, aNewTypeName):
    """
    Function_makeFunctionOfType(Function aFunction, std::string const & aNewTypeName) -> Function

    Parameters:
        aFunction: OpenSim::Function *
        aNewTypeName: std::string const &

    """
    return _opensim.Function_makeFunctionOfType(aFunction, aNewTypeName)

class SetFunctions(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::Function)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetFunctions, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetFunctions, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetFunctions

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetFunctions_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetFunctions self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetFunctions_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetFunctions_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetFunctions self) -> SetFunctions

        Parameters:
            self: OpenSim::Set< OpenSim::Function > const *

        """
        return _opensim.SetFunctions_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetFunctions self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::Function > const *

        """
        return _opensim.SetFunctions_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetFunctions
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Function)> self) -> SetFunctions
        __init__(OpenSim::Set<(OpenSim::Function)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetFunctions

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Function)> self, std::string const & aFileName) -> SetFunctions

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Function)> self, SetFunctions aSet) -> SetFunctions

        Parameters:
            aSet: OpenSim::Set< OpenSim::Function > const &

        """
        this = _opensim.new_SetFunctions(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetFunctions self)

        Parameters:
            self: OpenSim::Set< OpenSim::Function > *

        """
        return _opensim.SetFunctions_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetFunctions self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetFunctions_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetFunctions self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetFunctions_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetFunctions self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Function > const *

        """
        return _opensim.SetFunctions_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetFunctions self, Function aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::Function const *
            aStartIndex: int

        getIndex(SetFunctions self, Function aObject) -> int

        Parameters:
            aObject: OpenSim::Function const *

        getIndex(SetFunctions self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetFunctions self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetFunctions_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetFunctions self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetFunctions_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetFunctions self, Function aObject) -> bool

        Parameters:
            aObject: OpenSim::Function *

        """
        return _opensim.SetFunctions_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetFunctions self, Function aObject) -> bool

        Parameters:
            aObject: OpenSim::Function const &

        """
        return _opensim.SetFunctions_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetFunctions self, int aIndex, Function aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Function *

        """
        return _opensim.SetFunctions_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetFunctions self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetFunctions self, Function aObject) -> bool

        Parameters:
            aObject: OpenSim::Function const *

        """
        return _opensim.SetFunctions_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetFunctions self)

        Parameters:
            self: OpenSim::Set< OpenSim::Function > *

        """
        return _opensim.SetFunctions_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetFunctions self, int aIndex, Function aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Function *
            preserveGroups: bool

        set(SetFunctions self, int aIndex, Function aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Function *

        """
        return _opensim.SetFunctions_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetFunctions self, int aIndex) -> Function

        Parameters:
            aIndex: int

        get(SetFunctions self, std::string const & aName) -> Function

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetFunctions_get(self, *args)


    def contains(self, aName):
        """
        contains(SetFunctions self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetFunctions_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetFunctions self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetFunctions_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetFunctions self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Function > const *

        """
        return _opensim.SetFunctions_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetFunctions self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetFunctions_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetFunctions self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetFunctions_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetFunctions self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetFunctions_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetFunctions self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetFunctions_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetFunctions self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetFunctions_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetFunctions self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetFunctions self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetFunctions_getGroup(self, *args)

SetFunctions_swigregister = _opensim.SetFunctions_swigregister
SetFunctions_swigregister(SetFunctions)

def SetFunctions_safeDownCast(obj):
    """
    SetFunctions_safeDownCast(OpenSimObject obj) -> SetFunctions

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetFunctions_safeDownCast(obj)

def SetFunctions_getClassName():
    """SetFunctions_getClassName() -> std::string const &"""
    return _opensim.SetFunctions_getClassName()

class FunctionSet(SetFunctions):
    """Proxy of C++ OpenSim::FunctionSet class"""
    __swig_setmethods__ = {}
    for _s in [SetFunctions]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetFunctions]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> FunctionSet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.FunctionSet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(FunctionSet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.FunctionSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.FunctionSet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(FunctionSet self) -> FunctionSet

        Parameters:
            self: OpenSim::FunctionSet const *

        """
        return _opensim.FunctionSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(FunctionSet self) -> std::string const &

        Parameters:
            self: OpenSim::FunctionSet const *

        """
        return _opensim.FunctionSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::FunctionSet self) -> FunctionSet
        __init__(OpenSim::FunctionSet self, std::string const & aFileName) -> FunctionSet

        Parameters:
            aFileName: std::string const &

        """
        this = _opensim.new_FunctionSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_FunctionSet
    __del__ = lambda self: None

    def evaluate(self, *args):
        """
        evaluate(FunctionSet self, int aIndex, int aDerivOrder, double aX=0.0) -> double

        Parameters:
            aIndex: int
            aDerivOrder: int
            aX: double

        evaluate(FunctionSet self, int aIndex, int aDerivOrder) -> double

        Parameters:
            aIndex: int
            aDerivOrder: int

        evaluate(FunctionSet self, ArrayDouble rValues, int aDerivOrder, double aX=0.0)

        Parameters:
            rValues: OpenSim::Array< double > &
            aDerivOrder: int
            aX: double

        evaluate(FunctionSet self, ArrayDouble rValues, int aDerivOrder)

        Parameters:
            rValues: OpenSim::Array< double > &
            aDerivOrder: int

        """
        return _opensim.FunctionSet_evaluate(self, *args)

    def adoptAndAppend(self, aFunction):
        aFunction._markAdopted()
        return super(FunctionSet, self).adoptAndAppend(aFunction)

FunctionSet_swigregister = _opensim.FunctionSet_swigregister
FunctionSet_swigregister(FunctionSet)

def FunctionSet_safeDownCast(obj):
    """
    FunctionSet_safeDownCast(OpenSimObject obj) -> FunctionSet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.FunctionSet_safeDownCast(obj)

def FunctionSet_getClassName():
    """FunctionSet_getClassName() -> std::string const &"""
    return _opensim.FunctionSet_getClassName()

class Constant(Function):
    """Proxy of C++ OpenSim::Constant class"""
    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constant, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Constant, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Constant

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Constant_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Constant self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Constant_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Constant_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Constant self) -> Constant

        Parameters:
            self: OpenSim::Constant const *

        """
        return _opensim.Constant_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Constant self) -> std::string const &

        Parameters:
            self: OpenSim::Constant const *

        """
        return _opensim.Constant_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::Constant self) -> Constant
        __init__(OpenSim::Constant self, double value) -> Constant

        Parameters:
            value: double

        __init__(OpenSim::Constant self, Constant aSpline) -> Constant

        Parameters:
            aSpline: OpenSim::Constant const &

        """
        this = _opensim.new_Constant(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_Constant
    __del__ = lambda self: None

    def setValue(self, aValue):
        """
        setValue(Constant self, double aValue)

        Parameters:
            aValue: double

        """
        return _opensim.Constant_setValue(self, aValue)


    def calcValue(self, xUnused):
        """
        calcValue(Constant self, Vector xUnused) -> double

        Parameters:
            xUnused: SimTK::Vector const &

        """
        return _opensim.Constant_calcValue(self, xUnused)


    def getValue(self):
        """
        getValue(Constant self) -> double const

        Parameters:
            self: OpenSim::Constant const *

        """
        return _opensim.Constant_getValue(self)


    def createSimTKFunction(self):
        """
        createSimTKFunction(Constant self) -> SimTK::Function *

        Parameters:
            self: OpenSim::Constant const *

        """
        return _opensim.Constant_createSimTKFunction(self)

Constant_swigregister = _opensim.Constant_swigregister
Constant_swigregister(Constant)

def Constant_safeDownCast(obj):
    """
    Constant_safeDownCast(OpenSimObject obj) -> Constant

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Constant_safeDownCast(obj)

def Constant_getClassName():
    """Constant_getClassName() -> std::string const &"""
    return _opensim.Constant_getClassName()

class SimmSpline(Function):
    """Proxy of C++ OpenSim::SimmSpline class"""
    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimmSpline, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimmSpline, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SimmSpline

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SimmSpline_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SimmSpline self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SimmSpline_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SimmSpline_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SimmSpline self) -> SimmSpline

        Parameters:
            self: OpenSim::SimmSpline const *

        """
        return _opensim.SimmSpline_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SimmSpline self) -> std::string const &

        Parameters:
            self: OpenSim::SimmSpline const *

        """
        return _opensim.SimmSpline_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::SimmSpline self) -> SimmSpline
        __init__(OpenSim::SimmSpline self, int aN, double const * aTimes, double const * aValues, std::string const & aName) -> SimmSpline

        Parameters:
            aN: int
            aTimes: double const *
            aValues: double const *
            aName: std::string const &

        __init__(OpenSim::SimmSpline self, int aN, double const * aTimes, double const * aValues) -> SimmSpline

        Parameters:
            aN: int
            aTimes: double const *
            aValues: double const *

        __init__(OpenSim::SimmSpline self, SimmSpline aSpline) -> SimmSpline

        Parameters:
            aSpline: OpenSim::SimmSpline const &

        """
        this = _opensim.new_SimmSpline(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_SimmSpline
    __del__ = lambda self: None

    def init(self, aFunction):
        """
        init(SimmSpline self, Function aFunction)

        Parameters:
            aFunction: OpenSim::Function *

        """
        return _opensim.SimmSpline_init(self, aFunction)


    def getSize(self):
        """
        getSize(SimmSpline self) -> int

        Parameters:
            self: OpenSim::SimmSpline const *

        """
        return _opensim.SimmSpline_getSize(self)


    def getXValues(self):
        """
        getXValues(SimmSpline self) -> double const *

        Parameters:
            self: OpenSim::SimmSpline const *

        """
        return _opensim.SimmSpline_getXValues(self)


    def getYValues(self):
        """
        getYValues(SimmSpline self) -> double const *

        Parameters:
            self: OpenSim::SimmSpline const *

        """
        return _opensim.SimmSpline_getYValues(self)


    def getNumberOfPoints(self):
        """
        getNumberOfPoints(SimmSpline self) -> int

        Parameters:
            self: OpenSim::SimmSpline const *

        """
        return _opensim.SimmSpline_getNumberOfPoints(self)


    def getX(self, *args):
        """
        getX(SimmSpline self) -> ArrayDouble
        getX(SimmSpline self, int aIndex) -> double

        Parameters:
            aIndex: int

        """
        return _opensim.SimmSpline_getX(self, *args)


    def getY(self, *args):
        """
        getY(SimmSpline self) -> ArrayDouble
        getY(SimmSpline self, int aIndex) -> double

        Parameters:
            aIndex: int

        """
        return _opensim.SimmSpline_getY(self, *args)


    def getZ(self, aIndex):
        """
        getZ(SimmSpline self, int aIndex) -> double

        Parameters:
            aIndex: int

        """
        return _opensim.SimmSpline_getZ(self, aIndex)


    def setX(self, aIndex, aValue):
        """
        setX(SimmSpline self, int aIndex, double aValue)

        Parameters:
            aIndex: int
            aValue: double

        """
        return _opensim.SimmSpline_setX(self, aIndex, aValue)


    def setY(self, aIndex, aValue):
        """
        setY(SimmSpline self, int aIndex, double aValue)

        Parameters:
            aIndex: int
            aValue: double

        """
        return _opensim.SimmSpline_setY(self, aIndex, aValue)


    def deletePoint(self, aIndex):
        """
        deletePoint(SimmSpline self, int aIndex) -> bool

        Parameters:
            aIndex: int

        """
        return _opensim.SimmSpline_deletePoint(self, aIndex)


    def deletePoints(self, indices):
        """
        deletePoints(SimmSpline self, ArrayInt indices) -> bool

        Parameters:
            indices: OpenSim::Array< int > const &

        """
        return _opensim.SimmSpline_deletePoints(self, indices)


    def addPoint(self, aX, aY):
        """
        addPoint(SimmSpline self, double aX, double aY) -> int

        Parameters:
            aX: double
            aY: double

        """
        return _opensim.SimmSpline_addPoint(self, aX, aY)


    def calcValue(self, x):
        """
        calcValue(SimmSpline self, Vector x) -> double

        Parameters:
            x: SimTK::Vector const &

        """
        return _opensim.SimmSpline_calcValue(self, x)


    def calcDerivative(self, derivComponents, x):
        """
        calcDerivative(SimmSpline self, std::vector< int > const & derivComponents, Vector x) -> double

        Parameters:
            derivComponents: std::vector< int > const &
            x: SimTK::Vector const &

        """
        return _opensim.SimmSpline_calcDerivative(self, derivComponents, x)


    def getArgumentSize(self):
        """
        getArgumentSize(SimmSpline self) -> int

        Parameters:
            self: OpenSim::SimmSpline const *

        """
        return _opensim.SimmSpline_getArgumentSize(self)


    def getMaxDerivativeOrder(self):
        """
        getMaxDerivativeOrder(SimmSpline self) -> int

        Parameters:
            self: OpenSim::SimmSpline const *

        """
        return _opensim.SimmSpline_getMaxDerivativeOrder(self)


    def createSimTKFunction(self):
        """
        createSimTKFunction(SimmSpline self) -> SimTK::Function *

        Parameters:
            self: OpenSim::SimmSpline const *

        """
        return _opensim.SimmSpline_createSimTKFunction(self)


    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(SimmSpline self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters:
            aNode: SimTK::Xml::Element &
            versionNumber: int

        updateFromXMLNode(SimmSpline self, SimTK::Xml::Element & aNode)

        Parameters:
            aNode: SimTK::Xml::Element &

        """
        return _opensim.SimmSpline_updateFromXMLNode(self, aNode, versionNumber)

SimmSpline_swigregister = _opensim.SimmSpline_swigregister
SimmSpline_swigregister(SimmSpline)

def SimmSpline_safeDownCast(obj):
    """
    SimmSpline_safeDownCast(OpenSimObject obj) -> SimmSpline

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SimmSpline_safeDownCast(obj)

def SimmSpline_getClassName():
    """SimmSpline_getClassName() -> std::string const &"""
    return _opensim.SimmSpline_getClassName()

class StepFunction(Function):
    """Proxy of C++ OpenSim::StepFunction class"""
    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFunction, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> StepFunction

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.StepFunction_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(StepFunction self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.StepFunction_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.StepFunction_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(StepFunction self) -> StepFunction

        Parameters:
            self: OpenSim::StepFunction const *

        """
        return _opensim.StepFunction_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(StepFunction self) -> std::string const &

        Parameters:
            self: OpenSim::StepFunction const *

        """
        return _opensim.StepFunction_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::StepFunction self) -> StepFunction
        __init__(OpenSim::StepFunction self, double startTime, double endTime, double startValue=0.0, double endValue=1.0) -> StepFunction

        Parameters:
            startTime: double
            endTime: double
            startValue: double
            endValue: double

        __init__(OpenSim::StepFunction self, double startTime, double endTime, double startValue=0.0) -> StepFunction

        Parameters:
            startTime: double
            endTime: double
            startValue: double

        __init__(OpenSim::StepFunction self, double startTime, double endTime) -> StepFunction

        Parameters:
            startTime: double
            endTime: double

        __init__(OpenSim::StepFunction self, StepFunction aSpline) -> StepFunction

        Parameters:
            aSpline: OpenSim::StepFunction const &

        """
        this = _opensim.new_StepFunction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_StepFunction
    __del__ = lambda self: None

    def setStartTime(self, time):
        """
        setStartTime(StepFunction self, double time)

        Parameters:
            time: double

        """
        return _opensim.StepFunction_setStartTime(self, time)


    def getStartTime(self):
        """
        getStartTime(StepFunction self) -> double

        Parameters:
            self: OpenSim::StepFunction const *

        """
        return _opensim.StepFunction_getStartTime(self)


    def setEndTime(self, time):
        """
        setEndTime(StepFunction self, double time)

        Parameters:
            time: double

        """
        return _opensim.StepFunction_setEndTime(self, time)


    def getEndTime(self):
        """
        getEndTime(StepFunction self) -> double

        Parameters:
            self: OpenSim::StepFunction const *

        """
        return _opensim.StepFunction_getEndTime(self)


    def setStartValue(self, start):
        """
        setStartValue(StepFunction self, double start)

        Parameters:
            start: double

        """
        return _opensim.StepFunction_setStartValue(self, start)


    def getStartValue(self):
        """
        getStartValue(StepFunction self) -> double

        Parameters:
            self: OpenSim::StepFunction const *

        """
        return _opensim.StepFunction_getStartValue(self)


    def setEndValue(self, end):
        """
        setEndValue(StepFunction self, double end)

        Parameters:
            end: double

        """
        return _opensim.StepFunction_setEndValue(self, end)


    def getEndValue(self):
        """
        getEndValue(StepFunction self) -> double

        Parameters:
            self: OpenSim::StepFunction const *

        """
        return _opensim.StepFunction_getEndValue(self)


    def createSimTKFunction(self):
        """
        createSimTKFunction(StepFunction self) -> SimTK::Function *

        Parameters:
            self: OpenSim::StepFunction const *

        """
        return _opensim.StepFunction_createSimTKFunction(self)

StepFunction_swigregister = _opensim.StepFunction_swigregister
StepFunction_swigregister(StepFunction)

def StepFunction_safeDownCast(obj):
    """
    StepFunction_safeDownCast(OpenSimObject obj) -> StepFunction

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.StepFunction_safeDownCast(obj)

def StepFunction_getClassName():
    """StepFunction_getClassName() -> std::string const &"""
    return _opensim.StepFunction_getClassName()

class PiecewiseConstantFunction(Function):
    """Proxy of C++ OpenSim::PiecewiseConstantFunction class"""
    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseConstantFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseConstantFunction, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PiecewiseConstantFunction

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.PiecewiseConstantFunction_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(PiecewiseConstantFunction self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.PiecewiseConstantFunction_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.PiecewiseConstantFunction_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(PiecewiseConstantFunction self) -> PiecewiseConstantFunction

        Parameters:
            self: OpenSim::PiecewiseConstantFunction const *

        """
        return _opensim.PiecewiseConstantFunction_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PiecewiseConstantFunction self) -> std::string const &

        Parameters:
            self: OpenSim::PiecewiseConstantFunction const *

        """
        return _opensim.PiecewiseConstantFunction_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::PiecewiseConstantFunction self) -> PiecewiseConstantFunction
        __init__(OpenSim::PiecewiseConstantFunction self, int aN, double const * aTimes, double const * aValues, std::string const & aName) -> PiecewiseConstantFunction

        Parameters:
            aN: int
            aTimes: double const *
            aValues: double const *
            aName: std::string const &

        __init__(OpenSim::PiecewiseConstantFunction self, int aN, double const * aTimes, double const * aValues) -> PiecewiseConstantFunction

        Parameters:
            aN: int
            aTimes: double const *
            aValues: double const *

        __init__(OpenSim::PiecewiseConstantFunction self, PiecewiseConstantFunction aFunction) -> PiecewiseConstantFunction

        Parameters:
            aFunction: OpenSim::PiecewiseConstantFunction const &

        """
        this = _opensim.new_PiecewiseConstantFunction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_PiecewiseConstantFunction
    __del__ = lambda self: None

    def init(self, aFunction):
        """
        init(PiecewiseConstantFunction self, Function aFunction)

        Parameters:
            aFunction: OpenSim::Function *

        """
        return _opensim.PiecewiseConstantFunction_init(self, aFunction)


    def getSize(self):
        """
        getSize(PiecewiseConstantFunction self) -> int

        Parameters:
            self: OpenSim::PiecewiseConstantFunction const *

        """
        return _opensim.PiecewiseConstantFunction_getSize(self)


    def getXValues(self):
        """
        getXValues(PiecewiseConstantFunction self) -> double const *

        Parameters:
            self: OpenSim::PiecewiseConstantFunction const *

        """
        return _opensim.PiecewiseConstantFunction_getXValues(self)


    def getYValues(self):
        """
        getYValues(PiecewiseConstantFunction self) -> double const *

        Parameters:
            self: OpenSim::PiecewiseConstantFunction const *

        """
        return _opensim.PiecewiseConstantFunction_getYValues(self)


    def getNumberOfPoints(self):
        """
        getNumberOfPoints(PiecewiseConstantFunction self) -> int

        Parameters:
            self: OpenSim::PiecewiseConstantFunction const *

        """
        return _opensim.PiecewiseConstantFunction_getNumberOfPoints(self)


    def getX(self, *args):
        """
        getX(PiecewiseConstantFunction self) -> ArrayDouble
        getX(PiecewiseConstantFunction self, int aIndex) -> double

        Parameters:
            aIndex: int

        """
        return _opensim.PiecewiseConstantFunction_getX(self, *args)


    def getY(self, *args):
        """
        getY(PiecewiseConstantFunction self) -> ArrayDouble
        getY(PiecewiseConstantFunction self, int aIndex) -> double

        Parameters:
            aIndex: int

        """
        return _opensim.PiecewiseConstantFunction_getY(self, *args)


    def getZ(self, aIndex):
        """
        getZ(PiecewiseConstantFunction self, int aIndex) -> double

        Parameters:
            aIndex: int

        """
        return _opensim.PiecewiseConstantFunction_getZ(self, aIndex)


    def setX(self, aIndex, aValue):
        """
        setX(PiecewiseConstantFunction self, int aIndex, double aValue)

        Parameters:
            aIndex: int
            aValue: double

        """
        return _opensim.PiecewiseConstantFunction_setX(self, aIndex, aValue)


    def setY(self, aIndex, aValue):
        """
        setY(PiecewiseConstantFunction self, int aIndex, double aValue)

        Parameters:
            aIndex: int
            aValue: double

        """
        return _opensim.PiecewiseConstantFunction_setY(self, aIndex, aValue)


    def deletePoint(self, aIndex):
        """
        deletePoint(PiecewiseConstantFunction self, int aIndex) -> bool

        Parameters:
            aIndex: int

        """
        return _opensim.PiecewiseConstantFunction_deletePoint(self, aIndex)


    def deletePoints(self, indices):
        """
        deletePoints(PiecewiseConstantFunction self, ArrayInt indices) -> bool

        Parameters:
            indices: OpenSim::Array< int > const &

        """
        return _opensim.PiecewiseConstantFunction_deletePoints(self, indices)


    def addPoint(self, aX, aY):
        """
        addPoint(PiecewiseConstantFunction self, double aX, double aY) -> int

        Parameters:
            aX: double
            aY: double

        """
        return _opensim.PiecewiseConstantFunction_addPoint(self, aX, aY)


    def evaluateTotalFirstDerivative(self, aX, aDxdt):
        """
        evaluateTotalFirstDerivative(PiecewiseConstantFunction self, double aX, double aDxdt) -> double

        Parameters:
            aX: double
            aDxdt: double

        """
        return _opensim.PiecewiseConstantFunction_evaluateTotalFirstDerivative(self, aX, aDxdt)


    def evaluateTotalSecondDerivative(self, aX, aDxdt, aD2xdt2):
        """
        evaluateTotalSecondDerivative(PiecewiseConstantFunction self, double aX, double aDxdt, double aD2xdt2) -> double

        Parameters:
            aX: double
            aDxdt: double
            aD2xdt2: double

        """
        return _opensim.PiecewiseConstantFunction_evaluateTotalSecondDerivative(self, aX, aDxdt, aD2xdt2)


    def calcValue(self, x):
        """
        calcValue(PiecewiseConstantFunction self, Vector x) -> double

        Parameters:
            x: SimTK::Vector const &

        """
        return _opensim.PiecewiseConstantFunction_calcValue(self, x)


    def calcDerivative(self, derivComponents, x):
        """
        calcDerivative(PiecewiseConstantFunction self, std::vector< int > const & derivComponents, Vector x) -> double

        Parameters:
            derivComponents: std::vector< int > const &
            x: SimTK::Vector const &

        """
        return _opensim.PiecewiseConstantFunction_calcDerivative(self, derivComponents, x)


    def getArgumentSize(self):
        """
        getArgumentSize(PiecewiseConstantFunction self) -> int

        Parameters:
            self: OpenSim::PiecewiseConstantFunction const *

        """
        return _opensim.PiecewiseConstantFunction_getArgumentSize(self)


    def getMaxDerivativeOrder(self):
        """
        getMaxDerivativeOrder(PiecewiseConstantFunction self) -> int

        Parameters:
            self: OpenSim::PiecewiseConstantFunction const *

        """
        return _opensim.PiecewiseConstantFunction_getMaxDerivativeOrder(self)


    def createSimTKFunction(self):
        """
        createSimTKFunction(PiecewiseConstantFunction self) -> SimTK::Function *

        Parameters:
            self: OpenSim::PiecewiseConstantFunction const *

        """
        return _opensim.PiecewiseConstantFunction_createSimTKFunction(self)

PiecewiseConstantFunction_swigregister = _opensim.PiecewiseConstantFunction_swigregister
PiecewiseConstantFunction_swigregister(PiecewiseConstantFunction)

def PiecewiseConstantFunction_safeDownCast(obj):
    """
    PiecewiseConstantFunction_safeDownCast(OpenSimObject obj) -> PiecewiseConstantFunction

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.PiecewiseConstantFunction_safeDownCast(obj)

def PiecewiseConstantFunction_getClassName():
    """PiecewiseConstantFunction_getClassName() -> std::string const &"""
    return _opensim.PiecewiseConstantFunction_getClassName()

class LinearFunction(Function):
    """Proxy of C++ OpenSim::LinearFunction class"""
    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearFunction, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> LinearFunction

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.LinearFunction_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(LinearFunction self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.LinearFunction_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.LinearFunction_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(LinearFunction self) -> LinearFunction

        Parameters:
            self: OpenSim::LinearFunction const *

        """
        return _opensim.LinearFunction_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(LinearFunction self) -> std::string const &

        Parameters:
            self: OpenSim::LinearFunction const *

        """
        return _opensim.LinearFunction_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::LinearFunction self) -> LinearFunction
        __init__(OpenSim::LinearFunction self, ArrayDouble coefficients) -> LinearFunction

        Parameters:
            coefficients: OpenSim::Array< double >

        __init__(OpenSim::LinearFunction self, double slope, double intercept) -> LinearFunction

        Parameters:
            slope: double
            intercept: double

        __init__(OpenSim::LinearFunction self, LinearFunction aSpline) -> LinearFunction

        Parameters:
            aSpline: OpenSim::LinearFunction const &

        """
        this = _opensim.new_LinearFunction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_LinearFunction
    __del__ = lambda self: None

    def setCoefficients(self, coefficients):
        """
        setCoefficients(LinearFunction self, ArrayDouble coefficients)

        Parameters:
            coefficients: OpenSim::Array< double >

        """
        return _opensim.LinearFunction_setCoefficients(self, coefficients)


    def setSlope(self, slope):
        """
        setSlope(LinearFunction self, double slope)

        Parameters:
            slope: double

        """
        return _opensim.LinearFunction_setSlope(self, slope)


    def setIntercept(self, intercept):
        """
        setIntercept(LinearFunction self, double intercept)

        Parameters:
            intercept: double

        """
        return _opensim.LinearFunction_setIntercept(self, intercept)


    def getCoefficients(self):
        """
        getCoefficients(LinearFunction self) -> ArrayDouble

        Parameters:
            self: OpenSim::LinearFunction const *

        """
        return _opensim.LinearFunction_getCoefficients(self)


    def getSlope(self):
        """
        getSlope(LinearFunction self) -> double

        Parameters:
            self: OpenSim::LinearFunction *

        """
        return _opensim.LinearFunction_getSlope(self)


    def getIntercept(self):
        """
        getIntercept(LinearFunction self) -> double

        Parameters:
            self: OpenSim::LinearFunction *

        """
        return _opensim.LinearFunction_getIntercept(self)


    def createSimTKFunction(self):
        """
        createSimTKFunction(LinearFunction self) -> SimTK::Function *

        Parameters:
            self: OpenSim::LinearFunction const *

        """
        return _opensim.LinearFunction_createSimTKFunction(self)

LinearFunction_swigregister = _opensim.LinearFunction_swigregister
LinearFunction_swigregister(LinearFunction)

def LinearFunction_safeDownCast(obj):
    """
    LinearFunction_safeDownCast(OpenSimObject obj) -> LinearFunction

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.LinearFunction_safeDownCast(obj)

def LinearFunction_getClassName():
    """LinearFunction_getClassName() -> std::string const &"""
    return _opensim.LinearFunction_getClassName()

class PiecewiseLinearFunction(Function):
    """Proxy of C++ OpenSim::PiecewiseLinearFunction class"""
    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseLinearFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseLinearFunction, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PiecewiseLinearFunction

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.PiecewiseLinearFunction_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(PiecewiseLinearFunction self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.PiecewiseLinearFunction_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.PiecewiseLinearFunction_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(PiecewiseLinearFunction self) -> PiecewiseLinearFunction

        Parameters:
            self: OpenSim::PiecewiseLinearFunction const *

        """
        return _opensim.PiecewiseLinearFunction_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PiecewiseLinearFunction self) -> std::string const &

        Parameters:
            self: OpenSim::PiecewiseLinearFunction const *

        """
        return _opensim.PiecewiseLinearFunction_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::PiecewiseLinearFunction self) -> PiecewiseLinearFunction
        __init__(OpenSim::PiecewiseLinearFunction self, int aN, double const * aTimes, double const * aValues, std::string const & aName) -> PiecewiseLinearFunction

        Parameters:
            aN: int
            aTimes: double const *
            aValues: double const *
            aName: std::string const &

        __init__(OpenSim::PiecewiseLinearFunction self, int aN, double const * aTimes, double const * aValues) -> PiecewiseLinearFunction

        Parameters:
            aN: int
            aTimes: double const *
            aValues: double const *

        __init__(OpenSim::PiecewiseLinearFunction self, PiecewiseLinearFunction aFunction) -> PiecewiseLinearFunction

        Parameters:
            aFunction: OpenSim::PiecewiseLinearFunction const &

        """
        this = _opensim.new_PiecewiseLinearFunction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_PiecewiseLinearFunction
    __del__ = lambda self: None

    def init(self, aFunction):
        """
        init(PiecewiseLinearFunction self, Function aFunction)

        Parameters:
            aFunction: OpenSim::Function *

        """
        return _opensim.PiecewiseLinearFunction_init(self, aFunction)


    def getSize(self):
        """
        getSize(PiecewiseLinearFunction self) -> int

        Parameters:
            self: OpenSim::PiecewiseLinearFunction const *

        """
        return _opensim.PiecewiseLinearFunction_getSize(self)


    def getXValues(self):
        """
        getXValues(PiecewiseLinearFunction self) -> double const *

        Parameters:
            self: OpenSim::PiecewiseLinearFunction const *

        """
        return _opensim.PiecewiseLinearFunction_getXValues(self)


    def getYValues(self):
        """
        getYValues(PiecewiseLinearFunction self) -> double const *

        Parameters:
            self: OpenSim::PiecewiseLinearFunction const *

        """
        return _opensim.PiecewiseLinearFunction_getYValues(self)


    def getNumberOfPoints(self):
        """
        getNumberOfPoints(PiecewiseLinearFunction self) -> int

        Parameters:
            self: OpenSim::PiecewiseLinearFunction const *

        """
        return _opensim.PiecewiseLinearFunction_getNumberOfPoints(self)


    def getX(self, *args):
        """
        getX(PiecewiseLinearFunction self) -> ArrayDouble
        getX(PiecewiseLinearFunction self, int aIndex) -> double

        Parameters:
            aIndex: int

        """
        return _opensim.PiecewiseLinearFunction_getX(self, *args)


    def getY(self, *args):
        """
        getY(PiecewiseLinearFunction self) -> ArrayDouble
        getY(PiecewiseLinearFunction self, int aIndex) -> double

        Parameters:
            aIndex: int

        """
        return _opensim.PiecewiseLinearFunction_getY(self, *args)


    def getZ(self, aIndex):
        """
        getZ(PiecewiseLinearFunction self, int aIndex) -> double

        Parameters:
            aIndex: int

        """
        return _opensim.PiecewiseLinearFunction_getZ(self, aIndex)


    def setX(self, aIndex, aValue):
        """
        setX(PiecewiseLinearFunction self, int aIndex, double aValue)

        Parameters:
            aIndex: int
            aValue: double

        """
        return _opensim.PiecewiseLinearFunction_setX(self, aIndex, aValue)


    def setY(self, aIndex, aValue):
        """
        setY(PiecewiseLinearFunction self, int aIndex, double aValue)

        Parameters:
            aIndex: int
            aValue: double

        """
        return _opensim.PiecewiseLinearFunction_setY(self, aIndex, aValue)


    def deletePoint(self, aIndex):
        """
        deletePoint(PiecewiseLinearFunction self, int aIndex) -> bool

        Parameters:
            aIndex: int

        """
        return _opensim.PiecewiseLinearFunction_deletePoint(self, aIndex)


    def deletePoints(self, indices):
        """
        deletePoints(PiecewiseLinearFunction self, ArrayInt indices) -> bool

        Parameters:
            indices: OpenSim::Array< int > const &

        """
        return _opensim.PiecewiseLinearFunction_deletePoints(self, indices)


    def addPoint(self, aX, aY):
        """
        addPoint(PiecewiseLinearFunction self, double aX, double aY) -> int

        Parameters:
            aX: double
            aY: double

        """
        return _opensim.PiecewiseLinearFunction_addPoint(self, aX, aY)


    def calcValue(self, x):
        """
        calcValue(PiecewiseLinearFunction self, Vector x) -> double

        Parameters:
            x: SimTK::Vector const &

        """
        return _opensim.PiecewiseLinearFunction_calcValue(self, x)


    def calcDerivative(self, derivComponents, x):
        """
        calcDerivative(PiecewiseLinearFunction self, std::vector< int > const & derivComponents, Vector x) -> double

        Parameters:
            derivComponents: std::vector< int > const &
            x: SimTK::Vector const &

        """
        return _opensim.PiecewiseLinearFunction_calcDerivative(self, derivComponents, x)


    def getArgumentSize(self):
        """
        getArgumentSize(PiecewiseLinearFunction self) -> int

        Parameters:
            self: OpenSim::PiecewiseLinearFunction const *

        """
        return _opensim.PiecewiseLinearFunction_getArgumentSize(self)


    def getMaxDerivativeOrder(self):
        """
        getMaxDerivativeOrder(PiecewiseLinearFunction self) -> int

        Parameters:
            self: OpenSim::PiecewiseLinearFunction const *

        """
        return _opensim.PiecewiseLinearFunction_getMaxDerivativeOrder(self)


    def createSimTKFunction(self):
        """
        createSimTKFunction(PiecewiseLinearFunction self) -> SimTK::Function *

        Parameters:
            self: OpenSim::PiecewiseLinearFunction const *

        """
        return _opensim.PiecewiseLinearFunction_createSimTKFunction(self)


    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(PiecewiseLinearFunction self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters:
            aNode: SimTK::Xml::Element &
            versionNumber: int

        updateFromXMLNode(PiecewiseLinearFunction self, SimTK::Xml::Element & aNode)

        Parameters:
            aNode: SimTK::Xml::Element &

        """
        return _opensim.PiecewiseLinearFunction_updateFromXMLNode(self, aNode, versionNumber)

PiecewiseLinearFunction_swigregister = _opensim.PiecewiseLinearFunction_swigregister
PiecewiseLinearFunction_swigregister(PiecewiseLinearFunction)

def PiecewiseLinearFunction_safeDownCast(obj):
    """
    PiecewiseLinearFunction_safeDownCast(OpenSimObject obj) -> PiecewiseLinearFunction

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.PiecewiseLinearFunction_safeDownCast(obj)

def PiecewiseLinearFunction_getClassName():
    """PiecewiseLinearFunction_getClassName() -> std::string const &"""
    return _opensim.PiecewiseLinearFunction_getClassName()

class MultiplierFunction(Function):
    """Proxy of C++ OpenSim::MultiplierFunction class"""
    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiplierFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiplierFunction, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MultiplierFunction

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.MultiplierFunction_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(MultiplierFunction self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.MultiplierFunction_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.MultiplierFunction_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(MultiplierFunction self) -> MultiplierFunction

        Parameters:
            self: OpenSim::MultiplierFunction const *

        """
        return _opensim.MultiplierFunction_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MultiplierFunction self) -> std::string const &

        Parameters:
            self: OpenSim::MultiplierFunction const *

        """
        return _opensim.MultiplierFunction_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::MultiplierFunction self) -> MultiplierFunction
        __init__(OpenSim::MultiplierFunction self, Function aFunction) -> MultiplierFunction

        Parameters:
            aFunction: OpenSim::Function *

        __init__(OpenSim::MultiplierFunction self, Function aFunction, double aScaleFactor) -> MultiplierFunction

        Parameters:
            aFunction: OpenSim::Function *
            aScaleFactor: double

        __init__(OpenSim::MultiplierFunction self, MultiplierFunction aFunction) -> MultiplierFunction

        Parameters:
            aFunction: OpenSim::MultiplierFunction const &

        """
        this = _opensim.new_MultiplierFunction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_MultiplierFunction
    __del__ = lambda self: None

    def init(self, aFunction):
        """
        init(MultiplierFunction self, Function aFunction)

        Parameters:
            aFunction: OpenSim::Function *

        """
        return _opensim.MultiplierFunction_init(self, aFunction)


    def setFunction(self, aFunction):
        """
        setFunction(MultiplierFunction self, Function aFunction)

        Parameters:
            aFunction: OpenSim::Function *

        """
        return _opensim.MultiplierFunction_setFunction(self, aFunction)


    def setScale(self, aScaleFactor):
        """
        setScale(MultiplierFunction self, double aScaleFactor)

        Parameters:
            aScaleFactor: double

        """
        return _opensim.MultiplierFunction_setScale(self, aScaleFactor)


    def getFunction(self):
        """
        getFunction(MultiplierFunction self) -> Function

        Parameters:
            self: OpenSim::MultiplierFunction const *

        """
        return _opensim.MultiplierFunction_getFunction(self)


    def getScale(self):
        """
        getScale(MultiplierFunction self) -> double

        Parameters:
            self: OpenSim::MultiplierFunction const *

        """
        return _opensim.MultiplierFunction_getScale(self)


    def calcValue(self, x):
        """
        calcValue(MultiplierFunction self, Vector x) -> double

        Parameters:
            x: SimTK::Vector const &

        """
        return _opensim.MultiplierFunction_calcValue(self, x)


    def calcDerivative(self, derivComponents, x):
        """
        calcDerivative(MultiplierFunction self, std::vector< int > const & derivComponents, Vector x) -> double

        Parameters:
            derivComponents: std::vector< int > const &
            x: SimTK::Vector const &

        """
        return _opensim.MultiplierFunction_calcDerivative(self, derivComponents, x)


    def getArgumentSize(self):
        """
        getArgumentSize(MultiplierFunction self) -> int

        Parameters:
            self: OpenSim::MultiplierFunction const *

        """
        return _opensim.MultiplierFunction_getArgumentSize(self)


    def getMaxDerivativeOrder(self):
        """
        getMaxDerivativeOrder(MultiplierFunction self) -> int

        Parameters:
            self: OpenSim::MultiplierFunction const *

        """
        return _opensim.MultiplierFunction_getMaxDerivativeOrder(self)


    def createSimTKFunction(self):
        """
        createSimTKFunction(MultiplierFunction self) -> SimTK::Function *

        Parameters:
            self: OpenSim::MultiplierFunction const *

        """
        return _opensim.MultiplierFunction_createSimTKFunction(self)

MultiplierFunction_swigregister = _opensim.MultiplierFunction_swigregister
MultiplierFunction_swigregister(MultiplierFunction)

def MultiplierFunction_safeDownCast(obj):
    """
    MultiplierFunction_safeDownCast(OpenSimObject obj) -> MultiplierFunction

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.MultiplierFunction_safeDownCast(obj)

def MultiplierFunction_getClassName():
    """MultiplierFunction_getClassName() -> std::string const &"""
    return _opensim.MultiplierFunction_getClassName()

class GCVSpline(Function):
    """Proxy of C++ OpenSim::GCVSpline class"""
    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GCVSpline, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GCVSpline, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> GCVSpline

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.GCVSpline_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(GCVSpline self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.GCVSpline_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.GCVSpline_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(GCVSpline self) -> GCVSpline

        Parameters:
            self: OpenSim::GCVSpline const *

        """
        return _opensim.GCVSpline_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(GCVSpline self) -> std::string const &

        Parameters:
            self: OpenSim::GCVSpline const *

        """
        return _opensim.GCVSpline_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::GCVSpline self) -> GCVSpline
        __init__(OpenSim::GCVSpline self, int aDegree, int aN, double const * aTimes, double const * aValues, std::string const & aName, double aErrorVariance=0.0) -> GCVSpline

        Parameters:
            aDegree: int
            aN: int
            aTimes: double const *
            aValues: double const *
            aName: std::string const &
            aErrorVariance: double

        __init__(OpenSim::GCVSpline self, int aDegree, int aN, double const * aTimes, double const * aValues, std::string const & aName) -> GCVSpline

        Parameters:
            aDegree: int
            aN: int
            aTimes: double const *
            aValues: double const *
            aName: std::string const &

        __init__(OpenSim::GCVSpline self, int aDegree, int aN, double const * aTimes, double const * aValues) -> GCVSpline

        Parameters:
            aDegree: int
            aN: int
            aTimes: double const *
            aValues: double const *

        __init__(OpenSim::GCVSpline self, GCVSpline aSpline) -> GCVSpline

        Parameters:
            aSpline: OpenSim::GCVSpline const &

        """
        this = _opensim.new_GCVSpline(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_GCVSpline
    __del__ = lambda self: None

    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(GCVSpline self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters:
            aNode: SimTK::Xml::Element &
            versionNumber: int

        updateFromXMLNode(GCVSpline self, SimTK::Xml::Element & aNode)

        Parameters:
            aNode: SimTK::Xml::Element &

        """
        return _opensim.GCVSpline_updateFromXMLNode(self, aNode, versionNumber)


    def setDegree(self, aDegree):
        """
        setDegree(GCVSpline self, int aDegree)

        Parameters:
            aDegree: int

        """
        return _opensim.GCVSpline_setDegree(self, aDegree)


    def getDegree(self):
        """
        getDegree(GCVSpline self) -> int

        Parameters:
            self: OpenSim::GCVSpline const *

        """
        return _opensim.GCVSpline_getDegree(self)


    def getOrder(self):
        """
        getOrder(GCVSpline self) -> int

        Parameters:
            self: OpenSim::GCVSpline const *

        """
        return _opensim.GCVSpline_getOrder(self)


    def getHalfOrder(self):
        """
        getHalfOrder(GCVSpline self) -> int

        Parameters:
            self: OpenSim::GCVSpline const *

        """
        return _opensim.GCVSpline_getHalfOrder(self)


    def getSize(self):
        """
        getSize(GCVSpline self) -> int

        Parameters:
            self: OpenSim::GCVSpline const *

        """
        return _opensim.GCVSpline_getSize(self)


    def getXValues(self):
        """
        getXValues(GCVSpline self) -> double const *

        Parameters:
            self: OpenSim::GCVSpline const *

        """
        return _opensim.GCVSpline_getXValues(self)


    def getYValues(self):
        """
        getYValues(GCVSpline self) -> double const *

        Parameters:
            self: OpenSim::GCVSpline const *

        """
        return _opensim.GCVSpline_getYValues(self)


    def getCoefficients(self):
        """
        getCoefficients(GCVSpline self) -> ArrayDouble

        Parameters:
            self: OpenSim::GCVSpline const *

        """
        return _opensim.GCVSpline_getCoefficients(self)


    def getNumberOfPoints(self):
        """
        getNumberOfPoints(GCVSpline self) -> int

        Parameters:
            self: OpenSim::GCVSpline const *

        """
        return _opensim.GCVSpline_getNumberOfPoints(self)


    def getX(self, *args):
        """
        getX(GCVSpline self) -> ArrayDouble
        getX(GCVSpline self, int aIndex) -> double

        Parameters:
            aIndex: int

        """
        return _opensim.GCVSpline_getX(self, *args)


    def getY(self, aIndex):
        """
        getY(GCVSpline self, int aIndex) -> double

        Parameters:
            aIndex: int

        """
        return _opensim.GCVSpline_getY(self, aIndex)


    def getZ(self, aIndex):
        """
        getZ(GCVSpline self, int aIndex) -> double

        Parameters:
            aIndex: int

        """
        return _opensim.GCVSpline_getZ(self, aIndex)


    def setX(self, aIndex, aValue):
        """
        setX(GCVSpline self, int aIndex, double aValue)

        Parameters:
            aIndex: int
            aValue: double

        """
        return _opensim.GCVSpline_setX(self, aIndex, aValue)


    def setY(self, aIndex, aValue):
        """
        setY(GCVSpline self, int aIndex, double aValue)

        Parameters:
            aIndex: int
            aValue: double

        """
        return _opensim.GCVSpline_setY(self, aIndex, aValue)


    def getMinX(self):
        """
        getMinX(GCVSpline self) -> double

        Parameters:
            self: OpenSim::GCVSpline const *

        """
        return _opensim.GCVSpline_getMinX(self)


    def getMaxX(self):
        """
        getMaxX(GCVSpline self) -> double

        Parameters:
            self: OpenSim::GCVSpline const *

        """
        return _opensim.GCVSpline_getMaxX(self)


    def deletePoint(self, aIndex):
        """
        deletePoint(GCVSpline self, int aIndex) -> bool

        Parameters:
            aIndex: int

        """
        return _opensim.GCVSpline_deletePoint(self, aIndex)


    def deletePoints(self, indices):
        """
        deletePoints(GCVSpline self, ArrayInt indices) -> bool

        Parameters:
            indices: OpenSim::Array< int > const &

        """
        return _opensim.GCVSpline_deletePoints(self, indices)


    def addPoint(self, aX, aY):
        """
        addPoint(GCVSpline self, double aX, double aY) -> int

        Parameters:
            aX: double
            aY: double

        """
        return _opensim.GCVSpline_addPoint(self, aX, aY)


    def createSimTKFunction(self):
        """
        createSimTKFunction(GCVSpline self) -> SimTK::Function *

        Parameters:
            self: OpenSim::GCVSpline const *

        """
        return _opensim.GCVSpline_createSimTKFunction(self)

GCVSpline_swigregister = _opensim.GCVSpline_swigregister
GCVSpline_swigregister(GCVSpline)

def GCVSpline_safeDownCast(obj):
    """
    GCVSpline_safeDownCast(OpenSimObject obj) -> GCVSpline

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.GCVSpline_safeDownCast(obj)

def GCVSpline_getClassName():
    """GCVSpline_getClassName() -> std::string const &"""
    return _opensim.GCVSpline_getClassName()

class Sine(Function):
    """Proxy of C++ OpenSim::Sine class"""
    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sine, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sine, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Sine

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Sine_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Sine self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Sine_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Sine_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Sine self) -> Sine

        Parameters:
            self: OpenSim::Sine const *

        """
        return _opensim.Sine_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Sine self) -> std::string const &

        Parameters:
            self: OpenSim::Sine const *

        """
        return _opensim.Sine_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::Sine self) -> Sine
        __init__(OpenSim::Sine self, double amplitude, double omega, double phase) -> Sine

        Parameters:
            amplitude: double
            omega: double
            phase: double

        __init__(OpenSim::Sine self, Sine aFunc) -> Sine

        Parameters:
            aFunc: OpenSim::Sine const &

        """
        this = _opensim.new_Sine(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_Sine
    __del__ = lambda self: None

    def calcValue(self, x):
        """
        calcValue(Sine self, Vector x) -> double

        Parameters:
            x: SimTK::Vector const &

        """
        return _opensim.Sine_calcValue(self, x)


    def calcDerivative(self, derivComponents, x):
        """
        calcDerivative(Sine self, std::vector< int > const & derivComponents, Vector x) -> double

        Parameters:
            derivComponents: std::vector< int > const &
            x: SimTK::Vector const &

        """
        return _opensim.Sine_calcDerivative(self, derivComponents, x)


    def createSimTKFunction(self):
        """
        createSimTKFunction(Sine self) -> SimTK::Function *

        Parameters:
            self: OpenSim::Sine const *

        """
        return _opensim.Sine_createSimTKFunction(self)


    def getArgumentSize(self):
        """
        getArgumentSize(Sine self) -> int

        Parameters:
            self: OpenSim::Sine const *

        """
        return _opensim.Sine_getArgumentSize(self)


    def getMaxDerivativeOrder(self):
        """
        getMaxDerivativeOrder(Sine self) -> int

        Parameters:
            self: OpenSim::Sine const *

        """
        return _opensim.Sine_getMaxDerivativeOrder(self)

Sine_swigregister = _opensim.Sine_swigregister
Sine_swigregister(Sine)

def Sine_safeDownCast(obj):
    """
    Sine_safeDownCast(OpenSimObject obj) -> Sine

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Sine_safeDownCast(obj)

def Sine_getClassName():
    """Sine_getClassName() -> std::string const &"""
    return _opensim.Sine_getClassName()

class PolynomialFunction(Function):
    """Proxy of C++ OpenSim::PolynomialFunction class"""
    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolynomialFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolynomialFunction, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PolynomialFunction

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.PolynomialFunction_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(PolynomialFunction self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.PolynomialFunction_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.PolynomialFunction_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(PolynomialFunction self) -> PolynomialFunction

        Parameters:
            self: OpenSim::PolynomialFunction const *

        """
        return _opensim.PolynomialFunction_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PolynomialFunction self) -> std::string const &

        Parameters:
            self: OpenSim::PolynomialFunction const *

        """
        return _opensim.PolynomialFunction_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::PolynomialFunction self) -> PolynomialFunction
        __init__(OpenSim::PolynomialFunction self, Vector coefficients) -> PolynomialFunction

        Parameters:
            coefficients: SimTK::Vector

        """
        this = _opensim.new_PolynomialFunction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_PolynomialFunction
    __del__ = lambda self: None

    def setCoefficients(self, coefficients):
        """
        setCoefficients(PolynomialFunction self, Vector coefficients)

        Parameters:
            coefficients: SimTK::Vector

        """
        return _opensim.PolynomialFunction_setCoefficients(self, coefficients)


    def getCoefficients(self):
        """
        getCoefficients(PolynomialFunction self) -> Vector

        Parameters:
            self: OpenSim::PolynomialFunction const *

        """
        return _opensim.PolynomialFunction_getCoefficients(self)


    def createSimTKFunction(self):
        """
        createSimTKFunction(PolynomialFunction self) -> SimTK::Function *

        Parameters:
            self: OpenSim::PolynomialFunction const *

        """
        return _opensim.PolynomialFunction_createSimTKFunction(self)

PolynomialFunction_swigregister = _opensim.PolynomialFunction_swigregister
PolynomialFunction_swigregister(PolynomialFunction)

def PolynomialFunction_safeDownCast(obj):
    """
    PolynomialFunction_safeDownCast(OpenSimObject obj) -> PolynomialFunction

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.PolynomialFunction_safeDownCast(obj)

def PolynomialFunction_getClassName():
    """PolynomialFunction_getClassName() -> std::string const &"""
    return _opensim.PolynomialFunction_getClassName()

class SmoothSegmentedFunctionFactory(_object):
    """Proxy of C++ OpenSim::SmoothSegmentedFunctionFactory class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SmoothSegmentedFunctionFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SmoothSegmentedFunctionFactory, name)
    __repr__ = _swig_repr

    def createFiberActiveForceLengthCurve(lce0, lce1, lce2, lce3, minActiveForceLengthValue, plateauSlope, curviness, computeIntegral, curveName):
        """
        createFiberActiveForceLengthCurve(double lce0, double lce1, double lce2, double lce3, double minActiveForceLengthValue, double plateauSlope, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

        Parameters:
            lce0: double
            lce1: double
            lce2: double
            lce3: double
            minActiveForceLengthValue: double
            plateauSlope: double
            curviness: double
            computeIntegral: bool
            curveName: std::string const &

        """
        return _opensim.SmoothSegmentedFunctionFactory_createFiberActiveForceLengthCurve(lce0, lce1, lce2, lce3, minActiveForceLengthValue, plateauSlope, curviness, computeIntegral, curveName)

    if _newclass:
        createFiberActiveForceLengthCurve = staticmethod(createFiberActiveForceLengthCurve)
    __swig_getmethods__["createFiberActiveForceLengthCurve"] = lambda x: createFiberActiveForceLengthCurve

    def createFiberForceVelocityCurve(fmaxE, dydxC, dydxNearC, dydxIso, dydxE, dydxNearE, concCurviness, eccCurviness, computeIntegral, curveName):
        """
        createFiberForceVelocityCurve(double fmaxE, double dydxC, double dydxNearC, double dydxIso, double dydxE, double dydxNearE, double concCurviness, double eccCurviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

        Parameters:
            fmaxE: double
            dydxC: double
            dydxNearC: double
            dydxIso: double
            dydxE: double
            dydxNearE: double
            concCurviness: double
            eccCurviness: double
            computeIntegral: bool
            curveName: std::string const &

        """
        return _opensim.SmoothSegmentedFunctionFactory_createFiberForceVelocityCurve(fmaxE, dydxC, dydxNearC, dydxIso, dydxE, dydxNearE, concCurviness, eccCurviness, computeIntegral, curveName)

    if _newclass:
        createFiberForceVelocityCurve = staticmethod(createFiberForceVelocityCurve)
    __swig_getmethods__["createFiberForceVelocityCurve"] = lambda x: createFiberForceVelocityCurve

    def createFiberForceVelocityInverseCurve(fmaxE, dydxC, dydxNearC, dydxIso, dydxE, dydxNearE, concCurviness, eccCurviness, computeIntegral, muscleName):
        """
        createFiberForceVelocityInverseCurve(double fmaxE, double dydxC, double dydxNearC, double dydxIso, double dydxE, double dydxNearE, double concCurviness, double eccCurviness, bool computeIntegral, std::string const & muscleName) -> SmoothSegmentedFunction *

        Parameters:
            fmaxE: double
            dydxC: double
            dydxNearC: double
            dydxIso: double
            dydxE: double
            dydxNearE: double
            concCurviness: double
            eccCurviness: double
            computeIntegral: bool
            muscleName: std::string const &

        """
        return _opensim.SmoothSegmentedFunctionFactory_createFiberForceVelocityInverseCurve(fmaxE, dydxC, dydxNearC, dydxIso, dydxE, dydxNearE, concCurviness, eccCurviness, computeIntegral, muscleName)

    if _newclass:
        createFiberForceVelocityInverseCurve = staticmethod(createFiberForceVelocityInverseCurve)
    __swig_getmethods__["createFiberForceVelocityInverseCurve"] = lambda x: createFiberForceVelocityInverseCurve

    def createFiberCompressiveForcePennationCurve(phi0, kiso, curviness, computeIntegral, curveName):
        """
        createFiberCompressiveForcePennationCurve(double phi0, double kiso, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

        Parameters:
            phi0: double
            kiso: double
            curviness: double
            computeIntegral: bool
            curveName: std::string const &

        """
        return _opensim.SmoothSegmentedFunctionFactory_createFiberCompressiveForcePennationCurve(phi0, kiso, curviness, computeIntegral, curveName)

    if _newclass:
        createFiberCompressiveForcePennationCurve = staticmethod(createFiberCompressiveForcePennationCurve)
    __swig_getmethods__["createFiberCompressiveForcePennationCurve"] = lambda x: createFiberCompressiveForcePennationCurve

    def createFiberCompressiveForceCosPennationCurve(cosPhi0, kiso, curviness, computeIntegral, curveName):
        """
        createFiberCompressiveForceCosPennationCurve(double cosPhi0, double kiso, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

        Parameters:
            cosPhi0: double
            kiso: double
            curviness: double
            computeIntegral: bool
            curveName: std::string const &

        """
        return _opensim.SmoothSegmentedFunctionFactory_createFiberCompressiveForceCosPennationCurve(cosPhi0, kiso, curviness, computeIntegral, curveName)

    if _newclass:
        createFiberCompressiveForceCosPennationCurve = staticmethod(createFiberCompressiveForceCosPennationCurve)
    __swig_getmethods__["createFiberCompressiveForceCosPennationCurve"] = lambda x: createFiberCompressiveForceCosPennationCurve

    def createFiberCompressiveForceLengthCurve(l0, kiso, curviness, computeIntegral, curveName):
        """
        createFiberCompressiveForceLengthCurve(double l0, double kiso, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

        Parameters:
            l0: double
            kiso: double
            curviness: double
            computeIntegral: bool
            curveName: std::string const &

        """
        return _opensim.SmoothSegmentedFunctionFactory_createFiberCompressiveForceLengthCurve(l0, kiso, curviness, computeIntegral, curveName)

    if _newclass:
        createFiberCompressiveForceLengthCurve = staticmethod(createFiberCompressiveForceLengthCurve)
    __swig_getmethods__["createFiberCompressiveForceLengthCurve"] = lambda x: createFiberCompressiveForceLengthCurve

    def createFiberForceLengthCurve(eZero, eIso, kLow, kIso, curviness, computeIntegral, curveName):
        """
        createFiberForceLengthCurve(double eZero, double eIso, double kLow, double kIso, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

        Parameters:
            eZero: double
            eIso: double
            kLow: double
            kIso: double
            curviness: double
            computeIntegral: bool
            curveName: std::string const &

        """
        return _opensim.SmoothSegmentedFunctionFactory_createFiberForceLengthCurve(eZero, eIso, kLow, kIso, curviness, computeIntegral, curveName)

    if _newclass:
        createFiberForceLengthCurve = staticmethod(createFiberForceLengthCurve)
    __swig_getmethods__["createFiberForceLengthCurve"] = lambda x: createFiberForceLengthCurve

    def createTendonForceLengthCurve(eIso, kIso, fToe, curviness, computeIntegral, curveName):
        """
        createTendonForceLengthCurve(double eIso, double kIso, double fToe, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

        Parameters:
            eIso: double
            kIso: double
            fToe: double
            curviness: double
            computeIntegral: bool
            curveName: std::string const &

        """
        return _opensim.SmoothSegmentedFunctionFactory_createTendonForceLengthCurve(eIso, kIso, fToe, curviness, computeIntegral, curveName)

    if _newclass:
        createTendonForceLengthCurve = staticmethod(createTendonForceLengthCurve)
    __swig_getmethods__["createTendonForceLengthCurve"] = lambda x: createTendonForceLengthCurve

    def __init__(self):
        """__init__(OpenSim::SmoothSegmentedFunctionFactory self) -> SmoothSegmentedFunctionFactory"""
        this = _opensim.new_SmoothSegmentedFunctionFactory()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_SmoothSegmentedFunctionFactory
    __del__ = lambda self: None
SmoothSegmentedFunctionFactory_swigregister = _opensim.SmoothSegmentedFunctionFactory_swigregister
SmoothSegmentedFunctionFactory_swigregister(SmoothSegmentedFunctionFactory)

def SmoothSegmentedFunctionFactory_createFiberActiveForceLengthCurve(lce0, lce1, lce2, lce3, minActiveForceLengthValue, plateauSlope, curviness, computeIntegral, curveName):
    """
    SmoothSegmentedFunctionFactory_createFiberActiveForceLengthCurve(double lce0, double lce1, double lce2, double lce3, double minActiveForceLengthValue, double plateauSlope, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

    Parameters:
        lce0: double
        lce1: double
        lce2: double
        lce3: double
        minActiveForceLengthValue: double
        plateauSlope: double
        curviness: double
        computeIntegral: bool
        curveName: std::string const &

    """
    return _opensim.SmoothSegmentedFunctionFactory_createFiberActiveForceLengthCurve(lce0, lce1, lce2, lce3, minActiveForceLengthValue, plateauSlope, curviness, computeIntegral, curveName)

def SmoothSegmentedFunctionFactory_createFiberForceVelocityCurve(fmaxE, dydxC, dydxNearC, dydxIso, dydxE, dydxNearE, concCurviness, eccCurviness, computeIntegral, curveName):
    """
    SmoothSegmentedFunctionFactory_createFiberForceVelocityCurve(double fmaxE, double dydxC, double dydxNearC, double dydxIso, double dydxE, double dydxNearE, double concCurviness, double eccCurviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

    Parameters:
        fmaxE: double
        dydxC: double
        dydxNearC: double
        dydxIso: double
        dydxE: double
        dydxNearE: double
        concCurviness: double
        eccCurviness: double
        computeIntegral: bool
        curveName: std::string const &

    """
    return _opensim.SmoothSegmentedFunctionFactory_createFiberForceVelocityCurve(fmaxE, dydxC, dydxNearC, dydxIso, dydxE, dydxNearE, concCurviness, eccCurviness, computeIntegral, curveName)

def SmoothSegmentedFunctionFactory_createFiberForceVelocityInverseCurve(fmaxE, dydxC, dydxNearC, dydxIso, dydxE, dydxNearE, concCurviness, eccCurviness, computeIntegral, muscleName):
    """
    SmoothSegmentedFunctionFactory_createFiberForceVelocityInverseCurve(double fmaxE, double dydxC, double dydxNearC, double dydxIso, double dydxE, double dydxNearE, double concCurviness, double eccCurviness, bool computeIntegral, std::string const & muscleName) -> SmoothSegmentedFunction *

    Parameters:
        fmaxE: double
        dydxC: double
        dydxNearC: double
        dydxIso: double
        dydxE: double
        dydxNearE: double
        concCurviness: double
        eccCurviness: double
        computeIntegral: bool
        muscleName: std::string const &

    """
    return _opensim.SmoothSegmentedFunctionFactory_createFiberForceVelocityInverseCurve(fmaxE, dydxC, dydxNearC, dydxIso, dydxE, dydxNearE, concCurviness, eccCurviness, computeIntegral, muscleName)

def SmoothSegmentedFunctionFactory_createFiberCompressiveForcePennationCurve(phi0, kiso, curviness, computeIntegral, curveName):
    """
    SmoothSegmentedFunctionFactory_createFiberCompressiveForcePennationCurve(double phi0, double kiso, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

    Parameters:
        phi0: double
        kiso: double
        curviness: double
        computeIntegral: bool
        curveName: std::string const &

    """
    return _opensim.SmoothSegmentedFunctionFactory_createFiberCompressiveForcePennationCurve(phi0, kiso, curviness, computeIntegral, curveName)

def SmoothSegmentedFunctionFactory_createFiberCompressiveForceCosPennationCurve(cosPhi0, kiso, curviness, computeIntegral, curveName):
    """
    SmoothSegmentedFunctionFactory_createFiberCompressiveForceCosPennationCurve(double cosPhi0, double kiso, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

    Parameters:
        cosPhi0: double
        kiso: double
        curviness: double
        computeIntegral: bool
        curveName: std::string const &

    """
    return _opensim.SmoothSegmentedFunctionFactory_createFiberCompressiveForceCosPennationCurve(cosPhi0, kiso, curviness, computeIntegral, curveName)

def SmoothSegmentedFunctionFactory_createFiberCompressiveForceLengthCurve(l0, kiso, curviness, computeIntegral, curveName):
    """
    SmoothSegmentedFunctionFactory_createFiberCompressiveForceLengthCurve(double l0, double kiso, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

    Parameters:
        l0: double
        kiso: double
        curviness: double
        computeIntegral: bool
        curveName: std::string const &

    """
    return _opensim.SmoothSegmentedFunctionFactory_createFiberCompressiveForceLengthCurve(l0, kiso, curviness, computeIntegral, curveName)

def SmoothSegmentedFunctionFactory_createFiberForceLengthCurve(eZero, eIso, kLow, kIso, curviness, computeIntegral, curveName):
    """
    SmoothSegmentedFunctionFactory_createFiberForceLengthCurve(double eZero, double eIso, double kLow, double kIso, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

    Parameters:
        eZero: double
        eIso: double
        kLow: double
        kIso: double
        curviness: double
        computeIntegral: bool
        curveName: std::string const &

    """
    return _opensim.SmoothSegmentedFunctionFactory_createFiberForceLengthCurve(eZero, eIso, kLow, kIso, curviness, computeIntegral, curveName)

def SmoothSegmentedFunctionFactory_createTendonForceLengthCurve(eIso, kIso, fToe, curviness, computeIntegral, curveName):
    """
    SmoothSegmentedFunctionFactory_createTendonForceLengthCurve(double eIso, double kIso, double fToe, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

    Parameters:
        eIso: double
        kIso: double
        fToe: double
        curviness: double
        computeIntegral: bool
        curveName: std::string const &

    """
    return _opensim.SmoothSegmentedFunctionFactory_createTendonForceLengthCurve(eIso, kIso, fToe, curviness, computeIntegral, curveName)

class SmoothSegmentedFunction(_object):
    """Proxy of C++ OpenSim::SmoothSegmentedFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SmoothSegmentedFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SmoothSegmentedFunction, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(OpenSim::SmoothSegmentedFunction self) -> SmoothSegmentedFunction"""
        this = _opensim.new_SmoothSegmentedFunction()
        try:
            self.this.append(this)
        except:
            self.this = this

    def calcValue(self, x):
        """
        calcValue(SmoothSegmentedFunction self, double x) -> double

        Parameters:
            x: double

        """
        return _opensim.SmoothSegmentedFunction_calcValue(self, x)


    def calcDerivative(self, x, order):
        """
        calcDerivative(SmoothSegmentedFunction self, double x, int order) -> double

        Parameters:
            x: double
            order: int

        """
        return _opensim.SmoothSegmentedFunction_calcDerivative(self, x, order)


    def calcIntegral(self, x):
        """
        calcIntegral(SmoothSegmentedFunction self, double x) -> double

        Parameters:
            x: double

        """
        return _opensim.SmoothSegmentedFunction_calcIntegral(self, x)


    def isIntegralAvailable(self):
        """
        isIntegralAvailable(SmoothSegmentedFunction self) -> bool

        Parameters:
            self: OpenSim::SmoothSegmentedFunction const *

        """
        return _opensim.SmoothSegmentedFunction_isIntegralAvailable(self)


    def isIntegralComputedLeftToRight(self):
        """
        isIntegralComputedLeftToRight(SmoothSegmentedFunction self) -> bool

        Parameters:
            self: OpenSim::SmoothSegmentedFunction const *

        """
        return _opensim.SmoothSegmentedFunction_isIntegralComputedLeftToRight(self)


    def getName(self):
        """
        getName(SmoothSegmentedFunction self) -> std::string

        Parameters:
            self: OpenSim::SmoothSegmentedFunction const *

        """
        return _opensim.SmoothSegmentedFunction_getName(self)


    def setName(self, name):
        """
        setName(SmoothSegmentedFunction self, std::string & name)

        Parameters:
            name: std::string &

        """
        return _opensim.SmoothSegmentedFunction_setName(self, name)


    def getCurveDomain(self):
        """
        getCurveDomain(SmoothSegmentedFunction self) -> Vec2

        Parameters:
            self: OpenSim::SmoothSegmentedFunction const *

        """
        return _opensim.SmoothSegmentedFunction_getCurveDomain(self)


    def printMuscleCurveToCSVFile(self, path, domainMin, domainMax):
        """
        printMuscleCurveToCSVFile(SmoothSegmentedFunction self, std::string const & path, double domainMin, double domainMax)

        Parameters:
            path: std::string const &
            domainMin: double
            domainMax: double

        """
        return _opensim.SmoothSegmentedFunction_printMuscleCurveToCSVFile(self, path, domainMin, domainMax)


    def calcSampledMuscleCurve(self, maxOrder, domainMin, domainMax):
        """
        calcSampledMuscleCurve(SmoothSegmentedFunction self, int maxOrder, double domainMin, double domainMax) -> Matrix

        Parameters:
            maxOrder: int
            domainMin: double
            domainMax: double

        """
        return _opensim.SmoothSegmentedFunction_calcSampledMuscleCurve(self, maxOrder, domainMin, domainMax)

    __swig_destroy__ = _opensim.delete_SmoothSegmentedFunction
    __del__ = lambda self: None
SmoothSegmentedFunction_swigregister = _opensim.SmoothSegmentedFunction_swigregister
SmoothSegmentedFunction_swigregister(SmoothSegmentedFunction)

class XYPoint(_object):
    """Proxy of C++ OpenSim::XYPoint class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XYPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XYPoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_x"] = _opensim.XYPoint__x_set
    __swig_getmethods__["_x"] = _opensim.XYPoint__x_get
    if _newclass:
        _x = _swig_property(_opensim.XYPoint__x_get, _opensim.XYPoint__x_set)
    __swig_setmethods__["_y"] = _opensim.XYPoint__y_set
    __swig_getmethods__["_y"] = _opensim.XYPoint__y_get
    if _newclass:
        _y = _swig_property(_opensim.XYPoint__y_get, _opensim.XYPoint__y_set)

    def __init__(self, *args):
        """
        __init__(OpenSim::XYPoint self) -> XYPoint
        __init__(OpenSim::XYPoint self, double aX, double aY) -> XYPoint

        Parameters:
            aX: double
            aY: double

        """
        this = _opensim.new_XYPoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_XYPoint
    __del__ = lambda self: None
XYPoint_swigregister = _opensim.XYPoint_swigregister
XYPoint_swigregister(XYPoint)

class XYFunctionInterface(OpenSimObject):
    """Proxy of C++ OpenSim::XYFunctionInterface class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XYFunctionInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XYFunctionInterface, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> XYFunctionInterface

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.XYFunctionInterface_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(XYFunctionInterface self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.XYFunctionInterface_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.XYFunctionInterface_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(XYFunctionInterface self) -> XYFunctionInterface

        Parameters:
            self: OpenSim::XYFunctionInterface const *

        """
        return _opensim.XYFunctionInterface_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(XYFunctionInterface self) -> std::string const &

        Parameters:
            self: OpenSim::XYFunctionInterface const *

        """
        return _opensim.XYFunctionInterface_getConcreteClassName(self)

    typeConstant = _opensim.XYFunctionInterface_typeConstant
    typeStepFunction = _opensim.XYFunctionInterface_typeStepFunction
    typePiecewiseConstantFunction = _opensim.XYFunctionInterface_typePiecewiseConstantFunction
    typePiecewiseLinearFunction = _opensim.XYFunctionInterface_typePiecewiseLinearFunction
    typeLinearFunction = _opensim.XYFunctionInterface_typeLinearFunction
    typeNatCubicSpline = _opensim.XYFunctionInterface_typeNatCubicSpline
    typeGCVSpline = _opensim.XYFunctionInterface_typeGCVSpline
    typeUndefined = _opensim.XYFunctionInterface_typeUndefined

    def isXYFunction(f):
        """
        isXYFunction(Function f) -> bool

        Parameters:
            f: OpenSim::Function *

        """
        return _opensim.XYFunctionInterface_isXYFunction(f)

    if _newclass:
        isXYFunction = staticmethod(isXYFunction)
    __swig_getmethods__["isXYFunction"] = lambda x: isXYFunction

    def __init__(self, f):
        """
        __init__(OpenSim::XYFunctionInterface self, Function f) -> XYFunctionInterface

        Parameters:
            f: OpenSim::Function *

        """
        this = _opensim.new_XYFunctionInterface(f)
        try:
            self.this.append(this)
        except:
            self.this = this

    def isSpecifiedByControlPoints(self):
        """
        isSpecifiedByControlPoints(XYFunctionInterface self) -> bool

        Parameters:
            self: OpenSim::XYFunctionInterface const *

        """
        return _opensim.XYFunctionInterface_isSpecifiedByControlPoints(self)


    def getNumberOfPoints(self):
        """
        getNumberOfPoints(XYFunctionInterface self) -> int

        Parameters:
            self: OpenSim::XYFunctionInterface const *

        """
        return _opensim.XYFunctionInterface_getNumberOfPoints(self)


    def getXValues(self):
        """
        getXValues(XYFunctionInterface self) -> double const *

        Parameters:
            self: OpenSim::XYFunctionInterface const *

        """
        return _opensim.XYFunctionInterface_getXValues(self)


    def getYValues(self):
        """
        getYValues(XYFunctionInterface self) -> double const *

        Parameters:
            self: OpenSim::XYFunctionInterface const *

        """
        return _opensim.XYFunctionInterface_getYValues(self)


    def getX(self, aIndex):
        """
        getX(XYFunctionInterface self, int aIndex) -> double

        Parameters:
            aIndex: int

        """
        return _opensim.XYFunctionInterface_getX(self, aIndex)


    def getY(self, aIndex):
        """
        getY(XYFunctionInterface self, int aIndex) -> double

        Parameters:
            aIndex: int

        """
        return _opensim.XYFunctionInterface_getY(self, aIndex)


    def setX(self, aIndex, aValue):
        """
        setX(XYFunctionInterface self, int aIndex, double aValue)

        Parameters:
            aIndex: int
            aValue: double

        """
        return _opensim.XYFunctionInterface_setX(self, aIndex, aValue)


    def setY(self, aIndex, aValue):
        """
        setY(XYFunctionInterface self, int aIndex, double aValue)

        Parameters:
            aIndex: int
            aValue: double

        """
        return _opensim.XYFunctionInterface_setY(self, aIndex, aValue)


    def deletePoint(self, aIndex):
        """
        deletePoint(XYFunctionInterface self, int aIndex) -> bool

        Parameters:
            aIndex: int

        """
        return _opensim.XYFunctionInterface_deletePoint(self, aIndex)


    def deletePoints(self, indices):
        """
        deletePoints(XYFunctionInterface self, ArrayInt indices) -> bool

        Parameters:
            indices: OpenSim::Array< int > const &

        """
        return _opensim.XYFunctionInterface_deletePoints(self, indices)


    def addPoint(self, aX, aY):
        """
        addPoint(XYFunctionInterface self, double aX, double aY) -> int

        Parameters:
            aX: double
            aY: double

        """
        return _opensim.XYFunctionInterface_addPoint(self, aX, aY)


    def renderAsLineSegments(self, aIndex):
        """
        renderAsLineSegments(XYFunctionInterface self, int aIndex) -> ArrayXYPoint

        Parameters:
            aIndex: int

        """
        return _opensim.XYFunctionInterface_renderAsLineSegments(self, aIndex)


    def deleteXYPointArray(aArray):
        """
        deleteXYPointArray(ArrayXYPoint aArray)

        Parameters:
            aArray: OpenSim::Array< OpenSim::XYPoint > *

        """
        return _opensim.XYFunctionInterface_deleteXYPointArray(aArray)

    if _newclass:
        deleteXYPointArray = staticmethod(deleteXYPointArray)
    __swig_getmethods__["deleteXYPointArray"] = lambda x: deleteXYPointArray

    def getFunctionType(self):
        """
        getFunctionType(XYFunctionInterface self) -> OpenSim::XYFunctionInterface::FunctionType

        Parameters:
            self: OpenSim::XYFunctionInterface const *

        """
        return _opensim.XYFunctionInterface_getFunctionType(self)


    def getScale(self):
        """
        getScale(XYFunctionInterface self) -> double

        Parameters:
            self: OpenSim::XYFunctionInterface const *

        """
        return _opensim.XYFunctionInterface_getScale(self)


    def getConstant(self):
        """
        getConstant(XYFunctionInterface self) -> Constant

        Parameters:
            self: OpenSim::XYFunctionInterface const *

        """
        return _opensim.XYFunctionInterface_getConstant(self)


    def getStepFunction(self):
        """
        getStepFunction(XYFunctionInterface self) -> StepFunction

        Parameters:
            self: OpenSim::XYFunctionInterface const *

        """
        return _opensim.XYFunctionInterface_getStepFunction(self)


    def getMultiStepFunction(self):
        """
        getMultiStepFunction(XYFunctionInterface self) -> PiecewiseConstantFunction

        Parameters:
            self: OpenSim::XYFunctionInterface const *

        """
        return _opensim.XYFunctionInterface_getMultiStepFunction(self)


    def getPiecewiseLinearFunction(self):
        """
        getPiecewiseLinearFunction(XYFunctionInterface self) -> PiecewiseLinearFunction

        Parameters:
            self: OpenSim::XYFunctionInterface const *

        """
        return _opensim.XYFunctionInterface_getPiecewiseLinearFunction(self)


    def getLinearFunction(self):
        """
        getLinearFunction(XYFunctionInterface self) -> LinearFunction

        Parameters:
            self: OpenSim::XYFunctionInterface const *

        """
        return _opensim.XYFunctionInterface_getLinearFunction(self)


    def getSimmSpline(self):
        """
        getSimmSpline(XYFunctionInterface self) -> SimmSpline

        Parameters:
            self: OpenSim::XYFunctionInterface const *

        """
        return _opensim.XYFunctionInterface_getSimmSpline(self)


    def getGCVSpline(self):
        """
        getGCVSpline(XYFunctionInterface self) -> GCVSpline

        Parameters:
            self: OpenSim::XYFunctionInterface const *

        """
        return _opensim.XYFunctionInterface_getGCVSpline(self)

    __swig_destroy__ = _opensim.delete_XYFunctionInterface
    __del__ = lambda self: None
XYFunctionInterface_swigregister = _opensim.XYFunctionInterface_swigregister
XYFunctionInterface_swigregister(XYFunctionInterface)

def XYFunctionInterface_safeDownCast(obj):
    """
    XYFunctionInterface_safeDownCast(OpenSimObject obj) -> XYFunctionInterface

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.XYFunctionInterface_safeDownCast(obj)

def XYFunctionInterface_getClassName():
    """XYFunctionInterface_getClassName() -> std::string const &"""
    return _opensim.XYFunctionInterface_getClassName()

def XYFunctionInterface_isXYFunction(f):
    """
    XYFunctionInterface_isXYFunction(Function f) -> bool

    Parameters:
        f: OpenSim::Function *

    """
    return _opensim.XYFunctionInterface_isXYFunction(f)

def XYFunctionInterface_deleteXYPointArray(aArray):
    """
    XYFunctionInterface_deleteXYPointArray(ArrayXYPoint aArray)

    Parameters:
        aArray: OpenSim::Array< OpenSim::XYPoint > *

    """
    return _opensim.XYFunctionInterface_deleteXYPointArray(aArray)

class ArrayXYPoint(_object):
    """Proxy of C++ OpenSim::Array<(XYPoint)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayXYPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayXYPoint, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _opensim.delete_ArrayXYPoint
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Array<(XYPoint)> self, XYPoint aDefaultValue, int aSize=0, int aCapacity) -> ArrayXYPoint

        Parameters:
            aDefaultValue: OpenSim::XYPoint const &
            aSize: int
            aCapacity: int

        __init__(OpenSim::Array<(XYPoint)> self, XYPoint aDefaultValue, int aSize=0) -> ArrayXYPoint

        Parameters:
            aDefaultValue: OpenSim::XYPoint const &
            aSize: int

        __init__(OpenSim::Array<(XYPoint)> self, XYPoint aDefaultValue) -> ArrayXYPoint

        Parameters:
            aDefaultValue: OpenSim::XYPoint const &

        __init__(OpenSim::Array<(XYPoint)> self) -> ArrayXYPoint
        __init__(OpenSim::Array<(XYPoint)> self, ArrayXYPoint aArray) -> ArrayXYPoint

        Parameters:
            aArray: OpenSim::Array< OpenSim::XYPoint > const &

        """
        this = _opensim.new_ArrayXYPoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def arrayEquals(self, aArray):
        """
        arrayEquals(ArrayXYPoint self, ArrayXYPoint aArray) -> bool

        Parameters:
            aArray: OpenSim::Array< OpenSim::XYPoint > const &

        """
        return _opensim.ArrayXYPoint_arrayEquals(self, aArray)


    def trim(self):
        """
        trim(ArrayXYPoint self)

        Parameters:
            self: OpenSim::Array< XYPoint > *

        """
        return _opensim.ArrayXYPoint_trim(self)


    def setSize(self, aSize):
        """
        setSize(ArrayXYPoint self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.ArrayXYPoint_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayXYPoint self) -> int

        Parameters:
            self: OpenSim::Array< XYPoint > const *

        """
        return _opensim.ArrayXYPoint_getSize(self)


    def size(self):
        """
        size(ArrayXYPoint self) -> int

        Parameters:
            self: OpenSim::Array< XYPoint > const *

        """
        return _opensim.ArrayXYPoint_size(self)


    def append(self, *args):
        """
        append(ArrayXYPoint self, XYPoint aValue) -> int

        Parameters:
            aValue: OpenSim::XYPoint const &

        append(ArrayXYPoint self, ArrayXYPoint aArray) -> int

        Parameters:
            aArray: OpenSim::Array< OpenSim::XYPoint > const &

        """
        return _opensim.ArrayXYPoint_append(self, *args)


    def insert(self, aIndex, aValue):
        """
        insert(ArrayXYPoint self, int aIndex, XYPoint aValue) -> int

        Parameters:
            aIndex: int
            aValue: OpenSim::XYPoint const &

        """
        return _opensim.ArrayXYPoint_insert(self, aIndex, aValue)


    def remove(self, aIndex):
        """
        remove(ArrayXYPoint self, int aIndex) -> int

        Parameters:
            aIndex: int

        """
        return _opensim.ArrayXYPoint_remove(self, aIndex)


    def set(self, aIndex, aValue):
        """
        set(ArrayXYPoint self, int aIndex, XYPoint aValue)

        Parameters:
            aIndex: int
            aValue: OpenSim::XYPoint const &

        """
        return _opensim.ArrayXYPoint_set(self, aIndex, aValue)


    def get(self, aIndex):
        """
        get(ArrayXYPoint self, int aIndex) -> XYPoint

        Parameters:
            aIndex: int

        """
        return _opensim.ArrayXYPoint_get(self, aIndex)


    def getitem(self, index):
        """
        getitem(ArrayXYPoint self, int index) -> XYPoint

        Parameters:
            index: int

        """
        return _opensim.ArrayXYPoint_getitem(self, index)


    def setitem(self, index, val):
        """
        setitem(ArrayXYPoint self, int index, XYPoint val)

        Parameters:
            index: int
            val: OpenSim::XYPoint

        """
        return _opensim.ArrayXYPoint_setitem(self, index, val)


    def getLast(self):
        """
        getLast(ArrayXYPoint self) -> XYPoint

        Parameters:
            self: OpenSim::Array< XYPoint > const *

        """
        return _opensim.ArrayXYPoint_getLast(self)


    def findIndex(self, aValue):
        """
        findIndex(ArrayXYPoint self, XYPoint aValue) -> int

        Parameters:
            aValue: OpenSim::XYPoint const &

        """
        return _opensim.ArrayXYPoint_findIndex(self, aValue)


    def rfindIndex(self, aValue):
        """
        rfindIndex(ArrayXYPoint self, XYPoint aValue) -> int

        Parameters:
            aValue: OpenSim::XYPoint const &

        """
        return _opensim.ArrayXYPoint_rfindIndex(self, aValue)


    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayXYPoint self, XYPoint aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters:
            aValue: OpenSim::XYPoint const &
            aFindFirst: bool
            aLo: int
            aHi: int

        searchBinary(ArrayXYPoint self, XYPoint aValue, bool aFindFirst=False, int aLo=-1) -> int

        Parameters:
            aValue: OpenSim::XYPoint const &
            aFindFirst: bool
            aLo: int

        searchBinary(ArrayXYPoint self, XYPoint aValue, bool aFindFirst=False) -> int

        Parameters:
            aValue: OpenSim::XYPoint const &
            aFindFirst: bool

        searchBinary(ArrayXYPoint self, XYPoint aValue) -> int

        Parameters:
            aValue: OpenSim::XYPoint const &

        """
        return _opensim.ArrayXYPoint_searchBinary(self, aValue, aFindFirst, aLo, aHi)

ArrayXYPoint_swigregister = _opensim.ArrayXYPoint_swigregister
ArrayXYPoint_swigregister(ArrayXYPoint)

class ArrayBool(_object):
    """Proxy of C++ OpenSim::Array<(bool)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayBool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayBool, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _opensim.delete_ArrayBool
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Array<(bool)> self, bool const & aDefaultValue, int aSize=0, int aCapacity) -> ArrayBool

        Parameters:
            aDefaultValue: bool const &
            aSize: int
            aCapacity: int

        __init__(OpenSim::Array<(bool)> self, bool const & aDefaultValue, int aSize=0) -> ArrayBool

        Parameters:
            aDefaultValue: bool const &
            aSize: int

        __init__(OpenSim::Array<(bool)> self, bool const & aDefaultValue) -> ArrayBool

        Parameters:
            aDefaultValue: bool const &

        __init__(OpenSim::Array<(bool)> self) -> ArrayBool
        __init__(OpenSim::Array<(bool)> self, ArrayBool aArray) -> ArrayBool

        Parameters:
            aArray: OpenSim::Array< bool > const &

        """
        this = _opensim.new_ArrayBool(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def arrayEquals(self, aArray):
        """
        arrayEquals(ArrayBool self, ArrayBool aArray) -> bool

        Parameters:
            aArray: OpenSim::Array< bool > const &

        """
        return _opensim.ArrayBool_arrayEquals(self, aArray)


    def trim(self):
        """
        trim(ArrayBool self)

        Parameters:
            self: OpenSim::Array< bool > *

        """
        return _opensim.ArrayBool_trim(self)


    def setSize(self, aSize):
        """
        setSize(ArrayBool self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.ArrayBool_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayBool self) -> int

        Parameters:
            self: OpenSim::Array< bool > const *

        """
        return _opensim.ArrayBool_getSize(self)


    def size(self):
        """
        size(ArrayBool self) -> int

        Parameters:
            self: OpenSim::Array< bool > const *

        """
        return _opensim.ArrayBool_size(self)


    def append(self, *args):
        """
        append(ArrayBool self, bool const & aValue) -> int

        Parameters:
            aValue: bool const &

        append(ArrayBool self, ArrayBool aArray) -> int

        Parameters:
            aArray: OpenSim::Array< bool > const &

        """
        return _opensim.ArrayBool_append(self, *args)


    def insert(self, aIndex, aValue):
        """
        insert(ArrayBool self, int aIndex, bool const & aValue) -> int

        Parameters:
            aIndex: int
            aValue: bool const &

        """
        return _opensim.ArrayBool_insert(self, aIndex, aValue)


    def remove(self, aIndex):
        """
        remove(ArrayBool self, int aIndex) -> int

        Parameters:
            aIndex: int

        """
        return _opensim.ArrayBool_remove(self, aIndex)


    def set(self, aIndex, aValue):
        """
        set(ArrayBool self, int aIndex, bool const & aValue)

        Parameters:
            aIndex: int
            aValue: bool const &

        """
        return _opensim.ArrayBool_set(self, aIndex, aValue)


    def get(self, aIndex):
        """
        get(ArrayBool self, int aIndex) -> bool const &

        Parameters:
            aIndex: int

        """
        return _opensim.ArrayBool_get(self, aIndex)


    def getitem(self, index):
        """
        getitem(ArrayBool self, int index) -> bool

        Parameters:
            index: int

        """
        return _opensim.ArrayBool_getitem(self, index)


    def setitem(self, index, val):
        """
        setitem(ArrayBool self, int index, bool val)

        Parameters:
            index: int
            val: bool

        """
        return _opensim.ArrayBool_setitem(self, index, val)


    def getLast(self):
        """
        getLast(ArrayBool self) -> bool const &

        Parameters:
            self: OpenSim::Array< bool > const *

        """
        return _opensim.ArrayBool_getLast(self)


    def findIndex(self, aValue):
        """
        findIndex(ArrayBool self, bool const & aValue) -> int

        Parameters:
            aValue: bool const &

        """
        return _opensim.ArrayBool_findIndex(self, aValue)


    def rfindIndex(self, aValue):
        """
        rfindIndex(ArrayBool self, bool const & aValue) -> int

        Parameters:
            aValue: bool const &

        """
        return _opensim.ArrayBool_rfindIndex(self, aValue)


    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayBool self, bool const & aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters:
            aValue: bool const &
            aFindFirst: bool
            aLo: int
            aHi: int

        searchBinary(ArrayBool self, bool const & aValue, bool aFindFirst=False, int aLo=-1) -> int

        Parameters:
            aValue: bool const &
            aFindFirst: bool
            aLo: int

        searchBinary(ArrayBool self, bool const & aValue, bool aFindFirst=False) -> int

        Parameters:
            aValue: bool const &
            aFindFirst: bool

        searchBinary(ArrayBool self, bool const & aValue) -> int

        Parameters:
            aValue: bool const &

        """
        return _opensim.ArrayBool_searchBinary(self, aValue, aFindFirst, aLo, aHi)

ArrayBool_swigregister = _opensim.ArrayBool_swigregister
ArrayBool_swigregister(ArrayBool)

class ArrayDouble(_object):
    """Proxy of C++ OpenSim::Array<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayDouble, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _opensim.delete_ArrayDouble
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Array<(double)> self, double const & aDefaultValue, int aSize=0, int aCapacity) -> ArrayDouble

        Parameters:
            aDefaultValue: double const &
            aSize: int
            aCapacity: int

        __init__(OpenSim::Array<(double)> self, double const & aDefaultValue, int aSize=0) -> ArrayDouble

        Parameters:
            aDefaultValue: double const &
            aSize: int

        __init__(OpenSim::Array<(double)> self, double const & aDefaultValue) -> ArrayDouble

        Parameters:
            aDefaultValue: double const &

        __init__(OpenSim::Array<(double)> self) -> ArrayDouble
        __init__(OpenSim::Array<(double)> self, ArrayDouble aArray) -> ArrayDouble

        Parameters:
            aArray: OpenSim::Array< double > const &

        """
        this = _opensim.new_ArrayDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def arrayEquals(self, aArray):
        """
        arrayEquals(ArrayDouble self, ArrayDouble aArray) -> bool

        Parameters:
            aArray: OpenSim::Array< double > const &

        """
        return _opensim.ArrayDouble_arrayEquals(self, aArray)


    def trim(self):
        """
        trim(ArrayDouble self)

        Parameters:
            self: OpenSim::Array< double > *

        """
        return _opensim.ArrayDouble_trim(self)


    def setSize(self, aSize):
        """
        setSize(ArrayDouble self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.ArrayDouble_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayDouble self) -> int

        Parameters:
            self: OpenSim::Array< double > const *

        """
        return _opensim.ArrayDouble_getSize(self)


    def size(self):
        """
        size(ArrayDouble self) -> int

        Parameters:
            self: OpenSim::Array< double > const *

        """
        return _opensim.ArrayDouble_size(self)


    def append(self, *args):
        """
        append(ArrayDouble self, double const & aValue) -> int

        Parameters:
            aValue: double const &

        append(ArrayDouble self, ArrayDouble aArray) -> int

        Parameters:
            aArray: OpenSim::Array< double > const &

        """
        return _opensim.ArrayDouble_append(self, *args)


    def insert(self, aIndex, aValue):
        """
        insert(ArrayDouble self, int aIndex, double const & aValue) -> int

        Parameters:
            aIndex: int
            aValue: double const &

        """
        return _opensim.ArrayDouble_insert(self, aIndex, aValue)


    def remove(self, aIndex):
        """
        remove(ArrayDouble self, int aIndex) -> int

        Parameters:
            aIndex: int

        """
        return _opensim.ArrayDouble_remove(self, aIndex)


    def set(self, aIndex, aValue):
        """
        set(ArrayDouble self, int aIndex, double const & aValue)

        Parameters:
            aIndex: int
            aValue: double const &

        """
        return _opensim.ArrayDouble_set(self, aIndex, aValue)


    def get(self, aIndex):
        """
        get(ArrayDouble self, int aIndex) -> double const &

        Parameters:
            aIndex: int

        """
        return _opensim.ArrayDouble_get(self, aIndex)


    def getitem(self, index):
        """
        getitem(ArrayDouble self, int index) -> double

        Parameters:
            index: int

        """
        return _opensim.ArrayDouble_getitem(self, index)


    def setitem(self, index, val):
        """
        setitem(ArrayDouble self, int index, double val)

        Parameters:
            index: int
            val: double

        """
        return _opensim.ArrayDouble_setitem(self, index, val)


    def getLast(self):
        """
        getLast(ArrayDouble self) -> double const &

        Parameters:
            self: OpenSim::Array< double > const *

        """
        return _opensim.ArrayDouble_getLast(self)


    def findIndex(self, aValue):
        """
        findIndex(ArrayDouble self, double const & aValue) -> int

        Parameters:
            aValue: double const &

        """
        return _opensim.ArrayDouble_findIndex(self, aValue)


    def rfindIndex(self, aValue):
        """
        rfindIndex(ArrayDouble self, double const & aValue) -> int

        Parameters:
            aValue: double const &

        """
        return _opensim.ArrayDouble_rfindIndex(self, aValue)


    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayDouble self, double const & aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters:
            aValue: double const &
            aFindFirst: bool
            aLo: int
            aHi: int

        searchBinary(ArrayDouble self, double const & aValue, bool aFindFirst=False, int aLo=-1) -> int

        Parameters:
            aValue: double const &
            aFindFirst: bool
            aLo: int

        searchBinary(ArrayDouble self, double const & aValue, bool aFindFirst=False) -> int

        Parameters:
            aValue: double const &
            aFindFirst: bool

        searchBinary(ArrayDouble self, double const & aValue) -> int

        Parameters:
            aValue: double const &

        """
        return _opensim.ArrayDouble_searchBinary(self, aValue, aFindFirst, aLo, aHi)


    def appendVec3(self, vec3):
        """
        appendVec3(ArrayDouble self, Vec3 vec3)

        Parameters:
            vec3: SimTK::Vec3

        """
        return _opensim.ArrayDouble_appendVec3(self, vec3)


    def appendVector(self, vec):
        """
        appendVector(ArrayDouble self, Vector vec)

        Parameters:
            vec: SimTK::Vector

        """
        return _opensim.ArrayDouble_appendVector(self, vec)


    def getAsVec3(self):
        """
        getAsVec3(ArrayDouble self) -> Vec3

        Parameters:
            self: OpenSim::Array< double > *

        """
        return _opensim.ArrayDouble_getAsVec3(self)


    def createVec3(*args):
        """
        createVec3(double e1, double e2, double e3) -> Vec3

        Parameters:
            e1: double
            e2: double
            e3: double

        createVec3(double e1) -> Vec3

        Parameters:
            e1: double

        createVec3(double [3] es) -> Vec3

        Parameters:
            es: double [3]

        """
        return _opensim.ArrayDouble_createVec3(*args)

    if _newclass:
        createVec3 = staticmethod(createVec3)
    __swig_getmethods__["createVec3"] = lambda x: createVec3

    def getAsVector(self):
        """
        getAsVector(ArrayDouble self) -> Vector

        Parameters:
            self: OpenSim::Array< double > *

        """
        return _opensim.ArrayDouble_getAsVector(self)


    def populateFromVector(self, aVector):
        """
        populateFromVector(ArrayDouble self, Vector aVector)

        Parameters:
            aVector: SimTK::Vector_< double >

        """
        return _opensim.ArrayDouble_populateFromVector(self, aVector)


    def getValuesFromVec3(vec3):
        """
        getValuesFromVec3(Vec3 vec3) -> ArrayDouble

        Parameters:
            vec3: SimTK::Vec3

        """
        return _opensim.ArrayDouble_getValuesFromVec3(vec3)

    if _newclass:
        getValuesFromVec3 = staticmethod(getValuesFromVec3)
    __swig_getmethods__["getValuesFromVec3"] = lambda x: getValuesFromVec3

    def toString(self):
        """
        toString(ArrayDouble self) -> std::string

        Parameters:
            self: OpenSim::Array< double > const *

        """
        return _opensim.ArrayDouble_toString(self)


    def setFromPyArray(self, dValues, size):
        """
        setFromPyArray(ArrayDouble self, double * dValues, int size)

        Parameters:
            dValues: double *
            size: int

        """
        return _opensim.ArrayDouble_setFromPyArray(self, dValues, size)

ArrayDouble_swigregister = _opensim.ArrayDouble_swigregister
ArrayDouble_swigregister(ArrayDouble)

def ArrayDouble_createVec3(*args):
    """
    createVec3(double e1, double e2, double e3) -> Vec3

    Parameters:
        e1: double
        e2: double
        e3: double

    createVec3(double e1) -> Vec3

    Parameters:
        e1: double

    ArrayDouble_createVec3(double [3] es) -> Vec3

    Parameters:
        es: double [3]

    """
    return _opensim.ArrayDouble_createVec3(*args)

def ArrayDouble_getValuesFromVec3(vec3):
    """
    ArrayDouble_getValuesFromVec3(Vec3 vec3) -> ArrayDouble

    Parameters:
        vec3: SimTK::Vec3

    """
    return _opensim.ArrayDouble_getValuesFromVec3(vec3)

class ArrayInt(_object):
    """Proxy of C++ OpenSim::Array<(int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayInt, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _opensim.delete_ArrayInt
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Array<(int)> self, int const & aDefaultValue, int aSize=0, int aCapacity) -> ArrayInt

        Parameters:
            aDefaultValue: int const &
            aSize: int
            aCapacity: int

        __init__(OpenSim::Array<(int)> self, int const & aDefaultValue, int aSize=0) -> ArrayInt

        Parameters:
            aDefaultValue: int const &
            aSize: int

        __init__(OpenSim::Array<(int)> self, int const & aDefaultValue) -> ArrayInt

        Parameters:
            aDefaultValue: int const &

        __init__(OpenSim::Array<(int)> self) -> ArrayInt
        __init__(OpenSim::Array<(int)> self, ArrayInt aArray) -> ArrayInt

        Parameters:
            aArray: OpenSim::Array< int > const &

        """
        this = _opensim.new_ArrayInt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def arrayEquals(self, aArray):
        """
        arrayEquals(ArrayInt self, ArrayInt aArray) -> bool

        Parameters:
            aArray: OpenSim::Array< int > const &

        """
        return _opensim.ArrayInt_arrayEquals(self, aArray)


    def trim(self):
        """
        trim(ArrayInt self)

        Parameters:
            self: OpenSim::Array< int > *

        """
        return _opensim.ArrayInt_trim(self)


    def setSize(self, aSize):
        """
        setSize(ArrayInt self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.ArrayInt_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayInt self) -> int

        Parameters:
            self: OpenSim::Array< int > const *

        """
        return _opensim.ArrayInt_getSize(self)


    def size(self):
        """
        size(ArrayInt self) -> int

        Parameters:
            self: OpenSim::Array< int > const *

        """
        return _opensim.ArrayInt_size(self)


    def append(self, *args):
        """
        append(ArrayInt self, int const & aValue) -> int

        Parameters:
            aValue: int const &

        append(ArrayInt self, ArrayInt aArray) -> int

        Parameters:
            aArray: OpenSim::Array< int > const &

        """
        return _opensim.ArrayInt_append(self, *args)


    def insert(self, aIndex, aValue):
        """
        insert(ArrayInt self, int aIndex, int const & aValue) -> int

        Parameters:
            aIndex: int
            aValue: int const &

        """
        return _opensim.ArrayInt_insert(self, aIndex, aValue)


    def remove(self, aIndex):
        """
        remove(ArrayInt self, int aIndex) -> int

        Parameters:
            aIndex: int

        """
        return _opensim.ArrayInt_remove(self, aIndex)


    def set(self, aIndex, aValue):
        """
        set(ArrayInt self, int aIndex, int const & aValue)

        Parameters:
            aIndex: int
            aValue: int const &

        """
        return _opensim.ArrayInt_set(self, aIndex, aValue)


    def get(self, aIndex):
        """
        get(ArrayInt self, int aIndex) -> int const &

        Parameters:
            aIndex: int

        """
        return _opensim.ArrayInt_get(self, aIndex)


    def getitem(self, index):
        """
        getitem(ArrayInt self, int index) -> int

        Parameters:
            index: int

        """
        return _opensim.ArrayInt_getitem(self, index)


    def setitem(self, index, val):
        """
        setitem(ArrayInt self, int index, int val)

        Parameters:
            index: int
            val: int

        """
        return _opensim.ArrayInt_setitem(self, index, val)


    def getLast(self):
        """
        getLast(ArrayInt self) -> int const &

        Parameters:
            self: OpenSim::Array< int > const *

        """
        return _opensim.ArrayInt_getLast(self)


    def findIndex(self, aValue):
        """
        findIndex(ArrayInt self, int const & aValue) -> int

        Parameters:
            aValue: int const &

        """
        return _opensim.ArrayInt_findIndex(self, aValue)


    def rfindIndex(self, aValue):
        """
        rfindIndex(ArrayInt self, int const & aValue) -> int

        Parameters:
            aValue: int const &

        """
        return _opensim.ArrayInt_rfindIndex(self, aValue)


    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayInt self, int const & aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters:
            aValue: int const &
            aFindFirst: bool
            aLo: int
            aHi: int

        searchBinary(ArrayInt self, int const & aValue, bool aFindFirst=False, int aLo=-1) -> int

        Parameters:
            aValue: int const &
            aFindFirst: bool
            aLo: int

        searchBinary(ArrayInt self, int const & aValue, bool aFindFirst=False) -> int

        Parameters:
            aValue: int const &
            aFindFirst: bool

        searchBinary(ArrayInt self, int const & aValue) -> int

        Parameters:
            aValue: int const &

        """
        return _opensim.ArrayInt_searchBinary(self, aValue, aFindFirst, aLo, aHi)

ArrayInt_swigregister = _opensim.ArrayInt_swigregister
ArrayInt_swigregister(ArrayInt)

class ArrayStr(_object):
    """Proxy of C++ OpenSim::Array<(std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayStr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayStr, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _opensim.delete_ArrayStr
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Array<(std::string)> self, std::string const & aDefaultValue, int aSize=0, int aCapacity) -> ArrayStr

        Parameters:
            aDefaultValue: std::string const &
            aSize: int
            aCapacity: int

        __init__(OpenSim::Array<(std::string)> self, std::string const & aDefaultValue, int aSize=0) -> ArrayStr

        Parameters:
            aDefaultValue: std::string const &
            aSize: int

        __init__(OpenSim::Array<(std::string)> self, std::string const & aDefaultValue) -> ArrayStr

        Parameters:
            aDefaultValue: std::string const &

        __init__(OpenSim::Array<(std::string)> self) -> ArrayStr
        __init__(OpenSim::Array<(std::string)> self, ArrayStr aArray) -> ArrayStr

        Parameters:
            aArray: OpenSim::Array< std::string > const &

        """
        this = _opensim.new_ArrayStr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def arrayEquals(self, aArray):
        """
        arrayEquals(ArrayStr self, ArrayStr aArray) -> bool

        Parameters:
            aArray: OpenSim::Array< std::string > const &

        """
        return _opensim.ArrayStr_arrayEquals(self, aArray)


    def trim(self):
        """
        trim(ArrayStr self)

        Parameters:
            self: OpenSim::Array< std::string > *

        """
        return _opensim.ArrayStr_trim(self)


    def setSize(self, aSize):
        """
        setSize(ArrayStr self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.ArrayStr_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayStr self) -> int

        Parameters:
            self: OpenSim::Array< std::string > const *

        """
        return _opensim.ArrayStr_getSize(self)


    def size(self):
        """
        size(ArrayStr self) -> int

        Parameters:
            self: OpenSim::Array< std::string > const *

        """
        return _opensim.ArrayStr_size(self)


    def append(self, *args):
        """
        append(ArrayStr self, std::string const & aValue) -> int

        Parameters:
            aValue: std::string const &

        append(ArrayStr self, ArrayStr aArray) -> int

        Parameters:
            aArray: OpenSim::Array< std::string > const &

        """
        return _opensim.ArrayStr_append(self, *args)


    def insert(self, aIndex, aValue):
        """
        insert(ArrayStr self, int aIndex, std::string const & aValue) -> int

        Parameters:
            aIndex: int
            aValue: std::string const &

        """
        return _opensim.ArrayStr_insert(self, aIndex, aValue)


    def remove(self, aIndex):
        """
        remove(ArrayStr self, int aIndex) -> int

        Parameters:
            aIndex: int

        """
        return _opensim.ArrayStr_remove(self, aIndex)


    def set(self, aIndex, aValue):
        """
        set(ArrayStr self, int aIndex, std::string const & aValue)

        Parameters:
            aIndex: int
            aValue: std::string const &

        """
        return _opensim.ArrayStr_set(self, aIndex, aValue)


    def get(self, aIndex):
        """
        get(ArrayStr self, int aIndex) -> std::string const &

        Parameters:
            aIndex: int

        """
        return _opensim.ArrayStr_get(self, aIndex)


    def getitem(self, index):
        """
        getitem(ArrayStr self, int index) -> std::string

        Parameters:
            index: int

        """
        return _opensim.ArrayStr_getitem(self, index)


    def setitem(self, index, val):
        """
        setitem(ArrayStr self, int index, std::string val)

        Parameters:
            index: int
            val: std::string

        """
        return _opensim.ArrayStr_setitem(self, index, val)


    def getLast(self):
        """
        getLast(ArrayStr self) -> std::string const &

        Parameters:
            self: OpenSim::Array< std::string > const *

        """
        return _opensim.ArrayStr_getLast(self)


    def findIndex(self, aValue):
        """
        findIndex(ArrayStr self, std::string const & aValue) -> int

        Parameters:
            aValue: std::string const &

        """
        return _opensim.ArrayStr_findIndex(self, aValue)


    def rfindIndex(self, aValue):
        """
        rfindIndex(ArrayStr self, std::string const & aValue) -> int

        Parameters:
            aValue: std::string const &

        """
        return _opensim.ArrayStr_rfindIndex(self, aValue)


    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayStr self, std::string const & aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters:
            aValue: std::string const &
            aFindFirst: bool
            aLo: int
            aHi: int

        searchBinary(ArrayStr self, std::string const & aValue, bool aFindFirst=False, int aLo=-1) -> int

        Parameters:
            aValue: std::string const &
            aFindFirst: bool
            aLo: int

        searchBinary(ArrayStr self, std::string const & aValue, bool aFindFirst=False) -> int

        Parameters:
            aValue: std::string const &
            aFindFirst: bool

        searchBinary(ArrayStr self, std::string const & aValue) -> int

        Parameters:
            aValue: std::string const &

        """
        return _opensim.ArrayStr_searchBinary(self, aValue, aFindFirst, aLo, aHi)

ArrayStr_swigregister = _opensim.ArrayStr_swigregister
ArrayStr_swigregister(ArrayStr)

class ArrayObjPtr(_object):
    """Proxy of C++ OpenSim::Array<(p.OpenSim::Object)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayObjPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayObjPtr, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _opensim.delete_ArrayObjPtr
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Array<(p.OpenSim::Object)> self, OpenSimObject aDefaultValue, int aSize=0, int aCapacity) -> ArrayObjPtr

        Parameters:
            aDefaultValue: OpenSim::Object *const &
            aSize: int
            aCapacity: int

        __init__(OpenSim::Array<(p.OpenSim::Object)> self, OpenSimObject aDefaultValue, int aSize=0) -> ArrayObjPtr

        Parameters:
            aDefaultValue: OpenSim::Object *const &
            aSize: int

        __init__(OpenSim::Array<(p.OpenSim::Object)> self, OpenSimObject aDefaultValue) -> ArrayObjPtr

        Parameters:
            aDefaultValue: OpenSim::Object *const &

        __init__(OpenSim::Array<(p.OpenSim::Object)> self) -> ArrayObjPtr
        __init__(OpenSim::Array<(p.OpenSim::Object)> self, ArrayObjPtr aArray) -> ArrayObjPtr

        Parameters:
            aArray: OpenSim::Array< OpenSim::Object * > const &

        """
        this = _opensim.new_ArrayObjPtr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def arrayEquals(self, aArray):
        """
        arrayEquals(ArrayObjPtr self, ArrayObjPtr aArray) -> bool

        Parameters:
            aArray: OpenSim::Array< OpenSim::Object * > const &

        """
        return _opensim.ArrayObjPtr_arrayEquals(self, aArray)


    def trim(self):
        """
        trim(ArrayObjPtr self)

        Parameters:
            self: OpenSim::Array< OpenSim::Object * > *

        """
        return _opensim.ArrayObjPtr_trim(self)


    def setSize(self, aSize):
        """
        setSize(ArrayObjPtr self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.ArrayObjPtr_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayObjPtr self) -> int

        Parameters:
            self: OpenSim::Array< OpenSim::Object * > const *

        """
        return _opensim.ArrayObjPtr_getSize(self)


    def size(self):
        """
        size(ArrayObjPtr self) -> int

        Parameters:
            self: OpenSim::Array< OpenSim::Object * > const *

        """
        return _opensim.ArrayObjPtr_size(self)


    def append(self, *args):
        """
        append(ArrayObjPtr self, OpenSimObject aValue) -> int

        Parameters:
            aValue: OpenSim::Object *const &

        append(ArrayObjPtr self, ArrayObjPtr aArray) -> int

        Parameters:
            aArray: OpenSim::Array< OpenSim::Object * > const &

        """
        return _opensim.ArrayObjPtr_append(self, *args)


    def insert(self, aIndex, aValue):
        """
        insert(ArrayObjPtr self, int aIndex, OpenSimObject aValue) -> int

        Parameters:
            aIndex: int
            aValue: OpenSim::Object *const &

        """
        return _opensim.ArrayObjPtr_insert(self, aIndex, aValue)


    def remove(self, aIndex):
        """
        remove(ArrayObjPtr self, int aIndex) -> int

        Parameters:
            aIndex: int

        """
        return _opensim.ArrayObjPtr_remove(self, aIndex)


    def set(self, aIndex, aValue):
        """
        set(ArrayObjPtr self, int aIndex, OpenSimObject aValue)

        Parameters:
            aIndex: int
            aValue: OpenSim::Object *const &

        """
        return _opensim.ArrayObjPtr_set(self, aIndex, aValue)


    def get(self, aIndex):
        """
        get(ArrayObjPtr self, int aIndex) -> OpenSimObject

        Parameters:
            aIndex: int

        """
        return _opensim.ArrayObjPtr_get(self, aIndex)


    def getitem(self, index):
        """
        getitem(ArrayObjPtr self, int index) -> OpenSimObject

        Parameters:
            index: int

        """
        return _opensim.ArrayObjPtr_getitem(self, index)


    def setitem(self, index, val):
        """
        setitem(ArrayObjPtr self, int index, OpenSimObject val)

        Parameters:
            index: int
            val: OpenSim::Object *

        """
        return _opensim.ArrayObjPtr_setitem(self, index, val)


    def getLast(self):
        """
        getLast(ArrayObjPtr self) -> OpenSimObject

        Parameters:
            self: OpenSim::Array< OpenSim::Object * > const *

        """
        return _opensim.ArrayObjPtr_getLast(self)


    def findIndex(self, aValue):
        """
        findIndex(ArrayObjPtr self, OpenSimObject aValue) -> int

        Parameters:
            aValue: OpenSim::Object *const &

        """
        return _opensim.ArrayObjPtr_findIndex(self, aValue)


    def rfindIndex(self, aValue):
        """
        rfindIndex(ArrayObjPtr self, OpenSimObject aValue) -> int

        Parameters:
            aValue: OpenSim::Object *const &

        """
        return _opensim.ArrayObjPtr_rfindIndex(self, aValue)


    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayObjPtr self, OpenSimObject aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters:
            aValue: OpenSim::Object *const &
            aFindFirst: bool
            aLo: int
            aHi: int

        searchBinary(ArrayObjPtr self, OpenSimObject aValue, bool aFindFirst=False, int aLo=-1) -> int

        Parameters:
            aValue: OpenSim::Object *const &
            aFindFirst: bool
            aLo: int

        searchBinary(ArrayObjPtr self, OpenSimObject aValue, bool aFindFirst=False) -> int

        Parameters:
            aValue: OpenSim::Object *const &
            aFindFirst: bool

        searchBinary(ArrayObjPtr self, OpenSimObject aValue) -> int

        Parameters:
            aValue: OpenSim::Object *const &

        """
        return _opensim.ArrayObjPtr_searchBinary(self, aValue, aFindFirst, aLo, aHi)

ArrayObjPtr_swigregister = _opensim.ArrayObjPtr_swigregister
ArrayObjPtr_swigregister(ArrayObjPtr)

class ArrayPtrsObj(_object):
    """Proxy of C++ OpenSim::ArrayPtrs<(OpenSim::Object)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayPtrsObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayPtrsObj, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _opensim.delete_ArrayPtrsObj
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::ArrayPtrs<(OpenSim::Object)> self, int aCapacity=1) -> ArrayPtrsObj

        Parameters:
            aCapacity: int

        __init__(OpenSim::ArrayPtrs<(OpenSim::Object)> self) -> ArrayPtrsObj
        __init__(OpenSim::ArrayPtrs<(OpenSim::Object)> self, ArrayPtrsObj aArray) -> ArrayPtrsObj

        Parameters:
            aArray: OpenSim::ArrayPtrs< OpenSim::Object > const &

        """
        this = _opensim.new_ArrayPtrsObj(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def clearAndDestroy(self):
        """
        clearAndDestroy(ArrayPtrsObj self)

        Parameters:
            self: OpenSim::ArrayPtrs< OpenSim::Object > *

        """
        return _opensim.ArrayPtrsObj_clearAndDestroy(self)


    def setSize(self, aSize):
        """
        setSize(ArrayPtrsObj self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.ArrayPtrsObj_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayPtrsObj self) -> int

        Parameters:
            self: OpenSim::ArrayPtrs< OpenSim::Object > const *

        """
        return _opensim.ArrayPtrsObj_getSize(self)


    def size(self):
        """
        size(ArrayPtrsObj self) -> int

        Parameters:
            self: OpenSim::ArrayPtrs< OpenSim::Object > const *

        """
        return _opensim.ArrayPtrsObj_size(self)


    def getIndex(self, *args):
        """
        getIndex(ArrayPtrsObj self, OpenSimObject aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::Object const *
            aStartIndex: int

        getIndex(ArrayPtrsObj self, OpenSimObject aObject) -> int

        Parameters:
            aObject: OpenSim::Object const *

        getIndex(ArrayPtrsObj self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(ArrayPtrsObj self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.ArrayPtrsObj_getIndex(self, *args)


    def append(self, *args):
        """
        append(ArrayPtrsObj self, OpenSimObject aObject) -> bool

        Parameters:
            aObject: OpenSim::Object *

        append(ArrayPtrsObj self, ArrayPtrsObj aArray) -> bool

        Parameters:
            aArray: OpenSim::ArrayPtrs< OpenSim::Object > &

        """
        return _opensim.ArrayPtrsObj_append(self, *args)


    def insert(self, aIndex, aObject):
        """
        insert(ArrayPtrsObj self, int aIndex, OpenSimObject aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Object *

        """
        return _opensim.ArrayPtrsObj_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(ArrayPtrsObj self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(ArrayPtrsObj self, OpenSimObject aObject) -> bool

        Parameters:
            aObject: OpenSim::Object const *

        """
        return _opensim.ArrayPtrsObj_remove(self, *args)


    def set(self, aIndex, aObject):
        """
        set(ArrayPtrsObj self, int aIndex, OpenSimObject aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Object *

        """
        return _opensim.ArrayPtrsObj_set(self, aIndex, aObject)


    def get(self, *args):
        """
        get(ArrayPtrsObj self, int aIndex) -> OpenSimObject

        Parameters:
            aIndex: int

        get(ArrayPtrsObj self, std::string const & aName) -> OpenSimObject

        Parameters:
            aName: std::string const &

        """
        return _opensim.ArrayPtrsObj_get(self, *args)


    def getLast(self):
        """
        getLast(ArrayPtrsObj self) -> OpenSimObject

        Parameters:
            self: OpenSim::ArrayPtrs< OpenSim::Object > const *

        """
        return _opensim.ArrayPtrsObj_getLast(self)


    def searchBinary(self, aObject, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayPtrsObj self, OpenSimObject aObject, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters:
            aObject: OpenSim::Object const &
            aFindFirst: bool
            aLo: int
            aHi: int

        searchBinary(ArrayPtrsObj self, OpenSimObject aObject, bool aFindFirst=False, int aLo=-1) -> int

        Parameters:
            aObject: OpenSim::Object const &
            aFindFirst: bool
            aLo: int

        searchBinary(ArrayPtrsObj self, OpenSimObject aObject, bool aFindFirst=False) -> int

        Parameters:
            aObject: OpenSim::Object const &
            aFindFirst: bool

        searchBinary(ArrayPtrsObj self, OpenSimObject aObject) -> int

        Parameters:
            aObject: OpenSim::Object const &

        """
        return _opensim.ArrayPtrsObj_searchBinary(self, aObject, aFindFirst, aLo, aHi)

ArrayPtrsObj_swigregister = _opensim.ArrayPtrsObj_swigregister
ArrayPtrsObj_swigregister(ArrayPtrsObj)

class Scale(OpenSimObject):
    """Proxy of C++ OpenSim::Scale class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scale, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Scale, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Scale

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Scale_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Scale self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Scale_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Scale_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Scale self) -> Scale

        Parameters:
            self: OpenSim::Scale const *

        """
        return _opensim.Scale_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Scale self) -> std::string const &

        Parameters:
            self: OpenSim::Scale const *

        """
        return _opensim.Scale_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::Scale self) -> Scale
        __init__(OpenSim::Scale self, Scale aMarker) -> Scale

        Parameters:
            aMarker: OpenSim::Scale const &

        __init__(OpenSim::Scale self, std::string const & scaleFileName) -> Scale

        Parameters:
            scaleFileName: std::string const &

        """
        this = _opensim.new_Scale(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_Scale
    __del__ = lambda self: None

    def getSegmentName(self):
        """
        getSegmentName(Scale self) -> std::string const &

        Parameters:
            self: OpenSim::Scale const *

        """
        return _opensim.Scale_getSegmentName(self)


    def setSegmentName(self, aSegmentName):
        """
        setSegmentName(Scale self, std::string const & aSegmentName)

        Parameters:
            aSegmentName: std::string const &

        """
        return _opensim.Scale_setSegmentName(self, aSegmentName)


    def getScaleFactors(self, *args):
        """
        getScaleFactors(Scale self, Vec3 aScaleFactors)

        Parameters:
            aScaleFactors: SimTK::Vec3 &

        getScaleFactors(Scale self) -> Vec3
        getScaleFactors(Scale self, double [] rScaleFactors)

        Parameters:
            rScaleFactors: double []

        """
        return _opensim.Scale_getScaleFactors(self, *args)


    def setScaleFactors(self, *args):
        """
        setScaleFactors(Scale self, Vec3 aScaleFactors)

        Parameters:
            aScaleFactors: SimTK::Vec3 const &

        setScaleFactors(Scale self, double const [] aScaleFactors)

        Parameters:
            aScaleFactors: double const []

        """
        return _opensim.Scale_setScaleFactors(self, *args)


    def getApply(self):
        """
        getApply(Scale self) -> bool

        Parameters:
            self: OpenSim::Scale const *

        """
        return _opensim.Scale_getApply(self)


    def setApply(self, state):
        """
        setApply(Scale self, bool state)

        Parameters:
            state: bool

        """
        return _opensim.Scale_setApply(self, state)

Scale_swigregister = _opensim.Scale_swigregister
Scale_swigregister(Scale)

def Scale_safeDownCast(obj):
    """
    Scale_safeDownCast(OpenSimObject obj) -> Scale

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Scale_safeDownCast(obj)

def Scale_getClassName():
    """Scale_getClassName() -> std::string const &"""
    return _opensim.Scale_getClassName()

class SetScales(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::Scale)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetScales, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetScales, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetScales

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetScales_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetScales self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetScales_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetScales_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetScales self) -> SetScales

        Parameters:
            self: OpenSim::Set< OpenSim::Scale > const *

        """
        return _opensim.SetScales_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetScales self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::Scale > const *

        """
        return _opensim.SetScales_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetScales
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Scale)> self) -> SetScales
        __init__(OpenSim::Set<(OpenSim::Scale)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetScales

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Scale)> self, std::string const & aFileName) -> SetScales

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Scale)> self, SetScales aSet) -> SetScales

        Parameters:
            aSet: OpenSim::Set< OpenSim::Scale > const &

        """
        this = _opensim.new_SetScales(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetScales self)

        Parameters:
            self: OpenSim::Set< OpenSim::Scale > *

        """
        return _opensim.SetScales_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetScales self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetScales_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetScales self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetScales_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetScales self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Scale > const *

        """
        return _opensim.SetScales_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetScales self, Scale aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::Scale const *
            aStartIndex: int

        getIndex(SetScales self, Scale aObject) -> int

        Parameters:
            aObject: OpenSim::Scale const *

        getIndex(SetScales self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetScales self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetScales_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetScales self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetScales_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetScales self, Scale aObject) -> bool

        Parameters:
            aObject: OpenSim::Scale *

        """
        return _opensim.SetScales_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetScales self, Scale aObject) -> bool

        Parameters:
            aObject: OpenSim::Scale const &

        """
        return _opensim.SetScales_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetScales self, int aIndex, Scale aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Scale *

        """
        return _opensim.SetScales_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetScales self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetScales self, Scale aObject) -> bool

        Parameters:
            aObject: OpenSim::Scale const *

        """
        return _opensim.SetScales_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetScales self)

        Parameters:
            self: OpenSim::Set< OpenSim::Scale > *

        """
        return _opensim.SetScales_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetScales self, int aIndex, Scale aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Scale *
            preserveGroups: bool

        set(SetScales self, int aIndex, Scale aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Scale *

        """
        return _opensim.SetScales_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetScales self, int aIndex) -> Scale

        Parameters:
            aIndex: int

        get(SetScales self, std::string const & aName) -> Scale

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetScales_get(self, *args)


    def contains(self, aName):
        """
        contains(SetScales self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetScales_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetScales self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetScales_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetScales self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Scale > const *

        """
        return _opensim.SetScales_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetScales self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetScales_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetScales self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetScales_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetScales self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetScales_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetScales self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetScales_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetScales self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetScales_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetScales self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetScales self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetScales_getGroup(self, *args)

SetScales_swigregister = _opensim.SetScales_swigregister
SetScales_swigregister(SetScales)

def SetScales_safeDownCast(obj):
    """
    SetScales_safeDownCast(OpenSimObject obj) -> SetScales

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetScales_safeDownCast(obj)

def SetScales_getClassName():
    """SetScales_getClassName() -> std::string const &"""
    return _opensim.SetScales_getClassName()

class ScaleSet(SetScales):
    """Proxy of C++ OpenSim::ScaleSet class"""
    __swig_setmethods__ = {}
    for _s in [SetScales]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScaleSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetScales]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScaleSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ScaleSet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ScaleSet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ScaleSet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ScaleSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ScaleSet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ScaleSet self) -> ScaleSet

        Parameters:
            self: OpenSim::ScaleSet const *

        """
        return _opensim.ScaleSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ScaleSet self) -> std::string const &

        Parameters:
            self: OpenSim::ScaleSet const *

        """
        return _opensim.ScaleSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ScaleSet self) -> ScaleSet
        __init__(OpenSim::ScaleSet self, std::string const & scalesFileName) -> ScaleSet

        Parameters:
            scalesFileName: std::string const &

        """
        this = _opensim.new_ScaleSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_ScaleSet
    __del__ = lambda self: None
    def adoptAndAppend(self, aScale):
        aScale._markAdopted()
        return super(ScaleSet, self).adoptAndAppend(aScale)

ScaleSet_swigregister = _opensim.ScaleSet_swigregister
ScaleSet_swigregister(ScaleSet)

def ScaleSet_safeDownCast(obj):
    """
    ScaleSet_safeDownCast(OpenSimObject obj) -> ScaleSet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ScaleSet_safeDownCast(obj)

def ScaleSet_getClassName():
    """ScaleSet_getClassName() -> std::string const &"""
    return _opensim.ScaleSet_getClassName()

class MarkerFrame(OpenSimObject):
    """Proxy of C++ OpenSim::MarkerFrame class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarkerFrame, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarkerFrame, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MarkerFrame

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.MarkerFrame_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(MarkerFrame self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.MarkerFrame_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.MarkerFrame_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(MarkerFrame self) -> MarkerFrame

        Parameters:
            self: OpenSim::MarkerFrame const *

        """
        return _opensim.MarkerFrame_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MarkerFrame self) -> std::string const &

        Parameters:
            self: OpenSim::MarkerFrame const *

        """
        return _opensim.MarkerFrame_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::MarkerFrame self) -> MarkerFrame
        __init__(OpenSim::MarkerFrame self, int aNumMarkers, int aFrameNumber, double aTime, Units aUnits) -> MarkerFrame

        Parameters:
            aNumMarkers: int
            aFrameNumber: int
            aTime: double
            aUnits: OpenSim::Units &

        __init__(OpenSim::MarkerFrame self, MarkerFrame aFrame) -> MarkerFrame

        Parameters:
            aFrame: OpenSim::MarkerFrame const &

        """
        this = _opensim.new_MarkerFrame(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_MarkerFrame
    __del__ = lambda self: None

    def addMarker(self, aCoords):
        """
        addMarker(MarkerFrame self, Vec3 aCoords)

        Parameters:
            aCoords: SimTK::Vec3 const &

        """
        return _opensim.MarkerFrame_addMarker(self, aCoords)


    def getMarker(self, aIndex):
        """
        getMarker(MarkerFrame self, int aIndex) -> Vec3

        Parameters:
            aIndex: int

        """
        return _opensim.MarkerFrame_getMarker(self, aIndex)


    def updMarker(self, aIndex):
        """
        updMarker(MarkerFrame self, int aIndex) -> Vec3

        Parameters:
            aIndex: int

        """
        return _opensim.MarkerFrame_updMarker(self, aIndex)


    def getFrameNumber(self):
        """
        getFrameNumber(MarkerFrame self) -> int

        Parameters:
            self: OpenSim::MarkerFrame const *

        """
        return _opensim.MarkerFrame_getFrameNumber(self)


    def setFrameNumber(self, aNumber):
        """
        setFrameNumber(MarkerFrame self, int aNumber)

        Parameters:
            aNumber: int

        """
        return _opensim.MarkerFrame_setFrameNumber(self, aNumber)


    def getFrameTime(self):
        """
        getFrameTime(MarkerFrame self) -> double

        Parameters:
            self: OpenSim::MarkerFrame const *

        """
        return _opensim.MarkerFrame_getFrameTime(self)


    def scale(self, aScaleFactor):
        """
        scale(MarkerFrame self, double aScaleFactor)

        Parameters:
            aScaleFactor: double

        """
        return _opensim.MarkerFrame_scale(self, aScaleFactor)


    def getMarkers(self):
        """
        getMarkers(MarkerFrame self) -> SimTKArrayVec3

        Parameters:
            self: OpenSim::MarkerFrame const *

        """
        return _opensim.MarkerFrame_getMarkers(self)

MarkerFrame_swigregister = _opensim.MarkerFrame_swigregister
MarkerFrame_swigregister(MarkerFrame)

def MarkerFrame_safeDownCast(obj):
    """
    MarkerFrame_safeDownCast(OpenSimObject obj) -> MarkerFrame

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.MarkerFrame_safeDownCast(obj)

def MarkerFrame_getClassName():
    """MarkerFrame_getClassName() -> std::string const &"""
    return _opensim.MarkerFrame_getClassName()

class MarkerData(OpenSimObject):
    """Proxy of C++ OpenSim::MarkerData class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarkerData, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarkerData, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MarkerData

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.MarkerData_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(MarkerData self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.MarkerData_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.MarkerData_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(MarkerData self) -> MarkerData

        Parameters:
            self: OpenSim::MarkerData const *

        """
        return _opensim.MarkerData_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MarkerData self) -> std::string const &

        Parameters:
            self: OpenSim::MarkerData const *

        """
        return _opensim.MarkerData_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::MarkerData self) -> MarkerData
        __init__(OpenSim::MarkerData self, std::string const & aFileName) -> MarkerData

        Parameters:
            aFileName: std::string const &

        """
        this = _opensim.new_MarkerData(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_MarkerData
    __del__ = lambda self: None

    def findFrameRange(self, aStartTime, aEndTime, rStartFrame, rEndFrame):
        """
        findFrameRange(MarkerData self, double aStartTime, double aEndTime, int & rStartFrame, int & rEndFrame)

        Parameters:
            aStartTime: double
            aEndTime: double
            rStartFrame: int &
            rEndFrame: int &

        """
        return _opensim.MarkerData_findFrameRange(self, aStartTime, aEndTime, rStartFrame, rEndFrame)


    def averageFrames(self, *args):
        """
        averageFrames(MarkerData self, double aThreshold=-1.0, double aStartTime, double aEndTime)

        Parameters:
            aThreshold: double
            aStartTime: double
            aEndTime: double

        averageFrames(MarkerData self, double aThreshold=-1.0, double aStartTime)

        Parameters:
            aThreshold: double
            aStartTime: double

        averageFrames(MarkerData self, double aThreshold=-1.0)

        Parameters:
            aThreshold: double

        averageFrames(MarkerData self)

        Parameters:
            self: OpenSim::MarkerData *

        """
        return _opensim.MarkerData_averageFrames(self, *args)


    def getFileName(self):
        """
        getFileName(MarkerData self) -> std::string const &

        Parameters:
            self: OpenSim::MarkerData const *

        """
        return _opensim.MarkerData_getFileName(self)


    def makeRdStorage(self, rStorage):
        """
        makeRdStorage(MarkerData self, Storage rStorage)

        Parameters:
            rStorage: OpenSim::Storage &

        """
        return _opensim.MarkerData_makeRdStorage(self, rStorage)


    def getFrame(self, aIndex):
        """
        getFrame(MarkerData self, int aIndex) -> MarkerFrame

        Parameters:
            aIndex: int

        """
        return _opensim.MarkerData_getFrame(self, aIndex)


    def getMarkerIndex(self, aName):
        """
        getMarkerIndex(MarkerData self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.MarkerData_getMarkerIndex(self, aName)


    def getUnits(self):
        """
        getUnits(MarkerData self) -> Units

        Parameters:
            self: OpenSim::MarkerData const *

        """
        return _opensim.MarkerData_getUnits(self)


    def convertToUnits(self, aUnits):
        """
        convertToUnits(MarkerData self, Units aUnits)

        Parameters:
            aUnits: OpenSim::Units const &

        """
        return _opensim.MarkerData_convertToUnits(self, aUnits)


    def getMarkerNames(self):
        """
        getMarkerNames(MarkerData self) -> ArrayStr

        Parameters:
            self: OpenSim::MarkerData const *

        """
        return _opensim.MarkerData_getMarkerNames(self)


    def getNumMarkers(self):
        """
        getNumMarkers(MarkerData self) -> int

        Parameters:
            self: OpenSim::MarkerData const *

        """
        return _opensim.MarkerData_getNumMarkers(self)


    def getNumFrames(self):
        """
        getNumFrames(MarkerData self) -> int

        Parameters:
            self: OpenSim::MarkerData const *

        """
        return _opensim.MarkerData_getNumFrames(self)


    def getStartFrameTime(self):
        """
        getStartFrameTime(MarkerData self) -> double

        Parameters:
            self: OpenSim::MarkerData const *

        """
        return _opensim.MarkerData_getStartFrameTime(self)


    def getLastFrameTime(self):
        """
        getLastFrameTime(MarkerData self) -> double

        Parameters:
            self: OpenSim::MarkerData const *

        """
        return _opensim.MarkerData_getLastFrameTime(self)


    def getDataRate(self):
        """
        getDataRate(MarkerData self) -> double

        Parameters:
            self: OpenSim::MarkerData const *

        """
        return _opensim.MarkerData_getDataRate(self)


    def getCameraRate(self):
        """
        getCameraRate(MarkerData self) -> double

        Parameters:
            self: OpenSim::MarkerData const *

        """
        return _opensim.MarkerData_getCameraRate(self)

MarkerData_swigregister = _opensim.MarkerData_swigregister
MarkerData_swigregister(MarkerData)

def MarkerData_safeDownCast(obj):
    """
    MarkerData_safeDownCast(OpenSimObject obj) -> MarkerData

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.MarkerData_safeDownCast(obj)

def MarkerData_getClassName():
    """MarkerData_getClassName() -> std::string const &"""
    return _opensim.MarkerData_getClassName()

class ModelComponent(OpenSimObject):
    """Proxy of C++ OpenSim::ModelComponent class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponent, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponent, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelComponent

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ModelComponent_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ModelComponent self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ModelComponent_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ModelComponent_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ModelComponent self) -> ModelComponent

        Parameters:
            self: OpenSim::ModelComponent const *

        """
        return _opensim.ModelComponent_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponent self) -> std::string const &

        Parameters:
            self: OpenSim::ModelComponent const *

        """
        return _opensim.ModelComponent_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_ModelComponent
    __del__ = lambda self: None

    def getModel(self):
        """
        getModel(ModelComponent self) -> Model

        Parameters:
            self: OpenSim::ModelComponent const *

        """
        return _opensim.ModelComponent_getModel(self)


    def updModel(self):
        """
        updModel(ModelComponent self) -> Model

        Parameters:
            self: OpenSim::ModelComponent *

        """
        return _opensim.ModelComponent_updModel(self)


    def updateDisplayer(self, s):
        """
        updateDisplayer(ModelComponent self, State s)

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.ModelComponent_updateDisplayer(self, s)


    def getNumStateVariables(self):
        """
        getNumStateVariables(ModelComponent self) -> int

        Parameters:
            self: OpenSim::ModelComponent const *

        """
        return _opensim.ModelComponent_getNumStateVariables(self)


    def getStateVariableNames(self):
        """
        getStateVariableNames(ModelComponent self) -> ArrayStr

        Parameters:
            self: OpenSim::ModelComponent const *

        """
        return _opensim.ModelComponent_getStateVariableNames(self)


    def getStateVariableSystemIndex(self, stateVariableName):
        """
        getStateVariableSystemIndex(ModelComponent self, std::string const & stateVariableName) -> SimTK::SystemYIndex

        Parameters:
            stateVariableName: std::string const &

        """
        return _opensim.ModelComponent_getStateVariableSystemIndex(self, stateVariableName)


    def getModelingOption(self, state, name):
        """
        getModelingOption(ModelComponent self, State state, std::string const & name) -> int

        Parameters:
            state: SimTK::State const &
            name: std::string const &

        """
        return _opensim.ModelComponent_getModelingOption(self, state, name)


    def setModelingOption(self, state, name, flag):
        """
        setModelingOption(ModelComponent self, State state, std::string const & name, int flag)

        Parameters:
            state: SimTK::State &
            name: std::string const &
            flag: int

        """
        return _opensim.ModelComponent_setModelingOption(self, state, name, flag)


    def getStateVariable(self, state, name):
        """
        getStateVariable(ModelComponent self, State state, std::string const & name) -> double

        Parameters:
            state: SimTK::State const &
            name: std::string const &

        """
        return _opensim.ModelComponent_getStateVariable(self, state, name)


    def setStateVariable(self, state, name, value):
        """
        setStateVariable(ModelComponent self, State state, std::string const & name, double value)

        Parameters:
            state: SimTK::State &
            name: std::string const &
            value: double

        """
        return _opensim.ModelComponent_setStateVariable(self, state, name, value)


    def getDiscreteVariable(self, state, name):
        """
        getDiscreteVariable(ModelComponent self, State state, std::string const & name) -> double

        Parameters:
            state: SimTK::State const &
            name: std::string const &

        """
        return _opensim.ModelComponent_getDiscreteVariable(self, state, name)


    def setDiscreteVariable(self, state, name, value):
        """
        setDiscreteVariable(ModelComponent self, State state, std::string const & name, double value)

        Parameters:
            state: SimTK::State &
            name: std::string const &
            value: double

        """
        return _opensim.ModelComponent_setDiscreteVariable(self, state, name, value)


    def markCacheVariableValid(self, state, name):
        """
        markCacheVariableValid(ModelComponent self, State state, std::string const & name)

        Parameters:
            state: SimTK::State const &
            name: std::string const &

        """
        return _opensim.ModelComponent_markCacheVariableValid(self, state, name)


    def markCacheVariableInvalid(self, state, name):
        """
        markCacheVariableInvalid(ModelComponent self, State state, std::string const & name)

        Parameters:
            state: SimTK::State const &
            name: std::string const &

        """
        return _opensim.ModelComponent_markCacheVariableInvalid(self, state, name)


    def isCacheVariableValid(self, state, name):
        """
        isCacheVariableValid(ModelComponent self, State state, std::string const & name) -> bool

        Parameters:
            state: SimTK::State const &
            name: std::string const &

        """
        return _opensim.ModelComponent_isCacheVariableValid(self, state, name)

ModelComponent_swigregister = _opensim.ModelComponent_swigregister
ModelComponent_swigregister(ModelComponent)

def ModelComponent_safeDownCast(obj):
    """
    ModelComponent_safeDownCast(OpenSimObject obj) -> ModelComponent

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ModelComponent_safeDownCast(obj)

def ModelComponent_getClassName():
    """ModelComponent_getClassName() -> std::string const &"""
    return _opensim.ModelComponent_getClassName()

class SetModelComponents(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::ModelComponent)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetModelComponents, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetModelComponents, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetModelComponents

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetModelComponents_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetModelComponents self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetModelComponents_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetModelComponents_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetModelComponents self) -> SetModelComponents

        Parameters:
            self: OpenSim::Set< OpenSim::ModelComponent > const *

        """
        return _opensim.SetModelComponents_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetModelComponents self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::ModelComponent > const *

        """
        return _opensim.SetModelComponents_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetModelComponents
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::ModelComponent)> self) -> SetModelComponents
        __init__(OpenSim::Set<(OpenSim::ModelComponent)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetModelComponents

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::ModelComponent)> self, std::string const & aFileName) -> SetModelComponents

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::ModelComponent)> self, SetModelComponents aSet) -> SetModelComponents

        Parameters:
            aSet: OpenSim::Set< OpenSim::ModelComponent > const &

        """
        this = _opensim.new_SetModelComponents(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetModelComponents self)

        Parameters:
            self: OpenSim::Set< OpenSim::ModelComponent > *

        """
        return _opensim.SetModelComponents_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetModelComponents self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetModelComponents_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetModelComponents self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetModelComponents_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetModelComponents self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::ModelComponent > const *

        """
        return _opensim.SetModelComponents_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetModelComponents self, ModelComponent aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::ModelComponent const *
            aStartIndex: int

        getIndex(SetModelComponents self, ModelComponent aObject) -> int

        Parameters:
            aObject: OpenSim::ModelComponent const *

        getIndex(SetModelComponents self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetModelComponents self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetModelComponents_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetModelComponents self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetModelComponents_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetModelComponents self, ModelComponent aObject) -> bool

        Parameters:
            aObject: OpenSim::ModelComponent *

        """
        return _opensim.SetModelComponents_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetModelComponents self, ModelComponent aObject) -> bool

        Parameters:
            aObject: OpenSim::ModelComponent const &

        """
        return _opensim.SetModelComponents_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetModelComponents self, int aIndex, ModelComponent aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::ModelComponent *

        """
        return _opensim.SetModelComponents_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetModelComponents self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetModelComponents self, ModelComponent aObject) -> bool

        Parameters:
            aObject: OpenSim::ModelComponent const *

        """
        return _opensim.SetModelComponents_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetModelComponents self)

        Parameters:
            self: OpenSim::Set< OpenSim::ModelComponent > *

        """
        return _opensim.SetModelComponents_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetModelComponents self, int aIndex, ModelComponent aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::ModelComponent *
            preserveGroups: bool

        set(SetModelComponents self, int aIndex, ModelComponent aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::ModelComponent *

        """
        return _opensim.SetModelComponents_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetModelComponents self, int aIndex) -> ModelComponent

        Parameters:
            aIndex: int

        get(SetModelComponents self, std::string const & aName) -> ModelComponent

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetModelComponents_get(self, *args)


    def contains(self, aName):
        """
        contains(SetModelComponents self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetModelComponents_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetModelComponents self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetModelComponents_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetModelComponents self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::ModelComponent > const *

        """
        return _opensim.SetModelComponents_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetModelComponents self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetModelComponents_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetModelComponents self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetModelComponents_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetModelComponents self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetModelComponents_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetModelComponents self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetModelComponents_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetModelComponents self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetModelComponents_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetModelComponents self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetModelComponents self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetModelComponents_getGroup(self, *args)

SetModelComponents_swigregister = _opensim.SetModelComponents_swigregister
SetModelComponents_swigregister(SetModelComponents)

def SetModelComponents_safeDownCast(obj):
    """
    SetModelComponents_safeDownCast(OpenSimObject obj) -> SetModelComponents

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetModelComponents_safeDownCast(obj)

def SetModelComponents_getClassName():
    """SetModelComponents_getClassName() -> std::string const &"""
    return _opensim.SetModelComponents_getClassName()

class ModelComponentSetModelComponent(SetModelComponents):
    """Proxy of C++ OpenSim::ModelComponentSet<(OpenSim::ModelComponent)> class"""
    __swig_setmethods__ = {}
    for _s in [SetModelComponents]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponentSetModelComponent, name, value)
    __swig_getmethods__ = {}
    for _s in [SetModelComponents]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponentSetModelComponent, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelComponentSetModelComponent

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ModelComponentSetModelComponent_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ModelComponentSetModelComponent self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ModelComponentSetModelComponent_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ModelComponentSetModelComponent_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ModelComponentSetModelComponent self) -> ModelComponentSetModelComponent

        Parameters:
            self: OpenSim::ModelComponentSet< OpenSim::ModelComponent > const *

        """
        return _opensim.ModelComponentSetModelComponent_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponentSetModelComponent self) -> std::string const &

        Parameters:
            self: OpenSim::ModelComponentSet< OpenSim::ModelComponent > const *

        """
        return _opensim.ModelComponentSetModelComponent_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ModelComponentSet<(OpenSim::ModelComponent)> self) -> ModelComponentSetModelComponent
        __init__(OpenSim::ModelComponentSet<(OpenSim::ModelComponent)> self, Model model) -> ModelComponentSetModelComponent

        Parameters:
            model: OpenSim::Model &

        __init__(OpenSim::ModelComponentSet<(OpenSim::ModelComponent)> self, Model model, std::string const & fileName, bool aUpdateFromXMLNode=True) -> ModelComponentSetModelComponent

        Parameters:
            model: OpenSim::Model &
            fileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::ModelComponentSet<(OpenSim::ModelComponent)> self, Model model, std::string const & fileName) -> ModelComponentSetModelComponent

        Parameters:
            model: OpenSim::Model &
            fileName: std::string const &

        __init__(OpenSim::ModelComponentSet<(OpenSim::ModelComponent)> self, ModelComponentSetModelComponent source) -> ModelComponentSetModelComponent

        Parameters:
            source: OpenSim::ModelComponentSet< OpenSim::ModelComponent > const &

        """
        this = _opensim.new_ModelComponentSetModelComponent(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def insert(self, aIndex, aObject):
        """
        insert(ModelComponentSetModelComponent self, int aIndex, ModelComponent aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::ModelComponent *

        """
        return _opensim.ModelComponentSetModelComponent_insert(self, aIndex, aObject)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(ModelComponentSetModelComponent self, int aIndex, ModelComponent aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::ModelComponent *
            preserveGroups: bool

        set(ModelComponentSetModelComponent self, int aIndex, ModelComponent aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::ModelComponent *

        """
        return _opensim.ModelComponentSetModelComponent_set(self, aIndex, aObject, preserveGroups)


    def invokeConnectToModel(self, model):
        """
        invokeConnectToModel(ModelComponentSetModelComponent self, Model model)

        Parameters:
            model: OpenSim::Model &

        """
        return _opensim.ModelComponentSetModelComponent_invokeConnectToModel(self, model)


    def invokeAddToSystem(self, system):
        """
        invokeAddToSystem(ModelComponentSetModelComponent self, SimTK::MultibodySystem & system)

        Parameters:
            system: SimTK::MultibodySystem &

        """
        return _opensim.ModelComponentSetModelComponent_invokeAddToSystem(self, system)


    def invokeInitStateFromProperties(self, state):
        """
        invokeInitStateFromProperties(ModelComponentSetModelComponent self, State state)

        Parameters:
            state: SimTK::State &

        """
        return _opensim.ModelComponentSetModelComponent_invokeInitStateFromProperties(self, state)


    def invokeSetPropertiesFromState(self, state):
        """
        invokeSetPropertiesFromState(ModelComponentSetModelComponent self, State state)

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.ModelComponentSetModelComponent_invokeSetPropertiesFromState(self, state)


    def invokeGenerateDecorations(self, fixed, hints, state, appendToThis):
        """
        invokeGenerateDecorations(ModelComponentSetModelComponent self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters:
            fixed: bool
            hints: OpenSim::ModelDisplayHints const &
            state: SimTK::State const &
            appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _opensim.ModelComponentSetModelComponent_invokeGenerateDecorations(self, fixed, hints, state, appendToThis)

    __swig_destroy__ = _opensim.delete_ModelComponentSetModelComponent
    __del__ = lambda self: None
ModelComponentSetModelComponent_swigregister = _opensim.ModelComponentSetModelComponent_swigregister
ModelComponentSetModelComponent_swigregister(ModelComponentSetModelComponent)

def ModelComponentSetModelComponent_safeDownCast(obj):
    """
    ModelComponentSetModelComponent_safeDownCast(OpenSimObject obj) -> ModelComponentSetModelComponent

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ModelComponentSetModelComponent_safeDownCast(obj)

def ModelComponentSetModelComponent_getClassName():
    """ModelComponentSetModelComponent_getClassName() -> std::string const &"""
    return _opensim.ModelComponentSetModelComponent_getClassName()

class ComponentSet(ModelComponentSetModelComponent):
    """Proxy of C++ OpenSim::ComponentSet class"""
    __swig_setmethods__ = {}
    for _s in [ModelComponentSetModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentSet, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponentSetModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ComponentSet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ComponentSet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ComponentSet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ComponentSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ComponentSet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ComponentSet self) -> ComponentSet

        Parameters:
            self: OpenSim::ComponentSet const *

        """
        return _opensim.ComponentSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ComponentSet self) -> std::string const &

        Parameters:
            self: OpenSim::ComponentSet const *

        """
        return _opensim.ComponentSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ComponentSet self) -> ComponentSet
        __init__(OpenSim::ComponentSet self, Model model) -> ComponentSet

        Parameters:
            model: OpenSim::Model &

        __init__(OpenSim::ComponentSet self, Model model, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> ComponentSet

        Parameters:
            model: OpenSim::Model &
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::ComponentSet self, Model model, std::string const & aFileName) -> ComponentSet

        Parameters:
            model: OpenSim::Model &
            aFileName: std::string const &

        """
        this = _opensim.new_ComponentSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_ComponentSet
    __del__ = lambda self: None
ComponentSet_swigregister = _opensim.ComponentSet_swigregister
ComponentSet_swigregister(ComponentSet)

def ComponentSet_safeDownCast(obj):
    """
    ComponentSet_safeDownCast(OpenSimObject obj) -> ComponentSet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ComponentSet_safeDownCast(obj)

def ComponentSet_getClassName():
    """ComponentSet_getClassName() -> std::string const &"""
    return _opensim.ComponentSet_getClassName()

class SetMuscles(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::Muscle)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetMuscles, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetMuscles, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetMuscles

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetMuscles_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetMuscles self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetMuscles_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetMuscles_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetMuscles self) -> SetMuscles

        Parameters:
            self: OpenSim::Set< OpenSim::Muscle > const *

        """
        return _opensim.SetMuscles_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetMuscles self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::Muscle > const *

        """
        return _opensim.SetMuscles_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetMuscles
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Muscle)> self) -> SetMuscles
        __init__(OpenSim::Set<(OpenSim::Muscle)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetMuscles

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Muscle)> self, std::string const & aFileName) -> SetMuscles

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Muscle)> self, SetMuscles aSet) -> SetMuscles

        Parameters:
            aSet: OpenSim::Set< OpenSim::Muscle > const &

        """
        this = _opensim.new_SetMuscles(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetMuscles self)

        Parameters:
            self: OpenSim::Set< OpenSim::Muscle > *

        """
        return _opensim.SetMuscles_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetMuscles self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetMuscles_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetMuscles self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetMuscles_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetMuscles self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Muscle > const *

        """
        return _opensim.SetMuscles_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetMuscles self, Muscle aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::Muscle const *
            aStartIndex: int

        getIndex(SetMuscles self, Muscle aObject) -> int

        Parameters:
            aObject: OpenSim::Muscle const *

        getIndex(SetMuscles self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetMuscles self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetMuscles_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetMuscles self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetMuscles_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetMuscles self, Muscle aObject) -> bool

        Parameters:
            aObject: OpenSim::Muscle *

        """
        return _opensim.SetMuscles_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetMuscles self, Muscle aObject) -> bool

        Parameters:
            aObject: OpenSim::Muscle const &

        """
        return _opensim.SetMuscles_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetMuscles self, int aIndex, Muscle aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Muscle *

        """
        return _opensim.SetMuscles_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetMuscles self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetMuscles self, Muscle aObject) -> bool

        Parameters:
            aObject: OpenSim::Muscle const *

        """
        return _opensim.SetMuscles_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetMuscles self)

        Parameters:
            self: OpenSim::Set< OpenSim::Muscle > *

        """
        return _opensim.SetMuscles_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetMuscles self, int aIndex, Muscle aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Muscle *
            preserveGroups: bool

        set(SetMuscles self, int aIndex, Muscle aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Muscle *

        """
        return _opensim.SetMuscles_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetMuscles self, int aIndex) -> Muscle

        Parameters:
            aIndex: int

        get(SetMuscles self, std::string const & aName) -> Muscle

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetMuscles_get(self, *args)


    def contains(self, aName):
        """
        contains(SetMuscles self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetMuscles_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetMuscles self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetMuscles_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetMuscles self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Muscle > const *

        """
        return _opensim.SetMuscles_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetMuscles self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetMuscles_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetMuscles self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetMuscles_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetMuscles self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetMuscles_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetMuscles self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetMuscles_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetMuscles self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetMuscles_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetMuscles self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetMuscles self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetMuscles_getGroup(self, *args)

SetMuscles_swigregister = _opensim.SetMuscles_swigregister
SetMuscles_swigregister(SetMuscles)

def SetMuscles_safeDownCast(obj):
    """
    SetMuscles_safeDownCast(OpenSimObject obj) -> SetMuscles

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetMuscles_safeDownCast(obj)

def SetMuscles_getClassName():
    """SetMuscles_getClassName() -> std::string const &"""
    return _opensim.SetMuscles_getClassName()

class Solver(OpenSimObject):
    """Proxy of C++ OpenSim::Solver class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solver, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Solver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Solver

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Solver_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Solver self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Solver_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Solver_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Solver self) -> Solver

        Parameters:
            self: OpenSim::Solver const *

        """
        return _opensim.Solver_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Solver self) -> std::string const &

        Parameters:
            self: OpenSim::Solver const *

        """
        return _opensim.Solver_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_Solver
    __del__ = lambda self: None

    def getModel(self):
        """
        getModel(Solver self) -> Model

        Parameters:
            self: OpenSim::Solver const *

        """
        return _opensim.Solver_getModel(self)

Solver_swigregister = _opensim.Solver_swigregister
Solver_swigregister(Solver)

def Solver_safeDownCast(obj):
    """
    Solver_safeDownCast(OpenSimObject obj) -> Solver

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Solver_safeDownCast(obj)

def Solver_getClassName():
    """Solver_getClassName() -> std::string const &"""
    return _opensim.Solver_getClassName()

class InverseDynamicsSolver(Solver):
    """Proxy of C++ OpenSim::InverseDynamicsSolver class"""
    __swig_setmethods__ = {}
    for _s in [Solver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseDynamicsSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [Solver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InverseDynamicsSolver, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> InverseDynamicsSolver

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.InverseDynamicsSolver_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(InverseDynamicsSolver self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.InverseDynamicsSolver_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.InverseDynamicsSolver_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(InverseDynamicsSolver self) -> InverseDynamicsSolver

        Parameters:
            self: OpenSim::InverseDynamicsSolver const *

        """
        return _opensim.InverseDynamicsSolver_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(InverseDynamicsSolver self) -> std::string const &

        Parameters:
            self: OpenSim::InverseDynamicsSolver const *

        """
        return _opensim.InverseDynamicsSolver_getConcreteClassName(self)


    def __init__(self, model):
        """
        __init__(OpenSim::InverseDynamicsSolver self, Model model) -> InverseDynamicsSolver

        Parameters:
            model: OpenSim::Model const &

        """
        this = _opensim.new_InverseDynamicsSolver(model)
        try:
            self.this.append(this)
        except:
            self.this = this

    def solve(self, *args):
        """
        solve(InverseDynamicsSolver self, State s, Vector udot) -> Vector

        Parameters:
            s: SimTK::State const &
            udot: SimTK::Vector const &

        solve(InverseDynamicsSolver self, State s) -> Vector

        Parameters:
            s: SimTK::State const &

        solve(InverseDynamicsSolver self, State s, Vector udot, Vector appliedMobilityForces, VectorOfSpatialVec appliedBodyForces) -> Vector

        Parameters:
            s: SimTK::State const &
            udot: SimTK::Vector const &
            appliedMobilityForces: SimTK::Vector const &
            appliedBodyForces: SimTK::Vector_< SimTK::SpatialVec > const &

        solve(InverseDynamicsSolver self, State s, FunctionSet Qs, double time) -> Vector

        Parameters:
            s: SimTK::State &
            Qs: OpenSim::FunctionSet const &
            time: double

        """
        return _opensim.InverseDynamicsSolver_solve(self, *args)

    __swig_destroy__ = _opensim.delete_InverseDynamicsSolver
    __del__ = lambda self: None
InverseDynamicsSolver_swigregister = _opensim.InverseDynamicsSolver_swigregister
InverseDynamicsSolver_swigregister(InverseDynamicsSolver)

def InverseDynamicsSolver_safeDownCast(obj):
    """
    InverseDynamicsSolver_safeDownCast(OpenSimObject obj) -> InverseDynamicsSolver

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.InverseDynamicsSolver_safeDownCast(obj)

def InverseDynamicsSolver_getClassName():
    """InverseDynamicsSolver_getClassName() -> std::string const &"""
    return _opensim.InverseDynamicsSolver_getClassName()

class MomentArmSolver(Solver):
    """Proxy of C++ OpenSim::MomentArmSolver class"""
    __swig_setmethods__ = {}
    for _s in [Solver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MomentArmSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [Solver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MomentArmSolver, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MomentArmSolver

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.MomentArmSolver_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(MomentArmSolver self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.MomentArmSolver_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.MomentArmSolver_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(MomentArmSolver self) -> MomentArmSolver

        Parameters:
            self: OpenSim::MomentArmSolver const *

        """
        return _opensim.MomentArmSolver_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MomentArmSolver self) -> std::string const &

        Parameters:
            self: OpenSim::MomentArmSolver const *

        """
        return _opensim.MomentArmSolver_getConcreteClassName(self)


    def __init__(self, model):
        """
        __init__(OpenSim::MomentArmSolver self, Model model) -> MomentArmSolver

        Parameters:
            model: OpenSim::Model const &

        """
        this = _opensim.new_MomentArmSolver(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_MomentArmSolver
    __del__ = lambda self: None

    def solve(self, *args):
        """
        solve(MomentArmSolver self, State state, Coordinate coordinate, GeometryPath path) -> double

        Parameters:
            state: SimTK::State const &
            coordinate: OpenSim::Coordinate const &
            path: OpenSim::GeometryPath const &

        solve(MomentArmSolver self, State state, Coordinate coordinate, ArrayPointForceDirection pfds) -> double

        Parameters:
            state: SimTK::State const &
            coordinate: OpenSim::Coordinate const &
            pfds: OpenSim::Array< OpenSim::PointForceDirection * > const &

        """
        return _opensim.MomentArmSolver_solve(self, *args)

MomentArmSolver_swigregister = _opensim.MomentArmSolver_swigregister
MomentArmSolver_swigregister(MomentArmSolver)

def MomentArmSolver_safeDownCast(obj):
    """
    MomentArmSolver_safeDownCast(OpenSimObject obj) -> MomentArmSolver

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.MomentArmSolver_safeDownCast(obj)

def MomentArmSolver_getClassName():
    """MomentArmSolver_getClassName() -> std::string const &"""
    return _opensim.MomentArmSolver_getClassName()

class Force(ModelComponent):
    """Proxy of C++ OpenSim::Force class"""
    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Force, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Force, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Force

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Force_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Force self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Force_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Force_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Force self) -> Force

        Parameters:
            self: OpenSim::Force const *

        """
        return _opensim.Force_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Force self) -> std::string const &

        Parameters:
            self: OpenSim::Force const *

        """
        return _opensim.Force_getConcreteClassName(self)


    def copyProperty_isDisabled(self, source):
        """
        copyProperty_isDisabled(Force self, Force source)

        Parameters:
            source: OpenSim::Force::Self const &

        """
        return _opensim.Force_copyProperty_isDisabled(self, source)


    def append_isDisabled(self, value):
        """
        append_isDisabled(Force self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Force_append_isDisabled(self, value)


    def constructProperty_isDisabled(self, initValue):
        """
        constructProperty_isDisabled(Force self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Force_constructProperty_isDisabled(self, initValue)


    def get_isDisabled(self, *args):
        """
        get_isDisabled(Force self, int i) -> bool const

        Parameters:
            i: int

        get_isDisabled(Force self) -> bool const &

        Parameters:
            self: OpenSim::Force const *

        """
        return _opensim.Force_get_isDisabled(self, *args)


    def upd_isDisabled(self, *args):
        """
        upd_isDisabled(Force self, int i) -> bool

        Parameters:
            i: int

        upd_isDisabled(Force self) -> bool &

        Parameters:
            self: OpenSim::Force *

        """
        return _opensim.Force_upd_isDisabled(self, *args)


    def set_isDisabled(self, *args):
        """
        set_isDisabled(Force self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_isDisabled(Force self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Force_set_isDisabled(self, *args)


    def isDisabled(self, s):
        """
        isDisabled(Force self, State s) -> bool

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Force_isDisabled(self, s)


    def setDisabled(self, s, disabled):
        """
        setDisabled(Force self, State s, bool disabled)

        Parameters:
            s: SimTK::State &
            disabled: bool

        """
        return _opensim.Force_setDisabled(self, s, disabled)


    def getRecordLabels(self):
        """
        getRecordLabels(Force self) -> ArrayStr

        Parameters:
            self: OpenSim::Force const *

        """
        return _opensim.Force_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(Force self, State state) -> ArrayDouble

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.Force_getRecordValues(self, state)


    def hasGeometryPath(self):
        """
        hasGeometryPath(Force self) -> bool

        Parameters:
            self: OpenSim::Force const *

        """
        return _opensim.Force_hasGeometryPath(self)

    __swig_destroy__ = _opensim.delete_Force
    __del__ = lambda self: None
Force_swigregister = _opensim.Force_swigregister
Force_swigregister(Force)

def Force_safeDownCast(obj):
    """
    Force_safeDownCast(OpenSimObject obj) -> Force

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Force_safeDownCast(obj)

def Force_getClassName():
    """Force_getClassName() -> std::string const &"""
    return _opensim.Force_getClassName()

class SetForces(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::Force)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetForces, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetForces, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetForces

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetForces_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetForces self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetForces_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetForces_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetForces self) -> SetForces

        Parameters:
            self: OpenSim::Set< OpenSim::Force > const *

        """
        return _opensim.SetForces_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetForces self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::Force > const *

        """
        return _opensim.SetForces_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetForces
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Force)> self) -> SetForces
        __init__(OpenSim::Set<(OpenSim::Force)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetForces

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Force)> self, std::string const & aFileName) -> SetForces

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Force)> self, SetForces aSet) -> SetForces

        Parameters:
            aSet: OpenSim::Set< OpenSim::Force > const &

        """
        this = _opensim.new_SetForces(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetForces self)

        Parameters:
            self: OpenSim::Set< OpenSim::Force > *

        """
        return _opensim.SetForces_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetForces self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetForces_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetForces self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetForces_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetForces self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Force > const *

        """
        return _opensim.SetForces_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetForces self, Force aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::Force const *
            aStartIndex: int

        getIndex(SetForces self, Force aObject) -> int

        Parameters:
            aObject: OpenSim::Force const *

        getIndex(SetForces self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetForces self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetForces_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetForces self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetForces_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetForces self, Force aObject) -> bool

        Parameters:
            aObject: OpenSim::Force *

        """
        return _opensim.SetForces_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetForces self, Force aObject) -> bool

        Parameters:
            aObject: OpenSim::Force const &

        """
        return _opensim.SetForces_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetForces self, int aIndex, Force aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Force *

        """
        return _opensim.SetForces_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetForces self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetForces self, Force aObject) -> bool

        Parameters:
            aObject: OpenSim::Force const *

        """
        return _opensim.SetForces_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetForces self)

        Parameters:
            self: OpenSim::Set< OpenSim::Force > *

        """
        return _opensim.SetForces_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetForces self, int aIndex, Force aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Force *
            preserveGroups: bool

        set(SetForces self, int aIndex, Force aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Force *

        """
        return _opensim.SetForces_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetForces self, int aIndex) -> Force

        Parameters:
            aIndex: int

        get(SetForces self, std::string const & aName) -> Force

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetForces_get(self, *args)


    def contains(self, aName):
        """
        contains(SetForces self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetForces_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetForces self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetForces_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetForces self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Force > const *

        """
        return _opensim.SetForces_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetForces self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetForces_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetForces self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetForces_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetForces self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetForces_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetForces self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetForces_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetForces self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetForces_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetForces self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetForces self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetForces_getGroup(self, *args)

SetForces_swigregister = _opensim.SetForces_swigregister
SetForces_swigregister(SetForces)

def SetForces_safeDownCast(obj):
    """
    SetForces_safeDownCast(OpenSimObject obj) -> SetForces

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetForces_safeDownCast(obj)

def SetForces_getClassName():
    """SetForces_getClassName() -> std::string const &"""
    return _opensim.SetForces_getClassName()

class ModelComponentSetForces(SetForces):
    """Proxy of C++ OpenSim::ModelComponentSet<(OpenSim::Force)> class"""
    __swig_setmethods__ = {}
    for _s in [SetForces]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponentSetForces, name, value)
    __swig_getmethods__ = {}
    for _s in [SetForces]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponentSetForces, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelComponentSetForces

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ModelComponentSetForces_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ModelComponentSetForces self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ModelComponentSetForces_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ModelComponentSetForces_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ModelComponentSetForces self) -> ModelComponentSetForces

        Parameters:
            self: OpenSim::ModelComponentSet< OpenSim::Force > const *

        """
        return _opensim.ModelComponentSetForces_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponentSetForces self) -> std::string const &

        Parameters:
            self: OpenSim::ModelComponentSet< OpenSim::Force > const *

        """
        return _opensim.ModelComponentSetForces_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ModelComponentSet<(OpenSim::Force)> self) -> ModelComponentSetForces
        __init__(OpenSim::ModelComponentSet<(OpenSim::Force)> self, Model model) -> ModelComponentSetForces

        Parameters:
            model: OpenSim::Model &

        __init__(OpenSim::ModelComponentSet<(OpenSim::Force)> self, Model model, std::string const & fileName, bool aUpdateFromXMLNode=True) -> ModelComponentSetForces

        Parameters:
            model: OpenSim::Model &
            fileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::ModelComponentSet<(OpenSim::Force)> self, Model model, std::string const & fileName) -> ModelComponentSetForces

        Parameters:
            model: OpenSim::Model &
            fileName: std::string const &

        __init__(OpenSim::ModelComponentSet<(OpenSim::Force)> self, ModelComponentSetForces source) -> ModelComponentSetForces

        Parameters:
            source: OpenSim::ModelComponentSet< OpenSim::Force > const &

        """
        this = _opensim.new_ModelComponentSetForces(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def insert(self, aIndex, aObject):
        """
        insert(ModelComponentSetForces self, int aIndex, Force aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Force *

        """
        return _opensim.ModelComponentSetForces_insert(self, aIndex, aObject)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(ModelComponentSetForces self, int aIndex, Force aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Force *
            preserveGroups: bool

        set(ModelComponentSetForces self, int aIndex, Force aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Force *

        """
        return _opensim.ModelComponentSetForces_set(self, aIndex, aObject, preserveGroups)


    def invokeConnectToModel(self, model):
        """
        invokeConnectToModel(ModelComponentSetForces self, Model model)

        Parameters:
            model: OpenSim::Model &

        """
        return _opensim.ModelComponentSetForces_invokeConnectToModel(self, model)


    def invokeAddToSystem(self, system):
        """
        invokeAddToSystem(ModelComponentSetForces self, SimTK::MultibodySystem & system)

        Parameters:
            system: SimTK::MultibodySystem &

        """
        return _opensim.ModelComponentSetForces_invokeAddToSystem(self, system)


    def invokeInitStateFromProperties(self, state):
        """
        invokeInitStateFromProperties(ModelComponentSetForces self, State state)

        Parameters:
            state: SimTK::State &

        """
        return _opensim.ModelComponentSetForces_invokeInitStateFromProperties(self, state)


    def invokeSetPropertiesFromState(self, state):
        """
        invokeSetPropertiesFromState(ModelComponentSetForces self, State state)

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.ModelComponentSetForces_invokeSetPropertiesFromState(self, state)


    def invokeGenerateDecorations(self, fixed, hints, state, appendToThis):
        """
        invokeGenerateDecorations(ModelComponentSetForces self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters:
            fixed: bool
            hints: OpenSim::ModelDisplayHints const &
            state: SimTK::State const &
            appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _opensim.ModelComponentSetForces_invokeGenerateDecorations(self, fixed, hints, state, appendToThis)

    __swig_destroy__ = _opensim.delete_ModelComponentSetForces
    __del__ = lambda self: None
ModelComponentSetForces_swigregister = _opensim.ModelComponentSetForces_swigregister
ModelComponentSetForces_swigregister(ModelComponentSetForces)

def ModelComponentSetForces_safeDownCast(obj):
    """
    ModelComponentSetForces_safeDownCast(OpenSimObject obj) -> ModelComponentSetForces

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ModelComponentSetForces_safeDownCast(obj)

def ModelComponentSetForces_getClassName():
    """ModelComponentSetForces_getClassName() -> std::string const &"""
    return _opensim.ModelComponentSetForces_getClassName()

class ForceSet(ModelComponentSetForces):
    """Proxy of C++ OpenSim::ForceSet class"""
    __swig_setmethods__ = {}
    for _s in [ModelComponentSetForces]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForceSet, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponentSetForces]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForceSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ForceSet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ForceSet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ForceSet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ForceSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ForceSet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ForceSet self) -> ForceSet

        Parameters:
            self: OpenSim::ForceSet const *

        """
        return _opensim.ForceSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ForceSet self) -> std::string const &

        Parameters:
            self: OpenSim::ForceSet const *

        """
        return _opensim.ForceSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ForceSet self) -> ForceSet
        __init__(OpenSim::ForceSet self, Model model) -> ForceSet

        Parameters:
            model: OpenSim::Model &

        __init__(OpenSim::ForceSet self, Model model, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> ForceSet

        Parameters:
            model: OpenSim::Model &
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::ForceSet self, Model model, std::string const & aFileName) -> ForceSet

        Parameters:
            model: OpenSim::Model &
            aFileName: std::string const &

        __init__(OpenSim::ForceSet self, ForceSet aForceSet) -> ForceSet

        Parameters:
            aForceSet: OpenSim::ForceSet const &

        """
        this = _opensim.new_ForceSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_ForceSet
    __del__ = lambda self: None

    def invokeConnectToModel(self, aModel):
        """
        invokeConnectToModel(ForceSet self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.ForceSet_invokeConnectToModel(self, aModel)


    def remove(self, aIndex):
        """
        remove(ForceSet self, int aIndex) -> bool

        Parameters:
            aIndex: int

        """
        return _opensim.ForceSet_remove(self, aIndex)


    def appendNative(self, aForce):
        """
        appendNative(ForceSet self, Force aForce) -> bool

        Parameters:
            aForce: OpenSim::Force *

        """
        return _opensim.ForceSet_appendNative(self, aForce)


    def append(self, aForceSet, aAllowDuplicateNames=False):
        """
        append(ForceSet self, ForceSet aForceSet, bool aAllowDuplicateNames=False) -> bool

        Parameters:
            aForceSet: OpenSim::ForceSet &
            aAllowDuplicateNames: bool

        append(ForceSet self, ForceSet aForceSet) -> bool

        Parameters:
            aForceSet: OpenSim::ForceSet &

        """
        return _opensim.ForceSet_append(self, aForceSet, aAllowDuplicateNames)


    def set(self, aIndex, aForce):
        """
        set(ForceSet self, int aIndex, Force aForce) -> bool

        Parameters:
            aIndex: int
            aForce: OpenSim::Force *

        """
        return _opensim.ForceSet_set(self, aIndex, aForce)


    def insert(self, aIndex, aObject):
        """
        insert(ForceSet self, int aIndex, Force aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Force *

        """
        return _opensim.ForceSet_insert(self, aIndex, aObject)


    def getActuators(self):
        """
        getActuators(ForceSet self) -> SetActuators

        Parameters:
            self: OpenSim::ForceSet const *

        """
        return _opensim.ForceSet_getActuators(self)


    def updActuators(self):
        """
        updActuators(ForceSet self) -> SetActuators

        Parameters:
            self: OpenSim::ForceSet *

        """
        return _opensim.ForceSet_updActuators(self)


    def getMuscles(self):
        """
        getMuscles(ForceSet self) -> SetMuscles

        Parameters:
            self: OpenSim::ForceSet const *

        """
        return _opensim.ForceSet_getMuscles(self)


    def updMuscles(self):
        """
        updMuscles(ForceSet self) -> SetMuscles

        Parameters:
            self: OpenSim::ForceSet *

        """
        return _opensim.ForceSet_updMuscles(self)


    def getStateVariableNames(self, rNames):
        """
        getStateVariableNames(ForceSet self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.ForceSet_getStateVariableNames(self, rNames)


    def check(self):
        """
        check(ForceSet self) -> bool

        Parameters:
            self: OpenSim::ForceSet const *

        """
        return _opensim.ForceSet_check(self)

    def adoptAndAppend(self, aForce):
        aForce._markAdopted()
        return super(ForceSet, self).adoptAndAppend(aForce)

    def append(self, aForce):
        aForce._markAdopted()
        return self.appendNative(aForce)

ForceSet_swigregister = _opensim.ForceSet_swigregister
ForceSet_swigregister(ForceSet)

def ForceSet_safeDownCast(obj):
    """
    ForceSet_safeDownCast(OpenSimObject obj) -> ForceSet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ForceSet_safeDownCast(obj)

def ForceSet_getClassName():
    """ForceSet_getClassName() -> std::string const &"""
    return _opensim.ForceSet_getClassName()

class ExternalForce(Force):
    """Proxy of C++ OpenSim::ExternalForce class"""
    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalForce, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ExternalForce

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ExternalForce_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ExternalForce self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ExternalForce_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ExternalForce_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ExternalForce self) -> ExternalForce

        Parameters:
            self: OpenSim::ExternalForce const *

        """
        return _opensim.ExternalForce_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ExternalForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExternalForce const *

        """
        return _opensim.ExternalForce_getConcreteClassName(self)


    def copyProperty_applied_to_body(self, source):
        """
        copyProperty_applied_to_body(ExternalForce self, ExternalForce source)

        Parameters:
            source: OpenSim::ExternalForce::Self const &

        """
        return _opensim.ExternalForce_copyProperty_applied_to_body(self, source)


    def append_applied_to_body(self, value):
        """
        append_applied_to_body(ExternalForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ExternalForce_append_applied_to_body(self, value)


    def constructProperty_applied_to_body(self, initValue):
        """
        constructProperty_applied_to_body(ExternalForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.ExternalForce_constructProperty_applied_to_body(self, initValue)


    def get_applied_to_body(self, *args):
        """
        get_applied_to_body(ExternalForce self, int i) -> std::string const

        Parameters:
            i: int

        get_applied_to_body(ExternalForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExternalForce const *

        """
        return _opensim.ExternalForce_get_applied_to_body(self, *args)


    def upd_applied_to_body(self, *args):
        """
        upd_applied_to_body(ExternalForce self, int i) -> std::string

        Parameters:
            i: int

        upd_applied_to_body(ExternalForce self) -> std::string &

        Parameters:
            self: OpenSim::ExternalForce *

        """
        return _opensim.ExternalForce_upd_applied_to_body(self, *args)


    def set_applied_to_body(self, *args):
        """
        set_applied_to_body(ExternalForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_applied_to_body(ExternalForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.ExternalForce_set_applied_to_body(self, *args)


    def copyProperty_force_expressed_in_body(self, source):
        """
        copyProperty_force_expressed_in_body(ExternalForce self, ExternalForce source)

        Parameters:
            source: OpenSim::ExternalForce::Self const &

        """
        return _opensim.ExternalForce_copyProperty_force_expressed_in_body(self, source)


    def append_force_expressed_in_body(self, value):
        """
        append_force_expressed_in_body(ExternalForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ExternalForce_append_force_expressed_in_body(self, value)


    def constructProperty_force_expressed_in_body(self, initValue):
        """
        constructProperty_force_expressed_in_body(ExternalForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.ExternalForce_constructProperty_force_expressed_in_body(self, initValue)


    def get_force_expressed_in_body(self, *args):
        """
        get_force_expressed_in_body(ExternalForce self, int i) -> std::string const

        Parameters:
            i: int

        get_force_expressed_in_body(ExternalForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExternalForce const *

        """
        return _opensim.ExternalForce_get_force_expressed_in_body(self, *args)


    def upd_force_expressed_in_body(self, *args):
        """
        upd_force_expressed_in_body(ExternalForce self, int i) -> std::string

        Parameters:
            i: int

        upd_force_expressed_in_body(ExternalForce self) -> std::string &

        Parameters:
            self: OpenSim::ExternalForce *

        """
        return _opensim.ExternalForce_upd_force_expressed_in_body(self, *args)


    def set_force_expressed_in_body(self, *args):
        """
        set_force_expressed_in_body(ExternalForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_force_expressed_in_body(ExternalForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.ExternalForce_set_force_expressed_in_body(self, *args)


    def copyProperty_point_expressed_in_body(self, source):
        """
        copyProperty_point_expressed_in_body(ExternalForce self, ExternalForce source)

        Parameters:
            source: OpenSim::ExternalForce::Self const &

        """
        return _opensim.ExternalForce_copyProperty_point_expressed_in_body(self, source)


    def append_point_expressed_in_body(self, value):
        """
        append_point_expressed_in_body(ExternalForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ExternalForce_append_point_expressed_in_body(self, value)


    def constructProperty_point_expressed_in_body(self, *args):
        """
        constructProperty_point_expressed_in_body(ExternalForce self)
        constructProperty_point_expressed_in_body(ExternalForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.ExternalForce_constructProperty_point_expressed_in_body(self, *args)


    def get_point_expressed_in_body(self, *args):
        """
        get_point_expressed_in_body(ExternalForce self, int i) -> std::string const

        Parameters:
            i: int

        get_point_expressed_in_body(ExternalForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExternalForce const *

        """
        return _opensim.ExternalForce_get_point_expressed_in_body(self, *args)


    def upd_point_expressed_in_body(self, *args):
        """
        upd_point_expressed_in_body(ExternalForce self, int i) -> std::string

        Parameters:
            i: int

        upd_point_expressed_in_body(ExternalForce self) -> std::string &

        Parameters:
            self: OpenSim::ExternalForce *

        """
        return _opensim.ExternalForce_upd_point_expressed_in_body(self, *args)


    def set_point_expressed_in_body(self, *args):
        """
        set_point_expressed_in_body(ExternalForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_point_expressed_in_body(ExternalForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.ExternalForce_set_point_expressed_in_body(self, *args)


    def copyProperty_force_identifier(self, source):
        """
        copyProperty_force_identifier(ExternalForce self, ExternalForce source)

        Parameters:
            source: OpenSim::ExternalForce::Self const &

        """
        return _opensim.ExternalForce_copyProperty_force_identifier(self, source)


    def append_force_identifier(self, value):
        """
        append_force_identifier(ExternalForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ExternalForce_append_force_identifier(self, value)


    def constructProperty_force_identifier(self, *args):
        """
        constructProperty_force_identifier(ExternalForce self)
        constructProperty_force_identifier(ExternalForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.ExternalForce_constructProperty_force_identifier(self, *args)


    def get_force_identifier(self, *args):
        """
        get_force_identifier(ExternalForce self, int i) -> std::string const

        Parameters:
            i: int

        get_force_identifier(ExternalForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExternalForce const *

        """
        return _opensim.ExternalForce_get_force_identifier(self, *args)


    def upd_force_identifier(self, *args):
        """
        upd_force_identifier(ExternalForce self, int i) -> std::string

        Parameters:
            i: int

        upd_force_identifier(ExternalForce self) -> std::string &

        Parameters:
            self: OpenSim::ExternalForce *

        """
        return _opensim.ExternalForce_upd_force_identifier(self, *args)


    def set_force_identifier(self, *args):
        """
        set_force_identifier(ExternalForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_force_identifier(ExternalForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.ExternalForce_set_force_identifier(self, *args)


    def copyProperty_point_identifier(self, source):
        """
        copyProperty_point_identifier(ExternalForce self, ExternalForce source)

        Parameters:
            source: OpenSim::ExternalForce::Self const &

        """
        return _opensim.ExternalForce_copyProperty_point_identifier(self, source)


    def append_point_identifier(self, value):
        """
        append_point_identifier(ExternalForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ExternalForce_append_point_identifier(self, value)


    def constructProperty_point_identifier(self, *args):
        """
        constructProperty_point_identifier(ExternalForce self)
        constructProperty_point_identifier(ExternalForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.ExternalForce_constructProperty_point_identifier(self, *args)


    def get_point_identifier(self, *args):
        """
        get_point_identifier(ExternalForce self, int i) -> std::string const

        Parameters:
            i: int

        get_point_identifier(ExternalForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExternalForce const *

        """
        return _opensim.ExternalForce_get_point_identifier(self, *args)


    def upd_point_identifier(self, *args):
        """
        upd_point_identifier(ExternalForce self, int i) -> std::string

        Parameters:
            i: int

        upd_point_identifier(ExternalForce self) -> std::string &

        Parameters:
            self: OpenSim::ExternalForce *

        """
        return _opensim.ExternalForce_upd_point_identifier(self, *args)


    def set_point_identifier(self, *args):
        """
        set_point_identifier(ExternalForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_point_identifier(ExternalForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.ExternalForce_set_point_identifier(self, *args)


    def copyProperty_torque_identifier(self, source):
        """
        copyProperty_torque_identifier(ExternalForce self, ExternalForce source)

        Parameters:
            source: OpenSim::ExternalForce::Self const &

        """
        return _opensim.ExternalForce_copyProperty_torque_identifier(self, source)


    def append_torque_identifier(self, value):
        """
        append_torque_identifier(ExternalForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ExternalForce_append_torque_identifier(self, value)


    def constructProperty_torque_identifier(self, *args):
        """
        constructProperty_torque_identifier(ExternalForce self)
        constructProperty_torque_identifier(ExternalForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.ExternalForce_constructProperty_torque_identifier(self, *args)


    def get_torque_identifier(self, *args):
        """
        get_torque_identifier(ExternalForce self, int i) -> std::string const

        Parameters:
            i: int

        get_torque_identifier(ExternalForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExternalForce const *

        """
        return _opensim.ExternalForce_get_torque_identifier(self, *args)


    def upd_torque_identifier(self, *args):
        """
        upd_torque_identifier(ExternalForce self, int i) -> std::string

        Parameters:
            i: int

        upd_torque_identifier(ExternalForce self) -> std::string &

        Parameters:
            self: OpenSim::ExternalForce *

        """
        return _opensim.ExternalForce_upd_torque_identifier(self, *args)


    def set_torque_identifier(self, *args):
        """
        set_torque_identifier(ExternalForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_torque_identifier(ExternalForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.ExternalForce_set_torque_identifier(self, *args)


    def copyProperty_data_source_name(self, source):
        """
        copyProperty_data_source_name(ExternalForce self, ExternalForce source)

        Parameters:
            source: OpenSim::ExternalForce::Self const &

        """
        return _opensim.ExternalForce_copyProperty_data_source_name(self, source)


    def append_data_source_name(self, value):
        """
        append_data_source_name(ExternalForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ExternalForce_append_data_source_name(self, value)


    def constructProperty_data_source_name(self, *args):
        """
        constructProperty_data_source_name(ExternalForce self)
        constructProperty_data_source_name(ExternalForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.ExternalForce_constructProperty_data_source_name(self, *args)


    def get_data_source_name(self, *args):
        """
        get_data_source_name(ExternalForce self, int i) -> std::string const

        Parameters:
            i: int

        get_data_source_name(ExternalForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExternalForce const *

        """
        return _opensim.ExternalForce_get_data_source_name(self, *args)


    def upd_data_source_name(self, *args):
        """
        upd_data_source_name(ExternalForce self, int i) -> std::string

        Parameters:
            i: int

        upd_data_source_name(ExternalForce self) -> std::string &

        Parameters:
            self: OpenSim::ExternalForce *

        """
        return _opensim.ExternalForce_upd_data_source_name(self, *args)


    def set_data_source_name(self, *args):
        """
        set_data_source_name(ExternalForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_data_source_name(ExternalForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.ExternalForce_set_data_source_name(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ExternalForce self) -> ExternalForce
        __init__(OpenSim::ExternalForce self, Storage dataSource, std::string const & forceIdentifier, std::string const & pointIdentifier, std::string const & torqueIdentifier, std::string const & appliedToBodyName, std::string const & forceExpressedInBodyName, std::string const & pointExpressedInBodyName) -> ExternalForce

        Parameters:
            dataSource: OpenSim::Storage const &
            forceIdentifier: std::string const &
            pointIdentifier: std::string const &
            torqueIdentifier: std::string const &
            appliedToBodyName: std::string const &
            forceExpressedInBodyName: std::string const &
            pointExpressedInBodyName: std::string const &

        __init__(OpenSim::ExternalForce self, Storage dataSource, std::string const & forceIdentifier, std::string const & pointIdentifier, std::string const & torqueIdentifier, std::string const & appliedToBodyName, std::string const & forceExpressedInBodyName) -> ExternalForce

        Parameters:
            dataSource: OpenSim::Storage const &
            forceIdentifier: std::string const &
            pointIdentifier: std::string const &
            torqueIdentifier: std::string const &
            appliedToBodyName: std::string const &
            forceExpressedInBodyName: std::string const &

        __init__(OpenSim::ExternalForce self, Storage dataSource, std::string const & forceIdentifier, std::string const & pointIdentifier, std::string const & torqueIdentifier, std::string const & appliedToBodyName) -> ExternalForce

        Parameters:
            dataSource: OpenSim::Storage const &
            forceIdentifier: std::string const &
            pointIdentifier: std::string const &
            torqueIdentifier: std::string const &
            appliedToBodyName: std::string const &

        __init__(OpenSim::ExternalForce self, Storage dataSource, std::string const & forceIdentifier, std::string const & pointIdentifier, std::string const & torqueIdentifier) -> ExternalForce

        Parameters:
            dataSource: OpenSim::Storage const &
            forceIdentifier: std::string const &
            pointIdentifier: std::string const &
            torqueIdentifier: std::string const &

        __init__(OpenSim::ExternalForce self, Storage dataSource, std::string const & forceIdentifier, std::string const & pointIdentifier) -> ExternalForce

        Parameters:
            dataSource: OpenSim::Storage const &
            forceIdentifier: std::string const &
            pointIdentifier: std::string const &

        __init__(OpenSim::ExternalForce self, Storage dataSource, std::string const & forceIdentifier) -> ExternalForce

        Parameters:
            dataSource: OpenSim::Storage const &
            forceIdentifier: std::string const &

        __init__(OpenSim::ExternalForce self, Storage dataSource) -> ExternalForce

        Parameters:
            dataSource: OpenSim::Storage const &

        __init__(OpenSim::ExternalForce self, SimTK::Xml::Element & aNode) -> ExternalForce

        Parameters:
            aNode: SimTK::Xml::Element &

        """
        this = _opensim.new_ExternalForce(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(ExternalForce self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters:
            aNode: SimTK::Xml::Element &
            versionNumber: int

        updateFromXMLNode(ExternalForce self, SimTK::Xml::Element & aNode)

        Parameters:
            aNode: SimTK::Xml::Element &

        """
        return _opensim.ExternalForce_updateFromXMLNode(self, aNode, versionNumber)


    def setDataSource(self, dataSource):
        """
        setDataSource(ExternalForce self, Storage dataSource)

        Parameters:
            dataSource: OpenSim::Storage const &

        """
        return _opensim.ExternalForce_setDataSource(self, dataSource)


    def getDataSourceName(self):
        """
        getDataSourceName(ExternalForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExternalForce const *

        """
        return _opensim.ExternalForce_getDataSourceName(self)


    def setAppliedToBodyName(self, applyToName):
        """
        setAppliedToBodyName(ExternalForce self, std::string const & applyToName)

        Parameters:
            applyToName: std::string const &

        """
        return _opensim.ExternalForce_setAppliedToBodyName(self, applyToName)


    def getAppliedToBodyName(self):
        """
        getAppliedToBodyName(ExternalForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExternalForce const *

        """
        return _opensim.ExternalForce_getAppliedToBodyName(self)


    def setPointExpressedInBodyName(self, pointInBodyName):
        """
        setPointExpressedInBodyName(ExternalForce self, std::string const & pointInBodyName)

        Parameters:
            pointInBodyName: std::string const &

        """
        return _opensim.ExternalForce_setPointExpressedInBodyName(self, pointInBodyName)


    def getPointExpressedInBodyName(self):
        """
        getPointExpressedInBodyName(ExternalForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExternalForce const *

        """
        return _opensim.ExternalForce_getPointExpressedInBodyName(self)


    def setForceExpressedInBodyName(self, forceInBodyName):
        """
        setForceExpressedInBodyName(ExternalForce self, std::string const & forceInBodyName)

        Parameters:
            forceInBodyName: std::string const &

        """
        return _opensim.ExternalForce_setForceExpressedInBodyName(self, forceInBodyName)


    def getForceExpressedInBodyName(self):
        """
        getForceExpressedInBodyName(ExternalForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExternalForce const *

        """
        return _opensim.ExternalForce_getForceExpressedInBodyName(self)


    def setForceIdentifier(self, aForceIdentifier):
        """
        setForceIdentifier(ExternalForce self, std::string const aForceIdentifier)

        Parameters:
            aForceIdentifier: std::string const

        """
        return _opensim.ExternalForce_setForceIdentifier(self, aForceIdentifier)


    def setPointIdentifier(self, aPointIdentifier):
        """
        setPointIdentifier(ExternalForce self, std::string const aPointIdentifier)

        Parameters:
            aPointIdentifier: std::string const

        """
        return _opensim.ExternalForce_setPointIdentifier(self, aPointIdentifier)


    def setTorqueIdentifier(self, aTorqueIdentifier):
        """
        setTorqueIdentifier(ExternalForce self, std::string const aTorqueIdentifier)

        Parameters:
            aTorqueIdentifier: std::string const

        """
        return _opensim.ExternalForce_setTorqueIdentifier(self, aTorqueIdentifier)


    def getForceIdentifier(self):
        """
        getForceIdentifier(ExternalForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExternalForce const *

        """
        return _opensim.ExternalForce_getForceIdentifier(self)


    def getPointIdentifier(self):
        """
        getPointIdentifier(ExternalForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExternalForce const *

        """
        return _opensim.ExternalForce_getPointIdentifier(self)


    def getTorqueIdentifier(self):
        """
        getTorqueIdentifier(ExternalForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExternalForce const *

        """
        return _opensim.ExternalForce_getTorqueIdentifier(self)


    def getForceAtTime(self, aTime):
        """
        getForceAtTime(ExternalForce self, double aTime) -> Vec3

        Parameters:
            aTime: double

        """
        return _opensim.ExternalForce_getForceAtTime(self, aTime)


    def getPointAtTime(self, aTime):
        """
        getPointAtTime(ExternalForce self, double aTime) -> Vec3

        Parameters:
            aTime: double

        """
        return _opensim.ExternalForce_getPointAtTime(self, aTime)


    def getTorqueAtTime(self, aTime):
        """
        getTorqueAtTime(ExternalForce self, double aTime) -> Vec3

        Parameters:
            aTime: double

        """
        return _opensim.ExternalForce_getTorqueAtTime(self, aTime)


    def getRecordLabels(self):
        """
        getRecordLabels(ExternalForce self) -> ArrayStr

        Parameters:
            self: OpenSim::ExternalForce const *

        """
        return _opensim.ExternalForce_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(ExternalForce self, State state) -> ArrayDouble

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.ExternalForce_getRecordValues(self, state)


    def appliesForce(self):
        """
        appliesForce(ExternalForce self) -> bool

        Parameters:
            self: OpenSim::ExternalForce const *

        """
        return _opensim.ExternalForce_appliesForce(self)


    def specifiesPoint(self):
        """
        specifiesPoint(ExternalForce self) -> bool

        Parameters:
            self: OpenSim::ExternalForce const *

        """
        return _opensim.ExternalForce_specifiesPoint(self)


    def appliesTorque(self):
        """
        appliesTorque(ExternalForce self) -> bool

        Parameters:
            self: OpenSim::ExternalForce const *

        """
        return _opensim.ExternalForce_appliesTorque(self)

    __swig_destroy__ = _opensim.delete_ExternalForce
    __del__ = lambda self: None
ExternalForce_swigregister = _opensim.ExternalForce_swigregister
ExternalForce_swigregister(ExternalForce)

def ExternalForce_safeDownCast(obj):
    """
    ExternalForce_safeDownCast(OpenSimObject obj) -> ExternalForce

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ExternalForce_safeDownCast(obj)

def ExternalForce_getClassName():
    """ExternalForce_getClassName() -> std::string const &"""
    return _opensim.ExternalForce_getClassName()

class SetExternalForces(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::ExternalForce)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetExternalForces, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetExternalForces, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetExternalForces

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetExternalForces_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetExternalForces self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetExternalForces_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetExternalForces_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetExternalForces self) -> SetExternalForces

        Parameters:
            self: OpenSim::Set< OpenSim::ExternalForce > const *

        """
        return _opensim.SetExternalForces_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetExternalForces self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::ExternalForce > const *

        """
        return _opensim.SetExternalForces_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetExternalForces
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::ExternalForce)> self) -> SetExternalForces
        __init__(OpenSim::Set<(OpenSim::ExternalForce)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetExternalForces

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::ExternalForce)> self, std::string const & aFileName) -> SetExternalForces

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::ExternalForce)> self, SetExternalForces aSet) -> SetExternalForces

        Parameters:
            aSet: OpenSim::Set< OpenSim::ExternalForce > const &

        """
        this = _opensim.new_SetExternalForces(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetExternalForces self)

        Parameters:
            self: OpenSim::Set< OpenSim::ExternalForce > *

        """
        return _opensim.SetExternalForces_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetExternalForces self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetExternalForces_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetExternalForces self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetExternalForces_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetExternalForces self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::ExternalForce > const *

        """
        return _opensim.SetExternalForces_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetExternalForces self, ExternalForce aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::ExternalForce const *
            aStartIndex: int

        getIndex(SetExternalForces self, ExternalForce aObject) -> int

        Parameters:
            aObject: OpenSim::ExternalForce const *

        getIndex(SetExternalForces self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetExternalForces self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetExternalForces_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetExternalForces self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetExternalForces_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetExternalForces self, ExternalForce aObject) -> bool

        Parameters:
            aObject: OpenSim::ExternalForce *

        """
        return _opensim.SetExternalForces_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetExternalForces self, ExternalForce aObject) -> bool

        Parameters:
            aObject: OpenSim::ExternalForce const &

        """
        return _opensim.SetExternalForces_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetExternalForces self, int aIndex, ExternalForce aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::ExternalForce *

        """
        return _opensim.SetExternalForces_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetExternalForces self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetExternalForces self, ExternalForce aObject) -> bool

        Parameters:
            aObject: OpenSim::ExternalForce const *

        """
        return _opensim.SetExternalForces_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetExternalForces self)

        Parameters:
            self: OpenSim::Set< OpenSim::ExternalForce > *

        """
        return _opensim.SetExternalForces_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetExternalForces self, int aIndex, ExternalForce aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::ExternalForce *
            preserveGroups: bool

        set(SetExternalForces self, int aIndex, ExternalForce aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::ExternalForce *

        """
        return _opensim.SetExternalForces_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetExternalForces self, int aIndex) -> ExternalForce

        Parameters:
            aIndex: int

        get(SetExternalForces self, std::string const & aName) -> ExternalForce

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetExternalForces_get(self, *args)


    def contains(self, aName):
        """
        contains(SetExternalForces self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetExternalForces_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetExternalForces self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetExternalForces_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetExternalForces self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::ExternalForce > const *

        """
        return _opensim.SetExternalForces_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetExternalForces self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetExternalForces_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetExternalForces self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetExternalForces_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetExternalForces self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetExternalForces_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetExternalForces self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetExternalForces_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetExternalForces self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetExternalForces_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetExternalForces self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetExternalForces self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetExternalForces_getGroup(self, *args)

SetExternalForces_swigregister = _opensim.SetExternalForces_swigregister
SetExternalForces_swigregister(SetExternalForces)

def SetExternalForces_safeDownCast(obj):
    """
    SetExternalForces_safeDownCast(OpenSimObject obj) -> SetExternalForces

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetExternalForces_safeDownCast(obj)

def SetExternalForces_getClassName():
    """SetExternalForces_getClassName() -> std::string const &"""
    return _opensim.SetExternalForces_getClassName()

class Controller(ModelComponent):
    """Proxy of C++ OpenSim::Controller class"""
    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Controller, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Controller, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Controller

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Controller_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Controller self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Controller_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Controller_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Controller self) -> Controller

        Parameters:
            self: OpenSim::Controller const *

        """
        return _opensim.Controller_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Controller self) -> std::string const &

        Parameters:
            self: OpenSim::Controller const *

        """
        return _opensim.Controller_getConcreteClassName(self)


    def copyProperty_isDisabled(self, source):
        """
        copyProperty_isDisabled(Controller self, Controller source)

        Parameters:
            source: OpenSim::Controller::Self const &

        """
        return _opensim.Controller_copyProperty_isDisabled(self, source)


    def append_isDisabled(self, value):
        """
        append_isDisabled(Controller self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Controller_append_isDisabled(self, value)


    def constructProperty_isDisabled(self, initValue):
        """
        constructProperty_isDisabled(Controller self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Controller_constructProperty_isDisabled(self, initValue)


    def get_isDisabled(self, *args):
        """
        get_isDisabled(Controller self, int i) -> bool const

        Parameters:
            i: int

        get_isDisabled(Controller self) -> bool const &

        Parameters:
            self: OpenSim::Controller const *

        """
        return _opensim.Controller_get_isDisabled(self, *args)


    def upd_isDisabled(self, *args):
        """
        upd_isDisabled(Controller self, int i) -> bool

        Parameters:
            i: int

        upd_isDisabled(Controller self) -> bool &

        Parameters:
            self: OpenSim::Controller *

        """
        return _opensim.Controller_upd_isDisabled(self, *args)


    def set_isDisabled(self, *args):
        """
        set_isDisabled(Controller self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_isDisabled(Controller self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Controller_set_isDisabled(self, *args)


    def copyProperty_actuator_list(self, source):
        """
        copyProperty_actuator_list(Controller self, Controller source)

        Parameters:
            source: OpenSim::Controller::Self const &

        """
        return _opensim.Controller_copyProperty_actuator_list(self, source)


    def get_actuator_list(self, i):
        """
        get_actuator_list(Controller self, int i) -> std::string const &

        Parameters:
            i: int

        """
        return _opensim.Controller_get_actuator_list(self, i)


    def upd_actuator_list(self, i):
        """
        upd_actuator_list(Controller self, int i) -> std::string &

        Parameters:
            i: int

        """
        return _opensim.Controller_upd_actuator_list(self, i)


    def set_actuator_list(self, i, value):
        """
        set_actuator_list(Controller self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        """
        return _opensim.Controller_set_actuator_list(self, i, value)


    def append_actuator_list(self, value):
        """
        append_actuator_list(Controller self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.Controller_append_actuator_list(self, value)


    def constructProperty_actuator_list(self):
        """
        constructProperty_actuator_list(Controller self)

        Parameters:
            self: OpenSim::Controller *

        """
        return _opensim.Controller_constructProperty_actuator_list(self)


    def isDisabled(self):
        """
        isDisabled(Controller self) -> bool

        Parameters:
            self: OpenSim::Controller const *

        """
        return _opensim.Controller_isDisabled(self)


    def setDisabled(self, disableFlag):
        """
        setDisabled(Controller self, bool disableFlag)

        Parameters:
            disableFlag: bool

        """
        return _opensim.Controller_setDisabled(self, disableFlag)


    def setActuators(self, actuators):
        """
        setActuators(Controller self, SetActuators actuators)

        Parameters:
            actuators: OpenSim::Set< OpenSim::Actuator > const &

        """
        return _opensim.Controller_setActuators(self, actuators)


    def addActuator(self, actuator):
        """
        addActuator(Controller self, Actuator actuator)

        Parameters:
            actuator: OpenSim::Actuator const &

        """
        return _opensim.Controller_addActuator(self, actuator)


    def getActuatorSet(self):
        """
        getActuatorSet(Controller self) -> SetActuators

        Parameters:
            self: OpenSim::Controller const *

        """
        return _opensim.Controller_getActuatorSet(self)


    def updActuators(self):
        """
        updActuators(Controller self) -> SetActuators

        Parameters:
            self: OpenSim::Controller *

        """
        return _opensim.Controller_updActuators(self)


    def computeControls(self, s, controls):
        """
        computeControls(Controller self, State s, Vector controls)

        Parameters:
            s: SimTK::State const &
            controls: SimTK::Vector &

        """
        return _opensim.Controller_computeControls(self, s, controls)


    def getNumControls(self):
        """
        getNumControls(Controller self) -> int

        Parameters:
            self: OpenSim::Controller const *

        """
        return _opensim.Controller_getNumControls(self)

    __swig_destroy__ = _opensim.delete_Controller
    __del__ = lambda self: None
Controller_swigregister = _opensim.Controller_swigregister
Controller_swigregister(Controller)

def Controller_safeDownCast(obj):
    """
    Controller_safeDownCast(OpenSimObject obj) -> Controller

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Controller_safeDownCast(obj)

def Controller_getClassName():
    """Controller_getClassName() -> std::string const &"""
    return _opensim.Controller_getClassName()

class SetControllers(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::Controller)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetControllers, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetControllers, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetControllers

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetControllers_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetControllers self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetControllers_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetControllers_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetControllers self) -> SetControllers

        Parameters:
            self: OpenSim::Set< OpenSim::Controller > const *

        """
        return _opensim.SetControllers_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetControllers self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::Controller > const *

        """
        return _opensim.SetControllers_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetControllers
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Controller)> self) -> SetControllers
        __init__(OpenSim::Set<(OpenSim::Controller)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetControllers

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Controller)> self, std::string const & aFileName) -> SetControllers

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Controller)> self, SetControllers aSet) -> SetControllers

        Parameters:
            aSet: OpenSim::Set< OpenSim::Controller > const &

        """
        this = _opensim.new_SetControllers(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetControllers self)

        Parameters:
            self: OpenSim::Set< OpenSim::Controller > *

        """
        return _opensim.SetControllers_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetControllers self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetControllers_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetControllers self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetControllers_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetControllers self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Controller > const *

        """
        return _opensim.SetControllers_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetControllers self, Controller aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::Controller const *
            aStartIndex: int

        getIndex(SetControllers self, Controller aObject) -> int

        Parameters:
            aObject: OpenSim::Controller const *

        getIndex(SetControllers self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetControllers self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetControllers_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetControllers self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetControllers_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetControllers self, Controller aObject) -> bool

        Parameters:
            aObject: OpenSim::Controller *

        """
        return _opensim.SetControllers_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetControllers self, Controller aObject) -> bool

        Parameters:
            aObject: OpenSim::Controller const &

        """
        return _opensim.SetControllers_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetControllers self, int aIndex, Controller aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Controller *

        """
        return _opensim.SetControllers_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetControllers self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetControllers self, Controller aObject) -> bool

        Parameters:
            aObject: OpenSim::Controller const *

        """
        return _opensim.SetControllers_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetControllers self)

        Parameters:
            self: OpenSim::Set< OpenSim::Controller > *

        """
        return _opensim.SetControllers_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetControllers self, int aIndex, Controller aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Controller *
            preserveGroups: bool

        set(SetControllers self, int aIndex, Controller aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Controller *

        """
        return _opensim.SetControllers_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetControllers self, int aIndex) -> Controller

        Parameters:
            aIndex: int

        get(SetControllers self, std::string const & aName) -> Controller

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetControllers_get(self, *args)


    def contains(self, aName):
        """
        contains(SetControllers self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetControllers_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetControllers self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetControllers_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetControllers self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Controller > const *

        """
        return _opensim.SetControllers_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetControllers self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetControllers_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetControllers self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetControllers_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetControllers self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetControllers_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetControllers self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetControllers_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetControllers self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetControllers_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetControllers self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetControllers self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetControllers_getGroup(self, *args)

SetControllers_swigregister = _opensim.SetControllers_swigregister
SetControllers_swigregister(SetControllers)

def SetControllers_safeDownCast(obj):
    """
    SetControllers_safeDownCast(OpenSimObject obj) -> SetControllers

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetControllers_safeDownCast(obj)

def SetControllers_getClassName():
    """SetControllers_getClassName() -> std::string const &"""
    return _opensim.SetControllers_getClassName()

class ModelComponentSetControllers(SetControllers):
    """Proxy of C++ OpenSim::ModelComponentSet<(OpenSim::Controller)> class"""
    __swig_setmethods__ = {}
    for _s in [SetControllers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponentSetControllers, name, value)
    __swig_getmethods__ = {}
    for _s in [SetControllers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponentSetControllers, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelComponentSetControllers

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ModelComponentSetControllers_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ModelComponentSetControllers self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ModelComponentSetControllers_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ModelComponentSetControllers_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ModelComponentSetControllers self) -> ModelComponentSetControllers

        Parameters:
            self: OpenSim::ModelComponentSet< OpenSim::Controller > const *

        """
        return _opensim.ModelComponentSetControllers_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponentSetControllers self) -> std::string const &

        Parameters:
            self: OpenSim::ModelComponentSet< OpenSim::Controller > const *

        """
        return _opensim.ModelComponentSetControllers_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ModelComponentSet<(OpenSim::Controller)> self) -> ModelComponentSetControllers
        __init__(OpenSim::ModelComponentSet<(OpenSim::Controller)> self, Model model) -> ModelComponentSetControllers

        Parameters:
            model: OpenSim::Model &

        __init__(OpenSim::ModelComponentSet<(OpenSim::Controller)> self, Model model, std::string const & fileName, bool aUpdateFromXMLNode=True) -> ModelComponentSetControllers

        Parameters:
            model: OpenSim::Model &
            fileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::ModelComponentSet<(OpenSim::Controller)> self, Model model, std::string const & fileName) -> ModelComponentSetControllers

        Parameters:
            model: OpenSim::Model &
            fileName: std::string const &

        __init__(OpenSim::ModelComponentSet<(OpenSim::Controller)> self, ModelComponentSetControllers source) -> ModelComponentSetControllers

        Parameters:
            source: OpenSim::ModelComponentSet< OpenSim::Controller > const &

        """
        this = _opensim.new_ModelComponentSetControllers(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def insert(self, aIndex, aObject):
        """
        insert(ModelComponentSetControllers self, int aIndex, Controller aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Controller *

        """
        return _opensim.ModelComponentSetControllers_insert(self, aIndex, aObject)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(ModelComponentSetControllers self, int aIndex, Controller aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Controller *
            preserveGroups: bool

        set(ModelComponentSetControllers self, int aIndex, Controller aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Controller *

        """
        return _opensim.ModelComponentSetControllers_set(self, aIndex, aObject, preserveGroups)


    def invokeConnectToModel(self, model):
        """
        invokeConnectToModel(ModelComponentSetControllers self, Model model)

        Parameters:
            model: OpenSim::Model &

        """
        return _opensim.ModelComponentSetControllers_invokeConnectToModel(self, model)


    def invokeAddToSystem(self, system):
        """
        invokeAddToSystem(ModelComponentSetControllers self, SimTK::MultibodySystem & system)

        Parameters:
            system: SimTK::MultibodySystem &

        """
        return _opensim.ModelComponentSetControllers_invokeAddToSystem(self, system)


    def invokeInitStateFromProperties(self, state):
        """
        invokeInitStateFromProperties(ModelComponentSetControllers self, State state)

        Parameters:
            state: SimTK::State &

        """
        return _opensim.ModelComponentSetControllers_invokeInitStateFromProperties(self, state)


    def invokeSetPropertiesFromState(self, state):
        """
        invokeSetPropertiesFromState(ModelComponentSetControllers self, State state)

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.ModelComponentSetControllers_invokeSetPropertiesFromState(self, state)


    def invokeGenerateDecorations(self, fixed, hints, state, appendToThis):
        """
        invokeGenerateDecorations(ModelComponentSetControllers self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters:
            fixed: bool
            hints: OpenSim::ModelDisplayHints const &
            state: SimTK::State const &
            appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _opensim.ModelComponentSetControllers_invokeGenerateDecorations(self, fixed, hints, state, appendToThis)

    __swig_destroy__ = _opensim.delete_ModelComponentSetControllers
    __del__ = lambda self: None
ModelComponentSetControllers_swigregister = _opensim.ModelComponentSetControllers_swigregister
ModelComponentSetControllers_swigregister(ModelComponentSetControllers)

def ModelComponentSetControllers_safeDownCast(obj):
    """
    ModelComponentSetControllers_safeDownCast(OpenSimObject obj) -> ModelComponentSetControllers

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ModelComponentSetControllers_safeDownCast(obj)

def ModelComponentSetControllers_getClassName():
    """ModelComponentSetControllers_getClassName() -> std::string const &"""
    return _opensim.ModelComponentSetControllers_getClassName()

class ControllerSet(ModelComponentSetControllers):
    """Proxy of C++ OpenSim::ControllerSet class"""
    __swig_setmethods__ = {}
    for _s in [ModelComponentSetControllers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ControllerSet, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponentSetControllers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ControllerSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ControllerSet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ControllerSet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ControllerSet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ControllerSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ControllerSet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ControllerSet self) -> ControllerSet

        Parameters:
            self: OpenSim::ControllerSet const *

        """
        return _opensim.ControllerSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ControllerSet self) -> std::string const &

        Parameters:
            self: OpenSim::ControllerSet const *

        """
        return _opensim.ControllerSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ControllerSet self) -> ControllerSet
        __init__(OpenSim::ControllerSet self, Model model) -> ControllerSet

        Parameters:
            model: OpenSim::Model &

        __init__(OpenSim::ControllerSet self, ControllerSet aControllerSet) -> ControllerSet

        Parameters:
            aControllerSet: OpenSim::ControllerSet const &

        __init__(OpenSim::ControllerSet self, Model model, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> ControllerSet

        Parameters:
            model: OpenSim::Model &
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::ControllerSet self, Model model, std::string const & aFileName) -> ControllerSet

        Parameters:
            model: OpenSim::Model &
            aFileName: std::string const &

        """
        this = _opensim.new_ControllerSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_ControllerSet
    __del__ = lambda self: None

    def copyData(self, aAbsControllerSet):
        """
        copyData(ControllerSet self, ControllerSet aAbsControllerSet)

        Parameters:
            aAbsControllerSet: OpenSim::ControllerSet const &

        """
        return _opensim.ControllerSet_copyData(self, aAbsControllerSet)


    def set(self, aIndex, aController):
        """
        set(ControllerSet self, int aIndex, Controller aController) -> bool

        Parameters:
            aIndex: int
            aController: OpenSim::Controller *

        """
        return _opensim.ControllerSet_set(self, aIndex, aController)


    def addController(self, aController):
        """
        addController(ControllerSet self, Controller aController) -> bool

        Parameters:
            aController: OpenSim::Controller *

        """
        return _opensim.ControllerSet_addController(self, aController)


    def constructStorage(self):
        """
        constructStorage(ControllerSet self)

        Parameters:
            self: OpenSim::ControllerSet *

        """
        return _opensim.ControllerSet_constructStorage(self)


    def storeControls(self, s, step):
        """
        storeControls(ControllerSet self, State s, int step)

        Parameters:
            s: SimTK::State const &
            step: int

        """
        return _opensim.ControllerSet_storeControls(self, s, step)


    def printControlStorage(self, fileName):
        """
        printControlStorage(ControllerSet self, std::string const & fileName)

        Parameters:
            fileName: std::string const &

        """
        return _opensim.ControllerSet_printControlStorage(self, fileName)


    def setActuators(self, arg2):
        """
        setActuators(ControllerSet self, SetActuators arg2)

        Parameters:
            arg2: OpenSim::Set< OpenSim::Actuator > &

        """
        return _opensim.ControllerSet_setActuators(self, arg2)


    def check(self):
        """
        check(ControllerSet self) -> bool

        Parameters:
            self: OpenSim::ControllerSet const *

        """
        return _opensim.ControllerSet_check(self)


    def setDesiredStates(self, yStore):
        """
        setDesiredStates(ControllerSet self, Storage yStore)

        Parameters:
            yStore: OpenSim::Storage *

        """
        return _opensim.ControllerSet_setDesiredStates(self, yStore)


    def computeControls(self, s, controls):
        """
        computeControls(ControllerSet self, State s, Vector controls)

        Parameters:
            s: SimTK::State const &
            controls: SimTK::Vector &

        """
        return _opensim.ControllerSet_computeControls(self, s, controls)


    def printInfo(self):
        """
        printInfo(ControllerSet self)

        Parameters:
            self: OpenSim::ControllerSet const *

        """
        return _opensim.ControllerSet_printInfo(self)

    def adoptAndAppend(self, aController):
        aController._markAdopted()
        return super(ControllerSet, self).adoptAndAppend(aController)

ControllerSet_swigregister = _opensim.ControllerSet_swigregister
ControllerSet_swigregister(ControllerSet)

def ControllerSet_safeDownCast(obj):
    """
    ControllerSet_safeDownCast(OpenSimObject obj) -> ControllerSet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ControllerSet_safeDownCast(obj)

def ControllerSet_getClassName():
    """ControllerSet_getClassName() -> std::string const &"""
    return _opensim.ControllerSet_getClassName()

class ModelComponentSetExternalForces(SetExternalForces):
    """Proxy of C++ OpenSim::ModelComponentSet<(OpenSim::ExternalForce)> class"""
    __swig_setmethods__ = {}
    for _s in [SetExternalForces]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponentSetExternalForces, name, value)
    __swig_getmethods__ = {}
    for _s in [SetExternalForces]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponentSetExternalForces, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelComponentSetExternalForces

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ModelComponentSetExternalForces_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ModelComponentSetExternalForces self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ModelComponentSetExternalForces_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ModelComponentSetExternalForces_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ModelComponentSetExternalForces self) -> ModelComponentSetExternalForces

        Parameters:
            self: OpenSim::ModelComponentSet< OpenSim::ExternalForce > const *

        """
        return _opensim.ModelComponentSetExternalForces_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponentSetExternalForces self) -> std::string const &

        Parameters:
            self: OpenSim::ModelComponentSet< OpenSim::ExternalForce > const *

        """
        return _opensim.ModelComponentSetExternalForces_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ModelComponentSet<(OpenSim::ExternalForce)> self) -> ModelComponentSetExternalForces
        __init__(OpenSim::ModelComponentSet<(OpenSim::ExternalForce)> self, Model model) -> ModelComponentSetExternalForces

        Parameters:
            model: OpenSim::Model &

        __init__(OpenSim::ModelComponentSet<(OpenSim::ExternalForce)> self, Model model, std::string const & fileName, bool aUpdateFromXMLNode=True) -> ModelComponentSetExternalForces

        Parameters:
            model: OpenSim::Model &
            fileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::ModelComponentSet<(OpenSim::ExternalForce)> self, Model model, std::string const & fileName) -> ModelComponentSetExternalForces

        Parameters:
            model: OpenSim::Model &
            fileName: std::string const &

        __init__(OpenSim::ModelComponentSet<(OpenSim::ExternalForce)> self, ModelComponentSetExternalForces source) -> ModelComponentSetExternalForces

        Parameters:
            source: OpenSim::ModelComponentSet< OpenSim::ExternalForce > const &

        """
        this = _opensim.new_ModelComponentSetExternalForces(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def insert(self, aIndex, aObject):
        """
        insert(ModelComponentSetExternalForces self, int aIndex, ExternalForce aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::ExternalForce *

        """
        return _opensim.ModelComponentSetExternalForces_insert(self, aIndex, aObject)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(ModelComponentSetExternalForces self, int aIndex, ExternalForce aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::ExternalForce *
            preserveGroups: bool

        set(ModelComponentSetExternalForces self, int aIndex, ExternalForce aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::ExternalForce *

        """
        return _opensim.ModelComponentSetExternalForces_set(self, aIndex, aObject, preserveGroups)


    def invokeConnectToModel(self, model):
        """
        invokeConnectToModel(ModelComponentSetExternalForces self, Model model)

        Parameters:
            model: OpenSim::Model &

        """
        return _opensim.ModelComponentSetExternalForces_invokeConnectToModel(self, model)


    def invokeAddToSystem(self, system):
        """
        invokeAddToSystem(ModelComponentSetExternalForces self, SimTK::MultibodySystem & system)

        Parameters:
            system: SimTK::MultibodySystem &

        """
        return _opensim.ModelComponentSetExternalForces_invokeAddToSystem(self, system)


    def invokeInitStateFromProperties(self, state):
        """
        invokeInitStateFromProperties(ModelComponentSetExternalForces self, State state)

        Parameters:
            state: SimTK::State &

        """
        return _opensim.ModelComponentSetExternalForces_invokeInitStateFromProperties(self, state)


    def invokeSetPropertiesFromState(self, state):
        """
        invokeSetPropertiesFromState(ModelComponentSetExternalForces self, State state)

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.ModelComponentSetExternalForces_invokeSetPropertiesFromState(self, state)


    def invokeGenerateDecorations(self, fixed, hints, state, appendToThis):
        """
        invokeGenerateDecorations(ModelComponentSetExternalForces self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters:
            fixed: bool
            hints: OpenSim::ModelDisplayHints const &
            state: SimTK::State const &
            appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _opensim.ModelComponentSetExternalForces_invokeGenerateDecorations(self, fixed, hints, state, appendToThis)

    __swig_destroy__ = _opensim.delete_ModelComponentSetExternalForces
    __del__ = lambda self: None
ModelComponentSetExternalForces_swigregister = _opensim.ModelComponentSetExternalForces_swigregister
ModelComponentSetExternalForces_swigregister(ModelComponentSetExternalForces)

def ModelComponentSetExternalForces_safeDownCast(obj):
    """
    ModelComponentSetExternalForces_safeDownCast(OpenSimObject obj) -> ModelComponentSetExternalForces

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ModelComponentSetExternalForces_safeDownCast(obj)

def ModelComponentSetExternalForces_getClassName():
    """ModelComponentSetExternalForces_getClassName() -> std::string const &"""
    return _opensim.ModelComponentSetExternalForces_getClassName()

class ExternalLoads(ModelComponentSetExternalForces):
    """Proxy of C++ OpenSim::ExternalLoads class"""
    __swig_setmethods__ = {}
    for _s in [ModelComponentSetExternalForces]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalLoads, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponentSetExternalForces]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalLoads, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ExternalLoads

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ExternalLoads_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ExternalLoads self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ExternalLoads_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ExternalLoads_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ExternalLoads self) -> ExternalLoads

        Parameters:
            self: OpenSim::ExternalLoads const *

        """
        return _opensim.ExternalLoads_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ExternalLoads self) -> std::string const &

        Parameters:
            self: OpenSim::ExternalLoads const *

        """
        return _opensim.ExternalLoads_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ExternalLoads self) -> ExternalLoads
        __init__(OpenSim::ExternalLoads self, Model model) -> ExternalLoads

        Parameters:
            model: OpenSim::Model &

        __init__(OpenSim::ExternalLoads self, Model model, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> ExternalLoads

        Parameters:
            model: OpenSim::Model &
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::ExternalLoads self, Model model, std::string const & aFileName) -> ExternalLoads

        Parameters:
            model: OpenSim::Model &
            aFileName: std::string const &

        __init__(OpenSim::ExternalLoads self, ExternalLoads aExternalLoads) -> ExternalLoads

        Parameters:
            aExternalLoads: OpenSim::ExternalLoads const &

        """
        this = _opensim.new_ExternalLoads(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_ExternalLoads
    __del__ = lambda self: None

    def copyData(self, otherExternalLoads):
        """
        copyData(ExternalLoads self, ExternalLoads otherExternalLoads)

        Parameters:
            otherExternalLoads: OpenSim::ExternalLoads const &

        """
        return _opensim.ExternalLoads_copyData(self, otherExternalLoads)


    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(ExternalLoads self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters:
            aNode: SimTK::Xml::Element &
            versionNumber: int

        updateFromXMLNode(ExternalLoads self, SimTK::Xml::Element & aNode)

        Parameters:
            aNode: SimTK::Xml::Element &

        """
        return _opensim.ExternalLoads_updateFromXMLNode(self, aNode, versionNumber)


    def invokeConnectToModel(self, aModel):
        """
        invokeConnectToModel(ExternalLoads self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.ExternalLoads_invokeConnectToModel(self, aModel)


    def getModel(self):
        """
        getModel(ExternalLoads self) -> Model

        Parameters:
            self: OpenSim::ExternalLoads const *

        """
        return _opensim.ExternalLoads_getModel(self)


    def getDataFileName(self):
        """
        getDataFileName(ExternalLoads self) -> std::string const &

        Parameters:
            self: OpenSim::ExternalLoads const *

        """
        return _opensim.ExternalLoads_getDataFileName(self)


    def setDataFileName(self, aNewFile):
        """
        setDataFileName(ExternalLoads self, std::string const & aNewFile)

        Parameters:
            aNewFile: std::string const &

        """
        return _opensim.ExternalLoads_setDataFileName(self, aNewFile)


    def getExternalLoadsModelKinematicsFileName(self):
        """
        getExternalLoadsModelKinematicsFileName(ExternalLoads self) -> std::string const &

        Parameters:
            self: OpenSim::ExternalLoads const *

        """
        return _opensim.ExternalLoads_getExternalLoadsModelKinematicsFileName(self)


    def setExternalLoadsModelKinematicsFileName(self, aFileName):
        """
        setExternalLoadsModelKinematicsFileName(ExternalLoads self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.ExternalLoads_setExternalLoadsModelKinematicsFileName(self, aFileName)


    def getLowpassCutoffFrequencyForLoadKinematics(self):
        """
        getLowpassCutoffFrequencyForLoadKinematics(ExternalLoads self) -> double

        Parameters:
            self: OpenSim::ExternalLoads const *

        """
        return _opensim.ExternalLoads_getLowpassCutoffFrequencyForLoadKinematics(self)


    def setLowpassCutoffFrequencyForLoadKinematics(self, aLowpassCutoffFrequency):
        """
        setLowpassCutoffFrequencyForLoadKinematics(ExternalLoads self, double aLowpassCutoffFrequency)

        Parameters:
            aLowpassCutoffFrequency: double

        """
        return _opensim.ExternalLoads_setLowpassCutoffFrequencyForLoadKinematics(self, aLowpassCutoffFrequency)


    def transformPointsExpressedInGroundToAppliedBodies(self, *args):
        """
        transformPointsExpressedInGroundToAppliedBodies(ExternalLoads self, Storage kinematics, double startTime, double endTime)

        Parameters:
            kinematics: OpenSim::Storage const &
            startTime: double
            endTime: double

        transformPointsExpressedInGroundToAppliedBodies(ExternalLoads self, Storage kinematics, double startTime)

        Parameters:
            kinematics: OpenSim::Storage const &
            startTime: double

        transformPointsExpressedInGroundToAppliedBodies(ExternalLoads self, Storage kinematics)

        Parameters:
            kinematics: OpenSim::Storage const &

        """
        return _opensim.ExternalLoads_transformPointsExpressedInGroundToAppliedBodies(self, *args)


    def transformPointExpressedInGroundToAppliedBody(self, exForce, kinematics, startTime, endTime):
        """
        transformPointExpressedInGroundToAppliedBody(ExternalLoads self, ExternalForce exForce, Storage kinematics, double startTime, double endTime) -> ExternalForce

        Parameters:
            exForce: OpenSim::ExternalForce const &
            kinematics: OpenSim::Storage const &
            startTime: double
            endTime: double

        """
        return _opensim.ExternalLoads_transformPointExpressedInGroundToAppliedBody(self, exForce, kinematics, startTime, endTime)

ExternalLoads_swigregister = _opensim.ExternalLoads_swigregister
ExternalLoads_swigregister(ExternalLoads)

def ExternalLoads_safeDownCast(obj):
    """
    ExternalLoads_safeDownCast(OpenSimObject obj) -> ExternalLoads

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ExternalLoads_safeDownCast(obj)

def ExternalLoads_getClassName():
    """ExternalLoads_getClassName() -> std::string const &"""
    return _opensim.ExternalLoads_getClassName()

class PrescribedForce(Force):
    """Proxy of C++ OpenSim::PrescribedForce class"""
    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrescribedForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PrescribedForce, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PrescribedForce

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.PrescribedForce_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(PrescribedForce self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.PrescribedForce_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.PrescribedForce_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(PrescribedForce self) -> PrescribedForce

        Parameters:
            self: OpenSim::PrescribedForce const *

        """
        return _opensim.PrescribedForce_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PrescribedForce self) -> std::string const &

        Parameters:
            self: OpenSim::PrescribedForce const *

        """
        return _opensim.PrescribedForce_getConcreteClassName(self)


    def copyProperty_body(self, source):
        """
        copyProperty_body(PrescribedForce self, PrescribedForce source)

        Parameters:
            source: OpenSim::PrescribedForce::Self const &

        """
        return _opensim.PrescribedForce_copyProperty_body(self, source)


    def append_body(self, value):
        """
        append_body(PrescribedForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.PrescribedForce_append_body(self, value)


    def constructProperty_body(self, *args):
        """
        constructProperty_body(PrescribedForce self)
        constructProperty_body(PrescribedForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.PrescribedForce_constructProperty_body(self, *args)


    def get_body(self, *args):
        """
        get_body(PrescribedForce self, int i) -> std::string const

        Parameters:
            i: int

        get_body(PrescribedForce self) -> std::string const &

        Parameters:
            self: OpenSim::PrescribedForce const *

        """
        return _opensim.PrescribedForce_get_body(self, *args)


    def upd_body(self, *args):
        """
        upd_body(PrescribedForce self, int i) -> std::string

        Parameters:
            i: int

        upd_body(PrescribedForce self) -> std::string &

        Parameters:
            self: OpenSim::PrescribedForce *

        """
        return _opensim.PrescribedForce_upd_body(self, *args)


    def set_body(self, *args):
        """
        set_body(PrescribedForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_body(PrescribedForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.PrescribedForce_set_body(self, *args)


    def copyProperty_pointIsGlobal(self, source):
        """
        copyProperty_pointIsGlobal(PrescribedForce self, PrescribedForce source)

        Parameters:
            source: OpenSim::PrescribedForce::Self const &

        """
        return _opensim.PrescribedForce_copyProperty_pointIsGlobal(self, source)


    def append_pointIsGlobal(self, value):
        """
        append_pointIsGlobal(PrescribedForce self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.PrescribedForce_append_pointIsGlobal(self, value)


    def constructProperty_pointIsGlobal(self, initValue):
        """
        constructProperty_pointIsGlobal(PrescribedForce self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.PrescribedForce_constructProperty_pointIsGlobal(self, initValue)


    def get_pointIsGlobal(self, *args):
        """
        get_pointIsGlobal(PrescribedForce self, int i) -> bool const

        Parameters:
            i: int

        get_pointIsGlobal(PrescribedForce self) -> bool const &

        Parameters:
            self: OpenSim::PrescribedForce const *

        """
        return _opensim.PrescribedForce_get_pointIsGlobal(self, *args)


    def upd_pointIsGlobal(self, *args):
        """
        upd_pointIsGlobal(PrescribedForce self, int i) -> bool

        Parameters:
            i: int

        upd_pointIsGlobal(PrescribedForce self) -> bool &

        Parameters:
            self: OpenSim::PrescribedForce *

        """
        return _opensim.PrescribedForce_upd_pointIsGlobal(self, *args)


    def set_pointIsGlobal(self, *args):
        """
        set_pointIsGlobal(PrescribedForce self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_pointIsGlobal(PrescribedForce self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.PrescribedForce_set_pointIsGlobal(self, *args)


    def copyProperty_forceIsGlobal(self, source):
        """
        copyProperty_forceIsGlobal(PrescribedForce self, PrescribedForce source)

        Parameters:
            source: OpenSim::PrescribedForce::Self const &

        """
        return _opensim.PrescribedForce_copyProperty_forceIsGlobal(self, source)


    def append_forceIsGlobal(self, value):
        """
        append_forceIsGlobal(PrescribedForce self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.PrescribedForce_append_forceIsGlobal(self, value)


    def constructProperty_forceIsGlobal(self, initValue):
        """
        constructProperty_forceIsGlobal(PrescribedForce self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.PrescribedForce_constructProperty_forceIsGlobal(self, initValue)


    def get_forceIsGlobal(self, *args):
        """
        get_forceIsGlobal(PrescribedForce self, int i) -> bool const

        Parameters:
            i: int

        get_forceIsGlobal(PrescribedForce self) -> bool const &

        Parameters:
            self: OpenSim::PrescribedForce const *

        """
        return _opensim.PrescribedForce_get_forceIsGlobal(self, *args)


    def upd_forceIsGlobal(self, *args):
        """
        upd_forceIsGlobal(PrescribedForce self, int i) -> bool

        Parameters:
            i: int

        upd_forceIsGlobal(PrescribedForce self) -> bool &

        Parameters:
            self: OpenSim::PrescribedForce *

        """
        return _opensim.PrescribedForce_upd_forceIsGlobal(self, *args)


    def set_forceIsGlobal(self, *args):
        """
        set_forceIsGlobal(PrescribedForce self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_forceIsGlobal(PrescribedForce self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.PrescribedForce_set_forceIsGlobal(self, *args)


    def copyProperty_forceFunctions(self, source):
        """
        copyProperty_forceFunctions(PrescribedForce self, PrescribedForce source)

        Parameters:
            source: OpenSim::PrescribedForce::Self const &

        """
        return _opensim.PrescribedForce_copyProperty_forceFunctions(self, source)


    def append_forceFunctions(self, value):
        """
        append_forceFunctions(PrescribedForce self, FunctionSet value) -> int

        Parameters:
            value: OpenSim::FunctionSet const &

        """
        return _opensim.PrescribedForce_append_forceFunctions(self, value)


    def constructProperty_forceFunctions(self, initValue):
        """
        constructProperty_forceFunctions(PrescribedForce self, FunctionSet initValue)

        Parameters:
            initValue: OpenSim::FunctionSet const &

        """
        return _opensim.PrescribedForce_constructProperty_forceFunctions(self, initValue)


    def get_forceFunctions(self, *args):
        """
        get_forceFunctions(PrescribedForce self, int i) -> FunctionSet

        Parameters:
            i: int

        get_forceFunctions(PrescribedForce self) -> FunctionSet

        Parameters:
            self: OpenSim::PrescribedForce const *

        """
        return _opensim.PrescribedForce_get_forceFunctions(self, *args)


    def upd_forceFunctions(self, *args):
        """
        upd_forceFunctions(PrescribedForce self, int i) -> FunctionSet

        Parameters:
            i: int

        upd_forceFunctions(PrescribedForce self) -> FunctionSet

        Parameters:
            self: OpenSim::PrescribedForce *

        """
        return _opensim.PrescribedForce_upd_forceFunctions(self, *args)


    def set_forceFunctions(self, *args):
        """
        set_forceFunctions(PrescribedForce self, int i, FunctionSet value)

        Parameters:
            i: int
            value: OpenSim::FunctionSet const &

        set_forceFunctions(PrescribedForce self, FunctionSet value)

        Parameters:
            value: OpenSim::FunctionSet const &

        """
        return _opensim.PrescribedForce_set_forceFunctions(self, *args)


    def copyProperty_pointFunctions(self, source):
        """
        copyProperty_pointFunctions(PrescribedForce self, PrescribedForce source)

        Parameters:
            source: OpenSim::PrescribedForce::Self const &

        """
        return _opensim.PrescribedForce_copyProperty_pointFunctions(self, source)


    def append_pointFunctions(self, value):
        """
        append_pointFunctions(PrescribedForce self, FunctionSet value) -> int

        Parameters:
            value: OpenSim::FunctionSet const &

        """
        return _opensim.PrescribedForce_append_pointFunctions(self, value)


    def constructProperty_pointFunctions(self, initValue):
        """
        constructProperty_pointFunctions(PrescribedForce self, FunctionSet initValue)

        Parameters:
            initValue: OpenSim::FunctionSet const &

        """
        return _opensim.PrescribedForce_constructProperty_pointFunctions(self, initValue)


    def get_pointFunctions(self, *args):
        """
        get_pointFunctions(PrescribedForce self, int i) -> FunctionSet

        Parameters:
            i: int

        get_pointFunctions(PrescribedForce self) -> FunctionSet

        Parameters:
            self: OpenSim::PrescribedForce const *

        """
        return _opensim.PrescribedForce_get_pointFunctions(self, *args)


    def upd_pointFunctions(self, *args):
        """
        upd_pointFunctions(PrescribedForce self, int i) -> FunctionSet

        Parameters:
            i: int

        upd_pointFunctions(PrescribedForce self) -> FunctionSet

        Parameters:
            self: OpenSim::PrescribedForce *

        """
        return _opensim.PrescribedForce_upd_pointFunctions(self, *args)


    def set_pointFunctions(self, *args):
        """
        set_pointFunctions(PrescribedForce self, int i, FunctionSet value)

        Parameters:
            i: int
            value: OpenSim::FunctionSet const &

        set_pointFunctions(PrescribedForce self, FunctionSet value)

        Parameters:
            value: OpenSim::FunctionSet const &

        """
        return _opensim.PrescribedForce_set_pointFunctions(self, *args)


    def copyProperty_torqueFunctions(self, source):
        """
        copyProperty_torqueFunctions(PrescribedForce self, PrescribedForce source)

        Parameters:
            source: OpenSim::PrescribedForce::Self const &

        """
        return _opensim.PrescribedForce_copyProperty_torqueFunctions(self, source)


    def append_torqueFunctions(self, value):
        """
        append_torqueFunctions(PrescribedForce self, FunctionSet value) -> int

        Parameters:
            value: OpenSim::FunctionSet const &

        """
        return _opensim.PrescribedForce_append_torqueFunctions(self, value)


    def constructProperty_torqueFunctions(self, initValue):
        """
        constructProperty_torqueFunctions(PrescribedForce self, FunctionSet initValue)

        Parameters:
            initValue: OpenSim::FunctionSet const &

        """
        return _opensim.PrescribedForce_constructProperty_torqueFunctions(self, initValue)


    def get_torqueFunctions(self, *args):
        """
        get_torqueFunctions(PrescribedForce self, int i) -> FunctionSet

        Parameters:
            i: int

        get_torqueFunctions(PrescribedForce self) -> FunctionSet

        Parameters:
            self: OpenSim::PrescribedForce const *

        """
        return _opensim.PrescribedForce_get_torqueFunctions(self, *args)


    def upd_torqueFunctions(self, *args):
        """
        upd_torqueFunctions(PrescribedForce self, int i) -> FunctionSet

        Parameters:
            i: int

        upd_torqueFunctions(PrescribedForce self) -> FunctionSet

        Parameters:
            self: OpenSim::PrescribedForce *

        """
        return _opensim.PrescribedForce_upd_torqueFunctions(self, *args)


    def set_torqueFunctions(self, *args):
        """
        set_torqueFunctions(PrescribedForce self, int i, FunctionSet value)

        Parameters:
            i: int
            value: OpenSim::FunctionSet const &

        set_torqueFunctions(PrescribedForce self, FunctionSet value)

        Parameters:
            value: OpenSim::FunctionSet const &

        """
        return _opensim.PrescribedForce_set_torqueFunctions(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::PrescribedForce self, Body body=None) -> PrescribedForce

        Parameters:
            body: OpenSim::Body *

        __init__(OpenSim::PrescribedForce self) -> PrescribedForce
        __init__(OpenSim::PrescribedForce self, SimTK::Xml::Element & aNode) -> PrescribedForce

        Parameters:
            aNode: SimTK::Xml::Element &

        """
        this = _opensim.new_PrescribedForce(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(PrescribedForce self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters:
            aNode: SimTK::Xml::Element &
            versionNumber: int

        updateFromXMLNode(PrescribedForce self, SimTK::Xml::Element & aNode)

        Parameters:
            aNode: SimTK::Xml::Element &

        """
        return _opensim.PrescribedForce_updateFromXMLNode(self, aNode, versionNumber)


    def setBodyName(self, aBodyName):
        """
        setBodyName(PrescribedForce self, std::string const & aBodyName)

        Parameters:
            aBodyName: std::string const &

        """
        return _opensim.PrescribedForce_setBodyName(self, aBodyName)


    def getBodyName(self):
        """
        getBodyName(PrescribedForce self) -> std::string const &

        Parameters:
            self: OpenSim::PrescribedForce const *

        """
        return _opensim.PrescribedForce_getBodyName(self)


    def setForceFunctions(self, forceX, forceY, forceZ):
        """
        setForceFunctions(PrescribedForce self, Function forceX, Function forceY, Function forceZ)

        Parameters:
            forceX: OpenSim::Function *
            forceY: OpenSim::Function *
            forceZ: OpenSim::Function *

        """
        return _opensim.PrescribedForce_setForceFunctions(self, forceX, forceY, forceZ)


    def getForceFunctions(self):
        """
        getForceFunctions(PrescribedForce self) -> FunctionSet

        Parameters:
            self: OpenSim::PrescribedForce const *

        """
        return _opensim.PrescribedForce_getForceFunctions(self)


    def updForceFunctions(self):
        """
        updForceFunctions(PrescribedForce self) -> FunctionSet

        Parameters:
            self: OpenSim::PrescribedForce *

        """
        return _opensim.PrescribedForce_updForceFunctions(self)


    def getForceFunctionNames(self, aFunctionNames):
        """
        getForceFunctionNames(PrescribedForce self, ArrayStr aFunctionNames)

        Parameters:
            aFunctionNames: OpenSim::Array< std::string > &

        """
        return _opensim.PrescribedForce_getForceFunctionNames(self, aFunctionNames)


    def setForceFunctionNames(self, aFunctionNames, kineticsStore):
        """
        setForceFunctionNames(PrescribedForce self, ArrayStr aFunctionNames, Storage kineticsStore)

        Parameters:
            aFunctionNames: OpenSim::Array< std::string > const &
            kineticsStore: OpenSim::Storage const &

        """
        return _opensim.PrescribedForce_setForceFunctionNames(self, aFunctionNames, kineticsStore)


    def clearForceFunctions(self):
        """
        clearForceFunctions(PrescribedForce self)

        Parameters:
            self: OpenSim::PrescribedForce *

        """
        return _opensim.PrescribedForce_clearForceFunctions(self)


    def setPointFunctions(self, pointX, pointY, pointZ):
        """
        setPointFunctions(PrescribedForce self, Function pointX, Function pointY, Function pointZ)

        Parameters:
            pointX: OpenSim::Function *
            pointY: OpenSim::Function *
            pointZ: OpenSim::Function *

        """
        return _opensim.PrescribedForce_setPointFunctions(self, pointX, pointY, pointZ)


    def getPointFunctions(self):
        """
        getPointFunctions(PrescribedForce self) -> FunctionSet

        Parameters:
            self: OpenSim::PrescribedForce const *

        """
        return _opensim.PrescribedForce_getPointFunctions(self)


    def updPointFunctions(self):
        """
        updPointFunctions(PrescribedForce self) -> FunctionSet

        Parameters:
            self: OpenSim::PrescribedForce *

        """
        return _opensim.PrescribedForce_updPointFunctions(self)


    def getPointFunctionNames(self, aFunctionNames):
        """
        getPointFunctionNames(PrescribedForce self, ArrayStr aFunctionNames)

        Parameters:
            aFunctionNames: OpenSim::Array< std::string > &

        """
        return _opensim.PrescribedForce_getPointFunctionNames(self, aFunctionNames)


    def setPointFunctionNames(self, aFunctionNames, kineticsStore):
        """
        setPointFunctionNames(PrescribedForce self, ArrayStr aFunctionNames, Storage kineticsStore)

        Parameters:
            aFunctionNames: OpenSim::Array< std::string > const &
            kineticsStore: OpenSim::Storage const &

        """
        return _opensim.PrescribedForce_setPointFunctionNames(self, aFunctionNames, kineticsStore)


    def clearPointFunctions(self):
        """
        clearPointFunctions(PrescribedForce self)

        Parameters:
            self: OpenSim::PrescribedForce *

        """
        return _opensim.PrescribedForce_clearPointFunctions(self)


    def setTorqueFunctions(self, torqueX, torqueY, torqueZ):
        """
        setTorqueFunctions(PrescribedForce self, Function torqueX, Function torqueY, Function torqueZ)

        Parameters:
            torqueX: OpenSim::Function *
            torqueY: OpenSim::Function *
            torqueZ: OpenSim::Function *

        """
        return _opensim.PrescribedForce_setTorqueFunctions(self, torqueX, torqueY, torqueZ)


    def getTorqueFunctions(self):
        """
        getTorqueFunctions(PrescribedForce self) -> FunctionSet

        Parameters:
            self: OpenSim::PrescribedForce const *

        """
        return _opensim.PrescribedForce_getTorqueFunctions(self)


    def updTorqueFunctions(self):
        """
        updTorqueFunctions(PrescribedForce self) -> FunctionSet

        Parameters:
            self: OpenSim::PrescribedForce *

        """
        return _opensim.PrescribedForce_updTorqueFunctions(self)


    def getTorqueFunctionNames(self, aFunctionNames):
        """
        getTorqueFunctionNames(PrescribedForce self, ArrayStr aFunctionNames)

        Parameters:
            aFunctionNames: OpenSim::Array< std::string > &

        """
        return _opensim.PrescribedForce_getTorqueFunctionNames(self, aFunctionNames)


    def setTorqueFunctionNames(self, aFunctionNames, kineticsStore):
        """
        setTorqueFunctionNames(PrescribedForce self, ArrayStr aFunctionNames, Storage kineticsStore)

        Parameters:
            aFunctionNames: OpenSim::Array< std::string > const &
            kineticsStore: OpenSim::Storage const &

        """
        return _opensim.PrescribedForce_setTorqueFunctionNames(self, aFunctionNames, kineticsStore)


    def clearTorqueFunctions(self):
        """
        clearTorqueFunctions(PrescribedForce self)

        Parameters:
            self: OpenSim::PrescribedForce *

        """
        return _opensim.PrescribedForce_clearTorqueFunctions(self)


    def getForceIsInGlobalFrame(self):
        """
        getForceIsInGlobalFrame(PrescribedForce self) -> bool

        Parameters:
            self: OpenSim::PrescribedForce const *

        """
        return _opensim.PrescribedForce_getForceIsInGlobalFrame(self)


    def setForceIsInGlobalFrame(self, isGlobal):
        """
        setForceIsInGlobalFrame(PrescribedForce self, bool isGlobal)

        Parameters:
            isGlobal: bool

        """
        return _opensim.PrescribedForce_setForceIsInGlobalFrame(self, isGlobal)


    def getPointIsInGlobalFrame(self):
        """
        getPointIsInGlobalFrame(PrescribedForce self) -> bool

        Parameters:
            self: OpenSim::PrescribedForce const *

        """
        return _opensim.PrescribedForce_getPointIsInGlobalFrame(self)


    def setPointIsInGlobalFrame(self, isGlobal):
        """
        setPointIsInGlobalFrame(PrescribedForce self, bool isGlobal)

        Parameters:
            isGlobal: bool

        """
        return _opensim.PrescribedForce_setPointIsInGlobalFrame(self, isGlobal)


    def getBody(self):
        """
        getBody(PrescribedForce self) -> Body

        Parameters:
            self: OpenSim::PrescribedForce const *

        """
        return _opensim.PrescribedForce_getBody(self)


    def getForceAtTime(self, aTime):
        """
        getForceAtTime(PrescribedForce self, double aTime) -> Vec3

        Parameters:
            aTime: double

        """
        return _opensim.PrescribedForce_getForceAtTime(self, aTime)


    def getPointAtTime(self, aTime):
        """
        getPointAtTime(PrescribedForce self, double aTime) -> Vec3

        Parameters:
            aTime: double

        """
        return _opensim.PrescribedForce_getPointAtTime(self, aTime)


    def getTorqueAtTime(self, aTime):
        """
        getTorqueAtTime(PrescribedForce self, double aTime) -> Vec3

        Parameters:
            aTime: double

        """
        return _opensim.PrescribedForce_getTorqueAtTime(self, aTime)


    def getRecordLabels(self):
        """
        getRecordLabels(PrescribedForce self) -> ArrayStr

        Parameters:
            self: OpenSim::PrescribedForce const *

        """
        return _opensim.PrescribedForce_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(PrescribedForce self, State state) -> ArrayDouble

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.PrescribedForce_getRecordValues(self, state)

    __swig_destroy__ = _opensim.delete_PrescribedForce
    __del__ = lambda self: None
PrescribedForce_swigregister = _opensim.PrescribedForce_swigregister
PrescribedForce_swigregister(PrescribedForce)

def PrescribedForce_safeDownCast(obj):
    """
    PrescribedForce_safeDownCast(OpenSimObject obj) -> PrescribedForce

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.PrescribedForce_safeDownCast(obj)

def PrescribedForce_getClassName():
    """PrescribedForce_getClassName() -> std::string const &"""
    return _opensim.PrescribedForce_getClassName()

class CoordinateLimitForce(Force):
    """Proxy of C++ OpenSim::CoordinateLimitForce class"""
    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoordinateLimitForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoordinateLimitForce, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> CoordinateLimitForce

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.CoordinateLimitForce_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(CoordinateLimitForce self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.CoordinateLimitForce_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.CoordinateLimitForce_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(CoordinateLimitForce self) -> CoordinateLimitForce

        Parameters:
            self: OpenSim::CoordinateLimitForce const *

        """
        return _opensim.CoordinateLimitForce_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(CoordinateLimitForce self) -> std::string const &

        Parameters:
            self: OpenSim::CoordinateLimitForce const *

        """
        return _opensim.CoordinateLimitForce_getConcreteClassName(self)


    def copyProperty_coordinate(self, source):
        """
        copyProperty_coordinate(CoordinateLimitForce self, CoordinateLimitForce source)

        Parameters:
            source: OpenSim::CoordinateLimitForce::Self const &

        """
        return _opensim.CoordinateLimitForce_copyProperty_coordinate(self, source)


    def append_coordinate(self, value):
        """
        append_coordinate(CoordinateLimitForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.CoordinateLimitForce_append_coordinate(self, value)


    def constructProperty_coordinate(self, initValue):
        """
        constructProperty_coordinate(CoordinateLimitForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.CoordinateLimitForce_constructProperty_coordinate(self, initValue)


    def get_coordinate(self, *args):
        """
        get_coordinate(CoordinateLimitForce self, int i) -> std::string const

        Parameters:
            i: int

        get_coordinate(CoordinateLimitForce self) -> std::string const &

        Parameters:
            self: OpenSim::CoordinateLimitForce const *

        """
        return _opensim.CoordinateLimitForce_get_coordinate(self, *args)


    def upd_coordinate(self, *args):
        """
        upd_coordinate(CoordinateLimitForce self, int i) -> std::string

        Parameters:
            i: int

        upd_coordinate(CoordinateLimitForce self) -> std::string &

        Parameters:
            self: OpenSim::CoordinateLimitForce *

        """
        return _opensim.CoordinateLimitForce_upd_coordinate(self, *args)


    def set_coordinate(self, *args):
        """
        set_coordinate(CoordinateLimitForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_coordinate(CoordinateLimitForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.CoordinateLimitForce_set_coordinate(self, *args)


    def copyProperty_upper_stiffness(self, source):
        """
        copyProperty_upper_stiffness(CoordinateLimitForce self, CoordinateLimitForce source)

        Parameters:
            source: OpenSim::CoordinateLimitForce::Self const &

        """
        return _opensim.CoordinateLimitForce_copyProperty_upper_stiffness(self, source)


    def append_upper_stiffness(self, value):
        """
        append_upper_stiffness(CoordinateLimitForce self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.CoordinateLimitForce_append_upper_stiffness(self, value)


    def constructProperty_upper_stiffness(self, initValue):
        """
        constructProperty_upper_stiffness(CoordinateLimitForce self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.CoordinateLimitForce_constructProperty_upper_stiffness(self, initValue)


    def get_upper_stiffness(self, *args):
        """
        get_upper_stiffness(CoordinateLimitForce self, int i) -> double const

        Parameters:
            i: int

        get_upper_stiffness(CoordinateLimitForce self) -> double const &

        Parameters:
            self: OpenSim::CoordinateLimitForce const *

        """
        return _opensim.CoordinateLimitForce_get_upper_stiffness(self, *args)


    def upd_upper_stiffness(self, *args):
        """
        upd_upper_stiffness(CoordinateLimitForce self, int i) -> double

        Parameters:
            i: int

        upd_upper_stiffness(CoordinateLimitForce self) -> double &

        Parameters:
            self: OpenSim::CoordinateLimitForce *

        """
        return _opensim.CoordinateLimitForce_upd_upper_stiffness(self, *args)


    def set_upper_stiffness(self, *args):
        """
        set_upper_stiffness(CoordinateLimitForce self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_upper_stiffness(CoordinateLimitForce self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.CoordinateLimitForce_set_upper_stiffness(self, *args)


    def copyProperty_upper_limit(self, source):
        """
        copyProperty_upper_limit(CoordinateLimitForce self, CoordinateLimitForce source)

        Parameters:
            source: OpenSim::CoordinateLimitForce::Self const &

        """
        return _opensim.CoordinateLimitForce_copyProperty_upper_limit(self, source)


    def append_upper_limit(self, value):
        """
        append_upper_limit(CoordinateLimitForce self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.CoordinateLimitForce_append_upper_limit(self, value)


    def constructProperty_upper_limit(self, initValue):
        """
        constructProperty_upper_limit(CoordinateLimitForce self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.CoordinateLimitForce_constructProperty_upper_limit(self, initValue)


    def get_upper_limit(self, *args):
        """
        get_upper_limit(CoordinateLimitForce self, int i) -> double const

        Parameters:
            i: int

        get_upper_limit(CoordinateLimitForce self) -> double const &

        Parameters:
            self: OpenSim::CoordinateLimitForce const *

        """
        return _opensim.CoordinateLimitForce_get_upper_limit(self, *args)


    def upd_upper_limit(self, *args):
        """
        upd_upper_limit(CoordinateLimitForce self, int i) -> double

        Parameters:
            i: int

        upd_upper_limit(CoordinateLimitForce self) -> double &

        Parameters:
            self: OpenSim::CoordinateLimitForce *

        """
        return _opensim.CoordinateLimitForce_upd_upper_limit(self, *args)


    def set_upper_limit(self, *args):
        """
        set_upper_limit(CoordinateLimitForce self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_upper_limit(CoordinateLimitForce self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.CoordinateLimitForce_set_upper_limit(self, *args)


    def copyProperty_lower_stiffness(self, source):
        """
        copyProperty_lower_stiffness(CoordinateLimitForce self, CoordinateLimitForce source)

        Parameters:
            source: OpenSim::CoordinateLimitForce::Self const &

        """
        return _opensim.CoordinateLimitForce_copyProperty_lower_stiffness(self, source)


    def append_lower_stiffness(self, value):
        """
        append_lower_stiffness(CoordinateLimitForce self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.CoordinateLimitForce_append_lower_stiffness(self, value)


    def constructProperty_lower_stiffness(self, initValue):
        """
        constructProperty_lower_stiffness(CoordinateLimitForce self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.CoordinateLimitForce_constructProperty_lower_stiffness(self, initValue)


    def get_lower_stiffness(self, *args):
        """
        get_lower_stiffness(CoordinateLimitForce self, int i) -> double const

        Parameters:
            i: int

        get_lower_stiffness(CoordinateLimitForce self) -> double const &

        Parameters:
            self: OpenSim::CoordinateLimitForce const *

        """
        return _opensim.CoordinateLimitForce_get_lower_stiffness(self, *args)


    def upd_lower_stiffness(self, *args):
        """
        upd_lower_stiffness(CoordinateLimitForce self, int i) -> double

        Parameters:
            i: int

        upd_lower_stiffness(CoordinateLimitForce self) -> double &

        Parameters:
            self: OpenSim::CoordinateLimitForce *

        """
        return _opensim.CoordinateLimitForce_upd_lower_stiffness(self, *args)


    def set_lower_stiffness(self, *args):
        """
        set_lower_stiffness(CoordinateLimitForce self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_lower_stiffness(CoordinateLimitForce self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.CoordinateLimitForce_set_lower_stiffness(self, *args)


    def copyProperty_lower_limit(self, source):
        """
        copyProperty_lower_limit(CoordinateLimitForce self, CoordinateLimitForce source)

        Parameters:
            source: OpenSim::CoordinateLimitForce::Self const &

        """
        return _opensim.CoordinateLimitForce_copyProperty_lower_limit(self, source)


    def append_lower_limit(self, value):
        """
        append_lower_limit(CoordinateLimitForce self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.CoordinateLimitForce_append_lower_limit(self, value)


    def constructProperty_lower_limit(self, initValue):
        """
        constructProperty_lower_limit(CoordinateLimitForce self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.CoordinateLimitForce_constructProperty_lower_limit(self, initValue)


    def get_lower_limit(self, *args):
        """
        get_lower_limit(CoordinateLimitForce self, int i) -> double const

        Parameters:
            i: int

        get_lower_limit(CoordinateLimitForce self) -> double const &

        Parameters:
            self: OpenSim::CoordinateLimitForce const *

        """
        return _opensim.CoordinateLimitForce_get_lower_limit(self, *args)


    def upd_lower_limit(self, *args):
        """
        upd_lower_limit(CoordinateLimitForce self, int i) -> double

        Parameters:
            i: int

        upd_lower_limit(CoordinateLimitForce self) -> double &

        Parameters:
            self: OpenSim::CoordinateLimitForce *

        """
        return _opensim.CoordinateLimitForce_upd_lower_limit(self, *args)


    def set_lower_limit(self, *args):
        """
        set_lower_limit(CoordinateLimitForce self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_lower_limit(CoordinateLimitForce self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.CoordinateLimitForce_set_lower_limit(self, *args)


    def copyProperty_damping(self, source):
        """
        copyProperty_damping(CoordinateLimitForce self, CoordinateLimitForce source)

        Parameters:
            source: OpenSim::CoordinateLimitForce::Self const &

        """
        return _opensim.CoordinateLimitForce_copyProperty_damping(self, source)


    def append_damping(self, value):
        """
        append_damping(CoordinateLimitForce self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.CoordinateLimitForce_append_damping(self, value)


    def constructProperty_damping(self, initValue):
        """
        constructProperty_damping(CoordinateLimitForce self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.CoordinateLimitForce_constructProperty_damping(self, initValue)


    def get_damping(self, *args):
        """
        get_damping(CoordinateLimitForce self, int i) -> double const

        Parameters:
            i: int

        get_damping(CoordinateLimitForce self) -> double const &

        Parameters:
            self: OpenSim::CoordinateLimitForce const *

        """
        return _opensim.CoordinateLimitForce_get_damping(self, *args)


    def upd_damping(self, *args):
        """
        upd_damping(CoordinateLimitForce self, int i) -> double

        Parameters:
            i: int

        upd_damping(CoordinateLimitForce self) -> double &

        Parameters:
            self: OpenSim::CoordinateLimitForce *

        """
        return _opensim.CoordinateLimitForce_upd_damping(self, *args)


    def set_damping(self, *args):
        """
        set_damping(CoordinateLimitForce self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_damping(CoordinateLimitForce self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.CoordinateLimitForce_set_damping(self, *args)


    def copyProperty_transition(self, source):
        """
        copyProperty_transition(CoordinateLimitForce self, CoordinateLimitForce source)

        Parameters:
            source: OpenSim::CoordinateLimitForce::Self const &

        """
        return _opensim.CoordinateLimitForce_copyProperty_transition(self, source)


    def append_transition(self, value):
        """
        append_transition(CoordinateLimitForce self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.CoordinateLimitForce_append_transition(self, value)


    def constructProperty_transition(self, initValue):
        """
        constructProperty_transition(CoordinateLimitForce self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.CoordinateLimitForce_constructProperty_transition(self, initValue)


    def get_transition(self, *args):
        """
        get_transition(CoordinateLimitForce self, int i) -> double const

        Parameters:
            i: int

        get_transition(CoordinateLimitForce self) -> double const &

        Parameters:
            self: OpenSim::CoordinateLimitForce const *

        """
        return _opensim.CoordinateLimitForce_get_transition(self, *args)


    def upd_transition(self, *args):
        """
        upd_transition(CoordinateLimitForce self, int i) -> double

        Parameters:
            i: int

        upd_transition(CoordinateLimitForce self) -> double &

        Parameters:
            self: OpenSim::CoordinateLimitForce *

        """
        return _opensim.CoordinateLimitForce_upd_transition(self, *args)


    def set_transition(self, *args):
        """
        set_transition(CoordinateLimitForce self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_transition(CoordinateLimitForce self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.CoordinateLimitForce_set_transition(self, *args)


    def copyProperty_compute_dissipation_energy(self, source):
        """
        copyProperty_compute_dissipation_energy(CoordinateLimitForce self, CoordinateLimitForce source)

        Parameters:
            source: OpenSim::CoordinateLimitForce::Self const &

        """
        return _opensim.CoordinateLimitForce_copyProperty_compute_dissipation_energy(self, source)


    def append_compute_dissipation_energy(self, value):
        """
        append_compute_dissipation_energy(CoordinateLimitForce self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.CoordinateLimitForce_append_compute_dissipation_energy(self, value)


    def constructProperty_compute_dissipation_energy(self, initValue):
        """
        constructProperty_compute_dissipation_energy(CoordinateLimitForce self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.CoordinateLimitForce_constructProperty_compute_dissipation_energy(self, initValue)


    def get_compute_dissipation_energy(self, *args):
        """
        get_compute_dissipation_energy(CoordinateLimitForce self, int i) -> bool const

        Parameters:
            i: int

        get_compute_dissipation_energy(CoordinateLimitForce self) -> bool const &

        Parameters:
            self: OpenSim::CoordinateLimitForce const *

        """
        return _opensim.CoordinateLimitForce_get_compute_dissipation_energy(self, *args)


    def upd_compute_dissipation_energy(self, *args):
        """
        upd_compute_dissipation_energy(CoordinateLimitForce self, int i) -> bool

        Parameters:
            i: int

        upd_compute_dissipation_energy(CoordinateLimitForce self) -> bool &

        Parameters:
            self: OpenSim::CoordinateLimitForce *

        """
        return _opensim.CoordinateLimitForce_upd_compute_dissipation_energy(self, *args)


    def set_compute_dissipation_energy(self, *args):
        """
        set_compute_dissipation_energy(CoordinateLimitForce self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_compute_dissipation_energy(CoordinateLimitForce self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.CoordinateLimitForce_set_compute_dissipation_energy(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::CoordinateLimitForce self) -> CoordinateLimitForce
        __init__(OpenSim::CoordinateLimitForce self, std::string const & coordName, double q_upper, double K_upper, double q_lower, double K_lower, double damping, double dq, bool computeDissipationEnergy=False) -> CoordinateLimitForce

        Parameters:
            coordName: std::string const &
            q_upper: double
            K_upper: double
            q_lower: double
            K_lower: double
            damping: double
            dq: double
            computeDissipationEnergy: bool

        __init__(OpenSim::CoordinateLimitForce self, std::string const & coordName, double q_upper, double K_upper, double q_lower, double K_lower, double damping, double dq) -> CoordinateLimitForce

        Parameters:
            coordName: std::string const &
            q_upper: double
            K_upper: double
            q_lower: double
            K_lower: double
            damping: double
            dq: double

        """
        this = _opensim.new_CoordinateLimitForce(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_CoordinateLimitForce
    __del__ = lambda self: None

    def setUpperStiffness(self, aUpperStiffness):
        """
        setUpperStiffness(CoordinateLimitForce self, double aUpperStiffness)

        Parameters:
            aUpperStiffness: double

        """
        return _opensim.CoordinateLimitForce_setUpperStiffness(self, aUpperStiffness)


    def getUpperStiffness(self):
        """
        getUpperStiffness(CoordinateLimitForce self) -> double

        Parameters:
            self: OpenSim::CoordinateLimitForce const *

        """
        return _opensim.CoordinateLimitForce_getUpperStiffness(self)


    def setUpperLimit(self, aUpperLimit):
        """
        setUpperLimit(CoordinateLimitForce self, double aUpperLimit)

        Parameters:
            aUpperLimit: double

        """
        return _opensim.CoordinateLimitForce_setUpperLimit(self, aUpperLimit)


    def getUpperLimit(self):
        """
        getUpperLimit(CoordinateLimitForce self) -> double

        Parameters:
            self: OpenSim::CoordinateLimitForce const *

        """
        return _opensim.CoordinateLimitForce_getUpperLimit(self)


    def setLowerStiffness(self, aLowerStiffness):
        """
        setLowerStiffness(CoordinateLimitForce self, double aLowerStiffness)

        Parameters:
            aLowerStiffness: double

        """
        return _opensim.CoordinateLimitForce_setLowerStiffness(self, aLowerStiffness)


    def getLowerStiffness(self):
        """
        getLowerStiffness(CoordinateLimitForce self) -> double

        Parameters:
            self: OpenSim::CoordinateLimitForce const *

        """
        return _opensim.CoordinateLimitForce_getLowerStiffness(self)


    def setLowerLimit(self, aLowerLimit):
        """
        setLowerLimit(CoordinateLimitForce self, double aLowerLimit)

        Parameters:
            aLowerLimit: double

        """
        return _opensim.CoordinateLimitForce_setLowerLimit(self, aLowerLimit)


    def getLowerLimit(self):
        """
        getLowerLimit(CoordinateLimitForce self) -> double

        Parameters:
            self: OpenSim::CoordinateLimitForce const *

        """
        return _opensim.CoordinateLimitForce_getLowerLimit(self)


    def setDamping(self, aDamping):
        """
        setDamping(CoordinateLimitForce self, double aDamping)

        Parameters:
            aDamping: double

        """
        return _opensim.CoordinateLimitForce_setDamping(self, aDamping)


    def getDamping(self):
        """
        getDamping(CoordinateLimitForce self) -> double

        Parameters:
            self: OpenSim::CoordinateLimitForce const *

        """
        return _opensim.CoordinateLimitForce_getDamping(self)


    def setTransition(self, aTransition):
        """
        setTransition(CoordinateLimitForce self, double aTransition)

        Parameters:
            aTransition: double

        """
        return _opensim.CoordinateLimitForce_setTransition(self, aTransition)


    def getTransition(self):
        """
        getTransition(CoordinateLimitForce self) -> double

        Parameters:
            self: OpenSim::CoordinateLimitForce const *

        """
        return _opensim.CoordinateLimitForce_getTransition(self)


    def setComputeDissipationEnergy(self, flag):
        """
        setComputeDissipationEnergy(CoordinateLimitForce self, bool flag)

        Parameters:
            flag: bool

        """
        return _opensim.CoordinateLimitForce_setComputeDissipationEnergy(self, flag)


    def isComputingDissipationEnergy(self):
        """
        isComputingDissipationEnergy(CoordinateLimitForce self) -> bool

        Parameters:
            self: OpenSim::CoordinateLimitForce const *

        """
        return _opensim.CoordinateLimitForce_isComputingDissipationEnergy(self)


    def getPowerDissipation(self, s):
        """
        getPowerDissipation(CoordinateLimitForce self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.CoordinateLimitForce_getPowerDissipation(self, s)


    def getDissipatedEnergy(self, s):
        """
        getDissipatedEnergy(CoordinateLimitForce self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.CoordinateLimitForce_getDissipatedEnergy(self, s)


    def calcLimitForce(self, s):
        """
        calcLimitForce(CoordinateLimitForce self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.CoordinateLimitForce_calcLimitForce(self, s)


    def computePotentialEnergy(self, s):
        """
        computePotentialEnergy(CoordinateLimitForce self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.CoordinateLimitForce_computePotentialEnergy(self, s)


    def getRecordLabels(self):
        """
        getRecordLabels(CoordinateLimitForce self) -> ArrayStr

        Parameters:
            self: OpenSim::CoordinateLimitForce const *

        """
        return _opensim.CoordinateLimitForce_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(CoordinateLimitForce self, State state) -> ArrayDouble

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.CoordinateLimitForce_getRecordValues(self, state)

CoordinateLimitForce_swigregister = _opensim.CoordinateLimitForce_swigregister
CoordinateLimitForce_swigregister(CoordinateLimitForce)

def CoordinateLimitForce_safeDownCast(obj):
    """
    CoordinateLimitForce_safeDownCast(OpenSimObject obj) -> CoordinateLimitForce

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.CoordinateLimitForce_safeDownCast(obj)

def CoordinateLimitForce_getClassName():
    """CoordinateLimitForce_getClassName() -> std::string const &"""
    return _opensim.CoordinateLimitForce_getClassName()

class ContactGeometry(ModelComponent):
    """Proxy of C++ OpenSim::ContactGeometry class"""
    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContactGeometry, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ContactGeometry

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ContactGeometry_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ContactGeometry self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ContactGeometry_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ContactGeometry_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ContactGeometry self) -> ContactGeometry

        Parameters:
            self: OpenSim::ContactGeometry const *

        """
        return _opensim.ContactGeometry_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ContactGeometry self) -> std::string const &

        Parameters:
            self: OpenSim::ContactGeometry const *

        """
        return _opensim.ContactGeometry_getConcreteClassName(self)


    def copyProperty_body_name(self, source):
        """
        copyProperty_body_name(ContactGeometry self, ContactGeometry source)

        Parameters:
            source: OpenSim::ContactGeometry::Self const &

        """
        return _opensim.ContactGeometry_copyProperty_body_name(self, source)


    def append_body_name(self, value):
        """
        append_body_name(ContactGeometry self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ContactGeometry_append_body_name(self, value)


    def constructProperty_body_name(self, initValue):
        """
        constructProperty_body_name(ContactGeometry self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.ContactGeometry_constructProperty_body_name(self, initValue)


    def get_body_name(self, *args):
        """
        get_body_name(ContactGeometry self, int i) -> std::string const

        Parameters:
            i: int

        get_body_name(ContactGeometry self) -> std::string const &

        Parameters:
            self: OpenSim::ContactGeometry const *

        """
        return _opensim.ContactGeometry_get_body_name(self, *args)


    def upd_body_name(self, *args):
        """
        upd_body_name(ContactGeometry self, int i) -> std::string

        Parameters:
            i: int

        upd_body_name(ContactGeometry self) -> std::string &

        Parameters:
            self: OpenSim::ContactGeometry *

        """
        return _opensim.ContactGeometry_upd_body_name(self, *args)


    def set_body_name(self, *args):
        """
        set_body_name(ContactGeometry self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_body_name(ContactGeometry self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.ContactGeometry_set_body_name(self, *args)


    def copyProperty_location(self, source):
        """
        copyProperty_location(ContactGeometry self, ContactGeometry source)

        Parameters:
            source: OpenSim::ContactGeometry::Self const &

        """
        return _opensim.ContactGeometry_copyProperty_location(self, source)


    def append_location(self, value):
        """
        append_location(ContactGeometry self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.ContactGeometry_append_location(self, value)


    def constructProperty_location(self, initValue):
        """
        constructProperty_location(ContactGeometry self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.ContactGeometry_constructProperty_location(self, initValue)


    def get_location(self, *args):
        """
        get_location(ContactGeometry self, int i) -> Vec3

        Parameters:
            i: int

        get_location(ContactGeometry self) -> Vec3

        Parameters:
            self: OpenSim::ContactGeometry const *

        """
        return _opensim.ContactGeometry_get_location(self, *args)


    def upd_location(self, *args):
        """
        upd_location(ContactGeometry self, int i) -> Vec3

        Parameters:
            i: int

        upd_location(ContactGeometry self) -> Vec3

        Parameters:
            self: OpenSim::ContactGeometry *

        """
        return _opensim.ContactGeometry_upd_location(self, *args)


    def set_location(self, *args):
        """
        set_location(ContactGeometry self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_location(ContactGeometry self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.ContactGeometry_set_location(self, *args)


    def copyProperty_orientation(self, source):
        """
        copyProperty_orientation(ContactGeometry self, ContactGeometry source)

        Parameters:
            source: OpenSim::ContactGeometry::Self const &

        """
        return _opensim.ContactGeometry_copyProperty_orientation(self, source)


    def append_orientation(self, value):
        """
        append_orientation(ContactGeometry self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.ContactGeometry_append_orientation(self, value)


    def constructProperty_orientation(self, initValue):
        """
        constructProperty_orientation(ContactGeometry self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.ContactGeometry_constructProperty_orientation(self, initValue)


    def get_orientation(self, *args):
        """
        get_orientation(ContactGeometry self, int i) -> Vec3

        Parameters:
            i: int

        get_orientation(ContactGeometry self) -> Vec3

        Parameters:
            self: OpenSim::ContactGeometry const *

        """
        return _opensim.ContactGeometry_get_orientation(self, *args)


    def upd_orientation(self, *args):
        """
        upd_orientation(ContactGeometry self, int i) -> Vec3

        Parameters:
            i: int

        upd_orientation(ContactGeometry self) -> Vec3

        Parameters:
            self: OpenSim::ContactGeometry *

        """
        return _opensim.ContactGeometry_upd_orientation(self, *args)


    def set_orientation(self, *args):
        """
        set_orientation(ContactGeometry self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_orientation(ContactGeometry self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.ContactGeometry_set_orientation(self, *args)


    def copyProperty_display_preference(self, source):
        """
        copyProperty_display_preference(ContactGeometry self, ContactGeometry source)

        Parameters:
            source: OpenSim::ContactGeometry::Self const &

        """
        return _opensim.ContactGeometry_copyProperty_display_preference(self, source)


    def append_display_preference(self, value):
        """
        append_display_preference(ContactGeometry self, int const & value) -> int

        Parameters:
            value: int const &

        """
        return _opensim.ContactGeometry_append_display_preference(self, value)


    def constructProperty_display_preference(self, initValue):
        """
        constructProperty_display_preference(ContactGeometry self, int const & initValue)

        Parameters:
            initValue: int const &

        """
        return _opensim.ContactGeometry_constructProperty_display_preference(self, initValue)


    def get_display_preference(self, *args):
        """
        get_display_preference(ContactGeometry self, int i) -> int const

        Parameters:
            i: int

        get_display_preference(ContactGeometry self) -> int const &

        Parameters:
            self: OpenSim::ContactGeometry const *

        """
        return _opensim.ContactGeometry_get_display_preference(self, *args)


    def upd_display_preference(self, *args):
        """
        upd_display_preference(ContactGeometry self, int i) -> int

        Parameters:
            i: int

        upd_display_preference(ContactGeometry self) -> int &

        Parameters:
            self: OpenSim::ContactGeometry *

        """
        return _opensim.ContactGeometry_upd_display_preference(self, *args)


    def set_display_preference(self, *args):
        """
        set_display_preference(ContactGeometry self, int i, int const & value)

        Parameters:
            i: int
            value: int const &

        set_display_preference(ContactGeometry self, int const & value)

        Parameters:
            value: int const &

        """
        return _opensim.ContactGeometry_set_display_preference(self, *args)


    def copyProperty_color(self, source):
        """
        copyProperty_color(ContactGeometry self, ContactGeometry source)

        Parameters:
            source: OpenSim::ContactGeometry::Self const &

        """
        return _opensim.ContactGeometry_copyProperty_color(self, source)


    def get_color(self, i):
        """
        get_color(ContactGeometry self, int i) -> double const &

        Parameters:
            i: int

        """
        return _opensim.ContactGeometry_get_color(self, i)


    def upd_color(self, i):
        """
        upd_color(ContactGeometry self, int i) -> double &

        Parameters:
            i: int

        """
        return _opensim.ContactGeometry_upd_color(self, i)


    def set_color(self, i, value):
        """
        set_color(ContactGeometry self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        """
        return _opensim.ContactGeometry_set_color(self, i, value)


    def append_color(self, value):
        """
        append_color(ContactGeometry self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ContactGeometry_append_color(self, value)


    def getLocation(self):
        """
        getLocation(ContactGeometry self) -> Vec3

        Parameters:
            self: OpenSim::ContactGeometry const *

        """
        return _opensim.ContactGeometry_getLocation(self)


    def setLocation(self, location):
        """
        setLocation(ContactGeometry self, Vec3 location)

        Parameters:
            location: SimTK::Vec3 const &

        """
        return _opensim.ContactGeometry_setLocation(self, location)


    def getOrientation(self):
        """
        getOrientation(ContactGeometry self) -> Vec3

        Parameters:
            self: OpenSim::ContactGeometry const *

        """
        return _opensim.ContactGeometry_getOrientation(self)


    def setOrientation(self, orientation):
        """
        setOrientation(ContactGeometry self, Vec3 orientation)

        Parameters:
            orientation: SimTK::Vec3 const &

        """
        return _opensim.ContactGeometry_setOrientation(self, orientation)


    def getBody(self):
        """
        getBody(ContactGeometry self) -> Body

        Parameters:
            self: OpenSim::ContactGeometry *

        """
        return _opensim.ContactGeometry_getBody(self)


    def setBody(self, body):
        """
        setBody(ContactGeometry self, Body body)

        Parameters:
            body: OpenSim::Body &

        """
        return _opensim.ContactGeometry_setBody(self, body)


    def getBodyName(self):
        """
        getBodyName(ContactGeometry self) -> std::string const &

        Parameters:
            self: OpenSim::ContactGeometry *

        """
        return _opensim.ContactGeometry_getBodyName(self)


    def setBodyName(self, name):
        """
        setBodyName(ContactGeometry self, std::string const & name)

        Parameters:
            name: std::string const &

        """
        return _opensim.ContactGeometry_setBodyName(self, name)


    def getDisplayPreference(self):
        """
        getDisplayPreference(ContactGeometry self) -> int const

        Parameters:
            self: OpenSim::ContactGeometry *

        """
        return _opensim.ContactGeometry_getDisplayPreference(self)


    def setDisplayPreference(self, dispPref):
        """
        setDisplayPreference(ContactGeometry self, int const dispPref)

        Parameters:
            dispPref: int const

        """
        return _opensim.ContactGeometry_setDisplayPreference(self, dispPref)


    def createSimTKContactGeometry(self):
        """
        createSimTKContactGeometry(ContactGeometry self) -> SimTK::ContactGeometry

        Parameters:
            self: OpenSim::ContactGeometry *

        """
        return _opensim.ContactGeometry_createSimTKContactGeometry(self)


    def getTransform(self):
        """
        getTransform(ContactGeometry self) -> Transform

        Parameters:
            self: OpenSim::ContactGeometry *

        """
        return _opensim.ContactGeometry_getTransform(self)


    def scale(self, aScaleSet):
        """
        scale(ContactGeometry self, ScaleSet aScaleSet)

        Parameters:
            aScaleSet: OpenSim::ScaleSet const &

        """
        return _opensim.ContactGeometry_scale(self, aScaleSet)


    def getDisplayer(self):
        """
        getDisplayer(ContactGeometry self) -> VisibleObject

        Parameters:
            self: OpenSim::ContactGeometry const *

        """
        return _opensim.ContactGeometry_getDisplayer(self)


    def updDisplayer(self):
        """
        updDisplayer(ContactGeometry self) -> VisibleObject

        Parameters:
            self: OpenSim::ContactGeometry *

        """
        return _opensim.ContactGeometry_updDisplayer(self)


    def updateGeometry(self):
        """
        updateGeometry(ContactGeometry self)

        Parameters:
            self: OpenSim::ContactGeometry *

        """
        return _opensim.ContactGeometry_updateGeometry(self)

    __swig_destroy__ = _opensim.delete_ContactGeometry
    __del__ = lambda self: None
ContactGeometry_swigregister = _opensim.ContactGeometry_swigregister
ContactGeometry_swigregister(ContactGeometry)

def ContactGeometry_safeDownCast(obj):
    """
    ContactGeometry_safeDownCast(OpenSimObject obj) -> ContactGeometry

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ContactGeometry_safeDownCast(obj)

def ContactGeometry_getClassName():
    """ContactGeometry_getClassName() -> std::string const &"""
    return _opensim.ContactGeometry_getClassName()

class SetContactGeometry(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::ContactGeometry)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetContactGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetContactGeometry, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetContactGeometry

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetContactGeometry_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetContactGeometry self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetContactGeometry_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetContactGeometry_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetContactGeometry self) -> SetContactGeometry

        Parameters:
            self: OpenSim::Set< OpenSim::ContactGeometry > const *

        """
        return _opensim.SetContactGeometry_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetContactGeometry self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::ContactGeometry > const *

        """
        return _opensim.SetContactGeometry_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetContactGeometry
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::ContactGeometry)> self) -> SetContactGeometry
        __init__(OpenSim::Set<(OpenSim::ContactGeometry)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetContactGeometry

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::ContactGeometry)> self, std::string const & aFileName) -> SetContactGeometry

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::ContactGeometry)> self, SetContactGeometry aSet) -> SetContactGeometry

        Parameters:
            aSet: OpenSim::Set< OpenSim::ContactGeometry > const &

        """
        this = _opensim.new_SetContactGeometry(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetContactGeometry self)

        Parameters:
            self: OpenSim::Set< OpenSim::ContactGeometry > *

        """
        return _opensim.SetContactGeometry_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetContactGeometry self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetContactGeometry_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetContactGeometry self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetContactGeometry_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetContactGeometry self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::ContactGeometry > const *

        """
        return _opensim.SetContactGeometry_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetContactGeometry self, ContactGeometry aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::ContactGeometry const *
            aStartIndex: int

        getIndex(SetContactGeometry self, ContactGeometry aObject) -> int

        Parameters:
            aObject: OpenSim::ContactGeometry const *

        getIndex(SetContactGeometry self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetContactGeometry self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetContactGeometry_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetContactGeometry self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetContactGeometry_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetContactGeometry self, ContactGeometry aObject) -> bool

        Parameters:
            aObject: OpenSim::ContactGeometry *

        """
        return _opensim.SetContactGeometry_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetContactGeometry self, ContactGeometry aObject) -> bool

        Parameters:
            aObject: OpenSim::ContactGeometry const &

        """
        return _opensim.SetContactGeometry_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetContactGeometry self, int aIndex, ContactGeometry aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::ContactGeometry *

        """
        return _opensim.SetContactGeometry_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetContactGeometry self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetContactGeometry self, ContactGeometry aObject) -> bool

        Parameters:
            aObject: OpenSim::ContactGeometry const *

        """
        return _opensim.SetContactGeometry_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetContactGeometry self)

        Parameters:
            self: OpenSim::Set< OpenSim::ContactGeometry > *

        """
        return _opensim.SetContactGeometry_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetContactGeometry self, int aIndex, ContactGeometry aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::ContactGeometry *
            preserveGroups: bool

        set(SetContactGeometry self, int aIndex, ContactGeometry aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::ContactGeometry *

        """
        return _opensim.SetContactGeometry_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetContactGeometry self, int aIndex) -> ContactGeometry

        Parameters:
            aIndex: int

        get(SetContactGeometry self, std::string const & aName) -> ContactGeometry

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetContactGeometry_get(self, *args)


    def contains(self, aName):
        """
        contains(SetContactGeometry self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetContactGeometry_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetContactGeometry self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetContactGeometry_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetContactGeometry self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::ContactGeometry > const *

        """
        return _opensim.SetContactGeometry_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetContactGeometry self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetContactGeometry_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetContactGeometry self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetContactGeometry_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetContactGeometry self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetContactGeometry_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetContactGeometry self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetContactGeometry_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetContactGeometry self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetContactGeometry_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetContactGeometry self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetContactGeometry self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetContactGeometry_getGroup(self, *args)

SetContactGeometry_swigregister = _opensim.SetContactGeometry_swigregister
SetContactGeometry_swigregister(SetContactGeometry)

def SetContactGeometry_safeDownCast(obj):
    """
    SetContactGeometry_safeDownCast(OpenSimObject obj) -> SetContactGeometry

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetContactGeometry_safeDownCast(obj)

def SetContactGeometry_getClassName():
    """SetContactGeometry_getClassName() -> std::string const &"""
    return _opensim.SetContactGeometry_getClassName()

class ModelComponentSetContactGeometry(SetContactGeometry):
    """Proxy of C++ OpenSim::ModelComponentSet<(OpenSim::ContactGeometry)> class"""
    __swig_setmethods__ = {}
    for _s in [SetContactGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponentSetContactGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [SetContactGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponentSetContactGeometry, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelComponentSetContactGeometry

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ModelComponentSetContactGeometry_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ModelComponentSetContactGeometry self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ModelComponentSetContactGeometry_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ModelComponentSetContactGeometry_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ModelComponentSetContactGeometry self) -> ModelComponentSetContactGeometry

        Parameters:
            self: OpenSim::ModelComponentSet< OpenSim::ContactGeometry > const *

        """
        return _opensim.ModelComponentSetContactGeometry_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponentSetContactGeometry self) -> std::string const &

        Parameters:
            self: OpenSim::ModelComponentSet< OpenSim::ContactGeometry > const *

        """
        return _opensim.ModelComponentSetContactGeometry_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ModelComponentSet<(OpenSim::ContactGeometry)> self) -> ModelComponentSetContactGeometry
        __init__(OpenSim::ModelComponentSet<(OpenSim::ContactGeometry)> self, Model model) -> ModelComponentSetContactGeometry

        Parameters:
            model: OpenSim::Model &

        __init__(OpenSim::ModelComponentSet<(OpenSim::ContactGeometry)> self, Model model, std::string const & fileName, bool aUpdateFromXMLNode=True) -> ModelComponentSetContactGeometry

        Parameters:
            model: OpenSim::Model &
            fileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::ModelComponentSet<(OpenSim::ContactGeometry)> self, Model model, std::string const & fileName) -> ModelComponentSetContactGeometry

        Parameters:
            model: OpenSim::Model &
            fileName: std::string const &

        __init__(OpenSim::ModelComponentSet<(OpenSim::ContactGeometry)> self, ModelComponentSetContactGeometry source) -> ModelComponentSetContactGeometry

        Parameters:
            source: OpenSim::ModelComponentSet< OpenSim::ContactGeometry > const &

        """
        this = _opensim.new_ModelComponentSetContactGeometry(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def insert(self, aIndex, aObject):
        """
        insert(ModelComponentSetContactGeometry self, int aIndex, ContactGeometry aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::ContactGeometry *

        """
        return _opensim.ModelComponentSetContactGeometry_insert(self, aIndex, aObject)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(ModelComponentSetContactGeometry self, int aIndex, ContactGeometry aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::ContactGeometry *
            preserveGroups: bool

        set(ModelComponentSetContactGeometry self, int aIndex, ContactGeometry aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::ContactGeometry *

        """
        return _opensim.ModelComponentSetContactGeometry_set(self, aIndex, aObject, preserveGroups)


    def invokeConnectToModel(self, model):
        """
        invokeConnectToModel(ModelComponentSetContactGeometry self, Model model)

        Parameters:
            model: OpenSim::Model &

        """
        return _opensim.ModelComponentSetContactGeometry_invokeConnectToModel(self, model)


    def invokeAddToSystem(self, system):
        """
        invokeAddToSystem(ModelComponentSetContactGeometry self, SimTK::MultibodySystem & system)

        Parameters:
            system: SimTK::MultibodySystem &

        """
        return _opensim.ModelComponentSetContactGeometry_invokeAddToSystem(self, system)


    def invokeInitStateFromProperties(self, state):
        """
        invokeInitStateFromProperties(ModelComponentSetContactGeometry self, State state)

        Parameters:
            state: SimTK::State &

        """
        return _opensim.ModelComponentSetContactGeometry_invokeInitStateFromProperties(self, state)


    def invokeSetPropertiesFromState(self, state):
        """
        invokeSetPropertiesFromState(ModelComponentSetContactGeometry self, State state)

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.ModelComponentSetContactGeometry_invokeSetPropertiesFromState(self, state)


    def invokeGenerateDecorations(self, fixed, hints, state, appendToThis):
        """
        invokeGenerateDecorations(ModelComponentSetContactGeometry self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters:
            fixed: bool
            hints: OpenSim::ModelDisplayHints const &
            state: SimTK::State const &
            appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _opensim.ModelComponentSetContactGeometry_invokeGenerateDecorations(self, fixed, hints, state, appendToThis)

    __swig_destroy__ = _opensim.delete_ModelComponentSetContactGeometry
    __del__ = lambda self: None
ModelComponentSetContactGeometry_swigregister = _opensim.ModelComponentSetContactGeometry_swigregister
ModelComponentSetContactGeometry_swigregister(ModelComponentSetContactGeometry)

def ModelComponentSetContactGeometry_safeDownCast(obj):
    """
    ModelComponentSetContactGeometry_safeDownCast(OpenSimObject obj) -> ModelComponentSetContactGeometry

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ModelComponentSetContactGeometry_safeDownCast(obj)

def ModelComponentSetContactGeometry_getClassName():
    """ModelComponentSetContactGeometry_getClassName() -> std::string const &"""
    return _opensim.ModelComponentSetContactGeometry_getClassName()

class ContactGeometrySet(ModelComponentSetContactGeometry):
    """Proxy of C++ OpenSim::ContactGeometrySet class"""
    __swig_setmethods__ = {}
    for _s in [ModelComponentSetContactGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactGeometrySet, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponentSetContactGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContactGeometrySet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ContactGeometrySet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ContactGeometrySet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ContactGeometrySet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ContactGeometrySet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ContactGeometrySet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ContactGeometrySet self) -> ContactGeometrySet

        Parameters:
            self: OpenSim::ContactGeometrySet const *

        """
        return _opensim.ContactGeometrySet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ContactGeometrySet self) -> std::string const &

        Parameters:
            self: OpenSim::ContactGeometrySet const *

        """
        return _opensim.ContactGeometrySet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ContactGeometrySet self) -> ContactGeometrySet
        __init__(OpenSim::ContactGeometrySet self, Model model) -> ContactGeometrySet

        Parameters:
            model: OpenSim::Model &

        __init__(OpenSim::ContactGeometrySet self, Model model, std::string const & aFileName, bool aUpdateFromXMLNode) -> ContactGeometrySet

        Parameters:
            model: OpenSim::Model &
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::ContactGeometrySet self, ContactGeometrySet aContactGeometrySet) -> ContactGeometrySet

        Parameters:
            aContactGeometrySet: OpenSim::ContactGeometrySet const &

        """
        this = _opensim.new_ContactGeometrySet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_ContactGeometrySet
    __del__ = lambda self: None

    def scale(self, aScaleSet):
        """
        scale(ContactGeometrySet self, ScaleSet aScaleSet)

        Parameters:
            aScaleSet: OpenSim::ScaleSet const &

        """
        return _opensim.ContactGeometrySet_scale(self, aScaleSet)

    def adoptAndAppend(self, aContactGeometry):
        aContactGeometry._markAdopted()
        return super(ContactGeometrySet, self).adoptAndAppend(aContactGeometry)

ContactGeometrySet_swigregister = _opensim.ContactGeometrySet_swigregister
ContactGeometrySet_swigregister(ContactGeometrySet)

def ContactGeometrySet_safeDownCast(obj):
    """
    ContactGeometrySet_safeDownCast(OpenSimObject obj) -> ContactGeometrySet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ContactGeometrySet_safeDownCast(obj)

def ContactGeometrySet_getClassName():
    """ContactGeometrySet_getClassName() -> std::string const &"""
    return _opensim.ContactGeometrySet_getClassName()

class ContactHalfSpace(ContactGeometry):
    """Proxy of C++ OpenSim::ContactHalfSpace class"""
    __swig_setmethods__ = {}
    for _s in [ContactGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactHalfSpace, name, value)
    __swig_getmethods__ = {}
    for _s in [ContactGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContactHalfSpace, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ContactHalfSpace

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ContactHalfSpace_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ContactHalfSpace self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ContactHalfSpace_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ContactHalfSpace_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ContactHalfSpace self) -> ContactHalfSpace

        Parameters:
            self: OpenSim::ContactHalfSpace const *

        """
        return _opensim.ContactHalfSpace_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ContactHalfSpace self) -> std::string const &

        Parameters:
            self: OpenSim::ContactHalfSpace const *

        """
        return _opensim.ContactHalfSpace_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ContactHalfSpace self) -> ContactHalfSpace
        __init__(OpenSim::ContactHalfSpace self, Vec3 location, Vec3 orientation, Body body) -> ContactHalfSpace

        Parameters:
            location: SimTK::Vec3 const &
            orientation: SimTK::Vec3 const &
            body: OpenSim::Body &

        __init__(OpenSim::ContactHalfSpace self, Vec3 location, Vec3 orientation, Body body, std::string const & name) -> ContactHalfSpace

        Parameters:
            location: SimTK::Vec3 const &
            orientation: SimTK::Vec3 const &
            body: OpenSim::Body &
            name: std::string const &

        __init__(OpenSim::ContactHalfSpace self, ContactHalfSpace geom) -> ContactHalfSpace

        Parameters:
            geom: OpenSim::ContactHalfSpace const &

        """
        this = _opensim.new_ContactHalfSpace(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def createSimTKContactGeometry(self):
        """
        createSimTKContactGeometry(ContactHalfSpace self) -> SimTK::ContactGeometry

        Parameters:
            self: OpenSim::ContactHalfSpace *

        """
        return _opensim.ContactHalfSpace_createSimTKContactGeometry(self)

    __swig_destroy__ = _opensim.delete_ContactHalfSpace
    __del__ = lambda self: None
ContactHalfSpace_swigregister = _opensim.ContactHalfSpace_swigregister
ContactHalfSpace_swigregister(ContactHalfSpace)

def ContactHalfSpace_safeDownCast(obj):
    """
    ContactHalfSpace_safeDownCast(OpenSimObject obj) -> ContactHalfSpace

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ContactHalfSpace_safeDownCast(obj)

def ContactHalfSpace_getClassName():
    """ContactHalfSpace_getClassName() -> std::string const &"""
    return _opensim.ContactHalfSpace_getClassName()

class ContactMesh(ContactGeometry):
    """Proxy of C++ OpenSim::ContactMesh class"""
    __swig_setmethods__ = {}
    for _s in [ContactGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [ContactGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContactMesh, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ContactMesh

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ContactMesh_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ContactMesh self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ContactMesh_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ContactMesh_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ContactMesh self) -> ContactMesh

        Parameters:
            self: OpenSim::ContactMesh const *

        """
        return _opensim.ContactMesh_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ContactMesh self) -> std::string const &

        Parameters:
            self: OpenSim::ContactMesh const *

        """
        return _opensim.ContactMesh_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ContactMesh self) -> ContactMesh
        __init__(OpenSim::ContactMesh self, std::string const & filename, Vec3 location, Vec3 orientation, Body body) -> ContactMesh

        Parameters:
            filename: std::string const &
            location: SimTK::Vec3 const &
            orientation: SimTK::Vec3 const &
            body: OpenSim::Body &

        __init__(OpenSim::ContactMesh self, std::string const & filename, Vec3 location, Vec3 orientation, Body body, std::string const & name) -> ContactMesh

        Parameters:
            filename: std::string const &
            location: SimTK::Vec3 const &
            orientation: SimTK::Vec3 const &
            body: OpenSim::Body &
            name: std::string const &

        __init__(OpenSim::ContactMesh self, ContactMesh geom) -> ContactMesh

        Parameters:
            geom: OpenSim::ContactMesh const &

        """
        this = _opensim.new_ContactMesh(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def copyData(self, source):
        """
        copyData(ContactMesh self, ContactMesh source)

        Parameters:
            source: OpenSim::ContactMesh const &

        """
        return _opensim.ContactMesh_copyData(self, source)


    def createSimTKContactGeometry(self):
        """
        createSimTKContactGeometry(ContactMesh self) -> SimTK::ContactGeometry

        Parameters:
            self: OpenSim::ContactMesh *

        """
        return _opensim.ContactMesh_createSimTKContactGeometry(self)


    def getFilename(self):
        """
        getFilename(ContactMesh self) -> std::string const &

        Parameters:
            self: OpenSim::ContactMesh const *

        """
        return _opensim.ContactMesh_getFilename(self)


    def setFilename(self, filename):
        """
        setFilename(ContactMesh self, std::string const & filename)

        Parameters:
            filename: std::string const &

        """
        return _opensim.ContactMesh_setFilename(self, filename)

    __swig_destroy__ = _opensim.delete_ContactMesh
    __del__ = lambda self: None
ContactMesh_swigregister = _opensim.ContactMesh_swigregister
ContactMesh_swigregister(ContactMesh)

def ContactMesh_safeDownCast(obj):
    """
    ContactMesh_safeDownCast(OpenSimObject obj) -> ContactMesh

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ContactMesh_safeDownCast(obj)

def ContactMesh_getClassName():
    """ContactMesh_getClassName() -> std::string const &"""
    return _opensim.ContactMesh_getClassName()

class ContactSphere(ContactGeometry):
    """Proxy of C++ OpenSim::ContactSphere class"""
    __swig_setmethods__ = {}
    for _s in [ContactGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactSphere, name, value)
    __swig_getmethods__ = {}
    for _s in [ContactGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContactSphere, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ContactSphere

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ContactSphere_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ContactSphere self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ContactSphere_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ContactSphere_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ContactSphere self) -> ContactSphere

        Parameters:
            self: OpenSim::ContactSphere const *

        """
        return _opensim.ContactSphere_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ContactSphere self) -> std::string const &

        Parameters:
            self: OpenSim::ContactSphere const *

        """
        return _opensim.ContactSphere_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ContactSphere self) -> ContactSphere
        __init__(OpenSim::ContactSphere self, double radius, Vec3 location, Body body) -> ContactSphere

        Parameters:
            radius: double
            location: SimTK::Vec3 const &
            body: OpenSim::Body &

        __init__(OpenSim::ContactSphere self, double radius, Vec3 location, Body body, std::string const & name) -> ContactSphere

        Parameters:
            radius: double
            location: SimTK::Vec3 const &
            body: OpenSim::Body &
            name: std::string const &

        __init__(OpenSim::ContactSphere self, ContactSphere geom) -> ContactSphere

        Parameters:
            geom: OpenSim::ContactSphere const &

        """
        this = _opensim.new_ContactSphere(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def copyData(self, source):
        """
        copyData(ContactSphere self, ContactSphere source)

        Parameters:
            source: OpenSim::ContactSphere const &

        """
        return _opensim.ContactSphere_copyData(self, source)


    def createSimTKContactGeometry(self):
        """
        createSimTKContactGeometry(ContactSphere self) -> SimTK::ContactGeometry

        Parameters:
            self: OpenSim::ContactSphere *

        """
        return _opensim.ContactSphere_createSimTKContactGeometry(self)


    def getRadius(self):
        """
        getRadius(ContactSphere self) -> double

        Parameters:
            self: OpenSim::ContactSphere const *

        """
        return _opensim.ContactSphere_getRadius(self)


    def setRadius(self, radius):
        """
        setRadius(ContactSphere self, double radius)

        Parameters:
            radius: double

        """
        return _opensim.ContactSphere_setRadius(self, radius)

    __swig_destroy__ = _opensim.delete_ContactSphere
    __del__ = lambda self: None
ContactSphere_swigregister = _opensim.ContactSphere_swigregister
ContactSphere_swigregister(ContactSphere)

def ContactSphere_safeDownCast(obj):
    """
    ContactSphere_safeDownCast(OpenSimObject obj) -> ContactSphere

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ContactSphere_safeDownCast(obj)

def ContactSphere_getClassName():
    """ContactSphere_getClassName() -> std::string const &"""
    return _opensim.ContactSphere_getClassName()

class ElasticFoundationForce(Force):
    """Proxy of C++ OpenSim::ElasticFoundationForce class"""
    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElasticFoundationForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ElasticFoundationForce, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ElasticFoundationForce

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ElasticFoundationForce_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ElasticFoundationForce self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ElasticFoundationForce_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ElasticFoundationForce_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ElasticFoundationForce self) -> ElasticFoundationForce

        Parameters:
            self: OpenSim::ElasticFoundationForce const *

        """
        return _opensim.ElasticFoundationForce_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ElasticFoundationForce self) -> std::string const &

        Parameters:
            self: OpenSim::ElasticFoundationForce const *

        """
        return _opensim.ElasticFoundationForce_getConcreteClassName(self)


    def copyProperty_contact_parameters(self, source):
        """
        copyProperty_contact_parameters(ElasticFoundationForce self, ElasticFoundationForce source)

        Parameters:
            source: OpenSim::ElasticFoundationForce::Self const &

        """
        return _opensim.ElasticFoundationForce_copyProperty_contact_parameters(self, source)


    def append_contact_parameters(self, value):
        """
        append_contact_parameters(ElasticFoundationForce self, OpenSim::ElasticFoundationForce::ContactParametersSet const & value) -> int

        Parameters:
            value: OpenSim::ElasticFoundationForce::ContactParametersSet const &

        """
        return _opensim.ElasticFoundationForce_append_contact_parameters(self, value)


    def constructProperty_contact_parameters(self, initValue):
        """
        constructProperty_contact_parameters(ElasticFoundationForce self, OpenSim::ElasticFoundationForce::ContactParametersSet const & initValue)

        Parameters:
            initValue: OpenSim::ElasticFoundationForce::ContactParametersSet const &

        """
        return _opensim.ElasticFoundationForce_constructProperty_contact_parameters(self, initValue)


    def get_contact_parameters(self, *args):
        """
        get_contact_parameters(ElasticFoundationForce self, int i) -> OpenSim::ElasticFoundationForce::ContactParametersSet const

        Parameters:
            i: int

        get_contact_parameters(ElasticFoundationForce self) -> OpenSim::ElasticFoundationForce::ContactParametersSet const &

        Parameters:
            self: OpenSim::ElasticFoundationForce const *

        """
        return _opensim.ElasticFoundationForce_get_contact_parameters(self, *args)


    def upd_contact_parameters(self, *args):
        """
        upd_contact_parameters(ElasticFoundationForce self, int i) -> OpenSim::ElasticFoundationForce::ContactParametersSet

        Parameters:
            i: int

        upd_contact_parameters(ElasticFoundationForce self) -> OpenSim::ElasticFoundationForce::ContactParametersSet &

        Parameters:
            self: OpenSim::ElasticFoundationForce *

        """
        return _opensim.ElasticFoundationForce_upd_contact_parameters(self, *args)


    def set_contact_parameters(self, *args):
        """
        set_contact_parameters(ElasticFoundationForce self, int i, OpenSim::ElasticFoundationForce::ContactParametersSet const & value)

        Parameters:
            i: int
            value: OpenSim::ElasticFoundationForce::ContactParametersSet const &

        set_contact_parameters(ElasticFoundationForce self, OpenSim::ElasticFoundationForce::ContactParametersSet const & value)

        Parameters:
            value: OpenSim::ElasticFoundationForce::ContactParametersSet const &

        """
        return _opensim.ElasticFoundationForce_set_contact_parameters(self, *args)


    def copyProperty_transition_velocity(self, source):
        """
        copyProperty_transition_velocity(ElasticFoundationForce self, ElasticFoundationForce source)

        Parameters:
            source: OpenSim::ElasticFoundationForce::Self const &

        """
        return _opensim.ElasticFoundationForce_copyProperty_transition_velocity(self, source)


    def append_transition_velocity(self, value):
        """
        append_transition_velocity(ElasticFoundationForce self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ElasticFoundationForce_append_transition_velocity(self, value)


    def constructProperty_transition_velocity(self, initValue):
        """
        constructProperty_transition_velocity(ElasticFoundationForce self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ElasticFoundationForce_constructProperty_transition_velocity(self, initValue)


    def get_transition_velocity(self, *args):
        """
        get_transition_velocity(ElasticFoundationForce self, int i) -> double const

        Parameters:
            i: int

        get_transition_velocity(ElasticFoundationForce self) -> double const &

        Parameters:
            self: OpenSim::ElasticFoundationForce const *

        """
        return _opensim.ElasticFoundationForce_get_transition_velocity(self, *args)


    def upd_transition_velocity(self, *args):
        """
        upd_transition_velocity(ElasticFoundationForce self, int i) -> double

        Parameters:
            i: int

        upd_transition_velocity(ElasticFoundationForce self) -> double &

        Parameters:
            self: OpenSim::ElasticFoundationForce *

        """
        return _opensim.ElasticFoundationForce_upd_transition_velocity(self, *args)


    def set_transition_velocity(self, *args):
        """
        set_transition_velocity(ElasticFoundationForce self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_transition_velocity(ElasticFoundationForce self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ElasticFoundationForce_set_transition_velocity(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ElasticFoundationForce self) -> ElasticFoundationForce
        __init__(OpenSim::ElasticFoundationForce self, OpenSim::ElasticFoundationForce::ContactParameters * params) -> ElasticFoundationForce

        Parameters:
            params: OpenSim::ElasticFoundationForce::ContactParameters *

        """
        this = _opensim.new_ElasticFoundationForce(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def addToSystem(self, system):
        """
        addToSystem(ElasticFoundationForce self, SimTK::MultibodySystem & system)

        Parameters:
            system: SimTK::MultibodySystem &

        """
        return _opensim.ElasticFoundationForce_addToSystem(self, system)


    def updContactParametersSet(self):
        """
        updContactParametersSet(ElasticFoundationForce self) -> OpenSim::ElasticFoundationForce::ContactParametersSet &

        Parameters:
            self: OpenSim::ElasticFoundationForce *

        """
        return _opensim.ElasticFoundationForce_updContactParametersSet(self)


    def getContactParametersSet(self):
        """
        getContactParametersSet(ElasticFoundationForce self) -> OpenSim::ElasticFoundationForce::ContactParametersSet const &

        Parameters:
            self: OpenSim::ElasticFoundationForce *

        """
        return _opensim.ElasticFoundationForce_getContactParametersSet(self)


    def addContactParameters(self, params):
        """
        addContactParameters(ElasticFoundationForce self, OpenSim::ElasticFoundationForce::ContactParameters * params)

        Parameters:
            params: OpenSim::ElasticFoundationForce::ContactParameters *

        """
        return _opensim.ElasticFoundationForce_addContactParameters(self, params)


    def getTransitionVelocity(self):
        """
        getTransitionVelocity(ElasticFoundationForce self) -> double

        Parameters:
            self: OpenSim::ElasticFoundationForce const *

        """
        return _opensim.ElasticFoundationForce_getTransitionVelocity(self)


    def setTransitionVelocity(self, velocity):
        """
        setTransitionVelocity(ElasticFoundationForce self, double velocity)

        Parameters:
            velocity: double

        """
        return _opensim.ElasticFoundationForce_setTransitionVelocity(self, velocity)


    def getStiffness(self):
        """
        getStiffness(ElasticFoundationForce self) -> double

        Parameters:
            self: OpenSim::ElasticFoundationForce *

        """
        return _opensim.ElasticFoundationForce_getStiffness(self)


    def setStiffness(self, stiffness):
        """
        setStiffness(ElasticFoundationForce self, double stiffness)

        Parameters:
            stiffness: double

        """
        return _opensim.ElasticFoundationForce_setStiffness(self, stiffness)


    def getDissipation(self):
        """
        getDissipation(ElasticFoundationForce self) -> double

        Parameters:
            self: OpenSim::ElasticFoundationForce *

        """
        return _opensim.ElasticFoundationForce_getDissipation(self)


    def setDissipation(self, dissipation):
        """
        setDissipation(ElasticFoundationForce self, double dissipation)

        Parameters:
            dissipation: double

        """
        return _opensim.ElasticFoundationForce_setDissipation(self, dissipation)


    def getStaticFriction(self):
        """
        getStaticFriction(ElasticFoundationForce self) -> double

        Parameters:
            self: OpenSim::ElasticFoundationForce *

        """
        return _opensim.ElasticFoundationForce_getStaticFriction(self)


    def setStaticFriction(self, friction):
        """
        setStaticFriction(ElasticFoundationForce self, double friction)

        Parameters:
            friction: double

        """
        return _opensim.ElasticFoundationForce_setStaticFriction(self, friction)


    def getDynamicFriction(self):
        """
        getDynamicFriction(ElasticFoundationForce self) -> double

        Parameters:
            self: OpenSim::ElasticFoundationForce *

        """
        return _opensim.ElasticFoundationForce_getDynamicFriction(self)


    def setDynamicFriction(self, friction):
        """
        setDynamicFriction(ElasticFoundationForce self, double friction)

        Parameters:
            friction: double

        """
        return _opensim.ElasticFoundationForce_setDynamicFriction(self, friction)


    def getViscousFriction(self):
        """
        getViscousFriction(ElasticFoundationForce self) -> double

        Parameters:
            self: OpenSim::ElasticFoundationForce *

        """
        return _opensim.ElasticFoundationForce_getViscousFriction(self)


    def setViscousFriction(self, friction):
        """
        setViscousFriction(ElasticFoundationForce self, double friction)

        Parameters:
            friction: double

        """
        return _opensim.ElasticFoundationForce_setViscousFriction(self, friction)


    def addGeometry(self, name):
        """
        addGeometry(ElasticFoundationForce self, std::string const & name)

        Parameters:
            name: std::string const &

        """
        return _opensim.ElasticFoundationForce_addGeometry(self, name)


    def getRecordLabels(self):
        """
        getRecordLabels(ElasticFoundationForce self) -> ArrayStr

        Parameters:
            self: OpenSim::ElasticFoundationForce const *

        """
        return _opensim.ElasticFoundationForce_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(ElasticFoundationForce self, State state) -> ArrayDouble

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.ElasticFoundationForce_getRecordValues(self, state)

    __swig_destroy__ = _opensim.delete_ElasticFoundationForce
    __del__ = lambda self: None
ElasticFoundationForce_swigregister = _opensim.ElasticFoundationForce_swigregister
ElasticFoundationForce_swigregister(ElasticFoundationForce)

def ElasticFoundationForce_safeDownCast(obj):
    """
    ElasticFoundationForce_safeDownCast(OpenSimObject obj) -> ElasticFoundationForce

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ElasticFoundationForce_safeDownCast(obj)

def ElasticFoundationForce_getClassName():
    """ElasticFoundationForce_getClassName() -> std::string const &"""
    return _opensim.ElasticFoundationForce_getClassName()

class HuntCrossleyForce(Force):
    """Proxy of C++ OpenSim::HuntCrossleyForce class"""
    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HuntCrossleyForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HuntCrossleyForce, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> HuntCrossleyForce

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.HuntCrossleyForce_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(HuntCrossleyForce self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.HuntCrossleyForce_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.HuntCrossleyForce_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(HuntCrossleyForce self) -> HuntCrossleyForce

        Parameters:
            self: OpenSim::HuntCrossleyForce const *

        """
        return _opensim.HuntCrossleyForce_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(HuntCrossleyForce self) -> std::string const &

        Parameters:
            self: OpenSim::HuntCrossleyForce const *

        """
        return _opensim.HuntCrossleyForce_getConcreteClassName(self)


    def copyProperty_contact_parameters(self, source):
        """
        copyProperty_contact_parameters(HuntCrossleyForce self, HuntCrossleyForce source)

        Parameters:
            source: OpenSim::HuntCrossleyForce::Self const &

        """
        return _opensim.HuntCrossleyForce_copyProperty_contact_parameters(self, source)


    def append_contact_parameters(self, value):
        """
        append_contact_parameters(HuntCrossleyForce self, OpenSim::HuntCrossleyForce::ContactParametersSet const & value) -> int

        Parameters:
            value: OpenSim::HuntCrossleyForce::ContactParametersSet const &

        """
        return _opensim.HuntCrossleyForce_append_contact_parameters(self, value)


    def constructProperty_contact_parameters(self, initValue):
        """
        constructProperty_contact_parameters(HuntCrossleyForce self, OpenSim::HuntCrossleyForce::ContactParametersSet const & initValue)

        Parameters:
            initValue: OpenSim::HuntCrossleyForce::ContactParametersSet const &

        """
        return _opensim.HuntCrossleyForce_constructProperty_contact_parameters(self, initValue)


    def get_contact_parameters(self, *args):
        """
        get_contact_parameters(HuntCrossleyForce self, int i) -> OpenSim::HuntCrossleyForce::ContactParametersSet const

        Parameters:
            i: int

        get_contact_parameters(HuntCrossleyForce self) -> OpenSim::HuntCrossleyForce::ContactParametersSet const &

        Parameters:
            self: OpenSim::HuntCrossleyForce const *

        """
        return _opensim.HuntCrossleyForce_get_contact_parameters(self, *args)


    def upd_contact_parameters(self, *args):
        """
        upd_contact_parameters(HuntCrossleyForce self, int i) -> OpenSim::HuntCrossleyForce::ContactParametersSet

        Parameters:
            i: int

        upd_contact_parameters(HuntCrossleyForce self) -> OpenSim::HuntCrossleyForce::ContactParametersSet &

        Parameters:
            self: OpenSim::HuntCrossleyForce *

        """
        return _opensim.HuntCrossleyForce_upd_contact_parameters(self, *args)


    def set_contact_parameters(self, *args):
        """
        set_contact_parameters(HuntCrossleyForce self, int i, OpenSim::HuntCrossleyForce::ContactParametersSet const & value)

        Parameters:
            i: int
            value: OpenSim::HuntCrossleyForce::ContactParametersSet const &

        set_contact_parameters(HuntCrossleyForce self, OpenSim::HuntCrossleyForce::ContactParametersSet const & value)

        Parameters:
            value: OpenSim::HuntCrossleyForce::ContactParametersSet const &

        """
        return _opensim.HuntCrossleyForce_set_contact_parameters(self, *args)


    def copyProperty_transition_velocity(self, source):
        """
        copyProperty_transition_velocity(HuntCrossleyForce self, HuntCrossleyForce source)

        Parameters:
            source: OpenSim::HuntCrossleyForce::Self const &

        """
        return _opensim.HuntCrossleyForce_copyProperty_transition_velocity(self, source)


    def append_transition_velocity(self, value):
        """
        append_transition_velocity(HuntCrossleyForce self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.HuntCrossleyForce_append_transition_velocity(self, value)


    def constructProperty_transition_velocity(self, initValue):
        """
        constructProperty_transition_velocity(HuntCrossleyForce self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.HuntCrossleyForce_constructProperty_transition_velocity(self, initValue)


    def get_transition_velocity(self, *args):
        """
        get_transition_velocity(HuntCrossleyForce self, int i) -> double const

        Parameters:
            i: int

        get_transition_velocity(HuntCrossleyForce self) -> double const &

        Parameters:
            self: OpenSim::HuntCrossleyForce const *

        """
        return _opensim.HuntCrossleyForce_get_transition_velocity(self, *args)


    def upd_transition_velocity(self, *args):
        """
        upd_transition_velocity(HuntCrossleyForce self, int i) -> double

        Parameters:
            i: int

        upd_transition_velocity(HuntCrossleyForce self) -> double &

        Parameters:
            self: OpenSim::HuntCrossleyForce *

        """
        return _opensim.HuntCrossleyForce_upd_transition_velocity(self, *args)


    def set_transition_velocity(self, *args):
        """
        set_transition_velocity(HuntCrossleyForce self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_transition_velocity(HuntCrossleyForce self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.HuntCrossleyForce_set_transition_velocity(self, *args)


    def __init__(self):
        """__init__(OpenSim::HuntCrossleyForce self) -> HuntCrossleyForce"""
        this = _opensim.new_HuntCrossleyForce()
        try:
            self.this.append(this)
        except:
            self.this = this

    def updContactParametersSet(self):
        """
        updContactParametersSet(HuntCrossleyForce self) -> OpenSim::HuntCrossleyForce::ContactParametersSet &

        Parameters:
            self: OpenSim::HuntCrossleyForce *

        """
        return _opensim.HuntCrossleyForce_updContactParametersSet(self)


    def getContactParametersSet(self):
        """
        getContactParametersSet(HuntCrossleyForce self) -> OpenSim::HuntCrossleyForce::ContactParametersSet const &

        Parameters:
            self: OpenSim::HuntCrossleyForce *

        """
        return _opensim.HuntCrossleyForce_getContactParametersSet(self)


    def addContactParameters(self, params):
        """
        addContactParameters(HuntCrossleyForce self, OpenSim::HuntCrossleyForce::ContactParameters * params)

        Parameters:
            params: OpenSim::HuntCrossleyForce::ContactParameters *

        """
        return _opensim.HuntCrossleyForce_addContactParameters(self, params)


    def getTransitionVelocity(self):
        """
        getTransitionVelocity(HuntCrossleyForce self) -> double

        Parameters:
            self: OpenSim::HuntCrossleyForce const *

        """
        return _opensim.HuntCrossleyForce_getTransitionVelocity(self)


    def setTransitionVelocity(self, velocity):
        """
        setTransitionVelocity(HuntCrossleyForce self, double velocity)

        Parameters:
            velocity: double

        """
        return _opensim.HuntCrossleyForce_setTransitionVelocity(self, velocity)


    def getStiffness(self):
        """
        getStiffness(HuntCrossleyForce self) -> double

        Parameters:
            self: OpenSim::HuntCrossleyForce *

        """
        return _opensim.HuntCrossleyForce_getStiffness(self)


    def setStiffness(self, stiffness):
        """
        setStiffness(HuntCrossleyForce self, double stiffness)

        Parameters:
            stiffness: double

        """
        return _opensim.HuntCrossleyForce_setStiffness(self, stiffness)


    def getDissipation(self):
        """
        getDissipation(HuntCrossleyForce self) -> double

        Parameters:
            self: OpenSim::HuntCrossleyForce *

        """
        return _opensim.HuntCrossleyForce_getDissipation(self)


    def setDissipation(self, dissipation):
        """
        setDissipation(HuntCrossleyForce self, double dissipation)

        Parameters:
            dissipation: double

        """
        return _opensim.HuntCrossleyForce_setDissipation(self, dissipation)


    def getStaticFriction(self):
        """
        getStaticFriction(HuntCrossleyForce self) -> double

        Parameters:
            self: OpenSim::HuntCrossleyForce *

        """
        return _opensim.HuntCrossleyForce_getStaticFriction(self)


    def setStaticFriction(self, friction):
        """
        setStaticFriction(HuntCrossleyForce self, double friction)

        Parameters:
            friction: double

        """
        return _opensim.HuntCrossleyForce_setStaticFriction(self, friction)


    def getDynamicFriction(self):
        """
        getDynamicFriction(HuntCrossleyForce self) -> double

        Parameters:
            self: OpenSim::HuntCrossleyForce *

        """
        return _opensim.HuntCrossleyForce_getDynamicFriction(self)


    def setDynamicFriction(self, friction):
        """
        setDynamicFriction(HuntCrossleyForce self, double friction)

        Parameters:
            friction: double

        """
        return _opensim.HuntCrossleyForce_setDynamicFriction(self, friction)


    def getViscousFriction(self):
        """
        getViscousFriction(HuntCrossleyForce self) -> double

        Parameters:
            self: OpenSim::HuntCrossleyForce *

        """
        return _opensim.HuntCrossleyForce_getViscousFriction(self)


    def setViscousFriction(self, friction):
        """
        setViscousFriction(HuntCrossleyForce self, double friction)

        Parameters:
            friction: double

        """
        return _opensim.HuntCrossleyForce_setViscousFriction(self, friction)


    def addGeometry(self, name):
        """
        addGeometry(HuntCrossleyForce self, std::string const & name)

        Parameters:
            name: std::string const &

        """
        return _opensim.HuntCrossleyForce_addGeometry(self, name)


    def getRecordLabels(self):
        """
        getRecordLabels(HuntCrossleyForce self) -> ArrayStr

        Parameters:
            self: OpenSim::HuntCrossleyForce const *

        """
        return _opensim.HuntCrossleyForce_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(HuntCrossleyForce self, State state) -> ArrayDouble

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.HuntCrossleyForce_getRecordValues(self, state)

    __swig_destroy__ = _opensim.delete_HuntCrossleyForce
    __del__ = lambda self: None
HuntCrossleyForce_swigregister = _opensim.HuntCrossleyForce_swigregister
HuntCrossleyForce_swigregister(HuntCrossleyForce)

def HuntCrossleyForce_safeDownCast(obj):
    """
    HuntCrossleyForce_safeDownCast(OpenSimObject obj) -> HuntCrossleyForce

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.HuntCrossleyForce_safeDownCast(obj)

def HuntCrossleyForce_getClassName():
    """HuntCrossleyForce_getClassName() -> std::string const &"""
    return _opensim.HuntCrossleyForce_getClassName()

class Actuator_(Force):
    """Proxy of C++ OpenSim::Actuator_ class"""
    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Actuator_, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Actuator_, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Actuator_

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Actuator__safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Actuator_ self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Actuator__assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Actuator__getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Actuator_ self) -> Actuator_

        Parameters:
            self: OpenSim::Actuator_ const *

        """
        return _opensim.Actuator__clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Actuator_ self) -> std::string const &

        Parameters:
            self: OpenSim::Actuator_ const *

        """
        return _opensim.Actuator__getConcreteClassName(self)


    def numControls(self):
        """
        numControls(Actuator_ self) -> int

        Parameters:
            self: OpenSim::Actuator_ const *

        """
        return _opensim.Actuator__numControls(self)


    def getDefaultControls(self):
        """
        getDefaultControls(Actuator_ self) -> Vector

        Parameters:
            self: OpenSim::Actuator_ *

        """
        return _opensim.Actuator__getDefaultControls(self)


    def getControls(self, modelControls, actuatorControls):
        """
        getControls(Actuator_ self, Vector modelControls, Vector actuatorControls)

        Parameters:
            modelControls: SimTK::Vector const &
            actuatorControls: SimTK::Vector &

        """
        return _opensim.Actuator__getControls(self, modelControls, actuatorControls)


    def setControls(self, actuatorControls, modelControls):
        """
        setControls(Actuator_ self, Vector actuatorControls, Vector modelControls)

        Parameters:
            actuatorControls: SimTK::Vector const &
            modelControls: SimTK::Vector &

        """
        return _opensim.Actuator__setControls(self, actuatorControls, modelControls)


    def addInControls(self, actuatorControls, modelControls):
        """
        addInControls(Actuator_ self, Vector actuatorControls, Vector modelControls)

        Parameters:
            actuatorControls: SimTK::Vector const &
            modelControls: SimTK::Vector &

        """
        return _opensim.Actuator__addInControls(self, actuatorControls, modelControls)


    def computeActuation(self, s):
        """
        computeActuation(Actuator_ self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Actuator__computeActuation(self, s)


    def computeEquilibrium(self, s):
        """
        computeEquilibrium(Actuator_ self, State s)

        Parameters:
            s: SimTK::State &

        """
        return _opensim.Actuator__computeEquilibrium(self, s)

    __swig_destroy__ = _opensim.delete_Actuator_
    __del__ = lambda self: None
Actuator__swigregister = _opensim.Actuator__swigregister
Actuator__swigregister(Actuator_)

def Actuator__safeDownCast(obj):
    """
    Actuator__safeDownCast(OpenSimObject obj) -> Actuator_

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Actuator__safeDownCast(obj)

def Actuator__getClassName():
    """Actuator__getClassName() -> std::string const &"""
    return _opensim.Actuator__getClassName()

class Actuator(Actuator_):
    """Proxy of C++ OpenSim::Actuator class"""
    __swig_setmethods__ = {}
    for _s in [Actuator_]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Actuator, name, value)
    __swig_getmethods__ = {}
    for _s in [Actuator_]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Actuator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Actuator

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Actuator_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Actuator self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Actuator_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Actuator_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Actuator self) -> Actuator

        Parameters:
            self: OpenSim::Actuator const *

        """
        return _opensim.Actuator_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Actuator self) -> std::string const &

        Parameters:
            self: OpenSim::Actuator const *

        """
        return _opensim.Actuator_getConcreteClassName(self)


    def copyProperty_min_control(self, source):
        """
        copyProperty_min_control(Actuator self, Actuator source)

        Parameters:
            source: OpenSim::Actuator::Self const &

        """
        return _opensim.Actuator_copyProperty_min_control(self, source)


    def append_min_control(self, value):
        """
        append_min_control(Actuator self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Actuator_append_min_control(self, value)


    def constructProperty_min_control(self, initValue):
        """
        constructProperty_min_control(Actuator self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Actuator_constructProperty_min_control(self, initValue)


    def get_min_control(self, *args):
        """
        get_min_control(Actuator self, int i) -> double const

        Parameters:
            i: int

        get_min_control(Actuator self) -> double const &

        Parameters:
            self: OpenSim::Actuator const *

        """
        return _opensim.Actuator_get_min_control(self, *args)


    def upd_min_control(self, *args):
        """
        upd_min_control(Actuator self, int i) -> double

        Parameters:
            i: int

        upd_min_control(Actuator self) -> double &

        Parameters:
            self: OpenSim::Actuator *

        """
        return _opensim.Actuator_upd_min_control(self, *args)


    def set_min_control(self, *args):
        """
        set_min_control(Actuator self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_min_control(Actuator self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Actuator_set_min_control(self, *args)


    def copyProperty_max_control(self, source):
        """
        copyProperty_max_control(Actuator self, Actuator source)

        Parameters:
            source: OpenSim::Actuator::Self const &

        """
        return _opensim.Actuator_copyProperty_max_control(self, source)


    def append_max_control(self, value):
        """
        append_max_control(Actuator self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Actuator_append_max_control(self, value)


    def constructProperty_max_control(self, initValue):
        """
        constructProperty_max_control(Actuator self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Actuator_constructProperty_max_control(self, initValue)


    def get_max_control(self, *args):
        """
        get_max_control(Actuator self, int i) -> double const

        Parameters:
            i: int

        get_max_control(Actuator self) -> double const &

        Parameters:
            self: OpenSim::Actuator const *

        """
        return _opensim.Actuator_get_max_control(self, *args)


    def upd_max_control(self, *args):
        """
        upd_max_control(Actuator self, int i) -> double

        Parameters:
            i: int

        upd_max_control(Actuator self) -> double &

        Parameters:
            self: OpenSim::Actuator *

        """
        return _opensim.Actuator_upd_max_control(self, *args)


    def set_max_control(self, *args):
        """
        set_max_control(Actuator self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_max_control(Actuator self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Actuator_set_max_control(self, *args)


    def getControl(self, s):
        """
        getControl(Actuator self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Actuator_getControl(self, s)


    def numControls(self):
        """
        numControls(Actuator self) -> int

        Parameters:
            self: OpenSim::Actuator const *

        """
        return _opensim.Actuator_numControls(self)


    def setForce(self, s, aForce):
        """
        setForce(Actuator self, State s, double aForce)

        Parameters:
            s: SimTK::State const &
            aForce: double

        """
        return _opensim.Actuator_setForce(self, s, aForce)


    def getForce(self, s):
        """
        getForce(Actuator self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Actuator_getForce(self, s)


    def setSpeed(self, s, aspeed):
        """
        setSpeed(Actuator self, State s, double aspeed)

        Parameters:
            s: SimTK::State const &
            aspeed: double

        """
        return _opensim.Actuator_setSpeed(self, s, aspeed)


    def getSpeed(self, s):
        """
        getSpeed(Actuator self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Actuator_getSpeed(self, s)


    def getPower(self, s):
        """
        getPower(Actuator self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Actuator_getPower(self, s)


    def getStress(self, s):
        """
        getStress(Actuator self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Actuator_getStress(self, s)


    def getOptimalForce(self):
        """
        getOptimalForce(Actuator self) -> double

        Parameters:
            self: OpenSim::Actuator const *

        """
        return _opensim.Actuator_getOptimalForce(self)


    def setMinControl(self, aMinControl):
        """
        setMinControl(Actuator self, double const & aMinControl)

        Parameters:
            aMinControl: double const &

        """
        return _opensim.Actuator_setMinControl(self, aMinControl)


    def getMinControl(self):
        """
        getMinControl(Actuator self) -> double

        Parameters:
            self: OpenSim::Actuator const *

        """
        return _opensim.Actuator_getMinControl(self)


    def setMaxControl(self, aMaxControl):
        """
        setMaxControl(Actuator self, double const & aMaxControl)

        Parameters:
            aMaxControl: double const &

        """
        return _opensim.Actuator_setMaxControl(self, aMaxControl)


    def getMaxControl(self):
        """
        getMaxControl(Actuator self) -> double

        Parameters:
            self: OpenSim::Actuator const *

        """
        return _opensim.Actuator_getMaxControl(self)


    def overrideForce(self, s, flag):
        """
        overrideForce(Actuator self, State s, bool flag)

        Parameters:
            s: SimTK::State &
            flag: bool

        """
        return _opensim.Actuator_overrideForce(self, s, flag)


    def isForceOverriden(self, s):
        """
        isForceOverriden(Actuator self, State s) -> bool

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Actuator_isForceOverriden(self, s)


    def setOverrideForce(self, s, value):
        """
        setOverrideForce(Actuator self, State s, double value)

        Parameters:
            s: SimTK::State &
            value: double

        """
        return _opensim.Actuator_setOverrideForce(self, s, value)


    def getOverrideForce(self, s):
        """
        getOverrideForce(Actuator self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Actuator_getOverrideForce(self, s)

    __swig_destroy__ = _opensim.delete_Actuator
    __del__ = lambda self: None
Actuator_swigregister = _opensim.Actuator_swigregister
Actuator_swigregister(Actuator)

def Actuator_safeDownCast(obj):
    """
    Actuator_safeDownCast(OpenSimObject obj) -> Actuator

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Actuator_safeDownCast(obj)

def Actuator_getClassName():
    """Actuator_getClassName() -> std::string const &"""
    return _opensim.Actuator_getClassName()

class SetActuators(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::Actuator)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetActuators, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetActuators, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetActuators

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetActuators_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetActuators self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetActuators_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetActuators_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetActuators self) -> SetActuators

        Parameters:
            self: OpenSim::Set< OpenSim::Actuator > const *

        """
        return _opensim.SetActuators_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetActuators self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::Actuator > const *

        """
        return _opensim.SetActuators_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetActuators
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Actuator)> self) -> SetActuators
        __init__(OpenSim::Set<(OpenSim::Actuator)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetActuators

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Actuator)> self, std::string const & aFileName) -> SetActuators

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Actuator)> self, SetActuators aSet) -> SetActuators

        Parameters:
            aSet: OpenSim::Set< OpenSim::Actuator > const &

        """
        this = _opensim.new_SetActuators(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetActuators self)

        Parameters:
            self: OpenSim::Set< OpenSim::Actuator > *

        """
        return _opensim.SetActuators_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetActuators self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetActuators_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetActuators self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetActuators_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetActuators self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Actuator > const *

        """
        return _opensim.SetActuators_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetActuators self, Actuator aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::Actuator const *
            aStartIndex: int

        getIndex(SetActuators self, Actuator aObject) -> int

        Parameters:
            aObject: OpenSim::Actuator const *

        getIndex(SetActuators self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetActuators self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetActuators_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetActuators self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetActuators_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetActuators self, Actuator aObject) -> bool

        Parameters:
            aObject: OpenSim::Actuator *

        """
        return _opensim.SetActuators_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetActuators self, Actuator aObject) -> bool

        Parameters:
            aObject: OpenSim::Actuator const &

        """
        return _opensim.SetActuators_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetActuators self, int aIndex, Actuator aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Actuator *

        """
        return _opensim.SetActuators_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetActuators self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetActuators self, Actuator aObject) -> bool

        Parameters:
            aObject: OpenSim::Actuator const *

        """
        return _opensim.SetActuators_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetActuators self)

        Parameters:
            self: OpenSim::Set< OpenSim::Actuator > *

        """
        return _opensim.SetActuators_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetActuators self, int aIndex, Actuator aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Actuator *
            preserveGroups: bool

        set(SetActuators self, int aIndex, Actuator aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Actuator *

        """
        return _opensim.SetActuators_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetActuators self, int aIndex) -> Actuator

        Parameters:
            aIndex: int

        get(SetActuators self, std::string const & aName) -> Actuator

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetActuators_get(self, *args)


    def contains(self, aName):
        """
        contains(SetActuators self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetActuators_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetActuators self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetActuators_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetActuators self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Actuator > const *

        """
        return _opensim.SetActuators_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetActuators self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetActuators_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetActuators self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetActuators_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetActuators self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetActuators_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetActuators self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetActuators_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetActuators self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetActuators_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetActuators self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetActuators self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetActuators_getGroup(self, *args)

SetActuators_swigregister = _opensim.SetActuators_swigregister
SetActuators_swigregister(SetActuators)

def SetActuators_safeDownCast(obj):
    """
    SetActuators_safeDownCast(OpenSimObject obj) -> SetActuators

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetActuators_safeDownCast(obj)

def SetActuators_getClassName():
    """SetActuators_getClassName() -> std::string const &"""
    return _opensim.SetActuators_getClassName()

class ArrayStorage(_object):
    """Proxy of C++ OpenSim::ArrayPtrs<(OpenSim::Storage)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayStorage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayStorage, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _opensim.delete_ArrayStorage
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::ArrayPtrs<(OpenSim::Storage)> self, int aCapacity=1) -> ArrayStorage

        Parameters:
            aCapacity: int

        __init__(OpenSim::ArrayPtrs<(OpenSim::Storage)> self) -> ArrayStorage
        __init__(OpenSim::ArrayPtrs<(OpenSim::Storage)> self, ArrayStorage aArray) -> ArrayStorage

        Parameters:
            aArray: OpenSim::ArrayPtrs< OpenSim::Storage > const &

        """
        this = _opensim.new_ArrayStorage(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def clearAndDestroy(self):
        """
        clearAndDestroy(ArrayStorage self)

        Parameters:
            self: OpenSim::ArrayPtrs< OpenSim::Storage > *

        """
        return _opensim.ArrayStorage_clearAndDestroy(self)


    def setSize(self, aSize):
        """
        setSize(ArrayStorage self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.ArrayStorage_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayStorage self) -> int

        Parameters:
            self: OpenSim::ArrayPtrs< OpenSim::Storage > const *

        """
        return _opensim.ArrayStorage_getSize(self)


    def size(self):
        """
        size(ArrayStorage self) -> int

        Parameters:
            self: OpenSim::ArrayPtrs< OpenSim::Storage > const *

        """
        return _opensim.ArrayStorage_size(self)


    def getIndex(self, *args):
        """
        getIndex(ArrayStorage self, Storage aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::Storage const *
            aStartIndex: int

        getIndex(ArrayStorage self, Storage aObject) -> int

        Parameters:
            aObject: OpenSim::Storage const *

        getIndex(ArrayStorage self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(ArrayStorage self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.ArrayStorage_getIndex(self, *args)


    def append(self, *args):
        """
        append(ArrayStorage self, Storage aObject) -> bool

        Parameters:
            aObject: OpenSim::Storage *

        append(ArrayStorage self, ArrayStorage aArray) -> bool

        Parameters:
            aArray: OpenSim::ArrayPtrs< OpenSim::Storage > &

        """
        return _opensim.ArrayStorage_append(self, *args)


    def insert(self, aIndex, aObject):
        """
        insert(ArrayStorage self, int aIndex, Storage aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Storage *

        """
        return _opensim.ArrayStorage_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(ArrayStorage self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(ArrayStorage self, Storage aObject) -> bool

        Parameters:
            aObject: OpenSim::Storage const *

        """
        return _opensim.ArrayStorage_remove(self, *args)


    def set(self, aIndex, aObject):
        """
        set(ArrayStorage self, int aIndex, Storage aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Storage *

        """
        return _opensim.ArrayStorage_set(self, aIndex, aObject)


    def get(self, *args):
        """
        get(ArrayStorage self, int aIndex) -> Storage

        Parameters:
            aIndex: int

        get(ArrayStorage self, std::string const & aName) -> Storage

        Parameters:
            aName: std::string const &

        """
        return _opensim.ArrayStorage_get(self, *args)


    def getLast(self):
        """
        getLast(ArrayStorage self) -> Storage

        Parameters:
            self: OpenSim::ArrayPtrs< OpenSim::Storage > const *

        """
        return _opensim.ArrayStorage_getLast(self)


    def searchBinary(self, aObject, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayStorage self, Storage aObject, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters:
            aObject: OpenSim::Storage const &
            aFindFirst: bool
            aLo: int
            aHi: int

        searchBinary(ArrayStorage self, Storage aObject, bool aFindFirst=False, int aLo=-1) -> int

        Parameters:
            aObject: OpenSim::Storage const &
            aFindFirst: bool
            aLo: int

        searchBinary(ArrayStorage self, Storage aObject, bool aFindFirst=False) -> int

        Parameters:
            aObject: OpenSim::Storage const &
            aFindFirst: bool

        searchBinary(ArrayStorage self, Storage aObject) -> int

        Parameters:
            aObject: OpenSim::Storage const &

        """
        return _opensim.ArrayStorage_searchBinary(self, aObject, aFindFirst, aLo, aHi)

ArrayStorage_swigregister = _opensim.ArrayStorage_swigregister
ArrayStorage_swigregister(ArrayStorage)

class Analysis(OpenSimObject):
    """Proxy of C++ OpenSim::Analysis class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Analysis, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Analysis, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Analysis

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Analysis_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Analysis self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Analysis_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Analysis_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Analysis self) -> Analysis

        Parameters:
            self: OpenSim::Analysis const *

        """
        return _opensim.Analysis_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Analysis self) -> std::string const &

        Parameters:
            self: OpenSim::Analysis const *

        """
        return _opensim.Analysis_getConcreteClassName(self)

    __swig_setmethods__["_model"] = _opensim.Analysis__model_set
    __swig_getmethods__["_model"] = _opensim.Analysis__model_get
    if _newclass:
        _model = _swig_property(_opensim.Analysis__model_get, _opensim.Analysis__model_set)
    __swig_setmethods__["_statesStore"] = _opensim.Analysis__statesStore_set
    __swig_getmethods__["_statesStore"] = _opensim.Analysis__statesStore_get
    if _newclass:
        _statesStore = _swig_property(_opensim.Analysis__statesStore_get, _opensim.Analysis__statesStore_set)
    __swig_destroy__ = _opensim.delete_Analysis
    __del__ = lambda self: None

    def begin(self, s):
        """
        begin(Analysis self, State s) -> int

        Parameters:
            s: SimTK::State &

        """
        return _opensim.Analysis_begin(self, s)


    def step(self, s, stepNumber):
        """
        step(Analysis self, State s, int stepNumber) -> int

        Parameters:
            s: SimTK::State const &
            stepNumber: int

        """
        return _opensim.Analysis_step(self, s, stepNumber)


    def end(self, s):
        """
        end(Analysis self, State s) -> int

        Parameters:
            s: SimTK::State &

        """
        return _opensim.Analysis_end(self, s)


    def setModel(self, aModel):
        """
        setModel(Analysis self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.Analysis_setModel(self, aModel)


    def setStatesStore(self, aStatesStore):
        """
        setStatesStore(Analysis self, Storage aStatesStore)

        Parameters:
            aStatesStore: OpenSim::Storage const &

        """
        return _opensim.Analysis_setStatesStore(self, aStatesStore)


    def setOn(self, aTrueFalse):
        """
        setOn(Analysis self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.Analysis_setOn(self, aTrueFalse)


    def getOn(self):
        """
        getOn(Analysis self) -> bool

        Parameters:
            self: OpenSim::Analysis const *

        """
        return _opensim.Analysis_getOn(self)


    def setStartTime(self, aStartTime):
        """
        setStartTime(Analysis self, double aStartTime)

        Parameters:
            aStartTime: double

        """
        return _opensim.Analysis_setStartTime(self, aStartTime)


    def getStartTime(self):
        """
        getStartTime(Analysis self) -> double

        Parameters:
            self: OpenSim::Analysis const *

        """
        return _opensim.Analysis_getStartTime(self)


    def setEndTime(self, aEndTime):
        """
        setEndTime(Analysis self, double aEndTime)

        Parameters:
            aEndTime: double

        """
        return _opensim.Analysis_setEndTime(self, aEndTime)


    def getEndTime(self):
        """
        getEndTime(Analysis self) -> double

        Parameters:
            self: OpenSim::Analysis const *

        """
        return _opensim.Analysis_getEndTime(self)


    def setInDegrees(self, aTrueFalse):
        """
        setInDegrees(Analysis self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.Analysis_setInDegrees(self, aTrueFalse)


    def getInDegrees(self):
        """
        getInDegrees(Analysis self) -> bool

        Parameters:
            self: OpenSim::Analysis const *

        """
        return _opensim.Analysis_getInDegrees(self)


    def proceed(self, aStep=0):
        """
        proceed(Analysis self, int aStep=0) -> bool

        Parameters:
            aStep: int

        proceed(Analysis self) -> bool

        Parameters:
            self: OpenSim::Analysis *

        """
        return _opensim.Analysis_proceed(self, aStep)


    def setStepInterval(self, aStepInterval):
        """
        setStepInterval(Analysis self, int aStepInterval)

        Parameters:
            aStepInterval: int

        """
        return _opensim.Analysis_setStepInterval(self, aStepInterval)


    def getStepInterval(self):
        """
        getStepInterval(Analysis self) -> int

        Parameters:
            self: OpenSim::Analysis const *

        """
        return _opensim.Analysis_getStepInterval(self)


    def setColumnLabels(self, aLabels):
        """
        setColumnLabels(Analysis self, ArrayStr aLabels)

        Parameters:
            aLabels: OpenSim::Array< std::string > const &

        """
        return _opensim.Analysis_setColumnLabels(self, aLabels)


    def getColumnLabels(self):
        """
        getColumnLabels(Analysis self) -> ArrayStr

        Parameters:
            self: OpenSim::Analysis const *

        """
        return _opensim.Analysis_getColumnLabels(self)


    def getStorageList(self):
        """
        getStorageList(Analysis self) -> ArrayStorage

        Parameters:
            self: OpenSim::Analysis *

        """
        return _opensim.Analysis_getStorageList(self)


    def setPrintResultFiles(self, aToWrite):
        """
        setPrintResultFiles(Analysis self, bool aToWrite)

        Parameters:
            aToWrite: bool

        """
        return _opensim.Analysis_setPrintResultFiles(self, aToWrite)


    def getPrintResultFiles(self):
        """
        getPrintResultFiles(Analysis self) -> bool

        Parameters:
            self: OpenSim::Analysis const *

        """
        return _opensim.Analysis_getPrintResultFiles(self)


    def printResults(self, *args):
        """
        printResults(Analysis self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double
            aExtension: std::string const &

        printResults(Analysis self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double

        printResults(Analysis self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &

        printResults(Analysis self, std::string const & aBaseName) -> int

        Parameters:
            aBaseName: std::string const &

        """
        return _opensim.Analysis_printResults(self, *args)

Analysis_swigregister = _opensim.Analysis_swigregister
Analysis_swigregister(Analysis)

def Analysis_safeDownCast(obj):
    """
    Analysis_safeDownCast(OpenSimObject obj) -> Analysis

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Analysis_safeDownCast(obj)

def Analysis_getClassName():
    """Analysis_getClassName() -> std::string const &"""
    return _opensim.Analysis_getClassName()

class SetAnalysis(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::Analysis)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetAnalysis, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetAnalysis, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetAnalysis

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetAnalysis_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetAnalysis self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetAnalysis_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetAnalysis_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetAnalysis self) -> SetAnalysis

        Parameters:
            self: OpenSim::Set< OpenSim::Analysis > const *

        """
        return _opensim.SetAnalysis_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetAnalysis self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::Analysis > const *

        """
        return _opensim.SetAnalysis_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetAnalysis
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Analysis)> self) -> SetAnalysis
        __init__(OpenSim::Set<(OpenSim::Analysis)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetAnalysis

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Analysis)> self, std::string const & aFileName) -> SetAnalysis

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Analysis)> self, SetAnalysis aSet) -> SetAnalysis

        Parameters:
            aSet: OpenSim::Set< OpenSim::Analysis > const &

        """
        this = _opensim.new_SetAnalysis(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetAnalysis self)

        Parameters:
            self: OpenSim::Set< OpenSim::Analysis > *

        """
        return _opensim.SetAnalysis_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetAnalysis self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetAnalysis_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetAnalysis self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetAnalysis_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetAnalysis self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Analysis > const *

        """
        return _opensim.SetAnalysis_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetAnalysis self, Analysis aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::Analysis const *
            aStartIndex: int

        getIndex(SetAnalysis self, Analysis aObject) -> int

        Parameters:
            aObject: OpenSim::Analysis const *

        getIndex(SetAnalysis self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetAnalysis self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetAnalysis_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetAnalysis self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetAnalysis_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetAnalysis self, Analysis aObject) -> bool

        Parameters:
            aObject: OpenSim::Analysis *

        """
        return _opensim.SetAnalysis_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetAnalysis self, Analysis aObject) -> bool

        Parameters:
            aObject: OpenSim::Analysis const &

        """
        return _opensim.SetAnalysis_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetAnalysis self, int aIndex, Analysis aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Analysis *

        """
        return _opensim.SetAnalysis_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetAnalysis self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetAnalysis self, Analysis aObject) -> bool

        Parameters:
            aObject: OpenSim::Analysis const *

        """
        return _opensim.SetAnalysis_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetAnalysis self)

        Parameters:
            self: OpenSim::Set< OpenSim::Analysis > *

        """
        return _opensim.SetAnalysis_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetAnalysis self, int aIndex, Analysis aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Analysis *
            preserveGroups: bool

        set(SetAnalysis self, int aIndex, Analysis aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Analysis *

        """
        return _opensim.SetAnalysis_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetAnalysis self, int aIndex) -> Analysis

        Parameters:
            aIndex: int

        get(SetAnalysis self, std::string const & aName) -> Analysis

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetAnalysis_get(self, *args)


    def contains(self, aName):
        """
        contains(SetAnalysis self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetAnalysis_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetAnalysis self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetAnalysis_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetAnalysis self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Analysis > const *

        """
        return _opensim.SetAnalysis_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetAnalysis self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetAnalysis_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetAnalysis self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetAnalysis_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetAnalysis self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetAnalysis_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetAnalysis self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetAnalysis_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetAnalysis self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetAnalysis_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetAnalysis self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetAnalysis self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetAnalysis_getGroup(self, *args)

SetAnalysis_swigregister = _opensim.SetAnalysis_swigregister
SetAnalysis_swigregister(SetAnalysis)

def SetAnalysis_safeDownCast(obj):
    """
    SetAnalysis_safeDownCast(OpenSimObject obj) -> SetAnalysis

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetAnalysis_safeDownCast(obj)

def SetAnalysis_getClassName():
    """SetAnalysis_getClassName() -> std::string const &"""
    return _opensim.SetAnalysis_getClassName()

class AnalysisSet(SetAnalysis):
    """Proxy of C++ OpenSim::AnalysisSet class"""
    __swig_setmethods__ = {}
    for _s in [SetAnalysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalysisSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetAnalysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalysisSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> AnalysisSet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.AnalysisSet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(AnalysisSet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.AnalysisSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.AnalysisSet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(AnalysisSet self) -> AnalysisSet

        Parameters:
            self: OpenSim::AnalysisSet const *

        """
        return _opensim.AnalysisSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(AnalysisSet self) -> std::string const &

        Parameters:
            self: OpenSim::AnalysisSet const *

        """
        return _opensim.AnalysisSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::AnalysisSet self) -> AnalysisSet
        __init__(OpenSim::AnalysisSet self, Model aModel) -> AnalysisSet

        Parameters:
            aModel: OpenSim::Model *

        __init__(OpenSim::AnalysisSet self, std::string const & aFileName) -> AnalysisSet

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::AnalysisSet self, AnalysisSet aSet) -> AnalysisSet

        Parameters:
            aSet: OpenSim::AnalysisSet const &

        """
        this = _opensim.new_AnalysisSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_AnalysisSet
    __del__ = lambda self: None

    def setModel(self, aModel):
        """
        setModel(AnalysisSet self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.AnalysisSet_setModel(self, aModel)


    def getModel(self):
        """
        getModel(AnalysisSet self) -> Model

        Parameters:
            self: OpenSim::AnalysisSet *

        """
        return _opensim.AnalysisSet_getModel(self)


    def setOn(self, *args):
        """
        setOn(AnalysisSet self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        setOn(AnalysisSet self, ArrayBool aOn)

        Parameters:
            aOn: OpenSim::Array< bool > const &

        """
        return _opensim.AnalysisSet_setOn(self, *args)


    def getOn(self):
        """
        getOn(AnalysisSet self) -> ArrayBool

        Parameters:
            self: OpenSim::AnalysisSet const *

        """
        return _opensim.AnalysisSet_getOn(self)


    def begin(self, s):
        """
        begin(AnalysisSet self, State s)

        Parameters:
            s: SimTK::State &

        """
        return _opensim.AnalysisSet_begin(self, s)


    def step(self, s, stepNumber):
        """
        step(AnalysisSet self, State s, int stepNumber)

        Parameters:
            s: SimTK::State const &
            stepNumber: int

        """
        return _opensim.AnalysisSet_step(self, s, stepNumber)


    def end(self, s):
        """
        end(AnalysisSet self, State s)

        Parameters:
            s: SimTK::State &

        """
        return _opensim.AnalysisSet_end(self, s)


    def printResults(self, *args):
        """
        printResults(AnalysisSet self, std::string const & aBaseName, std::string const & aPath, double aDT=-1.0, std::string const & aExtension)

        Parameters:
            aBaseName: std::string const &
            aPath: std::string const &
            aDT: double
            aExtension: std::string const &

        printResults(AnalysisSet self, std::string const & aBaseName, std::string const & aPath, double aDT=-1.0)

        Parameters:
            aBaseName: std::string const &
            aPath: std::string const &
            aDT: double

        printResults(AnalysisSet self, std::string const & aBaseName, std::string const & aPath)

        Parameters:
            aBaseName: std::string const &
            aPath: std::string const &

        printResults(AnalysisSet self, std::string const & aBaseName)

        Parameters:
            aBaseName: std::string const &

        """
        return _opensim.AnalysisSet_printResults(self, *args)


    def getAvailableAnalyses(as):
        """
        getAvailableAnalyses(AnalysisSet as)

        Parameters:
            as: OpenSim::AnalysisSet &

        """
        return _opensim.AnalysisSet_getAvailableAnalyses(as)

    if _newclass:
        getAvailableAnalyses = staticmethod(getAvailableAnalyses)
    __swig_getmethods__["getAvailableAnalyses"] = lambda x: getAvailableAnalyses
    def adoptAndAppend(self, aAnalysis):
        aAnalysis._markAdopted()
        return super(AnalysisSet, self).adoptAndAppend(aAnalysis)

AnalysisSet_swigregister = _opensim.AnalysisSet_swigregister
AnalysisSet_swigregister(AnalysisSet)

def AnalysisSet_safeDownCast(obj):
    """
    AnalysisSet_safeDownCast(OpenSimObject obj) -> AnalysisSet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.AnalysisSet_safeDownCast(obj)

def AnalysisSet_getClassName():
    """AnalysisSet_getClassName() -> std::string const &"""
    return _opensim.AnalysisSet_getClassName()

def AnalysisSet_getAvailableAnalyses(as):
    """
    AnalysisSet_getAvailableAnalyses(AnalysisSet as)

    Parameters:
        as: OpenSim::AnalysisSet &

    """
    return _opensim.AnalysisSet_getAvailableAnalyses(as)

class Control(OpenSimObject):
    """Proxy of C++ OpenSim::Control class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Control, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Control, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Control

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Control_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Control self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Control_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Control_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Control self) -> Control

        Parameters:
            self: OpenSim::Control const *

        """
        return _opensim.Control_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Control self) -> std::string const &

        Parameters:
            self: OpenSim::Control const *

        """
        return _opensim.Control_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_Control
    __del__ = lambda self: None

    def setIsModelControl(self, aTrueFalse):
        """
        setIsModelControl(Control self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.Control_setIsModelControl(self, aTrueFalse)


    def getIsModelControl(self):
        """
        getIsModelControl(Control self) -> bool

        Parameters:
            self: OpenSim::Control const *

        """
        return _opensim.Control_getIsModelControl(self)


    def setExtrapolate(self, aTrueFalse):
        """
        setExtrapolate(Control self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.Control_setExtrapolate(self, aTrueFalse)


    def getExtrapolate(self):
        """
        getExtrapolate(Control self) -> bool

        Parameters:
            self: OpenSim::Control const *

        """
        return _opensim.Control_getExtrapolate(self)


    def setFilterOn(self, aTrueFalse):
        """
        setFilterOn(Control self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.Control_setFilterOn(self, aTrueFalse)


    def getFilterOn(self):
        """
        getFilterOn(Control self) -> bool

        Parameters:
            self: OpenSim::Control const *

        """
        return _opensim.Control_getFilterOn(self)


    def getNumParameters(self):
        """
        getNumParameters(Control self) -> int

        Parameters:
            self: OpenSim::Control const *

        """
        return _opensim.Control_getNumParameters(self)


    def setDefaultParameterMin(self, aMin):
        """
        setDefaultParameterMin(Control self, double aMin)

        Parameters:
            aMin: double

        """
        return _opensim.Control_setDefaultParameterMin(self, aMin)


    def getDefaultParameterMin(self):
        """
        getDefaultParameterMin(Control self) -> double

        Parameters:
            self: OpenSim::Control const *

        """
        return _opensim.Control_getDefaultParameterMin(self)


    def setDefaultParameterMax(self, aMax):
        """
        setDefaultParameterMax(Control self, double aMax)

        Parameters:
            aMax: double

        """
        return _opensim.Control_setDefaultParameterMax(self, aMax)


    def getDefaultParameterMax(self):
        """
        getDefaultParameterMax(Control self) -> double

        Parameters:
            self: OpenSim::Control const *

        """
        return _opensim.Control_getDefaultParameterMax(self)


    def setParameterMin(self, aI, aMin):
        """
        setParameterMin(Control self, int aI, double aMin)

        Parameters:
            aI: int
            aMin: double

        """
        return _opensim.Control_setParameterMin(self, aI, aMin)


    def getParameterMin(self, aI):
        """
        getParameterMin(Control self, int aI) -> double

        Parameters:
            aI: int

        """
        return _opensim.Control_getParameterMin(self, aI)


    def setParameterMax(self, aI, aMax):
        """
        setParameterMax(Control self, int aI, double aMax)

        Parameters:
            aI: int
            aMax: double

        """
        return _opensim.Control_setParameterMax(self, aI, aMax)


    def getParameterMax(self, aI):
        """
        getParameterMax(Control self, int aI) -> double

        Parameters:
            aI: int

        """
        return _opensim.Control_getParameterMax(self, aI)


    def getParameterTime(self, aI):
        """
        getParameterTime(Control self, int aI) -> double

        Parameters:
            aI: int

        """
        return _opensim.Control_getParameterTime(self, aI)


    def getParameterNeighborhood(self, aI, rTLower, rTUpper):
        """
        getParameterNeighborhood(Control self, int aI, double & rTLower, double & rTUpper)

        Parameters:
            aI: int
            rTLower: double &
            rTUpper: double &

        """
        return _opensim.Control_getParameterNeighborhood(self, aI, rTLower, rTUpper)


    def getParameterList(self, *args):
        """
        getParameterList(Control self, double aT, ArrayInt rList) -> int

        Parameters:
            aT: double
            rList: OpenSim::Array< int > &

        getParameterList(Control self, double aTLower, double aTUpper, ArrayInt rList) -> int

        Parameters:
            aTLower: double
            aTUpper: double
            rList: OpenSim::Array< int > &

        """
        return _opensim.Control_getParameterList(self, *args)


    def getParameterValue(self, aI):
        """
        getParameterValue(Control self, int aI) -> double

        Parameters:
            aI: int

        """
        return _opensim.Control_getParameterValue(self, aI)


    def setParameterValue(self, aI, aX):
        """
        setParameterValue(Control self, int aI, double aX)

        Parameters:
            aI: int
            aX: double

        """
        return _opensim.Control_setParameterValue(self, aI, aX)


    def getControlValue(self, aT=0.0):
        """
        getControlValue(Control self, double aT=0.0) -> double

        Parameters:
            aT: double

        getControlValue(Control self) -> double

        Parameters:
            self: OpenSim::Control *

        """
        return _opensim.Control_getControlValue(self, aT)


    def setControlValue(self, aT, aX):
        """
        setControlValue(Control self, double aT, double aX)

        Parameters:
            aT: double
            aX: double

        """
        return _opensim.Control_setControlValue(self, aT, aX)


    def getControlValueMin(self, aT=0.0):
        """
        getControlValueMin(Control self, double aT=0.0) -> double

        Parameters:
            aT: double

        getControlValueMin(Control self) -> double

        Parameters:
            self: OpenSim::Control *

        """
        return _opensim.Control_getControlValueMin(self, aT)


    def setControlValueMin(self, aT, aMin):
        """
        setControlValueMin(Control self, double aT, double aMin)

        Parameters:
            aT: double
            aMin: double

        """
        return _opensim.Control_setControlValueMin(self, aT, aMin)


    def getControlValueMax(self, aT=0.0):
        """
        getControlValueMax(Control self, double aT=0.0) -> double

        Parameters:
            aT: double

        getControlValueMax(Control self) -> double

        Parameters:
            self: OpenSim::Control *

        """
        return _opensim.Control_getControlValueMax(self, aT)


    def setControlValueMax(self, aT, aMax):
        """
        setControlValueMax(Control self, double aT, double aMax)

        Parameters:
            aT: double
            aMax: double

        """
        return _opensim.Control_setControlValueMax(self, aT, aMax)


    def getFirstTime(self):
        """
        getFirstTime(Control self) -> double const

        Parameters:
            self: OpenSim::Control const *

        """
        return _opensim.Control_getFirstTime(self)


    def getLastTime(self):
        """
        getLastTime(Control self) -> double const

        Parameters:
            self: OpenSim::Control const *

        """
        return _opensim.Control_getLastTime(self)


    def simplify(self, aProperties):
        """
        simplify(Control self, PropertySet const & aProperties)

        Parameters:
            aProperties: PropertySet const &

        """
        return _opensim.Control_simplify(self, aProperties)


    def filter(self, aT):
        """
        filter(Control self, double aT)

        Parameters:
            aT: double

        """
        return _opensim.Control_filter(self, aT)

Control_swigregister = _opensim.Control_swigregister
Control_swigregister(Control)

def Control_safeDownCast(obj):
    """
    Control_safeDownCast(OpenSimObject obj) -> Control

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Control_safeDownCast(obj)

def Control_getClassName():
    """Control_getClassName() -> std::string const &"""
    return _opensim.Control_getClassName()

class SetControls(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::Control)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetControls, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetControls, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetControls

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetControls_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetControls self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetControls_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetControls_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetControls self) -> SetControls

        Parameters:
            self: OpenSim::Set< OpenSim::Control > const *

        """
        return _opensim.SetControls_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetControls self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::Control > const *

        """
        return _opensim.SetControls_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetControls
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Control)> self) -> SetControls
        __init__(OpenSim::Set<(OpenSim::Control)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetControls

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Control)> self, std::string const & aFileName) -> SetControls

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Control)> self, SetControls aSet) -> SetControls

        Parameters:
            aSet: OpenSim::Set< OpenSim::Control > const &

        """
        this = _opensim.new_SetControls(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetControls self)

        Parameters:
            self: OpenSim::Set< OpenSim::Control > *

        """
        return _opensim.SetControls_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetControls self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetControls_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetControls self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetControls_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetControls self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Control > const *

        """
        return _opensim.SetControls_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetControls self, Control aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::Control const *
            aStartIndex: int

        getIndex(SetControls self, Control aObject) -> int

        Parameters:
            aObject: OpenSim::Control const *

        getIndex(SetControls self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetControls self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetControls_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetControls self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetControls_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetControls self, Control aObject) -> bool

        Parameters:
            aObject: OpenSim::Control *

        """
        return _opensim.SetControls_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetControls self, Control aObject) -> bool

        Parameters:
            aObject: OpenSim::Control const &

        """
        return _opensim.SetControls_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetControls self, int aIndex, Control aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Control *

        """
        return _opensim.SetControls_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetControls self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetControls self, Control aObject) -> bool

        Parameters:
            aObject: OpenSim::Control const *

        """
        return _opensim.SetControls_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetControls self)

        Parameters:
            self: OpenSim::Set< OpenSim::Control > *

        """
        return _opensim.SetControls_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetControls self, int aIndex, Control aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Control *
            preserveGroups: bool

        set(SetControls self, int aIndex, Control aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Control *

        """
        return _opensim.SetControls_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetControls self, int aIndex) -> Control

        Parameters:
            aIndex: int

        get(SetControls self, std::string const & aName) -> Control

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetControls_get(self, *args)


    def contains(self, aName):
        """
        contains(SetControls self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetControls_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetControls self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetControls_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetControls self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Control > const *

        """
        return _opensim.SetControls_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetControls self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetControls_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetControls self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetControls_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetControls self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetControls_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetControls self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetControls_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetControls self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetControls_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetControls self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetControls self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetControls_getGroup(self, *args)

SetControls_swigregister = _opensim.SetControls_swigregister
SetControls_swigregister(SetControls)

def SetControls_safeDownCast(obj):
    """
    SetControls_safeDownCast(OpenSimObject obj) -> SetControls

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetControls_safeDownCast(obj)

def SetControls_getClassName():
    """SetControls_getClassName() -> std::string const &"""
    return _opensim.SetControls_getClassName()

class ControlSet(SetControls):
    """Proxy of C++ OpenSim::ControlSet class"""
    __swig_setmethods__ = {}
    for _s in [SetControls]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ControlSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetControls]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ControlSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ControlSet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ControlSet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ControlSet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ControlSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ControlSet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ControlSet self) -> ControlSet

        Parameters:
            self: OpenSim::ControlSet const *

        """
        return _opensim.ControlSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ControlSet self) -> std::string const &

        Parameters:
            self: OpenSim::ControlSet const *

        """
        return _opensim.ControlSet_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_ControlSet
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::ControlSet self) -> ControlSet
        __init__(OpenSim::ControlSet self, std::string const & aFileName) -> ControlSet

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::ControlSet self, ControlSet aSet) -> ControlSet

        Parameters:
            aSet: OpenSim::ControlSet const &

        __init__(OpenSim::ControlSet self, Storage aStorage, int nControlsToConvert=0, int aStartIndex=0) -> ControlSet

        Parameters:
            aStorage: OpenSim::Storage const &
            nControlsToConvert: int
            aStartIndex: int

        __init__(OpenSim::ControlSet self, Storage aStorage, int nControlsToConvert=0) -> ControlSet

        Parameters:
            aStorage: OpenSim::Storage const &
            nControlsToConvert: int

        __init__(OpenSim::ControlSet self, Storage aStorage) -> ControlSet

        Parameters:
            aStorage: OpenSim::Storage const &

        """
        this = _opensim.new_ControlSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getSize(self, aForModelControls=True):
        """
        getSize(ControlSet self, bool aForModelControls=True) -> int

        Parameters:
            aForModelControls: bool

        getSize(ControlSet self) -> int

        Parameters:
            self: OpenSim::ControlSet const *

        """
        return _opensim.ControlSet_getSize(self, aForModelControls)


    def getControlList(self, aType, rList, aForModelControls=True):
        """
        getControlList(ControlSet self, char const * aType, ArrayInt rList, bool aForModelControls=True)

        Parameters:
            aType: char const *
            rList: OpenSim::Array< int > &
            aForModelControls: bool

        getControlList(ControlSet self, char const * aType, ArrayInt rList)

        Parameters:
            aType: char const *
            rList: OpenSim::Array< int > &

        """
        return _opensim.ControlSet_getControlList(self, aType, rList, aForModelControls)


    def getControlValues(self, *args):
        """
        getControlValues(ControlSet self, double aT, double [] rX, bool aForModelControls=True)

        Parameters:
            aT: double
            rX: double []
            aForModelControls: bool

        getControlValues(ControlSet self, double aT, double [] rX)

        Parameters:
            aT: double
            rX: double []

        getControlValues(ControlSet self, double aT, ArrayDouble rX, bool aForModelControls=True)

        Parameters:
            aT: double
            rX: OpenSim::Array< double > &
            aForModelControls: bool

        getControlValues(ControlSet self, double aT, ArrayDouble rX)

        Parameters:
            aT: double
            rX: OpenSim::Array< double > &

        """
        return _opensim.ControlSet_getControlValues(self, *args)


    def setControlValues(self, *args):
        """
        setControlValues(ControlSet self, double aT, double const [] aX, bool aForModelControls=True)

        Parameters:
            aT: double
            aX: double const []
            aForModelControls: bool

        setControlValues(ControlSet self, double aT, double const [] aX)

        Parameters:
            aT: double
            aX: double const []

        setControlValues(ControlSet self, double aT, ArrayDouble aX, bool aForModelControls=True)

        Parameters:
            aT: double
            aX: OpenSim::Array< double > const &
            aForModelControls: bool

        setControlValues(ControlSet self, double aT, ArrayDouble aX)

        Parameters:
            aT: double
            aX: OpenSim::Array< double > const &

        """
        return _opensim.ControlSet_setControlValues(self, *args)


    def getNumParameters(self, aForModelControls=True):
        """
        getNumParameters(ControlSet self, bool aForModelControls=True) -> int

        Parameters:
            aForModelControls: bool

        getNumParameters(ControlSet self) -> int

        Parameters:
            self: OpenSim::ControlSet const *

        """
        return _opensim.ControlSet_getNumParameters(self, aForModelControls)


    def getParameterList(self, *args):
        """
        getParameterList(ControlSet self, ArrayInt rList, bool aForModelControls=True)

        Parameters:
            rList: OpenSim::Array< int > &
            aForModelControls: bool

        getParameterList(ControlSet self, ArrayInt rList)

        Parameters:
            rList: OpenSim::Array< int > &

        getParameterList(ControlSet self, double aT, ArrayInt rList, bool aForModelControls=True)

        Parameters:
            aT: double
            rList: OpenSim::Array< int > &
            aForModelControls: bool

        getParameterList(ControlSet self, double aT, ArrayInt rList)

        Parameters:
            aT: double
            rList: OpenSim::Array< int > &

        getParameterList(ControlSet self, double aTLower, double aTUpper, ArrayInt rList, bool aForModelControls=True)

        Parameters:
            aTLower: double
            aTUpper: double
            rList: OpenSim::Array< int > &
            aForModelControls: bool

        getParameterList(ControlSet self, double aTLower, double aTUpper, ArrayInt rList)

        Parameters:
            aTLower: double
            aTUpper: double
            rList: OpenSim::Array< int > &

        """
        return _opensim.ControlSet_getParameterList(self, *args)


    def getParameterMins(self, rMins, aList=None):
        """
        getParameterMins(ControlSet self, ArrayDouble rMins, ArrayInt aList=None)

        Parameters:
            rMins: OpenSim::Array< double > &
            aList: OpenSim::Array< int > const *

        getParameterMins(ControlSet self, ArrayDouble rMins)

        Parameters:
            rMins: OpenSim::Array< double > &

        """
        return _opensim.ControlSet_getParameterMins(self, rMins, aList)


    def getParameterMaxs(self, rMaxs, aList=None):
        """
        getParameterMaxs(ControlSet self, ArrayDouble rMaxs, ArrayInt aList=None)

        Parameters:
            rMaxs: OpenSim::Array< double > &
            aList: OpenSim::Array< int > const *

        getParameterMaxs(ControlSet self, ArrayDouble rMaxs)

        Parameters:
            rMaxs: OpenSim::Array< double > &

        """
        return _opensim.ControlSet_getParameterMaxs(self, rMaxs, aList)


    def getParameterValues(self, *args):
        """
        getParameterValues(ControlSet self, double [] rP, ArrayInt aList=None)

        Parameters:
            rP: double []
            aList: OpenSim::Array< int > const *

        getParameterValues(ControlSet self, double [] rP)

        Parameters:
            rP: double []

        getParameterValues(ControlSet self, ArrayDouble rP, ArrayInt aList=None)

        Parameters:
            rP: OpenSim::Array< double > &
            aList: OpenSim::Array< int > const *

        getParameterValues(ControlSet self, ArrayDouble rP)

        Parameters:
            rP: OpenSim::Array< double > &

        """
        return _opensim.ControlSet_getParameterValues(self, *args)


    def setParameterValues(self, *args):
        """
        setParameterValues(ControlSet self, double const [] aP, ArrayInt aList=None)

        Parameters:
            aP: double const []
            aList: OpenSim::Array< int > const *

        setParameterValues(ControlSet self, double const [] aP)

        Parameters:
            aP: double const []

        setParameterValues(ControlSet self, ArrayDouble aP, ArrayInt aList=None)

        Parameters:
            aP: OpenSim::Array< double > const &
            aList: OpenSim::Array< int > const *

        setParameterValues(ControlSet self, ArrayDouble aP)

        Parameters:
            aP: OpenSim::Array< double > const &

        """
        return _opensim.ControlSet_setParameterValues(self, *args)


    def simplify(self, aProperties):
        """
        simplify(ControlSet self, PropertySet const & aProperties)

        Parameters:
            aProperties: PropertySet const &

        """
        return _opensim.ControlSet_simplify(self, aProperties)


    def filter(self, aT):
        """
        filter(ControlSet self, double aT)

        Parameters:
            aT: double

        """
        return _opensim.ControlSet_filter(self, aT)


    def constructStorage(self, aN, aT1, aT2, aForModelControls):
        """
        constructStorage(ControlSet self, int aN, double aT1, double aT2, bool aForModelControls) -> Storage

        Parameters:
            aN: int
            aT1: double
            aT2: double
            aForModelControls: bool

        """
        return _opensim.ControlSet_constructStorage(self, aN, aT1, aT2, aForModelControls)


    def mapParameterToControl(self, aIndex):
        """
        mapParameterToControl(ControlSet self, int aIndex) -> int

        Parameters:
            aIndex: int

        """
        return _opensim.ControlSet_mapParameterToControl(self, aIndex)


    def mapParameterToParameter(self, aIndex):
        """
        mapParameterToParameter(ControlSet self, int aIndex) -> int

        Parameters:
            aIndex: int

        """
        return _opensim.ControlSet_mapParameterToParameter(self, aIndex)


    def generateParameterMaps(self):
        """
        generateParameterMaps(ControlSet self)

        Parameters:
            self: OpenSim::ControlSet *

        """
        return _opensim.ControlSet_generateParameterMaps(self)

    def adoptAndAppend(self, aControl):
        aControl._markAdopted()
        return super(ControlSet, self).adoptAndAppend(aControl)

ControlSet_swigregister = _opensim.ControlSet_swigregister
ControlSet_swigregister(ControlSet)

def ControlSet_safeDownCast(obj):
    """
    ControlSet_safeDownCast(OpenSimObject obj) -> ControlSet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ControlSet_safeDownCast(obj)

def ControlSet_getClassName():
    """ControlSet_getClassName() -> std::string const &"""
    return _opensim.ControlSet_getClassName()

class ControlConstant(Control):
    """Proxy of C++ OpenSim::ControlConstant class"""
    __swig_setmethods__ = {}
    for _s in [Control]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ControlConstant, name, value)
    __swig_getmethods__ = {}
    for _s in [Control]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ControlConstant, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ControlConstant

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ControlConstant_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ControlConstant self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ControlConstant_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ControlConstant_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ControlConstant self) -> ControlConstant

        Parameters:
            self: OpenSim::ControlConstant const *

        """
        return _opensim.ControlConstant_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ControlConstant self) -> std::string const &

        Parameters:
            self: OpenSim::ControlConstant const *

        """
        return _opensim.ControlConstant_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_ControlConstant
    __del__ = lambda self: None

    def getNumParameters(self):
        """
        getNumParameters(ControlConstant self) -> int

        Parameters:
            self: OpenSim::ControlConstant const *

        """
        return _opensim.ControlConstant_getNumParameters(self)


    def setParameterMin(self, aI, aMin):
        """
        setParameterMin(ControlConstant self, int aI, double aMin)

        Parameters:
            aI: int
            aMin: double

        """
        return _opensim.ControlConstant_setParameterMin(self, aI, aMin)


    def getParameterMin(self, aI):
        """
        getParameterMin(ControlConstant self, int aI) -> double

        Parameters:
            aI: int

        """
        return _opensim.ControlConstant_getParameterMin(self, aI)


    def setParameterMax(self, aI, aMax):
        """
        setParameterMax(ControlConstant self, int aI, double aMax)

        Parameters:
            aI: int
            aMax: double

        """
        return _opensim.ControlConstant_setParameterMax(self, aI, aMax)


    def getParameterMax(self, aI):
        """
        getParameterMax(ControlConstant self, int aI) -> double

        Parameters:
            aI: int

        """
        return _opensim.ControlConstant_getParameterMax(self, aI)


    def getParameterTime(self, aI):
        """
        getParameterTime(ControlConstant self, int aI) -> double

        Parameters:
            aI: int

        """
        return _opensim.ControlConstant_getParameterTime(self, aI)


    def getParameterNeighborhood(self, aI, rTLower, rTUpper):
        """
        getParameterNeighborhood(ControlConstant self, int aI, double & rTLower, double & rTUpper)

        Parameters:
            aI: int
            rTLower: double &
            rTUpper: double &

        """
        return _opensim.ControlConstant_getParameterNeighborhood(self, aI, rTLower, rTUpper)


    def getParameterList(self, *args):
        """
        getParameterList(ControlConstant self, double aT, ArrayInt rList) -> int

        Parameters:
            aT: double
            rList: OpenSim::Array< int > &

        getParameterList(ControlConstant self, double aT1, double aT2, ArrayInt rList) -> int

        Parameters:
            aT1: double
            aT2: double
            rList: OpenSim::Array< int > &

        """
        return _opensim.ControlConstant_getParameterList(self, *args)


    def setParameterValue(self, aI, aX):
        """
        setParameterValue(ControlConstant self, int aI, double aX)

        Parameters:
            aI: int
            aX: double

        """
        return _opensim.ControlConstant_setParameterValue(self, aI, aX)


    def getParameterValue(self, aI):
        """
        getParameterValue(ControlConstant self, int aI) -> double

        Parameters:
            aI: int

        """
        return _opensim.ControlConstant_getParameterValue(self, aI)


    def setControlValue(self, aT, aX):
        """
        setControlValue(ControlConstant self, double aT, double aX)

        Parameters:
            aT: double
            aX: double

        """
        return _opensim.ControlConstant_setControlValue(self, aT, aX)


    def getControlValue(self, aT):
        """
        getControlValue(ControlConstant self, double aT) -> double

        Parameters:
            aT: double

        """
        return _opensim.ControlConstant_getControlValue(self, aT)


    def getControlValueMin(self, aT=0.0):
        """
        getControlValueMin(ControlConstant self, double aT=0.0) -> double

        Parameters:
            aT: double

        getControlValueMin(ControlConstant self) -> double

        Parameters:
            self: OpenSim::ControlConstant *

        """
        return _opensim.ControlConstant_getControlValueMin(self, aT)


    def setControlValueMin(self, aT, aX):
        """
        setControlValueMin(ControlConstant self, double aT, double aX)

        Parameters:
            aT: double
            aX: double

        """
        return _opensim.ControlConstant_setControlValueMin(self, aT, aX)


    def getControlValueMax(self, aT=0.0):
        """
        getControlValueMax(ControlConstant self, double aT=0.0) -> double

        Parameters:
            aT: double

        getControlValueMax(ControlConstant self) -> double

        Parameters:
            self: OpenSim::ControlConstant *

        """
        return _opensim.ControlConstant_getControlValueMax(self, aT)


    def setControlValueMax(self, aT, aX):
        """
        setControlValueMax(ControlConstant self, double aT, double aX)

        Parameters:
            aT: double
            aX: double

        """
        return _opensim.ControlConstant_setControlValueMax(self, aT, aX)

ControlConstant_swigregister = _opensim.ControlConstant_swigregister
ControlConstant_swigregister(ControlConstant)

def ControlConstant_safeDownCast(obj):
    """
    ControlConstant_safeDownCast(OpenSimObject obj) -> ControlConstant

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ControlConstant_safeDownCast(obj)

def ControlConstant_getClassName():
    """ControlConstant_getClassName() -> std::string const &"""
    return _opensim.ControlConstant_getClassName()

class ControlLinearNode(OpenSimObject):
    """Proxy of C++ OpenSim::ControlLinearNode class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ControlLinearNode, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ControlLinearNode, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ControlLinearNode

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ControlLinearNode_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ControlLinearNode self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ControlLinearNode_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ControlLinearNode_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ControlLinearNode self) -> ControlLinearNode

        Parameters:
            self: OpenSim::ControlLinearNode const *

        """
        return _opensim.ControlLinearNode_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ControlLinearNode self) -> std::string const &

        Parameters:
            self: OpenSim::ControlLinearNode const *

        """
        return _opensim.ControlLinearNode_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ControlLinearNode self, double aT=0.0, double aValue=0.0) -> ControlLinearNode

        Parameters:
            aT: double
            aValue: double

        __init__(OpenSim::ControlLinearNode self, double aT=0.0) -> ControlLinearNode

        Parameters:
            aT: double

        __init__(OpenSim::ControlLinearNode self) -> ControlLinearNode
        __init__(OpenSim::ControlLinearNode self, ControlLinearNode aNode) -> ControlLinearNode

        Parameters:
            aNode: OpenSim::ControlLinearNode const &

        """
        this = _opensim.new_ControlLinearNode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_ControlLinearNode
    __del__ = lambda self: None

    def setTime(self, aT):
        """
        setTime(ControlLinearNode self, double aT)

        Parameters:
            aT: double

        """
        return _opensim.ControlLinearNode_setTime(self, aT)


    def getTime(self):
        """
        getTime(ControlLinearNode self) -> double

        Parameters:
            self: OpenSim::ControlLinearNode const *

        """
        return _opensim.ControlLinearNode_getTime(self)


    def setValue(self, aValue):
        """
        setValue(ControlLinearNode self, double aValue)

        Parameters:
            aValue: double

        """
        return _opensim.ControlLinearNode_setValue(self, aValue)


    def getValue(self):
        """
        getValue(ControlLinearNode self) -> double

        Parameters:
            self: OpenSim::ControlLinearNode const *

        """
        return _opensim.ControlLinearNode_getValue(self)


    def toString(self):
        """
        toString(ControlLinearNode self) -> char *

        Parameters:
            self: OpenSim::ControlLinearNode *

        """
        return _opensim.ControlLinearNode_toString(self)

ControlLinearNode_swigregister = _opensim.ControlLinearNode_swigregister
ControlLinearNode_swigregister(ControlLinearNode)

def ControlLinearNode_safeDownCast(obj):
    """
    ControlLinearNode_safeDownCast(OpenSimObject obj) -> ControlLinearNode

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ControlLinearNode_safeDownCast(obj)

def ControlLinearNode_getClassName():
    """ControlLinearNode_getClassName() -> std::string const &"""
    return _opensim.ControlLinearNode_getClassName()

class SetControlNodes(_object):
    """Proxy of C++ OpenSim::ArrayPtrs<(OpenSim::ControlLinearNode)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetControlNodes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SetControlNodes, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _opensim.delete_SetControlNodes
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::ArrayPtrs<(OpenSim::ControlLinearNode)> self, int aCapacity=1) -> SetControlNodes

        Parameters:
            aCapacity: int

        __init__(OpenSim::ArrayPtrs<(OpenSim::ControlLinearNode)> self) -> SetControlNodes
        __init__(OpenSim::ArrayPtrs<(OpenSim::ControlLinearNode)> self, SetControlNodes aArray) -> SetControlNodes

        Parameters:
            aArray: OpenSim::ArrayPtrs< OpenSim::ControlLinearNode > const &

        """
        this = _opensim.new_SetControlNodes(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def clearAndDestroy(self):
        """
        clearAndDestroy(SetControlNodes self)

        Parameters:
            self: OpenSim::ArrayPtrs< OpenSim::ControlLinearNode > *

        """
        return _opensim.SetControlNodes_clearAndDestroy(self)


    def setSize(self, aSize):
        """
        setSize(SetControlNodes self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetControlNodes_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetControlNodes self) -> int

        Parameters:
            self: OpenSim::ArrayPtrs< OpenSim::ControlLinearNode > const *

        """
        return _opensim.SetControlNodes_getSize(self)


    def size(self):
        """
        size(SetControlNodes self) -> int

        Parameters:
            self: OpenSim::ArrayPtrs< OpenSim::ControlLinearNode > const *

        """
        return _opensim.SetControlNodes_size(self)


    def getIndex(self, *args):
        """
        getIndex(SetControlNodes self, ControlLinearNode aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::ControlLinearNode const *
            aStartIndex: int

        getIndex(SetControlNodes self, ControlLinearNode aObject) -> int

        Parameters:
            aObject: OpenSim::ControlLinearNode const *

        getIndex(SetControlNodes self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetControlNodes self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetControlNodes_getIndex(self, *args)


    def append(self, *args):
        """
        append(SetControlNodes self, ControlLinearNode aObject) -> bool

        Parameters:
            aObject: OpenSim::ControlLinearNode *

        append(SetControlNodes self, SetControlNodes aArray) -> bool

        Parameters:
            aArray: OpenSim::ArrayPtrs< OpenSim::ControlLinearNode > &

        """
        return _opensim.SetControlNodes_append(self, *args)


    def insert(self, aIndex, aObject):
        """
        insert(SetControlNodes self, int aIndex, ControlLinearNode aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::ControlLinearNode *

        """
        return _opensim.SetControlNodes_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetControlNodes self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetControlNodes self, ControlLinearNode aObject) -> bool

        Parameters:
            aObject: OpenSim::ControlLinearNode const *

        """
        return _opensim.SetControlNodes_remove(self, *args)


    def set(self, aIndex, aObject):
        """
        set(SetControlNodes self, int aIndex, ControlLinearNode aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::ControlLinearNode *

        """
        return _opensim.SetControlNodes_set(self, aIndex, aObject)


    def get(self, *args):
        """
        get(SetControlNodes self, int aIndex) -> ControlLinearNode

        Parameters:
            aIndex: int

        get(SetControlNodes self, std::string const & aName) -> ControlLinearNode

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetControlNodes_get(self, *args)


    def getLast(self):
        """
        getLast(SetControlNodes self) -> ControlLinearNode

        Parameters:
            self: OpenSim::ArrayPtrs< OpenSim::ControlLinearNode > const *

        """
        return _opensim.SetControlNodes_getLast(self)


    def searchBinary(self, aObject, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(SetControlNodes self, ControlLinearNode aObject, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters:
            aObject: OpenSim::ControlLinearNode const &
            aFindFirst: bool
            aLo: int
            aHi: int

        searchBinary(SetControlNodes self, ControlLinearNode aObject, bool aFindFirst=False, int aLo=-1) -> int

        Parameters:
            aObject: OpenSim::ControlLinearNode const &
            aFindFirst: bool
            aLo: int

        searchBinary(SetControlNodes self, ControlLinearNode aObject, bool aFindFirst=False) -> int

        Parameters:
            aObject: OpenSim::ControlLinearNode const &
            aFindFirst: bool

        searchBinary(SetControlNodes self, ControlLinearNode aObject) -> int

        Parameters:
            aObject: OpenSim::ControlLinearNode const &

        """
        return _opensim.SetControlNodes_searchBinary(self, aObject, aFindFirst, aLo, aHi)

SetControlNodes_swigregister = _opensim.SetControlNodes_swigregister
SetControlNodes_swigregister(SetControlNodes)

class ControlLinear(Control):
    """Proxy of C++ OpenSim::ControlLinear class"""
    __swig_setmethods__ = {}
    for _s in [Control]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ControlLinear, name, value)
    __swig_getmethods__ = {}
    for _s in [Control]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ControlLinear, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ControlLinear

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ControlLinear_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ControlLinear self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ControlLinear_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ControlLinear_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ControlLinear self) -> ControlLinear

        Parameters:
            self: OpenSim::ControlLinear const *

        """
        return _opensim.ControlLinear_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ControlLinear self) -> std::string const &

        Parameters:
            self: OpenSim::ControlLinear const *

        """
        return _opensim.ControlLinear_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ControlLinear self) -> ControlLinear
        __init__(OpenSim::ControlLinear self, ControlLinear aControl) -> ControlLinear

        Parameters:
            aControl: OpenSim::ControlLinear const &

        """
        this = _opensim.new_ControlLinear(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_ControlLinear
    __del__ = lambda self: None

    def copyData(self, aControl):
        """
        copyData(ControlLinear self, ControlLinear aControl)

        Parameters:
            aControl: OpenSim::ControlLinear const &

        """
        return _opensim.ControlLinear_copyData(self, aControl)


    def setUseSteps(self, aTrueFalse):
        """
        setUseSteps(ControlLinear self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.ControlLinear_setUseSteps(self, aTrueFalse)


    def getUseSteps(self):
        """
        getUseSteps(ControlLinear self) -> bool

        Parameters:
            self: OpenSim::ControlLinear const *

        """
        return _opensim.ControlLinear_getUseSteps(self)


    def setKp(self, aKp):
        """
        setKp(ControlLinear self, double aKp)

        Parameters:
            aKp: double

        """
        return _opensim.ControlLinear_setKp(self, aKp)


    def getKp(self):
        """
        getKp(ControlLinear self) -> double

        Parameters:
            self: OpenSim::ControlLinear const *

        """
        return _opensim.ControlLinear_getKp(self)


    def setKv(self, aKv):
        """
        setKv(ControlLinear self, double aKv)

        Parameters:
            aKv: double

        """
        return _opensim.ControlLinear_setKv(self, aKv)


    def getKv(self):
        """
        getKv(ControlLinear self) -> double

        Parameters:
            self: OpenSim::ControlLinear const *

        """
        return _opensim.ControlLinear_getKv(self)


    def getNumParameters(self):
        """
        getNumParameters(ControlLinear self) -> int

        Parameters:
            self: OpenSim::ControlLinear const *

        """
        return _opensim.ControlLinear_getNumParameters(self)


    def setParameterMin(self, aI, aMin):
        """
        setParameterMin(ControlLinear self, int aI, double aMin)

        Parameters:
            aI: int
            aMin: double

        """
        return _opensim.ControlLinear_setParameterMin(self, aI, aMin)


    def getParameterMin(self, aI):
        """
        getParameterMin(ControlLinear self, int aI) -> double

        Parameters:
            aI: int

        """
        return _opensim.ControlLinear_getParameterMin(self, aI)


    def setParameterMax(self, aI, aMax):
        """
        setParameterMax(ControlLinear self, int aI, double aMax)

        Parameters:
            aI: int
            aMax: double

        """
        return _opensim.ControlLinear_setParameterMax(self, aI, aMax)


    def getParameterMax(self, aI):
        """
        getParameterMax(ControlLinear self, int aI) -> double

        Parameters:
            aI: int

        """
        return _opensim.ControlLinear_getParameterMax(self, aI)


    def getParameterTime(self, aI):
        """
        getParameterTime(ControlLinear self, int aI) -> double

        Parameters:
            aI: int

        """
        return _opensim.ControlLinear_getParameterTime(self, aI)


    def getParameterNeighborhood(self, aI, rTLower, rTUpper):
        """
        getParameterNeighborhood(ControlLinear self, int aI, double & rTLower, double & rTUpper)

        Parameters:
            aI: int
            rTLower: double &
            rTUpper: double &

        """
        return _opensim.ControlLinear_getParameterNeighborhood(self, aI, rTLower, rTUpper)


    def getParameterList(self, *args):
        """
        getParameterList(ControlLinear self, double aT, ArrayInt rList) -> int

        Parameters:
            aT: double
            rList: OpenSim::Array< int > &

        getParameterList(ControlLinear self, double aT1, double aT2, ArrayInt rList) -> int

        Parameters:
            aT1: double
            aT2: double
            rList: OpenSim::Array< int > &

        """
        return _opensim.ControlLinear_getParameterList(self, *args)


    def setParameterValue(self, aI, aP):
        """
        setParameterValue(ControlLinear self, int aI, double aP)

        Parameters:
            aI: int
            aP: double

        """
        return _opensim.ControlLinear_setParameterValue(self, aI, aP)


    def getParameterValue(self, aI):
        """
        getParameterValue(ControlLinear self, int aI) -> double

        Parameters:
            aI: int

        """
        return _opensim.ControlLinear_getParameterValue(self, aI)


    def setControlValue(self, aT, aX):
        """
        setControlValue(ControlLinear self, double aT, double aX)

        Parameters:
            aT: double
            aX: double

        """
        return _opensim.ControlLinear_setControlValue(self, aT, aX)


    def getControlValue(self, aT):
        """
        getControlValue(ControlLinear self, double aT) -> double

        Parameters:
            aT: double

        """
        return _opensim.ControlLinear_getControlValue(self, aT)


    def getControlValueMin(self, aT=0.0):
        """
        getControlValueMin(ControlLinear self, double aT=0.0) -> double

        Parameters:
            aT: double

        getControlValueMin(ControlLinear self) -> double

        Parameters:
            self: OpenSim::ControlLinear *

        """
        return _opensim.ControlLinear_getControlValueMin(self, aT)


    def setControlValueMin(self, aT, aX):
        """
        setControlValueMin(ControlLinear self, double aT, double aX)

        Parameters:
            aT: double
            aX: double

        """
        return _opensim.ControlLinear_setControlValueMin(self, aT, aX)


    def getControlValueMax(self, aT=0.0):
        """
        getControlValueMax(ControlLinear self, double aT=0.0) -> double

        Parameters:
            aT: double

        getControlValueMax(ControlLinear self) -> double

        Parameters:
            self: OpenSim::ControlLinear *

        """
        return _opensim.ControlLinear_getControlValueMax(self, aT)


    def setControlValueMax(self, aT, aX):
        """
        setControlValueMax(ControlLinear self, double aT, double aX)

        Parameters:
            aT: double
            aX: double

        """
        return _opensim.ControlLinear_setControlValueMax(self, aT, aX)


    def clearControlNodes(self):
        """
        clearControlNodes(ControlLinear self)

        Parameters:
            self: OpenSim::ControlLinear *

        """
        return _opensim.ControlLinear_clearControlNodes(self)


    def getControlValues(self):
        """
        getControlValues(ControlLinear self) -> SetControlNodes

        Parameters:
            self: OpenSim::ControlLinear *

        """
        return _opensim.ControlLinear_getControlValues(self)


    def getControlMinValues(self):
        """
        getControlMinValues(ControlLinear self) -> SetControlNodes

        Parameters:
            self: OpenSim::ControlLinear *

        """
        return _opensim.ControlLinear_getControlMinValues(self)


    def getControlMaxValues(self):
        """
        getControlMaxValues(ControlLinear self) -> SetControlNodes

        Parameters:
            self: OpenSim::ControlLinear *

        """
        return _opensim.ControlLinear_getControlMaxValues(self)


    def insertNewValueNode(self, index, newNode):
        """
        insertNewValueNode(ControlLinear self, int index, ControlLinearNode newNode)

        Parameters:
            index: int
            newNode: OpenSim::ControlLinearNode const &

        """
        return _opensim.ControlLinear_insertNewValueNode(self, index, newNode)


    def insertNewMinNode(self, index, newNode):
        """
        insertNewMinNode(ControlLinear self, int index, ControlLinearNode newNode)

        Parameters:
            index: int
            newNode: OpenSim::ControlLinearNode const &

        """
        return _opensim.ControlLinear_insertNewMinNode(self, index, newNode)


    def insertNewMaxNode(self, index, newNode):
        """
        insertNewMaxNode(ControlLinear self, int index, ControlLinearNode newNode)

        Parameters:
            index: int
            newNode: OpenSim::ControlLinearNode const &

        """
        return _opensim.ControlLinear_insertNewMaxNode(self, index, newNode)


    def getFirstTime(self):
        """
        getFirstTime(ControlLinear self) -> double const

        Parameters:
            self: OpenSim::ControlLinear const *

        """
        return _opensim.ControlLinear_getFirstTime(self)


    def getLastTime(self):
        """
        getLastTime(ControlLinear self) -> double const

        Parameters:
            self: OpenSim::ControlLinear const *

        """
        return _opensim.ControlLinear_getLastTime(self)


    def simplify(self, *args):
        """
        simplify(ControlLinear self, PropertySet const & aProperties)

        Parameters:
            aProperties: PropertySet const &

        simplify(ControlLinear self, double const & cutoffFrequency, double const & distance) -> bool

        Parameters:
            cutoffFrequency: double const &
            distance: double const &

        """
        return _opensim.ControlLinear_simplify(self, *args)


    def filter(self, aT):
        """
        filter(ControlLinear self, double aT)

        Parameters:
            aT: double

        """
        return _opensim.ControlLinear_filter(self, aT)


    def Interpolate(aX1, aY1, aX2, aY2, aX):
        """
        Interpolate(double aX1, double aY1, double aX2, double aY2, double aX) -> double

        Parameters:
            aX1: double
            aY1: double
            aX2: double
            aY2: double
            aX: double

        """
        return _opensim.ControlLinear_Interpolate(aX1, aY1, aX2, aY2, aX)

    if _newclass:
        Interpolate = staticmethod(Interpolate)
    __swig_getmethods__["Interpolate"] = lambda x: Interpolate
ControlLinear_swigregister = _opensim.ControlLinear_swigregister
ControlLinear_swigregister(ControlLinear)

def ControlLinear_safeDownCast(obj):
    """
    ControlLinear_safeDownCast(OpenSimObject obj) -> ControlLinear

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ControlLinear_safeDownCast(obj)

def ControlLinear_getClassName():
    """ControlLinear_getClassName() -> std::string const &"""
    return _opensim.ControlLinear_getClassName()

def ControlLinear_Interpolate(aX1, aY1, aX2, aY2, aX):
    """
    ControlLinear_Interpolate(double aX1, double aY1, double aX2, double aY2, double aX) -> double

    Parameters:
        aX1: double
        aY1: double
        aX2: double
        aY2: double
        aX: double

    """
    return _opensim.ControlLinear_Interpolate(aX1, aY1, aX2, aY2, aX)

class PrescribedController(Controller):
    """Proxy of C++ OpenSim::PrescribedController class"""
    __swig_setmethods__ = {}
    for _s in [Controller]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrescribedController, name, value)
    __swig_getmethods__ = {}
    for _s in [Controller]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PrescribedController, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PrescribedController

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.PrescribedController_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(PrescribedController self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.PrescribedController_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.PrescribedController_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(PrescribedController self) -> PrescribedController

        Parameters:
            self: OpenSim::PrescribedController const *

        """
        return _opensim.PrescribedController_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PrescribedController self) -> std::string const &

        Parameters:
            self: OpenSim::PrescribedController const *

        """
        return _opensim.PrescribedController_getConcreteClassName(self)


    def copyProperty_ControlFunctions(self, source):
        """
        copyProperty_ControlFunctions(PrescribedController self, PrescribedController source)

        Parameters:
            source: OpenSim::PrescribedController::Self const &

        """
        return _opensim.PrescribedController_copyProperty_ControlFunctions(self, source)


    def append_ControlFunctions(self, value):
        """
        append_ControlFunctions(PrescribedController self, FunctionSet value) -> int

        Parameters:
            value: OpenSim::FunctionSet const &

        """
        return _opensim.PrescribedController_append_ControlFunctions(self, value)


    def constructProperty_ControlFunctions(self, initValue):
        """
        constructProperty_ControlFunctions(PrescribedController self, FunctionSet initValue)

        Parameters:
            initValue: OpenSim::FunctionSet const &

        """
        return _opensim.PrescribedController_constructProperty_ControlFunctions(self, initValue)


    def get_ControlFunctions(self, *args):
        """
        get_ControlFunctions(PrescribedController self, int i) -> FunctionSet

        Parameters:
            i: int

        get_ControlFunctions(PrescribedController self) -> FunctionSet

        Parameters:
            self: OpenSim::PrescribedController const *

        """
        return _opensim.PrescribedController_get_ControlFunctions(self, *args)


    def upd_ControlFunctions(self, *args):
        """
        upd_ControlFunctions(PrescribedController self, int i) -> FunctionSet

        Parameters:
            i: int

        upd_ControlFunctions(PrescribedController self) -> FunctionSet

        Parameters:
            self: OpenSim::PrescribedController *

        """
        return _opensim.PrescribedController_upd_ControlFunctions(self, *args)


    def set_ControlFunctions(self, *args):
        """
        set_ControlFunctions(PrescribedController self, int i, FunctionSet value)

        Parameters:
            i: int
            value: OpenSim::FunctionSet const &

        set_ControlFunctions(PrescribedController self, FunctionSet value)

        Parameters:
            value: OpenSim::FunctionSet const &

        """
        return _opensim.PrescribedController_set_ControlFunctions(self, *args)


    def copyProperty_controls_file(self, source):
        """
        copyProperty_controls_file(PrescribedController self, PrescribedController source)

        Parameters:
            source: OpenSim::PrescribedController::Self const &

        """
        return _opensim.PrescribedController_copyProperty_controls_file(self, source)


    def append_controls_file(self, value):
        """
        append_controls_file(PrescribedController self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.PrescribedController_append_controls_file(self, value)


    def constructProperty_controls_file(self, *args):
        """
        constructProperty_controls_file(PrescribedController self)
        constructProperty_controls_file(PrescribedController self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.PrescribedController_constructProperty_controls_file(self, *args)


    def get_controls_file(self, *args):
        """
        get_controls_file(PrescribedController self, int i) -> std::string const

        Parameters:
            i: int

        get_controls_file(PrescribedController self) -> std::string const &

        Parameters:
            self: OpenSim::PrescribedController const *

        """
        return _opensim.PrescribedController_get_controls_file(self, *args)


    def upd_controls_file(self, *args):
        """
        upd_controls_file(PrescribedController self, int i) -> std::string

        Parameters:
            i: int

        upd_controls_file(PrescribedController self) -> std::string &

        Parameters:
            self: OpenSim::PrescribedController *

        """
        return _opensim.PrescribedController_upd_controls_file(self, *args)


    def set_controls_file(self, *args):
        """
        set_controls_file(PrescribedController self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_controls_file(PrescribedController self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.PrescribedController_set_controls_file(self, *args)


    def copyProperty_interpolation_method(self, source):
        """
        copyProperty_interpolation_method(PrescribedController self, PrescribedController source)

        Parameters:
            source: OpenSim::PrescribedController::Self const &

        """
        return _opensim.PrescribedController_copyProperty_interpolation_method(self, source)


    def append_interpolation_method(self, value):
        """
        append_interpolation_method(PrescribedController self, int const & value) -> int

        Parameters:
            value: int const &

        """
        return _opensim.PrescribedController_append_interpolation_method(self, value)


    def constructProperty_interpolation_method(self, *args):
        """
        constructProperty_interpolation_method(PrescribedController self)
        constructProperty_interpolation_method(PrescribedController self, int const & initValue)

        Parameters:
            initValue: int const &

        """
        return _opensim.PrescribedController_constructProperty_interpolation_method(self, *args)


    def get_interpolation_method(self, *args):
        """
        get_interpolation_method(PrescribedController self, int i) -> int const

        Parameters:
            i: int

        get_interpolation_method(PrescribedController self) -> int const &

        Parameters:
            self: OpenSim::PrescribedController const *

        """
        return _opensim.PrescribedController_get_interpolation_method(self, *args)


    def upd_interpolation_method(self, *args):
        """
        upd_interpolation_method(PrescribedController self, int i) -> int

        Parameters:
            i: int

        upd_interpolation_method(PrescribedController self) -> int &

        Parameters:
            self: OpenSim::PrescribedController *

        """
        return _opensim.PrescribedController_upd_interpolation_method(self, *args)


    def set_interpolation_method(self, *args):
        """
        set_interpolation_method(PrescribedController self, int i, int const & value)

        Parameters:
            i: int
            value: int const &

        set_interpolation_method(PrescribedController self, int const & value)

        Parameters:
            value: int const &

        """
        return _opensim.PrescribedController_set_interpolation_method(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::PrescribedController self) -> PrescribedController
        __init__(OpenSim::PrescribedController self, std::string const & controlsFileName, int interpMethodType=1) -> PrescribedController

        Parameters:
            controlsFileName: std::string const &
            interpMethodType: int

        __init__(OpenSim::PrescribedController self, std::string const & controlsFileName) -> PrescribedController

        Parameters:
            controlsFileName: std::string const &

        """
        this = _opensim.new_PrescribedController(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_PrescribedController
    __del__ = lambda self: None

    def computeControls(self, s, controls):
        """
        computeControls(PrescribedController self, State s, Vector controls)

        Parameters:
            s: SimTK::State const &
            controls: SimTK::Vector &

        """
        return _opensim.PrescribedController_computeControls(self, s, controls)


    def prescribeControlForActuator(self, *args):
        """
        prescribeControlForActuator(PrescribedController self, int index, Function prescribedFunction)

        Parameters:
            index: int
            prescribedFunction: OpenSim::Function *

        prescribeControlForActuator(PrescribedController self, std::string const actName, Function prescribedFunction)

        Parameters:
            actName: std::string const
            prescribedFunction: OpenSim::Function *

        """
        return _opensim.PrescribedController_prescribeControlForActuator(self, *args)

PrescribedController_swigregister = _opensim.PrescribedController_swigregister
PrescribedController_swigregister(PrescribedController)

def PrescribedController_safeDownCast(obj):
    """
    PrescribedController_safeDownCast(OpenSimObject obj) -> PrescribedController

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.PrescribedController_safeDownCast(obj)

def PrescribedController_getClassName():
    """PrescribedController_getClassName() -> std::string const &"""
    return _opensim.PrescribedController_getClassName()

class Manager(_object):
    """Proxy of C++ OpenSim::Manager class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Manager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Manager, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _opensim.delete_Manager
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Manager self, Model arg2, SimTK::Integrator & arg3) -> Manager

        Parameters:
            arg2: OpenSim::Model &
            arg3: SimTK::Integrator &

        __init__(OpenSim::Manager self, Model aModel) -> Manager

        Parameters:
            aModel: OpenSim::Model &

        __init__(OpenSim::Manager self) -> Manager
        """
        this = _opensim.new_Manager(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setSessionName(self, name):
        """
        setSessionName(Manager self, std::string const & name)

        Parameters:
            name: std::string const &

        """
        return _opensim.Manager_setSessionName(self, name)


    def setModel(self, aModel):
        """
        setModel(Manager self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.Manager_setModel(self, aModel)


    def getSessionName(self):
        """
        getSessionName(Manager self) -> std::string const &

        Parameters:
            self: OpenSim::Manager const *

        """
        return _opensim.Manager_getSessionName(self)


    def toString(self):
        """
        toString(Manager self) -> std::string const &

        Parameters:
            self: OpenSim::Manager const *

        """
        return _opensim.Manager_toString(self)


    def setPerformAnalyses(self, performAnalyses):
        """
        setPerformAnalyses(Manager self, bool performAnalyses)

        Parameters:
            performAnalyses: bool

        """
        return _opensim.Manager_setPerformAnalyses(self, performAnalyses)


    def setWriteToStorage(self, writeToStorage):
        """
        setWriteToStorage(Manager self, bool writeToStorage)

        Parameters:
            writeToStorage: bool

        """
        return _opensim.Manager_setWriteToStorage(self, writeToStorage)


    def getIntegrator(self):
        """
        getIntegrator(Manager self) -> SimTK::Integrator &

        Parameters:
            self: OpenSim::Manager const *

        """
        return _opensim.Manager_getIntegrator(self)


    def setIntegrator(self, arg2):
        """
        setIntegrator(Manager self, SimTK::Integrator * arg2)

        Parameters:
            arg2: SimTK::Integrator *

        """
        return _opensim.Manager_setIntegrator(self, arg2)


    def setInitialTime(self, aTI):
        """
        setInitialTime(Manager self, double aTI)

        Parameters:
            aTI: double

        """
        return _opensim.Manager_setInitialTime(self, aTI)


    def getInitialTime(self):
        """
        getInitialTime(Manager self) -> double

        Parameters:
            self: OpenSim::Manager const *

        """
        return _opensim.Manager_getInitialTime(self)


    def setFinalTime(self, aTF):
        """
        setFinalTime(Manager self, double aTF)

        Parameters:
            aTF: double

        """
        return _opensim.Manager_setFinalTime(self, aTF)


    def getFinalTime(self):
        """
        getFinalTime(Manager self) -> double

        Parameters:
            self: OpenSim::Manager const *

        """
        return _opensim.Manager_getFinalTime(self)


    def setFirstDT(self, aDT):
        """
        setFirstDT(Manager self, double aDT)

        Parameters:
            aDT: double

        """
        return _opensim.Manager_setFirstDT(self, aDT)


    def getFirstDT(self):
        """
        getFirstDT(Manager self) -> double

        Parameters:
            self: OpenSim::Manager const *

        """
        return _opensim.Manager_getFirstDT(self)


    def setUseSpecifiedDT(self, aTrueFalse):
        """
        setUseSpecifiedDT(Manager self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.Manager_setUseSpecifiedDT(self, aTrueFalse)


    def getUseSpecifiedDT(self):
        """
        getUseSpecifiedDT(Manager self) -> bool

        Parameters:
            self: OpenSim::Manager const *

        """
        return _opensim.Manager_getUseSpecifiedDT(self)


    def setUseConstantDT(self, aTrueFalse):
        """
        setUseConstantDT(Manager self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.Manager_setUseConstantDT(self, aTrueFalse)


    def getUseConstantDT(self):
        """
        getUseConstantDT(Manager self) -> bool

        Parameters:
            self: OpenSim::Manager const *

        """
        return _opensim.Manager_getUseConstantDT(self)


    def getDTArray(self):
        """
        getDTArray(Manager self) -> ArrayDouble

        Parameters:
            self: OpenSim::Manager *

        """
        return _opensim.Manager_getDTArray(self)


    def setDTArray(self, aN, aDT, aTI=0.0):
        """
        setDTArray(Manager self, int aN, double const [] aDT, double aTI=0.0)

        Parameters:
            aN: int
            aDT: double const []
            aTI: double

        setDTArray(Manager self, int aN, double const [] aDT)

        Parameters:
            aN: int
            aDT: double const []

        """
        return _opensim.Manager_setDTArray(self, aN, aDT, aTI)


    def getDTArrayDT(self, aStep):
        """
        getDTArrayDT(Manager self, int aStep) -> double

        Parameters:
            aStep: int

        """
        return _opensim.Manager_getDTArrayDT(self, aStep)


    def printDTArray(self, aFileName=None):
        """
        printDTArray(Manager self, char const * aFileName=None)

        Parameters:
            aFileName: char const *

        printDTArray(Manager self)

        Parameters:
            self: OpenSim::Manager *

        """
        return _opensim.Manager_printDTArray(self, aFileName)


    def getTimeArray(self):
        """
        getTimeArray(Manager self) -> ArrayDouble

        Parameters:
            self: OpenSim::Manager *

        """
        return _opensim.Manager_getTimeArray(self)


    def getTimeArrayTime(self, aStep):
        """
        getTimeArrayTime(Manager self, int aStep) -> double

        Parameters:
            aStep: int

        """
        return _opensim.Manager_getTimeArrayTime(self, aStep)


    def getTimeArrayStep(self, aTime):
        """
        getTimeArrayStep(Manager self, double aTime) -> int

        Parameters:
            aTime: double

        """
        return _opensim.Manager_getTimeArrayStep(self, aTime)


    def printTimeArray(self, aFileName=None):
        """
        printTimeArray(Manager self, char const * aFileName=None)

        Parameters:
            aFileName: char const *

        printTimeArray(Manager self)

        Parameters:
            self: OpenSim::Manager *

        """
        return _opensim.Manager_printTimeArray(self, aFileName)


    def resetTimeAndDTArrays(self, aTime):
        """
        resetTimeAndDTArrays(Manager self, double aTime)

        Parameters:
            aTime: double

        """
        return _opensim.Manager_resetTimeAndDTArrays(self, aTime)


    def getNextTimeArrayTime(self, aTime):
        """
        getNextTimeArrayTime(Manager self, double aTime) -> double

        Parameters:
            aTime: double

        """
        return _opensim.Manager_getNextTimeArrayTime(self, aTime)


    def setSystem(self, system):
        """
        setSystem(Manager self, SimTK::System * system)

        Parameters:
            system: SimTK::System *

        """
        return _opensim.Manager_setSystem(self, system)


    def integrate(self, s, dtFirst=1.0e-6):
        """
        integrate(Manager self, State s, double dtFirst=1.0e-6) -> bool

        Parameters:
            s: SimTK::State &
            dtFirst: double

        integrate(Manager self, State s) -> bool

        Parameters:
            s: SimTK::State &

        """
        return _opensim.Manager_integrate(self, s, dtFirst)


    def doIntegration(self, s, step, dtFirst):
        """
        doIntegration(Manager self, State s, int step, double dtFirst) -> bool

        Parameters:
            s: SimTK::State &
            step: int
            dtFirst: double

        """
        return _opensim.Manager_doIntegration(self, s, step, dtFirst)


    def initialize(self, s, dt):
        """
        initialize(Manager self, State s, double dt)

        Parameters:
            s: SimTK::State &
            dt: double

        """
        return _opensim.Manager_initialize(self, s, dt)


    def finalize(self, s):
        """
        finalize(Manager self, State s)

        Parameters:
            s: SimTK::State &

        """
        return _opensim.Manager_finalize(self, s)


    def getFixedStepSize(self, tArrayStep):
        """
        getFixedStepSize(Manager self, int tArrayStep) -> double

        Parameters:
            tArrayStep: int

        """
        return _opensim.Manager_getFixedStepSize(self, tArrayStep)


    def hasStateStorage(self):
        """
        hasStateStorage(Manager self) -> bool

        Parameters:
            self: OpenSim::Manager const *

        """
        return _opensim.Manager_hasStateStorage(self)


    def setStateStorage(self, aStorage):
        """
        setStateStorage(Manager self, Storage aStorage)

        Parameters:
            aStorage: OpenSim::Storage &

        """
        return _opensim.Manager_setStateStorage(self, aStorage)


    def getStateStorage(self):
        """
        getStateStorage(Manager self) -> Storage

        Parameters:
            self: OpenSim::Manager const *

        """
        return _opensim.Manager_getStateStorage(self)


    def halt(self):
        """
        halt(Manager self)

        Parameters:
            self: OpenSim::Manager *

        """
        return _opensim.Manager_halt(self)


    def clearHalt(self):
        """
        clearHalt(Manager self)

        Parameters:
            self: OpenSim::Manager *

        """
        return _opensim.Manager_clearHalt(self)


    def checkHalt(self):
        """
        checkHalt(Manager self) -> bool

        Parameters:
            self: OpenSim::Manager *

        """
        return _opensim.Manager_checkHalt(self)

Manager_swigregister = _opensim.Manager_swigregister
Manager_swigregister(Manager)

class AbstractTool(OpenSimObject):
    """Proxy of C++ OpenSim::AbstractTool class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractTool, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractTool, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> AbstractTool

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.AbstractTool_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(AbstractTool self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.AbstractTool_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.AbstractTool_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(AbstractTool self) -> AbstractTool

        Parameters:
            self: OpenSim::AbstractTool const *

        """
        return _opensim.AbstractTool_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(AbstractTool self) -> std::string const &

        Parameters:
            self: OpenSim::AbstractTool const *

        """
        return _opensim.AbstractTool_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_AbstractTool
    __del__ = lambda self: None

    def setModel(self, aModel):
        """
        setModel(AbstractTool self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.AbstractTool_setModel(self, aModel)


    def getModel(self):
        """
        getModel(AbstractTool self) -> Model

        Parameters:
            self: OpenSim::AbstractTool const *

        """
        return _opensim.AbstractTool_getModel(self)


    def getReplaceForceSet(self):
        """
        getReplaceForceSet(AbstractTool self) -> bool

        Parameters:
            self: OpenSim::AbstractTool const *

        """
        return _opensim.AbstractTool_getReplaceForceSet(self)


    def setReplaceForceSet(self, aReplace):
        """
        setReplaceForceSet(AbstractTool self, bool aReplace)

        Parameters:
            aReplace: bool

        """
        return _opensim.AbstractTool_setReplaceForceSet(self, aReplace)


    def getNextAvailableForceName(self, *args):
        """
        getNextAvailableForceName(AbstractTool self, std::string const prefix) -> std::string

        Parameters:
            prefix: std::string const

        getNextAvailableForceName(AbstractTool self) -> std::string

        Parameters:
            self: OpenSim::AbstractTool const *

        """
        return _opensim.AbstractTool_getNextAvailableForceName(self, *args)


    def getExternalLoads(self):
        """
        getExternalLoads(AbstractTool self) -> ExternalLoads

        Parameters:
            self: OpenSim::AbstractTool const *

        """
        return _opensim.AbstractTool_getExternalLoads(self)


    def updExternalLoads(self):
        """
        updExternalLoads(AbstractTool self) -> ExternalLoads

        Parameters:
            self: OpenSim::AbstractTool *

        """
        return _opensim.AbstractTool_updExternalLoads(self)


    def setExternalLoads(self, el):
        """
        setExternalLoads(AbstractTool self, ExternalLoads el)

        Parameters:
            el: OpenSim::ExternalLoads &

        """
        return _opensim.AbstractTool_setExternalLoads(self, el)


    def getExternalLoadsFileName(self):
        """
        getExternalLoadsFileName(AbstractTool self) -> std::string const &

        Parameters:
            self: OpenSim::AbstractTool const *

        """
        return _opensim.AbstractTool_getExternalLoadsFileName(self)


    def setExternalLoadsFileName(self, aFileName):
        """
        setExternalLoadsFileName(AbstractTool self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.AbstractTool_setExternalLoadsFileName(self, aFileName)


    def getForceSetFiles(self):
        """
        getForceSetFiles(AbstractTool self) -> ArrayStr

        Parameters:
            self: OpenSim::AbstractTool *

        """
        return _opensim.AbstractTool_getForceSetFiles(self)


    def setForceSetFiles(self, aForceSetFiles):
        """
        setForceSetFiles(AbstractTool self, ArrayStr aForceSetFiles)

        Parameters:
            aForceSetFiles: OpenSim::Array< std::string > const &

        """
        return _opensim.AbstractTool_setForceSetFiles(self, aForceSetFiles)


    def getOutputPrecision(self):
        """
        getOutputPrecision(AbstractTool self) -> int

        Parameters:
            self: OpenSim::AbstractTool const *

        """
        return _opensim.AbstractTool_getOutputPrecision(self)


    def setOutputPrecision(self, aPrecision):
        """
        setOutputPrecision(AbstractTool self, int aPrecision)

        Parameters:
            aPrecision: int

        """
        return _opensim.AbstractTool_setOutputPrecision(self, aPrecision)


    def getAnalysisSet(self):
        """
        getAnalysisSet(AbstractTool self) -> AnalysisSet

        Parameters:
            self: OpenSim::AbstractTool const *

        """
        return _opensim.AbstractTool_getAnalysisSet(self)


    def getResultsDir(self):
        """
        getResultsDir(AbstractTool self) -> std::string const &

        Parameters:
            self: OpenSim::AbstractTool const *

        """
        return _opensim.AbstractTool_getResultsDir(self)


    def setResultsDir(self, aString):
        """
        setResultsDir(AbstractTool self, std::string const & aString)

        Parameters:
            aString: std::string const &

        """
        return _opensim.AbstractTool_setResultsDir(self, aString)


    def getInitialTime(self):
        """
        getInitialTime(AbstractTool self) -> double

        Parameters:
            self: OpenSim::AbstractTool const *

        """
        return _opensim.AbstractTool_getInitialTime(self)


    def getFinalTime(self):
        """
        getFinalTime(AbstractTool self) -> double

        Parameters:
            self: OpenSim::AbstractTool const *

        """
        return _opensim.AbstractTool_getFinalTime(self)


    def setInitialTime(self, aInitialTime):
        """
        setInitialTime(AbstractTool self, double const aInitialTime)

        Parameters:
            aInitialTime: double const

        """
        return _opensim.AbstractTool_setInitialTime(self, aInitialTime)


    def setFinalTime(self, aFinalTime):
        """
        setFinalTime(AbstractTool self, double const aFinalTime)

        Parameters:
            aFinalTime: double const

        """
        return _opensim.AbstractTool_setFinalTime(self, aFinalTime)


    def getStartTime(self):
        """
        getStartTime(AbstractTool self) -> double

        Parameters:
            self: OpenSim::AbstractTool const *

        """
        return _opensim.AbstractTool_getStartTime(self)


    def setStartTime(self, aStartTime):
        """
        setStartTime(AbstractTool self, double const aStartTime)

        Parameters:
            aStartTime: double const

        """
        return _opensim.AbstractTool_setStartTime(self, aStartTime)


    def getMaximumNumberOfSteps(self):
        """
        getMaximumNumberOfSteps(AbstractTool self) -> int

        Parameters:
            self: OpenSim::AbstractTool const *

        """
        return _opensim.AbstractTool_getMaximumNumberOfSteps(self)


    def setMaximumNumberOfSteps(self, aMaxSteps):
        """
        setMaximumNumberOfSteps(AbstractTool self, int aMaxSteps)

        Parameters:
            aMaxSteps: int

        """
        return _opensim.AbstractTool_setMaximumNumberOfSteps(self, aMaxSteps)


    def getMaxDT(self):
        """
        getMaxDT(AbstractTool self) -> double

        Parameters:
            self: OpenSim::AbstractTool const *

        """
        return _opensim.AbstractTool_getMaxDT(self)


    def setMaxDT(self, aMaxDT):
        """
        setMaxDT(AbstractTool self, double aMaxDT)

        Parameters:
            aMaxDT: double

        """
        return _opensim.AbstractTool_setMaxDT(self, aMaxDT)


    def getMinDT(self):
        """
        getMinDT(AbstractTool self) -> double

        Parameters:
            self: OpenSim::AbstractTool const *

        """
        return _opensim.AbstractTool_getMinDT(self)


    def setMinDT(self, aMinDT):
        """
        setMinDT(AbstractTool self, double aMinDT)

        Parameters:
            aMinDT: double

        """
        return _opensim.AbstractTool_setMinDT(self, aMinDT)


    def getErrorTolerance(self):
        """
        getErrorTolerance(AbstractTool self) -> double

        Parameters:
            self: OpenSim::AbstractTool const *

        """
        return _opensim.AbstractTool_getErrorTolerance(self)


    def setErrorTolerance(self, aErrorTolerance):
        """
        setErrorTolerance(AbstractTool self, double aErrorTolerance)

        Parameters:
            aErrorTolerance: double

        """
        return _opensim.AbstractTool_setErrorTolerance(self, aErrorTolerance)


    def getModelFilename(self):
        """
        getModelFilename(AbstractTool self) -> std::string const &

        Parameters:
            self: OpenSim::AbstractTool const *

        """
        return _opensim.AbstractTool_getModelFilename(self)


    def setModelFilename(self, aModelFile):
        """
        setModelFilename(AbstractTool self, std::string const & aModelFile)

        Parameters:
            aModelFile: std::string const &

        """
        return _opensim.AbstractTool_setModelFilename(self, aModelFile)


    def getSolveForEquilibrium(self):
        """
        getSolveForEquilibrium(AbstractTool self) -> bool

        Parameters:
            self: OpenSim::AbstractTool const *

        """
        return _opensim.AbstractTool_getSolveForEquilibrium(self)


    def setSolveForEquilibrium(self, aSolve):
        """
        setSolveForEquilibrium(AbstractTool self, bool aSolve)

        Parameters:
            aSolve: bool

        """
        return _opensim.AbstractTool_setSolveForEquilibrium(self, aSolve)


    def loadModel(self, aToolSetupFileName, rOriginalForceSet=None):
        """
        loadModel(AbstractTool self, std::string const & aToolSetupFileName, ForceSet rOriginalForceSet=None)

        Parameters:
            aToolSetupFileName: std::string const &
            rOriginalForceSet: OpenSim::ForceSet *

        loadModel(AbstractTool self, std::string const & aToolSetupFileName)

        Parameters:
            aToolSetupFileName: std::string const &

        """
        return _opensim.AbstractTool_loadModel(self, aToolSetupFileName, rOriginalForceSet)


    def updateModelForces(self, model, aToolSetupFileName, rOriginalForceSet=None):
        """
        updateModelForces(AbstractTool self, Model model, std::string const & aToolSetupFileName, ForceSet rOriginalForceSet=None)

        Parameters:
            model: OpenSim::Model &
            aToolSetupFileName: std::string const &
            rOriginalForceSet: OpenSim::ForceSet *

        updateModelForces(AbstractTool self, Model model, std::string const & aToolSetupFileName)

        Parameters:
            model: OpenSim::Model &
            aToolSetupFileName: std::string const &

        """
        return _opensim.AbstractTool_updateModelForces(self, model, aToolSetupFileName, rOriginalForceSet)


    def addAnalysisSetToModel(self):
        """
        addAnalysisSetToModel(AbstractTool self)

        Parameters:
            self: OpenSim::AbstractTool *

        """
        return _opensim.AbstractTool_addAnalysisSetToModel(self)


    def addControllerSetToModel(self):
        """
        addControllerSetToModel(AbstractTool self)

        Parameters:
            self: OpenSim::AbstractTool *

        """
        return _opensim.AbstractTool_addControllerSetToModel(self)


    def removeControllerSetFromModel(self):
        """
        removeControllerSetFromModel(AbstractTool self)

        Parameters:
            self: OpenSim::AbstractTool *

        """
        return _opensim.AbstractTool_removeControllerSetFromModel(self)


    def removeAnalysisSetFromModel(self):
        """
        removeAnalysisSetFromModel(AbstractTool self)

        Parameters:
            self: OpenSim::AbstractTool *

        """
        return _opensim.AbstractTool_removeAnalysisSetFromModel(self)


    def setToolOwnsModel(self, trueFalse):
        """
        setToolOwnsModel(AbstractTool self, bool const trueFalse)

        Parameters:
            trueFalse: bool const

        """
        return _opensim.AbstractTool_setToolOwnsModel(self, trueFalse)


    def getToolOwnsModel(self):
        """
        getToolOwnsModel(AbstractTool self) -> bool const

        Parameters:
            self: OpenSim::AbstractTool const *

        """
        return _opensim.AbstractTool_getToolOwnsModel(self)


    def getControlsFileName(self):
        """
        getControlsFileName(AbstractTool self) -> std::string

        Parameters:
            self: OpenSim::AbstractTool const *

        """
        return _opensim.AbstractTool_getControlsFileName(self)


    def setControlsFileName(self, controlsFilename):
        """
        setControlsFileName(AbstractTool self, std::string const & controlsFilename)

        Parameters:
            controlsFilename: std::string const &

        """
        return _opensim.AbstractTool_setControlsFileName(self, controlsFilename)


    def run(self):
        """
        run(AbstractTool self) -> bool

        Parameters:
            self: OpenSim::AbstractTool *

        """
        return _opensim.AbstractTool_run(self)


    def printResults(self, *args):
        """
        printResults(AbstractTool self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension)

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double
            aExtension: std::string const &

        printResults(AbstractTool self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0)

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double

        printResults(AbstractTool self, std::string const & aBaseName, std::string const & aDir)

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &

        printResults(AbstractTool self, std::string const & aBaseName)

        Parameters:
            aBaseName: std::string const &

        """
        return _opensim.AbstractTool_printResults(self, *args)


    def createExternalLoads(self, aExternalLoadsFileName, aModel, loadKinematics=None):
        """
        createExternalLoads(AbstractTool self, std::string const & aExternalLoadsFileName, Model aModel, Storage loadKinematics=None) -> bool

        Parameters:
            aExternalLoadsFileName: std::string const &
            aModel: OpenSim::Model &
            loadKinematics: OpenSim::Storage const *

        createExternalLoads(AbstractTool self, std::string const & aExternalLoadsFileName, Model aModel) -> bool

        Parameters:
            aExternalLoadsFileName: std::string const &
            aModel: OpenSim::Model &

        """
        return _opensim.AbstractTool_createExternalLoads(self, aExternalLoadsFileName, aModel, loadKinematics)


    def updateFromXMLNode(self, aNode, versionNumber):
        """
        updateFromXMLNode(AbstractTool self, SimTK::Xml::Element & aNode, int versionNumber)

        Parameters:
            aNode: SimTK::Xml::Element &
            versionNumber: int

        """
        return _opensim.AbstractTool_updateFromXMLNode(self, aNode, versionNumber)


    def loadQStorage(self, statesFileName, rQStore):
        """
        loadQStorage(AbstractTool self, std::string const & statesFileName, Storage rQStore)

        Parameters:
            statesFileName: std::string const &
            rQStore: OpenSim::Storage &

        """
        return _opensim.AbstractTool_loadQStorage(self, statesFileName, rQStore)

AbstractTool_swigregister = _opensim.AbstractTool_swigregister
AbstractTool_swigregister(AbstractTool)

def AbstractTool_safeDownCast(obj):
    """
    AbstractTool_safeDownCast(OpenSimObject obj) -> AbstractTool

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.AbstractTool_safeDownCast(obj)

def AbstractTool_getClassName():
    """AbstractTool_getClassName() -> std::string const &"""
    return _opensim.AbstractTool_getClassName()

class Marker(OpenSimObject):
    """Proxy of C++ OpenSim::Marker class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Marker, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Marker, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Marker

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Marker_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Marker self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Marker_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Marker_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Marker self) -> Marker

        Parameters:
            self: OpenSim::Marker const *

        """
        return _opensim.Marker_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Marker self) -> std::string const &

        Parameters:
            self: OpenSim::Marker const *

        """
        return _opensim.Marker_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::Marker self) -> Marker
        __init__(OpenSim::Marker self, Marker aMarker) -> Marker

        Parameters:
            aMarker: OpenSim::Marker const &

        """
        this = _opensim.new_Marker(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_Marker
    __del__ = lambda self: None

    def deleteMarker(aMarker):
        """
        deleteMarker(Marker aMarker)

        Parameters:
            aMarker: OpenSim::Marker *

        """
        return _opensim.Marker_deleteMarker(aMarker)

    if _newclass:
        deleteMarker = staticmethod(deleteMarker)
    __swig_getmethods__["deleteMarker"] = lambda x: deleteMarker

    def copyData(self, aMarker):
        """
        copyData(Marker self, Marker aMarker)

        Parameters:
            aMarker: OpenSim::Marker const &

        """
        return _opensim.Marker_copyData(self, aMarker)


    def updateFromMarker(self, aMarker):
        """
        updateFromMarker(Marker self, Marker aMarker)

        Parameters:
            aMarker: OpenSim::Marker const &

        """
        return _opensim.Marker_updateFromMarker(self, aMarker)


    def getOffset(self, *args):
        """
        getOffset(Marker self, Vec3 rOffset)

        Parameters:
            rOffset: SimTK::Vec3 &

        getOffset(Marker self) -> Vec3
        getOffset(Marker self, double [] rOffset)

        Parameters:
            rOffset: double []

        """
        return _opensim.Marker_getOffset(self, *args)


    def setOffset(self, *args):
        """
        setOffset(Marker self, Vec3 aOffset) -> bool

        Parameters:
            aOffset: SimTK::Vec3 const &

        setOffset(Marker self, double const [3] aOffset) -> bool

        Parameters:
            aOffset: double const [3]

        """
        return _opensim.Marker_setOffset(self, *args)


    def getOffsetUseDefault(self):
        """
        getOffsetUseDefault(Marker self) -> bool

        Parameters:
            self: OpenSim::Marker const *

        """
        return _opensim.Marker_getOffsetUseDefault(self)


    def getFixed(self):
        """
        getFixed(Marker self) -> bool

        Parameters:
            self: OpenSim::Marker const *

        """
        return _opensim.Marker_getFixed(self)


    def setFixed(self, aFixed):
        """
        setFixed(Marker self, bool aFixed) -> bool

        Parameters:
            aFixed: bool

        """
        return _opensim.Marker_setFixed(self, aFixed)


    def getFixedUseDefault(self):
        """
        getFixedUseDefault(Marker self) -> bool

        Parameters:
            self: OpenSim::Marker const *

        """
        return _opensim.Marker_getFixedUseDefault(self)


    def getBodyName(self):
        """
        getBodyName(Marker self) -> std::string const &

        Parameters:
            self: OpenSim::Marker const *

        """
        return _opensim.Marker_getBodyName(self)


    def setBodyName(self, aName):
        """
        setBodyName(Marker self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.Marker_setBodyName(self, aName)


    def getBodyNameUseDefault(self):
        """
        getBodyNameUseDefault(Marker self) -> bool

        Parameters:
            self: OpenSim::Marker const *

        """
        return _opensim.Marker_getBodyNameUseDefault(self)


    def setBodyNameUseDefault(self, aValue):
        """
        setBodyNameUseDefault(Marker self, bool aValue) -> bool

        Parameters:
            aValue: bool

        """
        return _opensim.Marker_setBodyNameUseDefault(self, aValue)


    def getBody(self):
        """
        getBody(Marker self) -> Body

        Parameters:
            self: OpenSim::Marker const *

        """
        return _opensim.Marker_getBody(self)


    def changeBody(self, aBody):
        """
        changeBody(Marker self, Body aBody)

        Parameters:
            aBody: OpenSim::Body &

        """
        return _opensim.Marker_changeBody(self, aBody)


    def changeBodyPreserveLocation(self, s, aBody):
        """
        changeBodyPreserveLocation(Marker self, State s, Body aBody)

        Parameters:
            s: SimTK::State const &
            aBody: OpenSim::Body &

        """
        return _opensim.Marker_changeBodyPreserveLocation(self, s, aBody)


    def scale(self, aScaleFactors):
        """
        scale(Marker self, Vec3 aScaleFactors)

        Parameters:
            aScaleFactors: SimTK::Vec3 const &

        """
        return _opensim.Marker_scale(self, aScaleFactors)


    def connectMarkerToModel(self, aModel):
        """
        connectMarkerToModel(Marker self, Model aModel)

        Parameters:
            aModel: OpenSim::Model const &

        """
        return _opensim.Marker_connectMarkerToModel(self, aModel)


    def updateGeometry(self):
        """
        updateGeometry(Marker self)

        Parameters:
            self: OpenSim::Marker *

        """
        return _opensim.Marker_updateGeometry(self)


    def getDisplayer(self):
        """
        getDisplayer(Marker self) -> VisibleObject

        Parameters:
            self: OpenSim::Marker const *

        """
        return _opensim.Marker_getDisplayer(self)


    def updDisplayer(self):
        """
        updDisplayer(Marker self) -> VisibleObject

        Parameters:
            self: OpenSim::Marker *

        """
        return _opensim.Marker_updDisplayer(self)


    def removeSelfFromDisplay(self):
        """
        removeSelfFromDisplay(Marker self)

        Parameters:
            self: OpenSim::Marker *

        """
        return _opensim.Marker_removeSelfFromDisplay(self)


    def isVirtual(self):
        """
        isVirtual(Marker self) -> bool const

        Parameters:
            self: OpenSim::Marker *

        """
        return _opensim.Marker_isVirtual(self)


    def setVirtual(self, aTrueFalse):
        """
        setVirtual(Marker self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.Marker_setVirtual(self, aTrueFalse)

Marker_swigregister = _opensim.Marker_swigregister
Marker_swigregister(Marker)

def Marker_safeDownCast(obj):
    """
    Marker_safeDownCast(OpenSimObject obj) -> Marker

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Marker_safeDownCast(obj)

def Marker_getClassName():
    """Marker_getClassName() -> std::string const &"""
    return _opensim.Marker_getClassName()

def Marker_deleteMarker(aMarker):
    """
    Marker_deleteMarker(Marker aMarker)

    Parameters:
        aMarker: OpenSim::Marker *

    """
    return _opensim.Marker_deleteMarker(aMarker)

class SetMarkers(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::Marker)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetMarkers, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetMarkers, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetMarkers

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetMarkers_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetMarkers self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetMarkers_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetMarkers_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetMarkers self) -> SetMarkers

        Parameters:
            self: OpenSim::Set< OpenSim::Marker > const *

        """
        return _opensim.SetMarkers_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetMarkers self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::Marker > const *

        """
        return _opensim.SetMarkers_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetMarkers
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Marker)> self) -> SetMarkers
        __init__(OpenSim::Set<(OpenSim::Marker)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetMarkers

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Marker)> self, std::string const & aFileName) -> SetMarkers

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Marker)> self, SetMarkers aSet) -> SetMarkers

        Parameters:
            aSet: OpenSim::Set< OpenSim::Marker > const &

        """
        this = _opensim.new_SetMarkers(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetMarkers self)

        Parameters:
            self: OpenSim::Set< OpenSim::Marker > *

        """
        return _opensim.SetMarkers_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetMarkers self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetMarkers_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetMarkers self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetMarkers_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetMarkers self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Marker > const *

        """
        return _opensim.SetMarkers_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetMarkers self, Marker aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::Marker const *
            aStartIndex: int

        getIndex(SetMarkers self, Marker aObject) -> int

        Parameters:
            aObject: OpenSim::Marker const *

        getIndex(SetMarkers self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetMarkers self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetMarkers_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetMarkers self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetMarkers_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetMarkers self, Marker aObject) -> bool

        Parameters:
            aObject: OpenSim::Marker *

        """
        return _opensim.SetMarkers_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetMarkers self, Marker aObject) -> bool

        Parameters:
            aObject: OpenSim::Marker const &

        """
        return _opensim.SetMarkers_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetMarkers self, int aIndex, Marker aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Marker *

        """
        return _opensim.SetMarkers_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetMarkers self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetMarkers self, Marker aObject) -> bool

        Parameters:
            aObject: OpenSim::Marker const *

        """
        return _opensim.SetMarkers_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetMarkers self)

        Parameters:
            self: OpenSim::Set< OpenSim::Marker > *

        """
        return _opensim.SetMarkers_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetMarkers self, int aIndex, Marker aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Marker *
            preserveGroups: bool

        set(SetMarkers self, int aIndex, Marker aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Marker *

        """
        return _opensim.SetMarkers_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetMarkers self, int aIndex) -> Marker

        Parameters:
            aIndex: int

        get(SetMarkers self, std::string const & aName) -> Marker

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetMarkers_get(self, *args)


    def contains(self, aName):
        """
        contains(SetMarkers self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetMarkers_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetMarkers self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetMarkers_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetMarkers self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Marker > const *

        """
        return _opensim.SetMarkers_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetMarkers self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetMarkers_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetMarkers self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetMarkers_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetMarkers self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetMarkers_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetMarkers self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetMarkers_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetMarkers self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetMarkers_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetMarkers self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetMarkers self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetMarkers_getGroup(self, *args)

SetMarkers_swigregister = _opensim.SetMarkers_swigregister
SetMarkers_swigregister(SetMarkers)

def SetMarkers_safeDownCast(obj):
    """
    SetMarkers_safeDownCast(OpenSimObject obj) -> SetMarkers

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetMarkers_safeDownCast(obj)

def SetMarkers_getClassName():
    """SetMarkers_getClassName() -> std::string const &"""
    return _opensim.SetMarkers_getClassName()

class MarkerSet(SetMarkers):
    """Proxy of C++ OpenSim::MarkerSet class"""
    __swig_setmethods__ = {}
    for _s in [SetMarkers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarkerSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetMarkers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarkerSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MarkerSet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.MarkerSet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(MarkerSet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.MarkerSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.MarkerSet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(MarkerSet self) -> MarkerSet

        Parameters:
            self: OpenSim::MarkerSet const *

        """
        return _opensim.MarkerSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MarkerSet self) -> std::string const &

        Parameters:
            self: OpenSim::MarkerSet const *

        """
        return _opensim.MarkerSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::MarkerSet self) -> MarkerSet
        __init__(OpenSim::MarkerSet self, std::string const & aMarkersFileName) -> MarkerSet

        Parameters:
            aMarkersFileName: std::string const &

        __init__(OpenSim::MarkerSet self, MarkerSet aMarkerSet) -> MarkerSet

        Parameters:
            aMarkerSet: OpenSim::MarkerSet const &

        """
        this = _opensim.new_MarkerSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_MarkerSet
    __del__ = lambda self: None

    def connectMarkersToModel(self, aModel):
        """
        connectMarkersToModel(MarkerSet self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.MarkerSet_connectMarkersToModel(self, aModel)


    def getMarkerNames(self, aMarkerNamesArray):
        """
        getMarkerNames(MarkerSet self, ArrayStr aMarkerNamesArray)

        Parameters:
            aMarkerNamesArray: OpenSim::Array< std::string > &

        """
        return _opensim.MarkerSet_getMarkerNames(self, aMarkerNamesArray)


    def scale(self, aScaleSet):
        """
        scale(MarkerSet self, ScaleSet aScaleSet)

        Parameters:
            aScaleSet: OpenSim::ScaleSet const &

        """
        return _opensim.MarkerSet_scale(self, aScaleSet)


    def addNamePrefix(self, prefix):
        """
        addNamePrefix(MarkerSet self, std::string const & prefix)

        Parameters:
            prefix: std::string const &

        """
        return _opensim.MarkerSet_addNamePrefix(self, prefix)


    def addMarker(self, aName, aOffset, aBody):
        """
        addMarker(MarkerSet self, std::string const & aName, double const [3] aOffset, Body aBody) -> Marker

        Parameters:
            aName: std::string const &
            aOffset: double const [3]
            aBody: OpenSim::Body &

        """
        return _opensim.MarkerSet_addMarker(self, aName, aOffset, aBody)

    def adoptAndAppend(self, aMarker):
        aMarker._markAdopted()
        return super(MarkerSet, self).adoptAndAppend(aMarker)

MarkerSet_swigregister = _opensim.MarkerSet_swigregister
MarkerSet_swigregister(MarkerSet)

def MarkerSet_safeDownCast(obj):
    """
    MarkerSet_safeDownCast(OpenSimObject obj) -> MarkerSet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.MarkerSet_safeDownCast(obj)

def MarkerSet_getClassName():
    """MarkerSet_getClassName() -> std::string const &"""
    return _opensim.MarkerSet_getClassName()

class WrapObject(OpenSimObject):
    """Proxy of C++ OpenSim::WrapObject class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrapObject, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrapObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> WrapObject

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.WrapObject_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(WrapObject self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.WrapObject_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.WrapObject_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(WrapObject self) -> WrapObject

        Parameters:
            self: OpenSim::WrapObject const *

        """
        return _opensim.WrapObject_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(WrapObject self) -> std::string const &

        Parameters:
            self: OpenSim::WrapObject const *

        """
        return _opensim.WrapObject_getConcreteClassName(self)

    allQuadrants = _opensim.WrapObject_allQuadrants
    negativeX = _opensim.WrapObject_negativeX
    positiveX = _opensim.WrapObject_positiveX
    negativeY = _opensim.WrapObject_negativeY
    positiveY = _opensim.WrapObject_positiveY
    negativeZ = _opensim.WrapObject_negativeZ
    positiveZ = _opensim.WrapObject_positiveZ
    noWrap = _opensim.WrapObject_noWrap
    insideRadius = _opensim.WrapObject_insideRadius
    wrapped = _opensim.WrapObject_wrapped
    mandatoryWrap = _opensim.WrapObject_mandatoryWrap

    def copyProperty_display_preference(self, source):
        """
        copyProperty_display_preference(WrapObject self, WrapObject source)

        Parameters:
            source: OpenSim::WrapObject::Self const &

        """
        return _opensim.WrapObject_copyProperty_display_preference(self, source)


    def append_display_preference(self, value):
        """
        append_display_preference(WrapObject self, int const & value) -> int

        Parameters:
            value: int const &

        """
        return _opensim.WrapObject_append_display_preference(self, value)


    def constructProperty_display_preference(self, initValue):
        """
        constructProperty_display_preference(WrapObject self, int const & initValue)

        Parameters:
            initValue: int const &

        """
        return _opensim.WrapObject_constructProperty_display_preference(self, initValue)


    def get_display_preference(self, *args):
        """
        get_display_preference(WrapObject self, int i) -> int const

        Parameters:
            i: int

        get_display_preference(WrapObject self) -> int const &

        Parameters:
            self: OpenSim::WrapObject const *

        """
        return _opensim.WrapObject_get_display_preference(self, *args)


    def upd_display_preference(self, *args):
        """
        upd_display_preference(WrapObject self, int i) -> int

        Parameters:
            i: int

        upd_display_preference(WrapObject self) -> int &

        Parameters:
            self: OpenSim::WrapObject *

        """
        return _opensim.WrapObject_upd_display_preference(self, *args)


    def set_display_preference(self, *args):
        """
        set_display_preference(WrapObject self, int i, int const & value)

        Parameters:
            i: int
            value: int const &

        set_display_preference(WrapObject self, int const & value)

        Parameters:
            value: int const &

        """
        return _opensim.WrapObject_set_display_preference(self, *args)


    def copyProperty_color(self, source):
        """
        copyProperty_color(WrapObject self, WrapObject source)

        Parameters:
            source: OpenSim::WrapObject::Self const &

        """
        return _opensim.WrapObject_copyProperty_color(self, source)


    def get_color(self, i):
        """
        get_color(WrapObject self, int i) -> double const &

        Parameters:
            i: int

        """
        return _opensim.WrapObject_get_color(self, i)


    def upd_color(self, i):
        """
        upd_color(WrapObject self, int i) -> double &

        Parameters:
            i: int

        """
        return _opensim.WrapObject_upd_color(self, i)


    def set_color(self, i, value):
        """
        set_color(WrapObject self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        """
        return _opensim.WrapObject_set_color(self, i, value)


    def append_color(self, value):
        """
        append_color(WrapObject self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.WrapObject_append_color(self, value)

    __swig_destroy__ = _opensim.delete_WrapObject
    __del__ = lambda self: None

    def copyData(self, aWrapObject):
        """
        copyData(WrapObject self, WrapObject aWrapObject)

        Parameters:
            aWrapObject: OpenSim::WrapObject const &

        """
        return _opensim.WrapObject_copyData(self, aWrapObject)


    def scale(self, aScaleFactors):
        """
        scale(WrapObject self, Vec3 aScaleFactors)

        Parameters:
            aScaleFactors: SimTK::Vec3 const &

        """
        return _opensim.WrapObject_scale(self, aScaleFactors)


    def connectToModelAndBody(self, aModel, aBody):
        """
        connectToModelAndBody(WrapObject self, Model aModel, Body aBody)

        Parameters:
            aModel: OpenSim::Model &
            aBody: OpenSim::Body &

        """
        return _opensim.WrapObject_connectToModelAndBody(self, aModel, aBody)


    def getBody(self):
        """
        getBody(WrapObject self) -> Body

        Parameters:
            self: OpenSim::WrapObject const *

        """
        return _opensim.WrapObject_getBody(self)


    def getXYZBodyRotation(self):
        """
        getXYZBodyRotation(WrapObject self) -> double const *

        Parameters:
            self: OpenSim::WrapObject const *

        """
        return _opensim.WrapObject_getXYZBodyRotation(self)


    def getTranslation(self):
        """
        getTranslation(WrapObject self) -> double const *

        Parameters:
            self: OpenSim::WrapObject const *

        """
        return _opensim.WrapObject_getTranslation(self)


    def getActive(self):
        """
        getActive(WrapObject self) -> bool

        Parameters:
            self: OpenSim::WrapObject const *

        """
        return _opensim.WrapObject_getActive(self)


    def getActiveUseDefault(self):
        """
        getActiveUseDefault(WrapObject self) -> bool

        Parameters:
            self: OpenSim::WrapObject const *

        """
        return _opensim.WrapObject_getActiveUseDefault(self)


    def getQuadrantName(self):
        """
        getQuadrantName(WrapObject self) -> char const *

        Parameters:
            self: OpenSim::WrapObject const *

        """
        return _opensim.WrapObject_getQuadrantName(self)


    def getQuadrantNameUseDefault(self):
        """
        getQuadrantNameUseDefault(WrapObject self) -> bool

        Parameters:
            self: OpenSim::WrapObject const *

        """
        return _opensim.WrapObject_getQuadrantNameUseDefault(self)


    def setQuadrantName(self, aName):
        """
        setQuadrantName(WrapObject self, std::string const & aName)

        Parameters:
            aName: std::string const &

        """
        return _opensim.WrapObject_setQuadrantName(self, aName)


    def getTransform(self):
        """
        getTransform(WrapObject self) -> Transform

        Parameters:
            self: OpenSim::WrapObject const *

        """
        return _opensim.WrapObject_getTransform(self)


    def getWrapTypeName(self):
        """
        getWrapTypeName(WrapObject self) -> char const *

        Parameters:
            self: OpenSim::WrapObject const *

        """
        return _opensim.WrapObject_getWrapTypeName(self)


    def getDimensionsString(self):
        """
        getDimensionsString(WrapObject self) -> std::string

        Parameters:
            self: OpenSim::WrapObject const *

        """
        return _opensim.WrapObject_getDimensionsString(self)


    def getDisplayer(self):
        """
        getDisplayer(WrapObject self) -> VisibleObject

        Parameters:
            self: OpenSim::WrapObject const *

        """
        return _opensim.WrapObject_getDisplayer(self)


    def updateGeometry(self):
        """
        updateGeometry(WrapObject self)

        Parameters:
            self: OpenSim::WrapObject *

        """
        return _opensim.WrapObject_updateGeometry(self)

WrapObject_swigregister = _opensim.WrapObject_swigregister
WrapObject_swigregister(WrapObject)

def WrapObject_safeDownCast(obj):
    """
    WrapObject_safeDownCast(OpenSimObject obj) -> WrapObject

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.WrapObject_safeDownCast(obj)

def WrapObject_getClassName():
    """WrapObject_getClassName() -> std::string const &"""
    return _opensim.WrapObject_getClassName()

class WrapSphere(WrapObject):
    """Proxy of C++ OpenSim::WrapSphere class"""
    __swig_setmethods__ = {}
    for _s in [WrapObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrapSphere, name, value)
    __swig_getmethods__ = {}
    for _s in [WrapObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrapSphere, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> WrapSphere

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.WrapSphere_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(WrapSphere self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.WrapSphere_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.WrapSphere_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(WrapSphere self) -> WrapSphere

        Parameters:
            self: OpenSim::WrapSphere const *

        """
        return _opensim.WrapSphere_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(WrapSphere self) -> std::string const &

        Parameters:
            self: OpenSim::WrapSphere const *

        """
        return _opensim.WrapSphere_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::WrapSphere self) -> WrapSphere
        __init__(OpenSim::WrapSphere self, WrapSphere aWrapSphere) -> WrapSphere

        Parameters:
            aWrapSphere: OpenSim::WrapSphere const &

        """
        this = _opensim.new_WrapSphere(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_WrapSphere
    __del__ = lambda self: None

    def copyData(self, aWrapSphere):
        """
        copyData(WrapSphere self, WrapSphere aWrapSphere)

        Parameters:
            aWrapSphere: OpenSim::WrapSphere const &

        """
        return _opensim.WrapSphere_copyData(self, aWrapSphere)


    def getWrapTypeName(self):
        """
        getWrapTypeName(WrapSphere self) -> char const *

        Parameters:
            self: OpenSim::WrapSphere const *

        """
        return _opensim.WrapSphere_getWrapTypeName(self)


    def getDimensionsString(self):
        """
        getDimensionsString(WrapSphere self) -> std::string

        Parameters:
            self: OpenSim::WrapSphere const *

        """
        return _opensim.WrapSphere_getDimensionsString(self)


    def getRadius(self):
        """
        getRadius(WrapSphere self) -> double

        Parameters:
            self: OpenSim::WrapSphere const *

        """
        return _opensim.WrapSphere_getRadius(self)


    def scale(self, aScaleFactors):
        """
        scale(WrapSphere self, Vec3 aScaleFactors)

        Parameters:
            aScaleFactors: SimTK::Vec3 const &

        """
        return _opensim.WrapSphere_scale(self, aScaleFactors)


    def connectToModelAndBody(self, aModel, aBody):
        """
        connectToModelAndBody(WrapSphere self, Model aModel, Body aBody)

        Parameters:
            aModel: OpenSim::Model &
            aBody: OpenSim::Body &

        """
        return _opensim.WrapSphere_connectToModelAndBody(self, aModel, aBody)

WrapSphere_swigregister = _opensim.WrapSphere_swigregister
WrapSphere_swigregister(WrapSphere)

def WrapSphere_safeDownCast(obj):
    """
    WrapSphere_safeDownCast(OpenSimObject obj) -> WrapSphere

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.WrapSphere_safeDownCast(obj)

def WrapSphere_getClassName():
    """WrapSphere_getClassName() -> std::string const &"""
    return _opensim.WrapSphere_getClassName()

class WrapCylinder(WrapObject):
    """Proxy of C++ OpenSim::WrapCylinder class"""
    __swig_setmethods__ = {}
    for _s in [WrapObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrapCylinder, name, value)
    __swig_getmethods__ = {}
    for _s in [WrapObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrapCylinder, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> WrapCylinder

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.WrapCylinder_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(WrapCylinder self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.WrapCylinder_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.WrapCylinder_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(WrapCylinder self) -> WrapCylinder

        Parameters:
            self: OpenSim::WrapCylinder const *

        """
        return _opensim.WrapCylinder_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(WrapCylinder self) -> std::string const &

        Parameters:
            self: OpenSim::WrapCylinder const *

        """
        return _opensim.WrapCylinder_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::WrapCylinder self) -> WrapCylinder
        __init__(OpenSim::WrapCylinder self, WrapCylinder aWrapCylinder) -> WrapCylinder

        Parameters:
            aWrapCylinder: OpenSim::WrapCylinder const &

        """
        this = _opensim.new_WrapCylinder(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_WrapCylinder
    __del__ = lambda self: None

    def copyData(self, aWrapCylinder):
        """
        copyData(WrapCylinder self, WrapCylinder aWrapCylinder)

        Parameters:
            aWrapCylinder: OpenSim::WrapCylinder const &

        """
        return _opensim.WrapCylinder_copyData(self, aWrapCylinder)


    def getRadius(self):
        """
        getRadius(WrapCylinder self) -> double

        Parameters:
            self: OpenSim::WrapCylinder const *

        """
        return _opensim.WrapCylinder_getRadius(self)


    def setRadius(self, aRadius):
        """
        setRadius(WrapCylinder self, double aRadius)

        Parameters:
            aRadius: double

        """
        return _opensim.WrapCylinder_setRadius(self, aRadius)


    def getLength(self):
        """
        getLength(WrapCylinder self) -> double

        Parameters:
            self: OpenSim::WrapCylinder const *

        """
        return _opensim.WrapCylinder_getLength(self)


    def setLength(self, aLength):
        """
        setLength(WrapCylinder self, double aLength)

        Parameters:
            aLength: double

        """
        return _opensim.WrapCylinder_setLength(self, aLength)


    def getWrapTypeName(self):
        """
        getWrapTypeName(WrapCylinder self) -> char const *

        Parameters:
            self: OpenSim::WrapCylinder const *

        """
        return _opensim.WrapCylinder_getWrapTypeName(self)


    def getDimensionsString(self):
        """
        getDimensionsString(WrapCylinder self) -> std::string

        Parameters:
            self: OpenSim::WrapCylinder const *

        """
        return _opensim.WrapCylinder_getDimensionsString(self)


    def scale(self, aScaleFactors):
        """
        scale(WrapCylinder self, Vec3 aScaleFactors)

        Parameters:
            aScaleFactors: SimTK::Vec3 const &

        """
        return _opensim.WrapCylinder_scale(self, aScaleFactors)


    def connectToModelAndBody(self, aModel, aBody):
        """
        connectToModelAndBody(WrapCylinder self, Model aModel, Body aBody)

        Parameters:
            aModel: OpenSim::Model &
            aBody: OpenSim::Body &

        """
        return _opensim.WrapCylinder_connectToModelAndBody(self, aModel, aBody)

WrapCylinder_swigregister = _opensim.WrapCylinder_swigregister
WrapCylinder_swigregister(WrapCylinder)

def WrapCylinder_safeDownCast(obj):
    """
    WrapCylinder_safeDownCast(OpenSimObject obj) -> WrapCylinder

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.WrapCylinder_safeDownCast(obj)

def WrapCylinder_getClassName():
    """WrapCylinder_getClassName() -> std::string const &"""
    return _opensim.WrapCylinder_getClassName()

class WrapTorus(WrapObject):
    """Proxy of C++ OpenSim::WrapTorus class"""
    __swig_setmethods__ = {}
    for _s in [WrapObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrapTorus, name, value)
    __swig_getmethods__ = {}
    for _s in [WrapObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrapTorus, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> WrapTorus

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.WrapTorus_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(WrapTorus self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.WrapTorus_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.WrapTorus_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(WrapTorus self) -> WrapTorus

        Parameters:
            self: OpenSim::WrapTorus const *

        """
        return _opensim.WrapTorus_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(WrapTorus self) -> std::string const &

        Parameters:
            self: OpenSim::WrapTorus const *

        """
        return _opensim.WrapTorus_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::WrapTorus self) -> WrapTorus
        __init__(OpenSim::WrapTorus self, WrapTorus aWrapTorus) -> WrapTorus

        Parameters:
            aWrapTorus: OpenSim::WrapTorus const &

        """
        this = _opensim.new_WrapTorus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_WrapTorus
    __del__ = lambda self: None

    def copyData(self, aWrapTorus):
        """
        copyData(WrapTorus self, WrapTorus aWrapTorus)

        Parameters:
            aWrapTorus: OpenSim::WrapTorus const &

        """
        return _opensim.WrapTorus_copyData(self, aWrapTorus)


    def getWrapTypeName(self):
        """
        getWrapTypeName(WrapTorus self) -> char const *

        Parameters:
            self: OpenSim::WrapTorus const *

        """
        return _opensim.WrapTorus_getWrapTypeName(self)


    def getDimensionsString(self):
        """
        getDimensionsString(WrapTorus self) -> std::string

        Parameters:
            self: OpenSim::WrapTorus const *

        """
        return _opensim.WrapTorus_getDimensionsString(self)


    def getInnerRadius(self):
        """
        getInnerRadius(WrapTorus self) -> SimTK::Real

        Parameters:
            self: OpenSim::WrapTorus const *

        """
        return _opensim.WrapTorus_getInnerRadius(self)


    def getOuterRadius(self):
        """
        getOuterRadius(WrapTorus self) -> SimTK::Real

        Parameters:
            self: OpenSim::WrapTorus const *

        """
        return _opensim.WrapTorus_getOuterRadius(self)


    def scale(self, aScaleFactors):
        """
        scale(WrapTorus self, Vec3 aScaleFactors)

        Parameters:
            aScaleFactors: SimTK::Vec3 const &

        """
        return _opensim.WrapTorus_scale(self, aScaleFactors)


    def connectToModelAndBody(self, aModel, aBody):
        """
        connectToModelAndBody(WrapTorus self, Model aModel, Body aBody)

        Parameters:
            aModel: OpenSim::Model &
            aBody: OpenSim::Body &

        """
        return _opensim.WrapTorus_connectToModelAndBody(self, aModel, aBody)

WrapTorus_swigregister = _opensim.WrapTorus_swigregister
WrapTorus_swigregister(WrapTorus)

def WrapTorus_safeDownCast(obj):
    """
    WrapTorus_safeDownCast(OpenSimObject obj) -> WrapTorus

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.WrapTorus_safeDownCast(obj)

def WrapTorus_getClassName():
    """WrapTorus_getClassName() -> std::string const &"""
    return _opensim.WrapTorus_getClassName()

class WrapEllipsoid(WrapObject):
    """Proxy of C++ OpenSim::WrapEllipsoid class"""
    __swig_setmethods__ = {}
    for _s in [WrapObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrapEllipsoid, name, value)
    __swig_getmethods__ = {}
    for _s in [WrapObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrapEllipsoid, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> WrapEllipsoid

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.WrapEllipsoid_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(WrapEllipsoid self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.WrapEllipsoid_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.WrapEllipsoid_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(WrapEllipsoid self) -> WrapEllipsoid

        Parameters:
            self: OpenSim::WrapEllipsoid const *

        """
        return _opensim.WrapEllipsoid_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(WrapEllipsoid self) -> std::string const &

        Parameters:
            self: OpenSim::WrapEllipsoid const *

        """
        return _opensim.WrapEllipsoid_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::WrapEllipsoid self) -> WrapEllipsoid
        __init__(OpenSim::WrapEllipsoid self, WrapEllipsoid aWrapEllipsoid) -> WrapEllipsoid

        Parameters:
            aWrapEllipsoid: OpenSim::WrapEllipsoid const &

        """
        this = _opensim.new_WrapEllipsoid(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_WrapEllipsoid
    __del__ = lambda self: None

    def copyData(self, aWrapEllipsoid):
        """
        copyData(WrapEllipsoid self, WrapEllipsoid aWrapEllipsoid)

        Parameters:
            aWrapEllipsoid: OpenSim::WrapEllipsoid const &

        """
        return _opensim.WrapEllipsoid_copyData(self, aWrapEllipsoid)


    def getWrapTypeName(self):
        """
        getWrapTypeName(WrapEllipsoid self) -> char const *

        Parameters:
            self: OpenSim::WrapEllipsoid const *

        """
        return _opensim.WrapEllipsoid_getWrapTypeName(self)


    def getDimensionsString(self):
        """
        getDimensionsString(WrapEllipsoid self) -> std::string

        Parameters:
            self: OpenSim::WrapEllipsoid const *

        """
        return _opensim.WrapEllipsoid_getDimensionsString(self)


    def getRadii(self):
        """
        getRadii(WrapEllipsoid self) -> Vec3

        Parameters:
            self: OpenSim::WrapEllipsoid const *

        """
        return _opensim.WrapEllipsoid_getRadii(self)


    def scale(self, aScaleFactors):
        """
        scale(WrapEllipsoid self, Vec3 aScaleFactors)

        Parameters:
            aScaleFactors: SimTK::Vec3 const &

        """
        return _opensim.WrapEllipsoid_scale(self, aScaleFactors)


    def connectToModelAndBody(self, aModel, aBody):
        """
        connectToModelAndBody(WrapEllipsoid self, Model aModel, Body aBody)

        Parameters:
            aModel: OpenSim::Model &
            aBody: OpenSim::Body &

        """
        return _opensim.WrapEllipsoid_connectToModelAndBody(self, aModel, aBody)

WrapEllipsoid_swigregister = _opensim.WrapEllipsoid_swigregister
WrapEllipsoid_swigregister(WrapEllipsoid)

def WrapEllipsoid_safeDownCast(obj):
    """
    WrapEllipsoid_safeDownCast(OpenSimObject obj) -> WrapEllipsoid

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.WrapEllipsoid_safeDownCast(obj)

def WrapEllipsoid_getClassName():
    """WrapEllipsoid_getClassName() -> std::string const &"""
    return _opensim.WrapEllipsoid_getClassName()

class SetWrapObject(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::WrapObject)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetWrapObject, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetWrapObject, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetWrapObject

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetWrapObject_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetWrapObject self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetWrapObject_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetWrapObject_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetWrapObject self) -> SetWrapObject

        Parameters:
            self: OpenSim::Set< OpenSim::WrapObject > const *

        """
        return _opensim.SetWrapObject_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetWrapObject self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::WrapObject > const *

        """
        return _opensim.SetWrapObject_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetWrapObject
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::WrapObject)> self) -> SetWrapObject
        __init__(OpenSim::Set<(OpenSim::WrapObject)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetWrapObject

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::WrapObject)> self, std::string const & aFileName) -> SetWrapObject

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::WrapObject)> self, SetWrapObject aSet) -> SetWrapObject

        Parameters:
            aSet: OpenSim::Set< OpenSim::WrapObject > const &

        """
        this = _opensim.new_SetWrapObject(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetWrapObject self)

        Parameters:
            self: OpenSim::Set< OpenSim::WrapObject > *

        """
        return _opensim.SetWrapObject_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetWrapObject self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetWrapObject_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetWrapObject self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetWrapObject_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetWrapObject self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::WrapObject > const *

        """
        return _opensim.SetWrapObject_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetWrapObject self, WrapObject aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::WrapObject const *
            aStartIndex: int

        getIndex(SetWrapObject self, WrapObject aObject) -> int

        Parameters:
            aObject: OpenSim::WrapObject const *

        getIndex(SetWrapObject self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetWrapObject self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetWrapObject_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetWrapObject self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetWrapObject_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetWrapObject self, WrapObject aObject) -> bool

        Parameters:
            aObject: OpenSim::WrapObject *

        """
        return _opensim.SetWrapObject_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetWrapObject self, WrapObject aObject) -> bool

        Parameters:
            aObject: OpenSim::WrapObject const &

        """
        return _opensim.SetWrapObject_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetWrapObject self, int aIndex, WrapObject aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::WrapObject *

        """
        return _opensim.SetWrapObject_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetWrapObject self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetWrapObject self, WrapObject aObject) -> bool

        Parameters:
            aObject: OpenSim::WrapObject const *

        """
        return _opensim.SetWrapObject_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetWrapObject self)

        Parameters:
            self: OpenSim::Set< OpenSim::WrapObject > *

        """
        return _opensim.SetWrapObject_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetWrapObject self, int aIndex, WrapObject aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::WrapObject *
            preserveGroups: bool

        set(SetWrapObject self, int aIndex, WrapObject aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::WrapObject *

        """
        return _opensim.SetWrapObject_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetWrapObject self, int aIndex) -> WrapObject

        Parameters:
            aIndex: int

        get(SetWrapObject self, std::string const & aName) -> WrapObject

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetWrapObject_get(self, *args)


    def contains(self, aName):
        """
        contains(SetWrapObject self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetWrapObject_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetWrapObject self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetWrapObject_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetWrapObject self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::WrapObject > const *

        """
        return _opensim.SetWrapObject_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetWrapObject self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetWrapObject_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetWrapObject self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetWrapObject_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetWrapObject self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetWrapObject_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetWrapObject self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetWrapObject_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetWrapObject self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetWrapObject_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetWrapObject self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetWrapObject self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetWrapObject_getGroup(self, *args)

SetWrapObject_swigregister = _opensim.SetWrapObject_swigregister
SetWrapObject_swigregister(SetWrapObject)

def SetWrapObject_safeDownCast(obj):
    """
    SetWrapObject_safeDownCast(OpenSimObject obj) -> SetWrapObject

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetWrapObject_safeDownCast(obj)

def SetWrapObject_getClassName():
    """SetWrapObject_getClassName() -> std::string const &"""
    return _opensim.SetWrapObject_getClassName()

class WrapObjectSet(SetWrapObject):
    """Proxy of C++ OpenSim::WrapObjectSet class"""
    __swig_setmethods__ = {}
    for _s in [SetWrapObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrapObjectSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetWrapObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrapObjectSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> WrapObjectSet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.WrapObjectSet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(WrapObjectSet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.WrapObjectSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.WrapObjectSet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(WrapObjectSet self) -> WrapObjectSet

        Parameters:
            self: OpenSim::WrapObjectSet const *

        """
        return _opensim.WrapObjectSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(WrapObjectSet self) -> std::string const &

        Parameters:
            self: OpenSim::WrapObjectSet const *

        """
        return _opensim.WrapObjectSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::WrapObjectSet self) -> WrapObjectSet
        __init__(OpenSim::WrapObjectSet self, WrapObjectSet aWrapObjectSet) -> WrapObjectSet

        Parameters:
            aWrapObjectSet: OpenSim::WrapObjectSet const &

        """
        this = _opensim.new_WrapObjectSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_WrapObjectSet
    __del__ = lambda self: None
WrapObjectSet_swigregister = _opensim.WrapObjectSet_swigregister
WrapObjectSet_swigregister(WrapObjectSet)

def WrapObjectSet_safeDownCast(obj):
    """
    WrapObjectSet_safeDownCast(OpenSimObject obj) -> WrapObjectSet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.WrapObjectSet_safeDownCast(obj)

def WrapObjectSet_getClassName():
    """WrapObjectSet_getClassName() -> std::string const &"""
    return _opensim.WrapObjectSet_getClassName()

class PathWrap(OpenSimObject):
    """Proxy of C++ OpenSim::PathWrap class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathWrap, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PathWrap, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PathWrap

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.PathWrap_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(PathWrap self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.PathWrap_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.PathWrap_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(PathWrap self) -> PathWrap

        Parameters:
            self: OpenSim::PathWrap const *

        """
        return _opensim.PathWrap_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PathWrap self) -> std::string const &

        Parameters:
            self: OpenSim::PathWrap const *

        """
        return _opensim.PathWrap_getConcreteClassName(self)

    hybrid = _opensim.PathWrap_hybrid
    midpoint = _opensim.PathWrap_midpoint
    axial = _opensim.PathWrap_axial

    def __init__(self, *args):
        """
        __init__(OpenSim::PathWrap self) -> PathWrap
        __init__(OpenSim::PathWrap self, PathWrap aPathWrap) -> PathWrap

        Parameters:
            aPathWrap: OpenSim::PathWrap const &

        """
        this = _opensim.new_PathWrap(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_PathWrap
    __del__ = lambda self: None

    def copyData(self, aPathWrap):
        """
        copyData(PathWrap self, PathWrap aPathWrap)

        Parameters:
            aPathWrap: OpenSim::PathWrap const &

        """
        return _opensim.PathWrap_copyData(self, aPathWrap)


    def getStartPoint(self):
        """
        getStartPoint(PathWrap self) -> int

        Parameters:
            self: OpenSim::PathWrap const *

        """
        return _opensim.PathWrap_getStartPoint(self)


    def getEndPoint(self):
        """
        getEndPoint(PathWrap self) -> int

        Parameters:
            self: OpenSim::PathWrap const *

        """
        return _opensim.PathWrap_getEndPoint(self)


    def getWrapObjectName(self):
        """
        getWrapObjectName(PathWrap self) -> std::string const &

        Parameters:
            self: OpenSim::PathWrap const *

        """
        return _opensim.PathWrap_getWrapObjectName(self)


    def getWrapObject(self):
        """
        getWrapObject(PathWrap self) -> WrapObject

        Parameters:
            self: OpenSim::PathWrap const *

        """
        return _opensim.PathWrap_getWrapObject(self)


    def setWrapObject(self, aWrapObject):
        """
        setWrapObject(PathWrap self, WrapObject aWrapObject)

        Parameters:
            aWrapObject: OpenSim::WrapObject &

        """
        return _opensim.PathWrap_setWrapObject(self, aWrapObject)


    def getWrapPoint(self, aIndex):
        """
        getWrapPoint(PathWrap self, int aIndex) -> PathWrapPoint &

        Parameters:
            aIndex: int

        """
        return _opensim.PathWrap_getWrapPoint(self, aIndex)


    def getMethod(self):
        """
        getMethod(PathWrap self) -> OpenSim::PathWrap::WrapMethod

        Parameters:
            self: OpenSim::PathWrap const *

        """
        return _opensim.PathWrap_getMethod(self)


    def setMethod(self, aMethod):
        """
        setMethod(PathWrap self, OpenSim::PathWrap::WrapMethod aMethod)

        Parameters:
            aMethod: enum OpenSim::PathWrap::WrapMethod

        """
        return _opensim.PathWrap_setMethod(self, aMethod)


    def getMethodName(self):
        """
        getMethodName(PathWrap self) -> std::string const &

        Parameters:
            self: OpenSim::PathWrap const *

        """
        return _opensim.PathWrap_getMethodName(self)


    def getPath(self):
        """
        getPath(PathWrap self) -> GeometryPath

        Parameters:
            self: OpenSim::PathWrap const *

        """
        return _opensim.PathWrap_getPath(self)


    def getPreviousWrap(self):
        """
        getPreviousWrap(PathWrap self) -> OpenSim::WrapResult const &

        Parameters:
            self: OpenSim::PathWrap const *

        """
        return _opensim.PathWrap_getPreviousWrap(self)


    def setPreviousWrap(self, aWrapResult):
        """
        setPreviousWrap(PathWrap self, OpenSim::WrapResult const & aWrapResult)

        Parameters:
            aWrapResult: OpenSim::WrapResult const &

        """
        return _opensim.PathWrap_setPreviousWrap(self, aWrapResult)


    def resetPreviousWrap(self):
        """
        resetPreviousWrap(PathWrap self)

        Parameters:
            self: OpenSim::PathWrap *

        """
        return _opensim.PathWrap_resetPreviousWrap(self)

PathWrap_swigregister = _opensim.PathWrap_swigregister
PathWrap_swigregister(PathWrap)

def PathWrap_safeDownCast(obj):
    """
    PathWrap_safeDownCast(OpenSimObject obj) -> PathWrap

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.PathWrap_safeDownCast(obj)

def PathWrap_getClassName():
    """PathWrap_getClassName() -> std::string const &"""
    return _opensim.PathWrap_getClassName()

class SetPathWrap(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::PathWrap)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetPathWrap, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetPathWrap, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetPathWrap

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetPathWrap_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetPathWrap self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetPathWrap_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetPathWrap_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetPathWrap self) -> SetPathWrap

        Parameters:
            self: OpenSim::Set< OpenSim::PathWrap > const *

        """
        return _opensim.SetPathWrap_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetPathWrap self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::PathWrap > const *

        """
        return _opensim.SetPathWrap_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetPathWrap
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::PathWrap)> self) -> SetPathWrap
        __init__(OpenSim::Set<(OpenSim::PathWrap)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetPathWrap

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::PathWrap)> self, std::string const & aFileName) -> SetPathWrap

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::PathWrap)> self, SetPathWrap aSet) -> SetPathWrap

        Parameters:
            aSet: OpenSim::Set< OpenSim::PathWrap > const &

        """
        this = _opensim.new_SetPathWrap(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetPathWrap self)

        Parameters:
            self: OpenSim::Set< OpenSim::PathWrap > *

        """
        return _opensim.SetPathWrap_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetPathWrap self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetPathWrap_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetPathWrap self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetPathWrap_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetPathWrap self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::PathWrap > const *

        """
        return _opensim.SetPathWrap_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetPathWrap self, PathWrap aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::PathWrap const *
            aStartIndex: int

        getIndex(SetPathWrap self, PathWrap aObject) -> int

        Parameters:
            aObject: OpenSim::PathWrap const *

        getIndex(SetPathWrap self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetPathWrap self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetPathWrap_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetPathWrap self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetPathWrap_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetPathWrap self, PathWrap aObject) -> bool

        Parameters:
            aObject: OpenSim::PathWrap *

        """
        return _opensim.SetPathWrap_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetPathWrap self, PathWrap aObject) -> bool

        Parameters:
            aObject: OpenSim::PathWrap const &

        """
        return _opensim.SetPathWrap_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetPathWrap self, int aIndex, PathWrap aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::PathWrap *

        """
        return _opensim.SetPathWrap_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetPathWrap self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetPathWrap self, PathWrap aObject) -> bool

        Parameters:
            aObject: OpenSim::PathWrap const *

        """
        return _opensim.SetPathWrap_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetPathWrap self)

        Parameters:
            self: OpenSim::Set< OpenSim::PathWrap > *

        """
        return _opensim.SetPathWrap_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetPathWrap self, int aIndex, PathWrap aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::PathWrap *
            preserveGroups: bool

        set(SetPathWrap self, int aIndex, PathWrap aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::PathWrap *

        """
        return _opensim.SetPathWrap_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetPathWrap self, int aIndex) -> PathWrap

        Parameters:
            aIndex: int

        get(SetPathWrap self, std::string const & aName) -> PathWrap

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetPathWrap_get(self, *args)


    def contains(self, aName):
        """
        contains(SetPathWrap self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetPathWrap_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetPathWrap self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetPathWrap_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetPathWrap self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::PathWrap > const *

        """
        return _opensim.SetPathWrap_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetPathWrap self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetPathWrap_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetPathWrap self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetPathWrap_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetPathWrap self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetPathWrap_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetPathWrap self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetPathWrap_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetPathWrap self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetPathWrap_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetPathWrap self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetPathWrap self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetPathWrap_getGroup(self, *args)

SetPathWrap_swigregister = _opensim.SetPathWrap_swigregister
SetPathWrap_swigregister(SetPathWrap)

def SetPathWrap_safeDownCast(obj):
    """
    SetPathWrap_safeDownCast(OpenSimObject obj) -> SetPathWrap

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetPathWrap_safeDownCast(obj)

def SetPathWrap_getClassName():
    """SetPathWrap_getClassName() -> std::string const &"""
    return _opensim.SetPathWrap_getClassName()

class PathWrapSet(SetPathWrap):
    """Proxy of C++ OpenSim::PathWrapSet class"""
    __swig_setmethods__ = {}
    for _s in [SetPathWrap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathWrapSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetPathWrap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PathWrapSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PathWrapSet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.PathWrapSet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(PathWrapSet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.PathWrapSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.PathWrapSet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(PathWrapSet self) -> PathWrapSet

        Parameters:
            self: OpenSim::PathWrapSet const *

        """
        return _opensim.PathWrapSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PathWrapSet self) -> std::string const &

        Parameters:
            self: OpenSim::PathWrapSet const *

        """
        return _opensim.PathWrapSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::PathWrapSet self) -> PathWrapSet
        __init__(OpenSim::PathWrapSet self, PathWrapSet aPathWrapSet) -> PathWrapSet

        Parameters:
            aPathWrapSet: OpenSim::PathWrapSet const &

        """
        this = _opensim.new_PathWrapSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_PathWrapSet
    __del__ = lambda self: None
PathWrapSet_swigregister = _opensim.PathWrapSet_swigregister
PathWrapSet_swigregister(PathWrapSet)

def PathWrapSet_safeDownCast(obj):
    """
    PathWrapSet_safeDownCast(OpenSimObject obj) -> PathWrapSet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.PathWrapSet_safeDownCast(obj)

def PathWrapSet_getClassName():
    """PathWrapSet_getClassName() -> std::string const &"""
    return _opensim.PathWrapSet_getClassName()

class WrapCylinderObst(WrapObject):
    """Proxy of C++ OpenSim::WrapCylinderObst class"""
    __swig_setmethods__ = {}
    for _s in [WrapObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrapCylinderObst, name, value)
    __swig_getmethods__ = {}
    for _s in [WrapObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrapCylinderObst, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> WrapCylinderObst

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.WrapCylinderObst_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(WrapCylinderObst self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.WrapCylinderObst_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.WrapCylinderObst_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(WrapCylinderObst self) -> WrapCylinderObst

        Parameters:
            self: OpenSim::WrapCylinderObst const *

        """
        return _opensim.WrapCylinderObst_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(WrapCylinderObst self) -> std::string const &

        Parameters:
            self: OpenSim::WrapCylinderObst const *

        """
        return _opensim.WrapCylinderObst_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::WrapCylinderObst self) -> WrapCylinderObst
        __init__(OpenSim::WrapCylinderObst self, WrapCylinderObst aWrapCylinderObst) -> WrapCylinderObst

        Parameters:
            aWrapCylinderObst: OpenSim::WrapCylinderObst const &

        """
        this = _opensim.new_WrapCylinderObst(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_WrapCylinderObst
    __del__ = lambda self: None

    def copyData(self, aWrapCylinderObst):
        """
        copyData(WrapCylinderObst self, WrapCylinderObst aWrapCylinderObst)

        Parameters:
            aWrapCylinderObst: OpenSim::WrapCylinderObst const &

        """
        return _opensim.WrapCylinderObst_copyData(self, aWrapCylinderObst)


    def getRadius(self):
        """
        getRadius(WrapCylinderObst self) -> double

        Parameters:
            self: OpenSim::WrapCylinderObst const *

        """
        return _opensim.WrapCylinderObst_getRadius(self)


    def setRadius(self, aRadius):
        """
        setRadius(WrapCylinderObst self, double aRadius)

        Parameters:
            aRadius: double

        """
        return _opensim.WrapCylinderObst_setRadius(self, aRadius)


    def getLength(self):
        """
        getLength(WrapCylinderObst self) -> double

        Parameters:
            self: OpenSim::WrapCylinderObst const *

        """
        return _opensim.WrapCylinderObst_getLength(self)


    def setLength(self, aLength):
        """
        setLength(WrapCylinderObst self, double aLength)

        Parameters:
            aLength: double

        """
        return _opensim.WrapCylinderObst_setLength(self, aLength)


    def getWrapDirection(self):
        """
        getWrapDirection(WrapCylinderObst self) -> int

        Parameters:
            self: OpenSim::WrapCylinderObst const *

        """
        return _opensim.WrapCylinderObst_getWrapDirection(self)


    def getWrapTypeName(self):
        """
        getWrapTypeName(WrapCylinderObst self) -> char const *

        Parameters:
            self: OpenSim::WrapCylinderObst const *

        """
        return _opensim.WrapCylinderObst_getWrapTypeName(self)


    def getDimensionsString(self):
        """
        getDimensionsString(WrapCylinderObst self) -> std::string

        Parameters:
            self: OpenSim::WrapCylinderObst const *

        """
        return _opensim.WrapCylinderObst_getDimensionsString(self)


    def scale(self, aScaleFactors):
        """
        scale(WrapCylinderObst self, Vec3 aScaleFactors)

        Parameters:
            aScaleFactors: SimTK::Vec3 const &

        """
        return _opensim.WrapCylinderObst_scale(self, aScaleFactors)


    def connectToModelAndBody(self, aModel, aBody):
        """
        connectToModelAndBody(WrapCylinderObst self, Model aModel, Body aBody)

        Parameters:
            aModel: OpenSim::Model &
            aBody: OpenSim::Body &

        """
        return _opensim.WrapCylinderObst_connectToModelAndBody(self, aModel, aBody)

WrapCylinderObst_swigregister = _opensim.WrapCylinderObst_swigregister
WrapCylinderObst_swigregister(WrapCylinderObst)

def WrapCylinderObst_safeDownCast(obj):
    """
    WrapCylinderObst_safeDownCast(OpenSimObject obj) -> WrapCylinderObst

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.WrapCylinderObst_safeDownCast(obj)

def WrapCylinderObst_getClassName():
    """WrapCylinderObst_getClassName() -> std::string const &"""
    return _opensim.WrapCylinderObst_getClassName()

class WrapSphereObst(WrapObject):
    """Proxy of C++ OpenSim::WrapSphereObst class"""
    __swig_setmethods__ = {}
    for _s in [WrapObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrapSphereObst, name, value)
    __swig_getmethods__ = {}
    for _s in [WrapObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrapSphereObst, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> WrapSphereObst

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.WrapSphereObst_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(WrapSphereObst self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.WrapSphereObst_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.WrapSphereObst_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(WrapSphereObst self) -> WrapSphereObst

        Parameters:
            self: OpenSim::WrapSphereObst const *

        """
        return _opensim.WrapSphereObst_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(WrapSphereObst self) -> std::string const &

        Parameters:
            self: OpenSim::WrapSphereObst const *

        """
        return _opensim.WrapSphereObst_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::WrapSphereObst self) -> WrapSphereObst
        __init__(OpenSim::WrapSphereObst self, WrapSphereObst aWrapSphereObst) -> WrapSphereObst

        Parameters:
            aWrapSphereObst: OpenSim::WrapSphereObst const &

        """
        this = _opensim.new_WrapSphereObst(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_WrapSphereObst
    __del__ = lambda self: None

    def copyData(self, aWrapSphereObst):
        """
        copyData(WrapSphereObst self, WrapSphereObst aWrapSphereObst)

        Parameters:
            aWrapSphereObst: OpenSim::WrapSphereObst const &

        """
        return _opensim.WrapSphereObst_copyData(self, aWrapSphereObst)


    def getRadius(self):
        """
        getRadius(WrapSphereObst self) -> double

        Parameters:
            self: OpenSim::WrapSphereObst const *

        """
        return _opensim.WrapSphereObst_getRadius(self)


    def setRadius(self, aRadius):
        """
        setRadius(WrapSphereObst self, double aRadius)

        Parameters:
            aRadius: double

        """
        return _opensim.WrapSphereObst_setRadius(self, aRadius)


    def getLength(self):
        """
        getLength(WrapSphereObst self) -> double

        Parameters:
            self: OpenSim::WrapSphereObst const *

        """
        return _opensim.WrapSphereObst_getLength(self)


    def setLength(self, aLength):
        """
        setLength(WrapSphereObst self, double aLength)

        Parameters:
            aLength: double

        """
        return _opensim.WrapSphereObst_setLength(self, aLength)


    def getWrapTypeName(self):
        """
        getWrapTypeName(WrapSphereObst self) -> char const *

        Parameters:
            self: OpenSim::WrapSphereObst const *

        """
        return _opensim.WrapSphereObst_getWrapTypeName(self)


    def getDimensionsString(self):
        """
        getDimensionsString(WrapSphereObst self) -> std::string

        Parameters:
            self: OpenSim::WrapSphereObst const *

        """
        return _opensim.WrapSphereObst_getDimensionsString(self)


    def scale(self, aScaleFactors):
        """
        scale(WrapSphereObst self, Vec3 aScaleFactors)

        Parameters:
            aScaleFactors: SimTK::Vec3 const &

        """
        return _opensim.WrapSphereObst_scale(self, aScaleFactors)


    def connectToModelAndBody(self, aModel, aBody):
        """
        connectToModelAndBody(WrapSphereObst self, Model aModel, Body aBody)

        Parameters:
            aModel: OpenSim::Model &
            aBody: OpenSim::Body &

        """
        return _opensim.WrapSphereObst_connectToModelAndBody(self, aModel, aBody)

WrapSphereObst_swigregister = _opensim.WrapSphereObst_swigregister
WrapSphereObst_swigregister(WrapSphereObst)

def WrapSphereObst_safeDownCast(obj):
    """
    WrapSphereObst_safeDownCast(OpenSimObject obj) -> WrapSphereObst

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.WrapSphereObst_safeDownCast(obj)

def WrapSphereObst_getClassName():
    """WrapSphereObst_getClassName() -> std::string const &"""
    return _opensim.WrapSphereObst_getClassName()

class WrapDoubleCylinderObst(WrapObject):
    """Proxy of C++ OpenSim::WrapDoubleCylinderObst class"""
    __swig_setmethods__ = {}
    for _s in [WrapObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrapDoubleCylinderObst, name, value)
    __swig_getmethods__ = {}
    for _s in [WrapObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrapDoubleCylinderObst, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> WrapDoubleCylinderObst

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.WrapDoubleCylinderObst_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(WrapDoubleCylinderObst self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.WrapDoubleCylinderObst_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.WrapDoubleCylinderObst_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(WrapDoubleCylinderObst self) -> WrapDoubleCylinderObst

        Parameters:
            self: OpenSim::WrapDoubleCylinderObst const *

        """
        return _opensim.WrapDoubleCylinderObst_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(WrapDoubleCylinderObst self) -> std::string const &

        Parameters:
            self: OpenSim::WrapDoubleCylinderObst const *

        """
        return _opensim.WrapDoubleCylinderObst_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::WrapDoubleCylinderObst self) -> WrapDoubleCylinderObst
        __init__(OpenSim::WrapDoubleCylinderObst self, WrapDoubleCylinderObst aWrapDoubleCylinderObst) -> WrapDoubleCylinderObst

        Parameters:
            aWrapDoubleCylinderObst: OpenSim::WrapDoubleCylinderObst const &

        """
        this = _opensim.new_WrapDoubleCylinderObst(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_WrapDoubleCylinderObst
    __del__ = lambda self: None

    def copyData(self, aWrapDoubleCylinderObst):
        """
        copyData(WrapDoubleCylinderObst self, WrapDoubleCylinderObst aWrapDoubleCylinderObst)

        Parameters:
            aWrapDoubleCylinderObst: OpenSim::WrapDoubleCylinderObst const &

        """
        return _opensim.WrapDoubleCylinderObst_copyData(self, aWrapDoubleCylinderObst)


    def getRadius(self):
        """
        getRadius(WrapDoubleCylinderObst self) -> double

        Parameters:
            self: OpenSim::WrapDoubleCylinderObst const *

        """
        return _opensim.WrapDoubleCylinderObst_getRadius(self)


    def setRadius(self, aRadius):
        """
        setRadius(WrapDoubleCylinderObst self, double aRadius)

        Parameters:
            aRadius: double

        """
        return _opensim.WrapDoubleCylinderObst_setRadius(self, aRadius)


    def getLength(self):
        """
        getLength(WrapDoubleCylinderObst self) -> double

        Parameters:
            self: OpenSim::WrapDoubleCylinderObst const *

        """
        return _opensim.WrapDoubleCylinderObst_getLength(self)


    def setLength(self, aLength):
        """
        setLength(WrapDoubleCylinderObst self, double aLength)

        Parameters:
            aLength: double

        """
        return _opensim.WrapDoubleCylinderObst_setLength(self, aLength)


    def getWrapDirection(self):
        """
        getWrapDirection(WrapDoubleCylinderObst self) -> int

        Parameters:
            self: OpenSim::WrapDoubleCylinderObst const *

        """
        return _opensim.WrapDoubleCylinderObst_getWrapDirection(self)


    def getWrapTypeName(self):
        """
        getWrapTypeName(WrapDoubleCylinderObst self) -> char const *

        Parameters:
            self: OpenSim::WrapDoubleCylinderObst const *

        """
        return _opensim.WrapDoubleCylinderObst_getWrapTypeName(self)


    def getDimensionsString(self):
        """
        getDimensionsString(WrapDoubleCylinderObst self) -> std::string

        Parameters:
            self: OpenSim::WrapDoubleCylinderObst const *

        """
        return _opensim.WrapDoubleCylinderObst_getDimensionsString(self)


    def scale(self, aScaleFactors):
        """
        scale(WrapDoubleCylinderObst self, Vec3 aScaleFactors)

        Parameters:
            aScaleFactors: SimTK::Vec3 const &

        """
        return _opensim.WrapDoubleCylinderObst_scale(self, aScaleFactors)


    def connectToModelAndBody(self, aModel, aBody):
        """
        connectToModelAndBody(WrapDoubleCylinderObst self, Model aModel, Body aBody)

        Parameters:
            aModel: OpenSim::Model &
            aBody: OpenSim::Body &

        """
        return _opensim.WrapDoubleCylinderObst_connectToModelAndBody(self, aModel, aBody)

WrapDoubleCylinderObst_swigregister = _opensim.WrapDoubleCylinderObst_swigregister
WrapDoubleCylinderObst_swigregister(WrapDoubleCylinderObst)

def WrapDoubleCylinderObst_safeDownCast(obj):
    """
    WrapDoubleCylinderObst_safeDownCast(OpenSimObject obj) -> WrapDoubleCylinderObst

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.WrapDoubleCylinderObst_safeDownCast(obj)

def WrapDoubleCylinderObst_getClassName():
    """WrapDoubleCylinderObst_getClassName() -> std::string const &"""
    return _opensim.WrapDoubleCylinderObst_getClassName()

class Body(ModelComponent):
    """Proxy of C++ OpenSim::Body class"""
    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Body, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Body, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Body

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Body_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Body self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Body_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Body_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Body self) -> Body

        Parameters:
            self: OpenSim::Body const *

        """
        return _opensim.Body_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Body self) -> std::string const &

        Parameters:
            self: OpenSim::Body const *

        """
        return _opensim.Body_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::Body self) -> Body
        __init__(OpenSim::Body self, std::string const & aName, double aMass, Vec3 aMassCenter, Inertia aInertia) -> Body

        Parameters:
            aName: std::string const &
            aMass: double
            aMassCenter: SimTK::Vec3 const &
            aInertia: SimTK::Inertia const &

        __init__(OpenSim::Body self, Body aBody) -> Body

        Parameters:
            aBody: OpenSim::Body const &

        """
        this = _opensim.new_Body(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_Body
    __del__ = lambda self: None

    def copyData(self, aBody):
        """
        copyData(Body self, Body aBody)

        Parameters:
            aBody: OpenSim::Body const &

        """
        return _opensim.Body_copyData(self, aBody)


    def addDisplayGeometry(self, aGeometryFileName):
        """
        addDisplayGeometry(Body self, std::string const & aGeometryFileName)

        Parameters:
            aGeometryFileName: std::string const &

        """
        return _opensim.Body_addDisplayGeometry(self, aGeometryFileName)


    def getMass(self):
        """
        getMass(Body self) -> double

        Parameters:
            self: OpenSim::Body const *

        """
        return _opensim.Body_getMass(self)


    def setMass(self, aMass):
        """
        setMass(Body self, double aMass) -> bool

        Parameters:
            aMass: double

        """
        return _opensim.Body_setMass(self, aMass)


    def getMassCenter(self, rVec):
        """
        getMassCenter(Body self, Vec3 rVec)

        Parameters:
            rVec: SimTK::Vec3 &

        """
        return _opensim.Body_getMassCenter(self, rVec)


    def setMassCenter(self, aVec):
        """
        setMassCenter(Body self, Vec3 aVec) -> bool

        Parameters:
            aVec: SimTK::Vec3 const &

        """
        return _opensim.Body_setMassCenter(self, aVec)


    def getInertia(self, rInertia):
        """
        getInertia(Body self, Mat33 rInertia)

        Parameters:
            rInertia: SimTK::Mat33 &

        """
        return _opensim.Body_getInertia(self, rInertia)


    def setInertia(self, aInertia):
        """
        setInertia(Body self, Inertia aInertia) -> bool

        Parameters:
            aInertia: SimTK::Inertia const &

        """
        return _opensim.Body_setInertia(self, aInertia)


    def hasJoint(self):
        """
        hasJoint(Body self) -> bool

        Parameters:
            self: OpenSim::Body const *

        """
        return _opensim.Body_hasJoint(self)


    def getJoint(self):
        """
        getJoint(Body self) -> Joint &

        Parameters:
            self: OpenSim::Body const *

        """
        return _opensim.Body_getJoint(self)


    def setJoint(self, aJoint):
        """
        setJoint(Body self, Joint & aJoint)

        Parameters:
            aJoint: Joint &

        """
        return _opensim.Body_setJoint(self, aJoint)


    def scale(self, aScaleFactors, aScaleMass=False):
        """
        scale(Body self, Vec3 aScaleFactors, bool aScaleMass=False)

        Parameters:
            aScaleFactors: SimTK::Vec3 const &
            aScaleMass: bool

        scale(Body self, Vec3 aScaleFactors)

        Parameters:
            aScaleFactors: SimTK::Vec3 const &

        """
        return _opensim.Body_scale(self, aScaleFactors, aScaleMass)


    def scaleInertialProperties(self, aScaleFactors, aScaleMass=True):
        """
        scaleInertialProperties(Body self, Vec3 aScaleFactors, bool aScaleMass=True)

        Parameters:
            aScaleFactors: SimTK::Vec3 const &
            aScaleMass: bool

        scaleInertialProperties(Body self, Vec3 aScaleFactors)

        Parameters:
            aScaleFactors: SimTK::Vec3 const &

        """
        return _opensim.Body_scaleInertialProperties(self, aScaleFactors, aScaleMass)


    def scaleMass(self, aScaleFactor):
        """
        scaleMass(Body self, double aScaleFactor)

        Parameters:
            aScaleFactor: double

        """
        return _opensim.Body_scaleMass(self, aScaleFactor)


    def getDisplayer(self):
        """
        getDisplayer(Body self) -> VisibleObject

        Parameters:
            self: OpenSim::Body const *

        """
        return _opensim.Body_getDisplayer(self)


    def updDisplayer(self):
        """
        updDisplayer(Body self) -> VisibleObject

        Parameters:
            self: OpenSim::Body *

        """
        return _opensim.Body_updDisplayer(self)


    def getIndex(self):
        """
        getIndex(Body self) -> SimTK::MobilizedBodyIndex const

        Parameters:
            self: OpenSim::Body const *

        """
        return _opensim.Body_getIndex(self)


    def getScaleFactors(self, aScaleFactors):
        """
        getScaleFactors(Body self, Vec3 aScaleFactors)

        Parameters:
            aScaleFactors: SimTK::Vec3 &

        """
        return _opensim.Body_getScaleFactors(self, aScaleFactors)


    def addWrapObject(self, wrapObject):
        """
        addWrapObject(Body self, WrapObject wrapObject)

        Parameters:
            wrapObject: OpenSim::WrapObject *

        """
        return _opensim.Body_addWrapObject(self, wrapObject)


    def getWrapObject(self, aName):
        """
        getWrapObject(Body self, std::string const & aName) -> WrapObject

        Parameters:
            aName: std::string const &

        """
        return _opensim.Body_getWrapObject(self, aName)


    def getWrapObjectSet(self):
        """
        getWrapObjectSet(Body self) -> WrapObjectSet

        Parameters:
            self: OpenSim::Body const *

        """
        return _opensim.Body_getWrapObjectSet(self)


    def getMassProperties(self):
        """
        getMassProperties(Body self) -> MassProperties

        Parameters:
            self: OpenSim::Body *

        """
        return _opensim.Body_getMassProperties(self)


    def getNumStateVariables(self):
        """
        getNumStateVariables(Body self) -> int

        Parameters:
            self: OpenSim::Body const *

        """
        return _opensim.Body_getNumStateVariables(self)

Body_swigregister = _opensim.Body_swigregister
Body_swigregister(Body)

def Body_safeDownCast(obj):
    """
    Body_safeDownCast(OpenSimObject obj) -> Body

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Body_safeDownCast(obj)

def Body_getClassName():
    """Body_getClassName() -> std::string const &"""
    return _opensim.Body_getClassName()

class SetBodies(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::Body)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetBodies, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetBodies, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetBodies

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetBodies_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetBodies self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetBodies_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetBodies_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetBodies self) -> SetBodies

        Parameters:
            self: OpenSim::Set< OpenSim::Body > const *

        """
        return _opensim.SetBodies_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetBodies self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::Body > const *

        """
        return _opensim.SetBodies_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetBodies
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Body)> self) -> SetBodies
        __init__(OpenSim::Set<(OpenSim::Body)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetBodies

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Body)> self, std::string const & aFileName) -> SetBodies

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Body)> self, SetBodies aSet) -> SetBodies

        Parameters:
            aSet: OpenSim::Set< OpenSim::Body > const &

        """
        this = _opensim.new_SetBodies(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetBodies self)

        Parameters:
            self: OpenSim::Set< OpenSim::Body > *

        """
        return _opensim.SetBodies_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetBodies self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetBodies_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetBodies self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetBodies_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetBodies self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Body > const *

        """
        return _opensim.SetBodies_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetBodies self, Body aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::Body const *
            aStartIndex: int

        getIndex(SetBodies self, Body aObject) -> int

        Parameters:
            aObject: OpenSim::Body const *

        getIndex(SetBodies self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetBodies self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetBodies_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetBodies self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetBodies_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetBodies self, Body aObject) -> bool

        Parameters:
            aObject: OpenSim::Body *

        """
        return _opensim.SetBodies_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetBodies self, Body aObject) -> bool

        Parameters:
            aObject: OpenSim::Body const &

        """
        return _opensim.SetBodies_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetBodies self, int aIndex, Body aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Body *

        """
        return _opensim.SetBodies_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetBodies self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetBodies self, Body aObject) -> bool

        Parameters:
            aObject: OpenSim::Body const *

        """
        return _opensim.SetBodies_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetBodies self)

        Parameters:
            self: OpenSim::Set< OpenSim::Body > *

        """
        return _opensim.SetBodies_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetBodies self, int aIndex, Body aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Body *
            preserveGroups: bool

        set(SetBodies self, int aIndex, Body aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Body *

        """
        return _opensim.SetBodies_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetBodies self, int aIndex) -> Body

        Parameters:
            aIndex: int

        get(SetBodies self, std::string const & aName) -> Body

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetBodies_get(self, *args)


    def contains(self, aName):
        """
        contains(SetBodies self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetBodies_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetBodies self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetBodies_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetBodies self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Body > const *

        """
        return _opensim.SetBodies_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetBodies self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetBodies_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetBodies self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetBodies_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetBodies self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetBodies_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetBodies self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetBodies_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetBodies self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetBodies_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetBodies self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetBodies self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetBodies_getGroup(self, *args)

SetBodies_swigregister = _opensim.SetBodies_swigregister
SetBodies_swigregister(SetBodies)

def SetBodies_safeDownCast(obj):
    """
    SetBodies_safeDownCast(OpenSimObject obj) -> SetBodies

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetBodies_safeDownCast(obj)

def SetBodies_getClassName():
    """SetBodies_getClassName() -> std::string const &"""
    return _opensim.SetBodies_getClassName()

class ModelComponentSetBodies(SetBodies):
    """Proxy of C++ OpenSim::ModelComponentSet<(OpenSim::Body)> class"""
    __swig_setmethods__ = {}
    for _s in [SetBodies]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponentSetBodies, name, value)
    __swig_getmethods__ = {}
    for _s in [SetBodies]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponentSetBodies, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelComponentSetBodies

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ModelComponentSetBodies_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ModelComponentSetBodies self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ModelComponentSetBodies_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ModelComponentSetBodies_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ModelComponentSetBodies self) -> ModelComponentSetBodies

        Parameters:
            self: OpenSim::ModelComponentSet< OpenSim::Body > const *

        """
        return _opensim.ModelComponentSetBodies_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponentSetBodies self) -> std::string const &

        Parameters:
            self: OpenSim::ModelComponentSet< OpenSim::Body > const *

        """
        return _opensim.ModelComponentSetBodies_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ModelComponentSet<(OpenSim::Body)> self) -> ModelComponentSetBodies
        __init__(OpenSim::ModelComponentSet<(OpenSim::Body)> self, Model model) -> ModelComponentSetBodies

        Parameters:
            model: OpenSim::Model &

        __init__(OpenSim::ModelComponentSet<(OpenSim::Body)> self, Model model, std::string const & fileName, bool aUpdateFromXMLNode=True) -> ModelComponentSetBodies

        Parameters:
            model: OpenSim::Model &
            fileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::ModelComponentSet<(OpenSim::Body)> self, Model model, std::string const & fileName) -> ModelComponentSetBodies

        Parameters:
            model: OpenSim::Model &
            fileName: std::string const &

        __init__(OpenSim::ModelComponentSet<(OpenSim::Body)> self, ModelComponentSetBodies source) -> ModelComponentSetBodies

        Parameters:
            source: OpenSim::ModelComponentSet< OpenSim::Body > const &

        """
        this = _opensim.new_ModelComponentSetBodies(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def insert(self, aIndex, aObject):
        """
        insert(ModelComponentSetBodies self, int aIndex, Body aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Body *

        """
        return _opensim.ModelComponentSetBodies_insert(self, aIndex, aObject)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(ModelComponentSetBodies self, int aIndex, Body aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Body *
            preserveGroups: bool

        set(ModelComponentSetBodies self, int aIndex, Body aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Body *

        """
        return _opensim.ModelComponentSetBodies_set(self, aIndex, aObject, preserveGroups)


    def invokeConnectToModel(self, model):
        """
        invokeConnectToModel(ModelComponentSetBodies self, Model model)

        Parameters:
            model: OpenSim::Model &

        """
        return _opensim.ModelComponentSetBodies_invokeConnectToModel(self, model)


    def invokeAddToSystem(self, system):
        """
        invokeAddToSystem(ModelComponentSetBodies self, SimTK::MultibodySystem & system)

        Parameters:
            system: SimTK::MultibodySystem &

        """
        return _opensim.ModelComponentSetBodies_invokeAddToSystem(self, system)


    def invokeInitStateFromProperties(self, state):
        """
        invokeInitStateFromProperties(ModelComponentSetBodies self, State state)

        Parameters:
            state: SimTK::State &

        """
        return _opensim.ModelComponentSetBodies_invokeInitStateFromProperties(self, state)


    def invokeSetPropertiesFromState(self, state):
        """
        invokeSetPropertiesFromState(ModelComponentSetBodies self, State state)

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.ModelComponentSetBodies_invokeSetPropertiesFromState(self, state)


    def invokeGenerateDecorations(self, fixed, hints, state, appendToThis):
        """
        invokeGenerateDecorations(ModelComponentSetBodies self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters:
            fixed: bool
            hints: OpenSim::ModelDisplayHints const &
            state: SimTK::State const &
            appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _opensim.ModelComponentSetBodies_invokeGenerateDecorations(self, fixed, hints, state, appendToThis)

    __swig_destroy__ = _opensim.delete_ModelComponentSetBodies
    __del__ = lambda self: None
ModelComponentSetBodies_swigregister = _opensim.ModelComponentSetBodies_swigregister
ModelComponentSetBodies_swigregister(ModelComponentSetBodies)

def ModelComponentSetBodies_safeDownCast(obj):
    """
    ModelComponentSetBodies_safeDownCast(OpenSimObject obj) -> ModelComponentSetBodies

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ModelComponentSetBodies_safeDownCast(obj)

def ModelComponentSetBodies_getClassName():
    """ModelComponentSetBodies_getClassName() -> std::string const &"""
    return _opensim.ModelComponentSetBodies_getClassName()

class BodySet(ModelComponentSetBodies):
    """Proxy of C++ OpenSim::BodySet class"""
    __swig_setmethods__ = {}
    for _s in [ModelComponentSetBodies]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BodySet, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponentSetBodies]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BodySet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> BodySet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.BodySet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(BodySet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.BodySet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.BodySet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(BodySet self) -> BodySet

        Parameters:
            self: OpenSim::BodySet const *

        """
        return _opensim.BodySet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(BodySet self) -> std::string const &

        Parameters:
            self: OpenSim::BodySet const *

        """
        return _opensim.BodySet_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_BodySet
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::BodySet self) -> BodySet
        __init__(OpenSim::BodySet self, Model model) -> BodySet

        Parameters:
            model: OpenSim::Model &

        __init__(OpenSim::BodySet self, BodySet aAbsBodySet) -> BodySet

        Parameters:
            aAbsBodySet: OpenSim::BodySet const &

        __init__(OpenSim::BodySet self, Model model, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> BodySet

        Parameters:
            model: OpenSim::Model &
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::BodySet self, Model model, std::string const & aFileName) -> BodySet

        Parameters:
            model: OpenSim::Model &
            aFileName: std::string const &

        """
        this = _opensim.new_BodySet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def scale(self, aScaleSet, aScaleMass=False):
        """
        scale(BodySet self, ScaleSet aScaleSet, bool aScaleMass=False)

        Parameters:
            aScaleSet: OpenSim::ScaleSet const &
            aScaleMass: bool

        scale(BodySet self, ScaleSet aScaleSet)

        Parameters:
            aScaleSet: OpenSim::ScaleSet const &

        """
        return _opensim.BodySet_scale(self, aScaleSet, aScaleMass)

    def adoptAndAppend(self, aBody):
        aBody._markAdopted()
        return super(BodySet, self).adoptAndAppend(aBody)

BodySet_swigregister = _opensim.BodySet_swigregister
BodySet_swigregister(BodySet)

def BodySet_safeDownCast(obj):
    """
    BodySet_safeDownCast(OpenSimObject obj) -> BodySet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.BodySet_safeDownCast(obj)

def BodySet_getClassName():
    """BodySet_getClassName() -> std::string const &"""
    return _opensim.BodySet_getClassName()

class BodyScale(OpenSimObject):
    """Proxy of C++ OpenSim::BodyScale class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BodyScale, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BodyScale, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> BodyScale

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.BodyScale_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(BodyScale self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.BodyScale_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.BodyScale_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(BodyScale self) -> BodyScale

        Parameters:
            self: OpenSim::BodyScale const *

        """
        return _opensim.BodyScale_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(BodyScale self) -> std::string const &

        Parameters:
            self: OpenSim::BodyScale const *

        """
        return _opensim.BodyScale_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::BodyScale self) -> BodyScale
        __init__(OpenSim::BodyScale self, BodyScale aBodyScale) -> BodyScale

        Parameters:
            aBodyScale: OpenSim::BodyScale const &

        """
        this = _opensim.new_BodyScale(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_BodyScale
    __del__ = lambda self: None

    def copyData(self, aBodyScale):
        """
        copyData(BodyScale self, BodyScale aBodyScale)

        Parameters:
            aBodyScale: OpenSim::BodyScale const &

        """
        return _opensim.BodyScale_copyData(self, aBodyScale)


    def getAxisNames(self):
        """
        getAxisNames(BodyScale self) -> ArrayStr

        Parameters:
            self: OpenSim::BodyScale *

        """
        return _opensim.BodyScale_getAxisNames(self)


    def setAxisNames(self, aAxisNames):
        """
        setAxisNames(BodyScale self, ArrayStr aAxisNames)

        Parameters:
            aAxisNames: OpenSim::Array< std::string > const &

        """
        return _opensim.BodyScale_setAxisNames(self, aAxisNames)

BodyScale_swigregister = _opensim.BodyScale_swigregister
BodyScale_swigregister(BodyScale)

def BodyScale_safeDownCast(obj):
    """
    BodyScale_safeDownCast(OpenSimObject obj) -> BodyScale

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.BodyScale_safeDownCast(obj)

def BodyScale_getClassName():
    """BodyScale_getClassName() -> std::string const &"""
    return _opensim.BodyScale_getClassName()

class SetBodyScales(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::BodyScale)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetBodyScales, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetBodyScales, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetBodyScales

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetBodyScales_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetBodyScales self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetBodyScales_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetBodyScales_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetBodyScales self) -> SetBodyScales

        Parameters:
            self: OpenSim::Set< OpenSim::BodyScale > const *

        """
        return _opensim.SetBodyScales_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetBodyScales self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::BodyScale > const *

        """
        return _opensim.SetBodyScales_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetBodyScales
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::BodyScale)> self) -> SetBodyScales
        __init__(OpenSim::Set<(OpenSim::BodyScale)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetBodyScales

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::BodyScale)> self, std::string const & aFileName) -> SetBodyScales

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::BodyScale)> self, SetBodyScales aSet) -> SetBodyScales

        Parameters:
            aSet: OpenSim::Set< OpenSim::BodyScale > const &

        """
        this = _opensim.new_SetBodyScales(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetBodyScales self)

        Parameters:
            self: OpenSim::Set< OpenSim::BodyScale > *

        """
        return _opensim.SetBodyScales_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetBodyScales self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetBodyScales_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetBodyScales self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetBodyScales_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetBodyScales self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::BodyScale > const *

        """
        return _opensim.SetBodyScales_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetBodyScales self, BodyScale aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::BodyScale const *
            aStartIndex: int

        getIndex(SetBodyScales self, BodyScale aObject) -> int

        Parameters:
            aObject: OpenSim::BodyScale const *

        getIndex(SetBodyScales self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetBodyScales self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetBodyScales_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetBodyScales self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetBodyScales_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetBodyScales self, BodyScale aObject) -> bool

        Parameters:
            aObject: OpenSim::BodyScale *

        """
        return _opensim.SetBodyScales_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetBodyScales self, BodyScale aObject) -> bool

        Parameters:
            aObject: OpenSim::BodyScale const &

        """
        return _opensim.SetBodyScales_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetBodyScales self, int aIndex, BodyScale aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::BodyScale *

        """
        return _opensim.SetBodyScales_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetBodyScales self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetBodyScales self, BodyScale aObject) -> bool

        Parameters:
            aObject: OpenSim::BodyScale const *

        """
        return _opensim.SetBodyScales_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetBodyScales self)

        Parameters:
            self: OpenSim::Set< OpenSim::BodyScale > *

        """
        return _opensim.SetBodyScales_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetBodyScales self, int aIndex, BodyScale aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::BodyScale *
            preserveGroups: bool

        set(SetBodyScales self, int aIndex, BodyScale aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::BodyScale *

        """
        return _opensim.SetBodyScales_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetBodyScales self, int aIndex) -> BodyScale

        Parameters:
            aIndex: int

        get(SetBodyScales self, std::string const & aName) -> BodyScale

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetBodyScales_get(self, *args)


    def contains(self, aName):
        """
        contains(SetBodyScales self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetBodyScales_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetBodyScales self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetBodyScales_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetBodyScales self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::BodyScale > const *

        """
        return _opensim.SetBodyScales_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetBodyScales self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetBodyScales_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetBodyScales self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetBodyScales_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetBodyScales self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetBodyScales_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetBodyScales self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetBodyScales_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetBodyScales self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetBodyScales_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetBodyScales self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetBodyScales self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetBodyScales_getGroup(self, *args)

SetBodyScales_swigregister = _opensim.SetBodyScales_swigregister
SetBodyScales_swigregister(SetBodyScales)

def SetBodyScales_safeDownCast(obj):
    """
    SetBodyScales_safeDownCast(OpenSimObject obj) -> SetBodyScales

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetBodyScales_safeDownCast(obj)

def SetBodyScales_getClassName():
    """SetBodyScales_getClassName() -> std::string const &"""
    return _opensim.SetBodyScales_getClassName()

class BodyScaleSet(SetBodyScales):
    """Proxy of C++ OpenSim::BodyScaleSet class"""
    __swig_setmethods__ = {}
    for _s in [SetBodyScales]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BodyScaleSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetBodyScales]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BodyScaleSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> BodyScaleSet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.BodyScaleSet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(BodyScaleSet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.BodyScaleSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.BodyScaleSet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(BodyScaleSet self) -> BodyScaleSet

        Parameters:
            self: OpenSim::BodyScaleSet const *

        """
        return _opensim.BodyScaleSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(BodyScaleSet self) -> std::string const &

        Parameters:
            self: OpenSim::BodyScaleSet const *

        """
        return _opensim.BodyScaleSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::BodyScaleSet self) -> BodyScaleSet
        __init__(OpenSim::BodyScaleSet self, BodyScaleSet aBodyScaleSet) -> BodyScaleSet

        Parameters:
            aBodyScaleSet: OpenSim::BodyScaleSet const &

        """
        this = _opensim.new_BodyScaleSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_BodyScaleSet
    __del__ = lambda self: None
    def adoptAndAppend(self, aBodyScale):
        aBodyScale._markAdopted()
        return super(BodyScaleSet, self).adoptAndAppend(aBodyScale)

BodyScaleSet_swigregister = _opensim.BodyScaleSet_swigregister
BodyScaleSet_swigregister(BodyScaleSet)

def BodyScaleSet_safeDownCast(obj):
    """
    BodyScaleSet_safeDownCast(OpenSimObject obj) -> BodyScaleSet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.BodyScaleSet_safeDownCast(obj)

def BodyScaleSet_getClassName():
    """BodyScaleSet_getClassName() -> std::string const &"""
    return _opensim.BodyScaleSet_getClassName()

class SimbodyEngine(OpenSimObject):
    """Proxy of C++ OpenSim::SimbodyEngine class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimbodyEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimbodyEngine, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SimbodyEngine

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SimbodyEngine_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SimbodyEngine self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SimbodyEngine_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SimbodyEngine_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SimbodyEngine self) -> SimbodyEngine

        Parameters:
            self: OpenSim::SimbodyEngine const *

        """
        return _opensim.SimbodyEngine_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SimbodyEngine self) -> std::string const &

        Parameters:
            self: OpenSim::SimbodyEngine const *

        """
        return _opensim.SimbodyEngine_getConcreteClassName(self)

    __swig_setmethods__["_model"] = _opensim.SimbodyEngine__model_set
    __swig_getmethods__["_model"] = _opensim.SimbodyEngine__model_get
    if _newclass:
        _model = _swig_property(_opensim.SimbodyEngine__model_get, _opensim.SimbodyEngine__model_set)
    __swig_destroy__ = _opensim.delete_SimbodyEngine
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::SimbodyEngine self) -> SimbodyEngine
        __init__(OpenSim::SimbodyEngine self, std::string const & aFileName) -> SimbodyEngine

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::SimbodyEngine self, SimbodyEngine aEngine) -> SimbodyEngine

        Parameters:
            aEngine: OpenSim::SimbodyEngine const &

        """
        this = _opensim.new_SimbodyEngine(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getModel(self):
        """
        getModel(SimbodyEngine self) -> Model

        Parameters:
            self: OpenSim::SimbodyEngine *

        """
        return _opensim.SimbodyEngine_getModel(self)


    def setModel(self, aModel):
        """
        setModel(SimbodyEngine self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.SimbodyEngine_setModel(self, aModel)


    def connectSimbodyEngineToModel(self, aModel):
        """
        connectSimbodyEngineToModel(SimbodyEngine self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.SimbodyEngine_connectSimbodyEngineToModel(self, aModel)


    def getGroundBody(self):
        """
        getGroundBody(SimbodyEngine self) -> Body

        Parameters:
            self: OpenSim::SimbodyEngine const *

        """
        return _opensim.SimbodyEngine_getGroundBody(self)


    def getWrapObject(self, aName):
        """
        getWrapObject(SimbodyEngine self, std::string const & aName) -> WrapObject

        Parameters:
            aName: std::string const &

        """
        return _opensim.SimbodyEngine_getWrapObject(self, aName)


    def getPosition(self, s, aBody, aPoint, rPos):
        """
        getPosition(SimbodyEngine self, State s, Body aBody, Vec3 aPoint, Vec3 rPos)

        Parameters:
            s: SimTK::State const &
            aBody: OpenSim::Body const &
            aPoint: SimTK::Vec3 const &
            rPos: SimTK::Vec3 &

        """
        return _opensim.SimbodyEngine_getPosition(self, s, aBody, aPoint, rPos)


    def getVelocity(self, s, aBody, aPoint, rVel):
        """
        getVelocity(SimbodyEngine self, State s, Body aBody, Vec3 aPoint, Vec3 rVel)

        Parameters:
            s: SimTK::State const &
            aBody: OpenSim::Body const &
            aPoint: SimTK::Vec3 const &
            rVel: SimTK::Vec3 &

        """
        return _opensim.SimbodyEngine_getVelocity(self, s, aBody, aPoint, rVel)


    def getAcceleration(self, s, aBody, aPoint, rAcc):
        """
        getAcceleration(SimbodyEngine self, State s, Body aBody, Vec3 aPoint, Vec3 rAcc)

        Parameters:
            s: SimTK::State const &
            aBody: OpenSim::Body const &
            aPoint: SimTK::Vec3 const &
            rAcc: SimTK::Vec3 &

        """
        return _opensim.SimbodyEngine_getAcceleration(self, s, aBody, aPoint, rAcc)


    def getDirectionCosines(self, *args):
        """
        getDirectionCosines(SimbodyEngine self, State s, Body aBody, double [3][3] rDirCos)

        Parameters:
            s: SimTK::State const &
            aBody: OpenSim::Body const &
            rDirCos: double [3][3]

        getDirectionCosines(SimbodyEngine self, State s, Body aBody, double * rDirCos)

        Parameters:
            s: SimTK::State const &
            aBody: OpenSim::Body const &
            rDirCos: double *

        """
        return _opensim.SimbodyEngine_getDirectionCosines(self, *args)


    def getAngularVelocity(self, s, aBody, rAngVel):
        """
        getAngularVelocity(SimbodyEngine self, State s, Body aBody, Vec3 rAngVel)

        Parameters:
            s: SimTK::State const &
            aBody: OpenSim::Body const &
            rAngVel: SimTK::Vec3 &

        """
        return _opensim.SimbodyEngine_getAngularVelocity(self, s, aBody, rAngVel)


    def getAngularVelocityBodyLocal(self, s, aBody, rAngVel):
        """
        getAngularVelocityBodyLocal(SimbodyEngine self, State s, Body aBody, Vec3 rAngVel)

        Parameters:
            s: SimTK::State const &
            aBody: OpenSim::Body const &
            rAngVel: SimTK::Vec3 &

        """
        return _opensim.SimbodyEngine_getAngularVelocityBodyLocal(self, s, aBody, rAngVel)


    def getAngularAcceleration(self, s, aBody, rAngAcc):
        """
        getAngularAcceleration(SimbodyEngine self, State s, Body aBody, Vec3 rAngAcc)

        Parameters:
            s: SimTK::State const &
            aBody: OpenSim::Body const &
            rAngAcc: SimTK::Vec3 &

        """
        return _opensim.SimbodyEngine_getAngularAcceleration(self, s, aBody, rAngAcc)


    def getAngularAccelerationBodyLocal(self, s, aBody, rAngAcc):
        """
        getAngularAccelerationBodyLocal(SimbodyEngine self, State s, Body aBody, Vec3 rAngAcc)

        Parameters:
            s: SimTK::State const &
            aBody: OpenSim::Body const &
            rAngAcc: SimTK::Vec3 &

        """
        return _opensim.SimbodyEngine_getAngularAccelerationBodyLocal(self, s, aBody, rAngAcc)


    def getTransform(self, s, aBody):
        """
        getTransform(SimbodyEngine self, State s, Body aBody) -> Transform

        Parameters:
            s: SimTK::State const &
            aBody: OpenSim::Body const &

        """
        return _opensim.SimbodyEngine_getTransform(self, s, aBody)


    def computeReactions(self, s, rForces, rTorques):
        """
        computeReactions(SimbodyEngine self, State s, VectorOfVec3 rForces, VectorOfVec3 rTorques)

        Parameters:
            s: SimTK::State const &
            rForces: SimTK::Vector_< SimTK::Vec3 > &
            rTorques: SimTK::Vector_< SimTK::Vec3 > &

        """
        return _opensim.SimbodyEngine_computeReactions(self, s, rForces, rTorques)


    def formCompleteStorages(self, s, aQIn, rQComplete, rUComplete):
        """
        formCompleteStorages(SimbodyEngine self, State s, Storage aQIn, OpenSim::Storage *& rQComplete, OpenSim::Storage *& rUComplete)

        Parameters:
            s: SimTK::State const &
            aQIn: OpenSim::Storage const &
            rQComplete: OpenSim::Storage *&
            rUComplete: OpenSim::Storage *&

        """
        return _opensim.SimbodyEngine_formCompleteStorages(self, s, aQIn, rQComplete, rUComplete)


    def formEulerTransform(self, s, aBody, rE):
        """
        formEulerTransform(SimbodyEngine self, State s, Body aBody, double * rE)

        Parameters:
            s: SimTK::State const &
            aBody: OpenSim::Body const &
            rE: double *

        """
        return _opensim.SimbodyEngine_formEulerTransform(self, s, aBody, rE)


    def transform(self, *args):
        """
        transform(SimbodyEngine self, State s, Body aBodyFrom, double const [3] aVec, Body aBodyTo, double [3] rVec)

        Parameters:
            s: SimTK::State const &
            aBodyFrom: OpenSim::Body const &
            aVec: double const [3]
            aBodyTo: OpenSim::Body const &
            rVec: double [3]

        transform(SimbodyEngine self, State s, Body aBodyFrom, Vec3 aVec, Body aBodyTo, Vec3 rVec)

        Parameters:
            s: SimTK::State const &
            aBodyFrom: OpenSim::Body const &
            aVec: SimTK::Vec3 const &
            aBodyTo: OpenSim::Body const &
            rVec: SimTK::Vec3 &

        """
        return _opensim.SimbodyEngine_transform(self, *args)


    def transformPosition(self, *args):
        """
        transformPosition(SimbodyEngine self, State s, Body aBodyFrom, double const [3] aPos, Body aBodyTo, double [3] rPos)

        Parameters:
            s: SimTK::State const &
            aBodyFrom: OpenSim::Body const &
            aPos: double const [3]
            aBodyTo: OpenSim::Body const &
            rPos: double [3]

        transformPosition(SimbodyEngine self, State s, Body aBodyFrom, Vec3 aPos, Body aBodyTo, Vec3 rPos)

        Parameters:
            s: SimTK::State const &
            aBodyFrom: OpenSim::Body const &
            aPos: SimTK::Vec3 const &
            aBodyTo: OpenSim::Body const &
            rPos: SimTK::Vec3 &

        transformPosition(SimbodyEngine self, State s, Body aBodyFrom, double const [3] aPos, double [3] rPos)

        Parameters:
            s: SimTK::State const &
            aBodyFrom: OpenSim::Body const &
            aPos: double const [3]
            rPos: double [3]

        transformPosition(SimbodyEngine self, State s, Body aBodyFrom, Vec3 aPos, Vec3 rPos)

        Parameters:
            s: SimTK::State const &
            aBodyFrom: OpenSim::Body const &
            aPos: SimTK::Vec3 const &
            rPos: SimTK::Vec3 &

        """
        return _opensim.SimbodyEngine_transformPosition(self, *args)


    def calcDistance(self, *args):
        """
        calcDistance(SimbodyEngine self, State s, Body aBody1, double const [3] aPoint1, Body aBody2, double const [3] aPoint2) -> double

        Parameters:
            s: SimTK::State const &
            aBody1: OpenSim::Body const &
            aPoint1: double const [3]
            aBody2: OpenSim::Body const &
            aPoint2: double const [3]

        calcDistance(SimbodyEngine self, State s, Body aBody1, Vec3 aPoint1, Body aBody2, Vec3 aPoint2) -> double

        Parameters:
            s: SimTK::State const &
            aBody1: OpenSim::Body const &
            aPoint1: SimTK::Vec3 const &
            aBody2: OpenSim::Body const &
            aPoint2: SimTK::Vec3 const &

        """
        return _opensim.SimbodyEngine_calcDistance(self, *args)


    def convertDegreesToRadians(self, *args):
        """
        convertDegreesToRadians(SimbodyEngine self, Storage rStorage)

        Parameters:
            rStorage: OpenSim::Storage &

        convertDegreesToRadians(SimbodyEngine self, double * aQDeg, double * rQRad)

        Parameters:
            aQDeg: double *
            rQRad: double *

        """
        return _opensim.SimbodyEngine_convertDegreesToRadians(self, *args)


    def convertRadiansToDegrees(self, *args):
        """
        convertRadiansToDegrees(SimbodyEngine self, Storage rStorage)

        Parameters:
            rStorage: OpenSim::Storage &

        convertRadiansToDegrees(SimbodyEngine self, double * aQRad, double * rQDeg)

        Parameters:
            aQRad: double *
            rQDeg: double *

        """
        return _opensim.SimbodyEngine_convertRadiansToDegrees(self, *args)


    def convertAnglesToDirectionCosines(self, *args):
        """
        convertAnglesToDirectionCosines(SimbodyEngine self, double aE1, double aE2, double aE3, double [3][3] rDirCos)

        Parameters:
            aE1: double
            aE2: double
            aE3: double
            rDirCos: double [3][3]

        convertAnglesToDirectionCosines(SimbodyEngine self, double aE1, double aE2, double aE3, double * rDirCos)

        Parameters:
            aE1: double
            aE2: double
            aE3: double
            rDirCos: double *

        """
        return _opensim.SimbodyEngine_convertAnglesToDirectionCosines(self, *args)


    def convertDirectionCosinesToAngles(self, *args):
        """
        convertDirectionCosinesToAngles(SimbodyEngine self, double [3][3] aDirCos, double * rE1, double * rE2, double * rE3)

        Parameters:
            aDirCos: double [3][3]
            rE1: double *
            rE2: double *
            rE3: double *

        convertDirectionCosinesToAngles(SimbodyEngine self, double * aDirCos, double * rE1, double * rE2, double * rE3)

        Parameters:
            aDirCos: double *
            rE1: double *
            rE2: double *
            rE3: double *

        """
        return _opensim.SimbodyEngine_convertDirectionCosinesToAngles(self, *args)


    def convertDirectionCosinesToQuaternions(self, *args):
        """
        convertDirectionCosinesToQuaternions(SimbodyEngine self, double [3][3] aDirCos, double * rQ1, double * rQ2, double * rQ3, double * rQ4)

        Parameters:
            aDirCos: double [3][3]
            rQ1: double *
            rQ2: double *
            rQ3: double *
            rQ4: double *

        convertDirectionCosinesToQuaternions(SimbodyEngine self, double * aDirCos, double * rQ1, double * rQ2, double * rQ3, double * rQ4)

        Parameters:
            aDirCos: double *
            rQ1: double *
            rQ2: double *
            rQ3: double *
            rQ4: double *

        """
        return _opensim.SimbodyEngine_convertDirectionCosinesToQuaternions(self, *args)


    def convertQuaternionsToDirectionCosines(self, *args):
        """
        convertQuaternionsToDirectionCosines(SimbodyEngine self, double aQ1, double aQ2, double aQ3, double aQ4, double [3][3] rDirCos)

        Parameters:
            aQ1: double
            aQ2: double
            aQ3: double
            aQ4: double
            rDirCos: double [3][3]

        convertQuaternionsToDirectionCosines(SimbodyEngine self, double aQ1, double aQ2, double aQ3, double aQ4, double * rDirCos)

        Parameters:
            aQ1: double
            aQ2: double
            aQ3: double
            aQ4: double
            rDirCos: double *

        """
        return _opensim.SimbodyEngine_convertQuaternionsToDirectionCosines(self, *args)

SimbodyEngine_swigregister = _opensim.SimbodyEngine_swigregister
SimbodyEngine_swigregister(SimbodyEngine)

def SimbodyEngine_safeDownCast(obj):
    """
    SimbodyEngine_safeDownCast(OpenSimObject obj) -> SimbodyEngine

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SimbodyEngine_safeDownCast(obj)

def SimbodyEngine_getClassName():
    """SimbodyEngine_getClassName() -> std::string const &"""
    return _opensim.SimbodyEngine_getClassName()

class TransformAxis(OpenSimObject):
    """Proxy of C++ OpenSim::TransformAxis class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransformAxis, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransformAxis, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> TransformAxis

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.TransformAxis_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(TransformAxis self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.TransformAxis_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.TransformAxis_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(TransformAxis self) -> TransformAxis

        Parameters:
            self: OpenSim::TransformAxis const *

        """
        return _opensim.TransformAxis_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(TransformAxis self) -> std::string const &

        Parameters:
            self: OpenSim::TransformAxis const *

        """
        return _opensim.TransformAxis_getConcreteClassName(self)


    def copyProperty_coordinates(self, source):
        """
        copyProperty_coordinates(TransformAxis self, TransformAxis source)

        Parameters:
            source: OpenSim::TransformAxis::Self const &

        """
        return _opensim.TransformAxis_copyProperty_coordinates(self, source)


    def get_coordinates(self, i):
        """
        get_coordinates(TransformAxis self, int i) -> std::string const &

        Parameters:
            i: int

        """
        return _opensim.TransformAxis_get_coordinates(self, i)


    def upd_coordinates(self, i):
        """
        upd_coordinates(TransformAxis self, int i) -> std::string &

        Parameters:
            i: int

        """
        return _opensim.TransformAxis_upd_coordinates(self, i)


    def set_coordinates(self, i, value):
        """
        set_coordinates(TransformAxis self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        """
        return _opensim.TransformAxis_set_coordinates(self, i, value)


    def append_coordinates(self, value):
        """
        append_coordinates(TransformAxis self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.TransformAxis_append_coordinates(self, value)


    def constructProperty_coordinates(self):
        """
        constructProperty_coordinates(TransformAxis self)

        Parameters:
            self: OpenSim::TransformAxis *

        """
        return _opensim.TransformAxis_constructProperty_coordinates(self)


    def copyProperty_axis(self, source):
        """
        copyProperty_axis(TransformAxis self, TransformAxis source)

        Parameters:
            source: OpenSim::TransformAxis::Self const &

        """
        return _opensim.TransformAxis_copyProperty_axis(self, source)


    def append_axis(self, value):
        """
        append_axis(TransformAxis self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.TransformAxis_append_axis(self, value)


    def constructProperty_axis(self, initValue):
        """
        constructProperty_axis(TransformAxis self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.TransformAxis_constructProperty_axis(self, initValue)


    def get_axis(self, *args):
        """
        get_axis(TransformAxis self, int i) -> Vec3

        Parameters:
            i: int

        get_axis(TransformAxis self) -> Vec3

        Parameters:
            self: OpenSim::TransformAxis const *

        """
        return _opensim.TransformAxis_get_axis(self, *args)


    def upd_axis(self, *args):
        """
        upd_axis(TransformAxis self, int i) -> Vec3

        Parameters:
            i: int

        upd_axis(TransformAxis self) -> Vec3

        Parameters:
            self: OpenSim::TransformAxis *

        """
        return _opensim.TransformAxis_upd_axis(self, *args)


    def set_axis(self, *args):
        """
        set_axis(TransformAxis self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_axis(TransformAxis self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.TransformAxis_set_axis(self, *args)


    def copyProperty_function(self, source):
        """
        copyProperty_function(TransformAxis self, TransformAxis source)

        Parameters:
            source: OpenSim::TransformAxis::Self const &

        """
        return _opensim.TransformAxis_copyProperty_function(self, source)


    def append_function(self, value):
        """
        append_function(TransformAxis self, Function value) -> int

        Parameters:
            value: OpenSim::Function const &

        """
        return _opensim.TransformAxis_append_function(self, value)


    def constructProperty_function(self, *args):
        """
        constructProperty_function(TransformAxis self)
        constructProperty_function(TransformAxis self, Function initValue)

        Parameters:
            initValue: OpenSim::Function const &

        """
        return _opensim.TransformAxis_constructProperty_function(self, *args)


    def get_function(self, *args):
        """
        get_function(TransformAxis self, int i) -> Function

        Parameters:
            i: int

        get_function(TransformAxis self) -> Function

        Parameters:
            self: OpenSim::TransformAxis const *

        """
        return _opensim.TransformAxis_get_function(self, *args)


    def upd_function(self, *args):
        """
        upd_function(TransformAxis self, int i) -> Function

        Parameters:
            i: int

        upd_function(TransformAxis self) -> Function

        Parameters:
            self: OpenSim::TransformAxis *

        """
        return _opensim.TransformAxis_upd_function(self, *args)


    def set_function(self, *args):
        """
        set_function(TransformAxis self, int i, Function value)

        Parameters:
            i: int
            value: OpenSim::Function const &

        set_function(TransformAxis self, Function value)

        Parameters:
            value: OpenSim::Function const &

        """
        return _opensim.TransformAxis_set_function(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::TransformAxis self) -> TransformAxis
        __init__(OpenSim::TransformAxis self, ArrayStr coordNames, Vec3 axis) -> TransformAxis

        Parameters:
            coordNames: OpenSim::Array< std::string > const &
            axis: SimTK::Vec3 const &

        __init__(OpenSim::TransformAxis self, SimTK::Xml::Element & node) -> TransformAxis

        Parameters:
            node: SimTK::Xml::Element &

        """
        this = _opensim.new_TransformAxis(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setCoordinateNames(self, coordNames):
        """
        setCoordinateNames(TransformAxis self, ArrayStr coordNames)

        Parameters:
            coordNames: OpenSim::Array< std::string > const &

        """
        return _opensim.TransformAxis_setCoordinateNames(self, coordNames)


    def getCoordinateNames(self):
        """
        getCoordinateNames(TransformAxis self) -> OpenSim::Property< std::string > const &

        Parameters:
            self: OpenSim::TransformAxis const *

        """
        return _opensim.TransformAxis_getCoordinateNames(self)


    def getCoordinateNamesInArray(self):
        """
        getCoordinateNamesInArray(TransformAxis self) -> ArrayStr

        Parameters:
            self: OpenSim::TransformAxis const *

        """
        return _opensim.TransformAxis_getCoordinateNamesInArray(self)


    def setAxis(self, axis):
        """
        setAxis(TransformAxis self, Vec3 axis)

        Parameters:
            axis: SimTK::Vec3 const &

        """
        return _opensim.TransformAxis_setAxis(self, axis)


    def getAxis(self, *args):
        """
        getAxis(TransformAxis self) -> Vec3
        getAxis(TransformAxis self, Vec3 axis)

        Parameters:
            axis: SimTK::Vec3 &

        getAxis(TransformAxis self, double [] rAxis)

        Parameters:
            rAxis: double []

        getAxis(TransformAxis self, int which) -> double

        Parameters:
            which: int

        """
        return _opensim.TransformAxis_getAxis(self, *args)


    def hasFunction(self):
        """
        hasFunction(TransformAxis self) -> bool

        Parameters:
            self: OpenSim::TransformAxis const *

        """
        return _opensim.TransformAxis_hasFunction(self)


    def getFunction(self):
        """
        getFunction(TransformAxis self) -> Function

        Parameters:
            self: OpenSim::TransformAxis const *

        """
        return _opensim.TransformAxis_getFunction(self)


    def updFunction(self):
        """
        updFunction(TransformAxis self) -> Function

        Parameters:
            self: OpenSim::TransformAxis *

        """
        return _opensim.TransformAxis_updFunction(self)


    def setFunction(self, *args):
        """
        setFunction(TransformAxis self, Function function)

        Parameters:
            function: OpenSim::Function *

        setFunction(TransformAxis self, Function function)

        Parameters:
            function: OpenSim::Function const &

        """
        return _opensim.TransformAxis_setFunction(self, *args)


    def getJoint(self):
        """
        getJoint(TransformAxis self) -> Joint

        Parameters:
            self: OpenSim::TransformAxis const *

        """
        return _opensim.TransformAxis_getJoint(self)


    def getValue(self, s):
        """
        getValue(TransformAxis self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.TransformAxis_getValue(self, s)


    def connectToJoint(self, owningJoint):
        """
        connectToJoint(TransformAxis self, Joint owningJoint)

        Parameters:
            owningJoint: OpenSim::Joint const &

        """
        return _opensim.TransformAxis_connectToJoint(self, owningJoint)

    __swig_destroy__ = _opensim.delete_TransformAxis
    __del__ = lambda self: None
TransformAxis_swigregister = _opensim.TransformAxis_swigregister
TransformAxis_swigregister(TransformAxis)

def TransformAxis_safeDownCast(obj):
    """
    TransformAxis_safeDownCast(OpenSimObject obj) -> TransformAxis

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.TransformAxis_safeDownCast(obj)

def TransformAxis_getClassName():
    """TransformAxis_getClassName() -> std::string const &"""
    return _opensim.TransformAxis_getClassName()

class SpatialTransform(OpenSimObject):
    """Proxy of C++ OpenSim::SpatialTransform class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpatialTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpatialTransform, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SpatialTransform

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SpatialTransform_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SpatialTransform self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SpatialTransform_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SpatialTransform_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SpatialTransform self) -> SpatialTransform

        Parameters:
            self: OpenSim::SpatialTransform const *

        """
        return _opensim.SpatialTransform_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SpatialTransform self) -> std::string const &

        Parameters:
            self: OpenSim::SpatialTransform const *

        """
        return _opensim.SpatialTransform_getConcreteClassName(self)


    def copyProperty_rotation1(self, source):
        """
        copyProperty_rotation1(SpatialTransform self, SpatialTransform source)

        Parameters:
            source: OpenSim::SpatialTransform::Self const &

        """
        return _opensim.SpatialTransform_copyProperty_rotation1(self, source)


    def append_rotation1(self, value):
        """
        append_rotation1(SpatialTransform self, TransformAxis value) -> int

        Parameters:
            value: OpenSim::TransformAxis const &

        """
        return _opensim.SpatialTransform_append_rotation1(self, value)


    def constructProperty_rotation1(self, initValue):
        """
        constructProperty_rotation1(SpatialTransform self, TransformAxis initValue)

        Parameters:
            initValue: OpenSim::TransformAxis const &

        """
        return _opensim.SpatialTransform_constructProperty_rotation1(self, initValue)


    def get_rotation1(self, *args):
        """
        get_rotation1(SpatialTransform self, int i) -> TransformAxis

        Parameters:
            i: int

        get_rotation1(SpatialTransform self) -> TransformAxis

        Parameters:
            self: OpenSim::SpatialTransform const *

        """
        return _opensim.SpatialTransform_get_rotation1(self, *args)


    def upd_rotation1(self, *args):
        """
        upd_rotation1(SpatialTransform self, int i) -> TransformAxis

        Parameters:
            i: int

        upd_rotation1(SpatialTransform self) -> TransformAxis

        Parameters:
            self: OpenSim::SpatialTransform *

        """
        return _opensim.SpatialTransform_upd_rotation1(self, *args)


    def set_rotation1(self, *args):
        """
        set_rotation1(SpatialTransform self, int i, TransformAxis value)

        Parameters:
            i: int
            value: OpenSim::TransformAxis const &

        set_rotation1(SpatialTransform self, TransformAxis value)

        Parameters:
            value: OpenSim::TransformAxis const &

        """
        return _opensim.SpatialTransform_set_rotation1(self, *args)


    def copyProperty_rotation2(self, source):
        """
        copyProperty_rotation2(SpatialTransform self, SpatialTransform source)

        Parameters:
            source: OpenSim::SpatialTransform::Self const &

        """
        return _opensim.SpatialTransform_copyProperty_rotation2(self, source)


    def append_rotation2(self, value):
        """
        append_rotation2(SpatialTransform self, TransformAxis value) -> int

        Parameters:
            value: OpenSim::TransformAxis const &

        """
        return _opensim.SpatialTransform_append_rotation2(self, value)


    def constructProperty_rotation2(self, initValue):
        """
        constructProperty_rotation2(SpatialTransform self, TransformAxis initValue)

        Parameters:
            initValue: OpenSim::TransformAxis const &

        """
        return _opensim.SpatialTransform_constructProperty_rotation2(self, initValue)


    def get_rotation2(self, *args):
        """
        get_rotation2(SpatialTransform self, int i) -> TransformAxis

        Parameters:
            i: int

        get_rotation2(SpatialTransform self) -> TransformAxis

        Parameters:
            self: OpenSim::SpatialTransform const *

        """
        return _opensim.SpatialTransform_get_rotation2(self, *args)


    def upd_rotation2(self, *args):
        """
        upd_rotation2(SpatialTransform self, int i) -> TransformAxis

        Parameters:
            i: int

        upd_rotation2(SpatialTransform self) -> TransformAxis

        Parameters:
            self: OpenSim::SpatialTransform *

        """
        return _opensim.SpatialTransform_upd_rotation2(self, *args)


    def set_rotation2(self, *args):
        """
        set_rotation2(SpatialTransform self, int i, TransformAxis value)

        Parameters:
            i: int
            value: OpenSim::TransformAxis const &

        set_rotation2(SpatialTransform self, TransformAxis value)

        Parameters:
            value: OpenSim::TransformAxis const &

        """
        return _opensim.SpatialTransform_set_rotation2(self, *args)


    def copyProperty_rotation3(self, source):
        """
        copyProperty_rotation3(SpatialTransform self, SpatialTransform source)

        Parameters:
            source: OpenSim::SpatialTransform::Self const &

        """
        return _opensim.SpatialTransform_copyProperty_rotation3(self, source)


    def append_rotation3(self, value):
        """
        append_rotation3(SpatialTransform self, TransformAxis value) -> int

        Parameters:
            value: OpenSim::TransformAxis const &

        """
        return _opensim.SpatialTransform_append_rotation3(self, value)


    def constructProperty_rotation3(self, initValue):
        """
        constructProperty_rotation3(SpatialTransform self, TransformAxis initValue)

        Parameters:
            initValue: OpenSim::TransformAxis const &

        """
        return _opensim.SpatialTransform_constructProperty_rotation3(self, initValue)


    def get_rotation3(self, *args):
        """
        get_rotation3(SpatialTransform self, int i) -> TransformAxis

        Parameters:
            i: int

        get_rotation3(SpatialTransform self) -> TransformAxis

        Parameters:
            self: OpenSim::SpatialTransform const *

        """
        return _opensim.SpatialTransform_get_rotation3(self, *args)


    def upd_rotation3(self, *args):
        """
        upd_rotation3(SpatialTransform self, int i) -> TransformAxis

        Parameters:
            i: int

        upd_rotation3(SpatialTransform self) -> TransformAxis

        Parameters:
            self: OpenSim::SpatialTransform *

        """
        return _opensim.SpatialTransform_upd_rotation3(self, *args)


    def set_rotation3(self, *args):
        """
        set_rotation3(SpatialTransform self, int i, TransformAxis value)

        Parameters:
            i: int
            value: OpenSim::TransformAxis const &

        set_rotation3(SpatialTransform self, TransformAxis value)

        Parameters:
            value: OpenSim::TransformAxis const &

        """
        return _opensim.SpatialTransform_set_rotation3(self, *args)


    def copyProperty_translation1(self, source):
        """
        copyProperty_translation1(SpatialTransform self, SpatialTransform source)

        Parameters:
            source: OpenSim::SpatialTransform::Self const &

        """
        return _opensim.SpatialTransform_copyProperty_translation1(self, source)


    def append_translation1(self, value):
        """
        append_translation1(SpatialTransform self, TransformAxis value) -> int

        Parameters:
            value: OpenSim::TransformAxis const &

        """
        return _opensim.SpatialTransform_append_translation1(self, value)


    def constructProperty_translation1(self, initValue):
        """
        constructProperty_translation1(SpatialTransform self, TransformAxis initValue)

        Parameters:
            initValue: OpenSim::TransformAxis const &

        """
        return _opensim.SpatialTransform_constructProperty_translation1(self, initValue)


    def get_translation1(self, *args):
        """
        get_translation1(SpatialTransform self, int i) -> TransformAxis

        Parameters:
            i: int

        get_translation1(SpatialTransform self) -> TransformAxis

        Parameters:
            self: OpenSim::SpatialTransform const *

        """
        return _opensim.SpatialTransform_get_translation1(self, *args)


    def upd_translation1(self, *args):
        """
        upd_translation1(SpatialTransform self, int i) -> TransformAxis

        Parameters:
            i: int

        upd_translation1(SpatialTransform self) -> TransformAxis

        Parameters:
            self: OpenSim::SpatialTransform *

        """
        return _opensim.SpatialTransform_upd_translation1(self, *args)


    def set_translation1(self, *args):
        """
        set_translation1(SpatialTransform self, int i, TransformAxis value)

        Parameters:
            i: int
            value: OpenSim::TransformAxis const &

        set_translation1(SpatialTransform self, TransformAxis value)

        Parameters:
            value: OpenSim::TransformAxis const &

        """
        return _opensim.SpatialTransform_set_translation1(self, *args)


    def copyProperty_translation2(self, source):
        """
        copyProperty_translation2(SpatialTransform self, SpatialTransform source)

        Parameters:
            source: OpenSim::SpatialTransform::Self const &

        """
        return _opensim.SpatialTransform_copyProperty_translation2(self, source)


    def append_translation2(self, value):
        """
        append_translation2(SpatialTransform self, TransformAxis value) -> int

        Parameters:
            value: OpenSim::TransformAxis const &

        """
        return _opensim.SpatialTransform_append_translation2(self, value)


    def constructProperty_translation2(self, initValue):
        """
        constructProperty_translation2(SpatialTransform self, TransformAxis initValue)

        Parameters:
            initValue: OpenSim::TransformAxis const &

        """
        return _opensim.SpatialTransform_constructProperty_translation2(self, initValue)


    def get_translation2(self, *args):
        """
        get_translation2(SpatialTransform self, int i) -> TransformAxis

        Parameters:
            i: int

        get_translation2(SpatialTransform self) -> TransformAxis

        Parameters:
            self: OpenSim::SpatialTransform const *

        """
        return _opensim.SpatialTransform_get_translation2(self, *args)


    def upd_translation2(self, *args):
        """
        upd_translation2(SpatialTransform self, int i) -> TransformAxis

        Parameters:
            i: int

        upd_translation2(SpatialTransform self) -> TransformAxis

        Parameters:
            self: OpenSim::SpatialTransform *

        """
        return _opensim.SpatialTransform_upd_translation2(self, *args)


    def set_translation2(self, *args):
        """
        set_translation2(SpatialTransform self, int i, TransformAxis value)

        Parameters:
            i: int
            value: OpenSim::TransformAxis const &

        set_translation2(SpatialTransform self, TransformAxis value)

        Parameters:
            value: OpenSim::TransformAxis const &

        """
        return _opensim.SpatialTransform_set_translation2(self, *args)


    def copyProperty_translation3(self, source):
        """
        copyProperty_translation3(SpatialTransform self, SpatialTransform source)

        Parameters:
            source: OpenSim::SpatialTransform::Self const &

        """
        return _opensim.SpatialTransform_copyProperty_translation3(self, source)


    def append_translation3(self, value):
        """
        append_translation3(SpatialTransform self, TransformAxis value) -> int

        Parameters:
            value: OpenSim::TransformAxis const &

        """
        return _opensim.SpatialTransform_append_translation3(self, value)


    def constructProperty_translation3(self, initValue):
        """
        constructProperty_translation3(SpatialTransform self, TransformAxis initValue)

        Parameters:
            initValue: OpenSim::TransformAxis const &

        """
        return _opensim.SpatialTransform_constructProperty_translation3(self, initValue)


    def get_translation3(self, *args):
        """
        get_translation3(SpatialTransform self, int i) -> TransformAxis

        Parameters:
            i: int

        get_translation3(SpatialTransform self) -> TransformAxis

        Parameters:
            self: OpenSim::SpatialTransform const *

        """
        return _opensim.SpatialTransform_get_translation3(self, *args)


    def upd_translation3(self, *args):
        """
        upd_translation3(SpatialTransform self, int i) -> TransformAxis

        Parameters:
            i: int

        upd_translation3(SpatialTransform self) -> TransformAxis

        Parameters:
            self: OpenSim::SpatialTransform *

        """
        return _opensim.SpatialTransform_upd_translation3(self, *args)


    def set_translation3(self, *args):
        """
        set_translation3(SpatialTransform self, int i, TransformAxis value)

        Parameters:
            i: int
            value: OpenSim::TransformAxis const &

        set_translation3(SpatialTransform self, TransformAxis value)

        Parameters:
            value: OpenSim::TransformAxis const &

        """
        return _opensim.SpatialTransform_set_translation3(self, *args)


    def __init__(self):
        """__init__(OpenSim::SpatialTransform self) -> SpatialTransform"""
        this = _opensim.new_SpatialTransform()
        try:
            self.this.append(this)
        except:
            self.this = this

    def connectToJoint(self, owningJoint):
        """
        connectToJoint(SpatialTransform self, CustomJoint owningJoint)

        Parameters:
            owningJoint: OpenSim::CustomJoint &

        """
        return _opensim.SpatialTransform_connectToJoint(self, owningJoint)


    def constructIndependentAxes(self, nAxes, startIndex):
        """
        constructIndependentAxes(SpatialTransform self, int nAxes, int startIndex)

        Parameters:
            nAxes: int
            startIndex: int

        """
        return _opensim.SpatialTransform_constructIndependentAxes(self, nAxes, startIndex)


    def getCoordinateNames(self):
        """
        getCoordinateNames(SpatialTransform self) -> ArrayStr

        Parameters:
            self: OpenSim::SpatialTransform const *

        """
        return _opensim.SpatialTransform_getCoordinateNames(self)


    def getFunctions(self):
        """
        getFunctions(SpatialTransform self) -> std::vector< SimTK::Function const * >

        Parameters:
            self: OpenSim::SpatialTransform const *

        """
        return _opensim.SpatialTransform_getFunctions(self)


    def getAxes(self):
        """
        getAxes(SpatialTransform self) -> std::vector< SimTK::Vec3 >

        Parameters:
            self: OpenSim::SpatialTransform const *

        """
        return _opensim.SpatialTransform_getAxes(self)


    def scale(self, scaleFactors):
        """
        scale(SpatialTransform self, Vec3 scaleFactors)

        Parameters:
            scaleFactors: SimTK::Vec3 const

        """
        return _opensim.SpatialTransform_scale(self, scaleFactors)


    def getTransformAxis(self, whichAxis):
        """
        getTransformAxis(SpatialTransform self, int whichAxis) -> TransformAxis

        Parameters:
            whichAxis: int

        """
        return _opensim.SpatialTransform_getTransformAxis(self, whichAxis)


    def updTransformAxis(self, whichAxis):
        """
        updTransformAxis(SpatialTransform self, int whichAxis) -> TransformAxis

        Parameters:
            whichAxis: int

        """
        return _opensim.SpatialTransform_updTransformAxis(self, whichAxis)

    __swig_destroy__ = _opensim.delete_SpatialTransform
    __del__ = lambda self: None
SpatialTransform_swigregister = _opensim.SpatialTransform_swigregister
SpatialTransform_swigregister(SpatialTransform)

def SpatialTransform_safeDownCast(obj):
    """
    SpatialTransform_safeDownCast(OpenSimObject obj) -> SpatialTransform

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SpatialTransform_safeDownCast(obj)

def SpatialTransform_getClassName():
    """SpatialTransform_getClassName() -> std::string const &"""
    return _opensim.SpatialTransform_getClassName()

class Coordinate(ModelComponent):
    """Proxy of C++ OpenSim::Coordinate class"""
    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Coordinate, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Coordinate, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Coordinate

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Coordinate_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Coordinate self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Coordinate_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Coordinate_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Coordinate self) -> Coordinate

        Parameters:
            self: OpenSim::Coordinate const *

        """
        return _opensim.Coordinate_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Coordinate self) -> std::string const &

        Parameters:
            self: OpenSim::Coordinate const *

        """
        return _opensim.Coordinate_getConcreteClassName(self)


    def copyProperty_motion_type(self, source):
        """
        copyProperty_motion_type(Coordinate self, Coordinate source)

        Parameters:
            source: OpenSim::Coordinate::Self const &

        """
        return _opensim.Coordinate_copyProperty_motion_type(self, source)


    def append_motion_type(self, value):
        """
        append_motion_type(Coordinate self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.Coordinate_append_motion_type(self, value)


    def constructProperty_motion_type(self, initValue):
        """
        constructProperty_motion_type(Coordinate self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.Coordinate_constructProperty_motion_type(self, initValue)


    def get_motion_type(self, *args):
        """
        get_motion_type(Coordinate self, int i) -> std::string const

        Parameters:
            i: int

        get_motion_type(Coordinate self) -> std::string const &

        Parameters:
            self: OpenSim::Coordinate const *

        """
        return _opensim.Coordinate_get_motion_type(self, *args)


    def upd_motion_type(self, *args):
        """
        upd_motion_type(Coordinate self, int i) -> std::string

        Parameters:
            i: int

        upd_motion_type(Coordinate self) -> std::string &

        Parameters:
            self: OpenSim::Coordinate *

        """
        return _opensim.Coordinate_upd_motion_type(self, *args)


    def set_motion_type(self, *args):
        """
        set_motion_type(Coordinate self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_motion_type(Coordinate self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.Coordinate_set_motion_type(self, *args)


    def copyProperty_default_value(self, source):
        """
        copyProperty_default_value(Coordinate self, Coordinate source)

        Parameters:
            source: OpenSim::Coordinate::Self const &

        """
        return _opensim.Coordinate_copyProperty_default_value(self, source)


    def append_default_value(self, value):
        """
        append_default_value(Coordinate self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Coordinate_append_default_value(self, value)


    def constructProperty_default_value(self, initValue):
        """
        constructProperty_default_value(Coordinate self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Coordinate_constructProperty_default_value(self, initValue)


    def get_default_value(self, *args):
        """
        get_default_value(Coordinate self, int i) -> double const

        Parameters:
            i: int

        get_default_value(Coordinate self) -> double const &

        Parameters:
            self: OpenSim::Coordinate const *

        """
        return _opensim.Coordinate_get_default_value(self, *args)


    def upd_default_value(self, *args):
        """
        upd_default_value(Coordinate self, int i) -> double

        Parameters:
            i: int

        upd_default_value(Coordinate self) -> double &

        Parameters:
            self: OpenSim::Coordinate *

        """
        return _opensim.Coordinate_upd_default_value(self, *args)


    def set_default_value(self, *args):
        """
        set_default_value(Coordinate self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_default_value(Coordinate self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Coordinate_set_default_value(self, *args)


    def copyProperty_default_speed_value(self, source):
        """
        copyProperty_default_speed_value(Coordinate self, Coordinate source)

        Parameters:
            source: OpenSim::Coordinate::Self const &

        """
        return _opensim.Coordinate_copyProperty_default_speed_value(self, source)


    def append_default_speed_value(self, value):
        """
        append_default_speed_value(Coordinate self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Coordinate_append_default_speed_value(self, value)


    def constructProperty_default_speed_value(self, initValue):
        """
        constructProperty_default_speed_value(Coordinate self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Coordinate_constructProperty_default_speed_value(self, initValue)


    def get_default_speed_value(self, *args):
        """
        get_default_speed_value(Coordinate self, int i) -> double const

        Parameters:
            i: int

        get_default_speed_value(Coordinate self) -> double const &

        Parameters:
            self: OpenSim::Coordinate const *

        """
        return _opensim.Coordinate_get_default_speed_value(self, *args)


    def upd_default_speed_value(self, *args):
        """
        upd_default_speed_value(Coordinate self, int i) -> double

        Parameters:
            i: int

        upd_default_speed_value(Coordinate self) -> double &

        Parameters:
            self: OpenSim::Coordinate *

        """
        return _opensim.Coordinate_upd_default_speed_value(self, *args)


    def set_default_speed_value(self, *args):
        """
        set_default_speed_value(Coordinate self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_default_speed_value(Coordinate self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Coordinate_set_default_speed_value(self, *args)


    def copyProperty_range(self, source):
        """
        copyProperty_range(Coordinate self, Coordinate source)

        Parameters:
            source: OpenSim::Coordinate::Self const &

        """
        return _opensim.Coordinate_copyProperty_range(self, source)


    def get_range(self, i):
        """
        get_range(Coordinate self, int i) -> double const &

        Parameters:
            i: int

        """
        return _opensim.Coordinate_get_range(self, i)


    def upd_range(self, i):
        """
        upd_range(Coordinate self, int i) -> double &

        Parameters:
            i: int

        """
        return _opensim.Coordinate_upd_range(self, i)


    def set_range(self, i, value):
        """
        set_range(Coordinate self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        """
        return _opensim.Coordinate_set_range(self, i, value)


    def append_range(self, value):
        """
        append_range(Coordinate self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Coordinate_append_range(self, value)


    def copyProperty_clamped(self, source):
        """
        copyProperty_clamped(Coordinate self, Coordinate source)

        Parameters:
            source: OpenSim::Coordinate::Self const &

        """
        return _opensim.Coordinate_copyProperty_clamped(self, source)


    def append_clamped(self, value):
        """
        append_clamped(Coordinate self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Coordinate_append_clamped(self, value)


    def constructProperty_clamped(self, initValue):
        """
        constructProperty_clamped(Coordinate self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Coordinate_constructProperty_clamped(self, initValue)


    def get_clamped(self, *args):
        """
        get_clamped(Coordinate self, int i) -> bool const

        Parameters:
            i: int

        get_clamped(Coordinate self) -> bool const &

        Parameters:
            self: OpenSim::Coordinate const *

        """
        return _opensim.Coordinate_get_clamped(self, *args)


    def upd_clamped(self, *args):
        """
        upd_clamped(Coordinate self, int i) -> bool

        Parameters:
            i: int

        upd_clamped(Coordinate self) -> bool &

        Parameters:
            self: OpenSim::Coordinate *

        """
        return _opensim.Coordinate_upd_clamped(self, *args)


    def set_clamped(self, *args):
        """
        set_clamped(Coordinate self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_clamped(Coordinate self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Coordinate_set_clamped(self, *args)


    def copyProperty_locked(self, source):
        """
        copyProperty_locked(Coordinate self, Coordinate source)

        Parameters:
            source: OpenSim::Coordinate::Self const &

        """
        return _opensim.Coordinate_copyProperty_locked(self, source)


    def append_locked(self, value):
        """
        append_locked(Coordinate self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Coordinate_append_locked(self, value)


    def constructProperty_locked(self, initValue):
        """
        constructProperty_locked(Coordinate self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Coordinate_constructProperty_locked(self, initValue)


    def get_locked(self, *args):
        """
        get_locked(Coordinate self, int i) -> bool const

        Parameters:
            i: int

        get_locked(Coordinate self) -> bool const &

        Parameters:
            self: OpenSim::Coordinate const *

        """
        return _opensim.Coordinate_get_locked(self, *args)


    def upd_locked(self, *args):
        """
        upd_locked(Coordinate self, int i) -> bool

        Parameters:
            i: int

        upd_locked(Coordinate self) -> bool &

        Parameters:
            self: OpenSim::Coordinate *

        """
        return _opensim.Coordinate_upd_locked(self, *args)


    def set_locked(self, *args):
        """
        set_locked(Coordinate self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_locked(Coordinate self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Coordinate_set_locked(self, *args)


    def copyProperty_prescribed_function(self, source):
        """
        copyProperty_prescribed_function(Coordinate self, Coordinate source)

        Parameters:
            source: OpenSim::Coordinate::Self const &

        """
        return _opensim.Coordinate_copyProperty_prescribed_function(self, source)


    def append_prescribed_function(self, value):
        """
        append_prescribed_function(Coordinate self, Function value) -> int

        Parameters:
            value: OpenSim::Function const &

        """
        return _opensim.Coordinate_append_prescribed_function(self, value)


    def constructProperty_prescribed_function(self, *args):
        """
        constructProperty_prescribed_function(Coordinate self)
        constructProperty_prescribed_function(Coordinate self, Function initValue)

        Parameters:
            initValue: OpenSim::Function const &

        """
        return _opensim.Coordinate_constructProperty_prescribed_function(self, *args)


    def get_prescribed_function(self, *args):
        """
        get_prescribed_function(Coordinate self, int i) -> Function

        Parameters:
            i: int

        get_prescribed_function(Coordinate self) -> Function

        Parameters:
            self: OpenSim::Coordinate const *

        """
        return _opensim.Coordinate_get_prescribed_function(self, *args)


    def upd_prescribed_function(self, *args):
        """
        upd_prescribed_function(Coordinate self, int i) -> Function

        Parameters:
            i: int

        upd_prescribed_function(Coordinate self) -> Function

        Parameters:
            self: OpenSim::Coordinate *

        """
        return _opensim.Coordinate_upd_prescribed_function(self, *args)


    def set_prescribed_function(self, *args):
        """
        set_prescribed_function(Coordinate self, int i, Function value)

        Parameters:
            i: int
            value: OpenSim::Function const &

        set_prescribed_function(Coordinate self, Function value)

        Parameters:
            value: OpenSim::Function const &

        """
        return _opensim.Coordinate_set_prescribed_function(self, *args)


    def copyProperty_prescribed(self, source):
        """
        copyProperty_prescribed(Coordinate self, Coordinate source)

        Parameters:
            source: OpenSim::Coordinate::Self const &

        """
        return _opensim.Coordinate_copyProperty_prescribed(self, source)


    def append_prescribed(self, value):
        """
        append_prescribed(Coordinate self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Coordinate_append_prescribed(self, value)


    def constructProperty_prescribed(self, initValue):
        """
        constructProperty_prescribed(Coordinate self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Coordinate_constructProperty_prescribed(self, initValue)


    def get_prescribed(self, *args):
        """
        get_prescribed(Coordinate self, int i) -> bool const

        Parameters:
            i: int

        get_prescribed(Coordinate self) -> bool const &

        Parameters:
            self: OpenSim::Coordinate const *

        """
        return _opensim.Coordinate_get_prescribed(self, *args)


    def upd_prescribed(self, *args):
        """
        upd_prescribed(Coordinate self, int i) -> bool

        Parameters:
            i: int

        upd_prescribed(Coordinate self) -> bool &

        Parameters:
            self: OpenSim::Coordinate *

        """
        return _opensim.Coordinate_upd_prescribed(self, *args)


    def set_prescribed(self, *args):
        """
        set_prescribed(Coordinate self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_prescribed(Coordinate self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Coordinate_set_prescribed(self, *args)


    def copyProperty_is_free_to_satisfy_constraints(self, source):
        """
        copyProperty_is_free_to_satisfy_constraints(Coordinate self, Coordinate source)

        Parameters:
            source: OpenSim::Coordinate::Self const &

        """
        return _opensim.Coordinate_copyProperty_is_free_to_satisfy_constraints(self, source)


    def append_is_free_to_satisfy_constraints(self, value):
        """
        append_is_free_to_satisfy_constraints(Coordinate self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Coordinate_append_is_free_to_satisfy_constraints(self, value)


    def constructProperty_is_free_to_satisfy_constraints(self, initValue):
        """
        constructProperty_is_free_to_satisfy_constraints(Coordinate self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Coordinate_constructProperty_is_free_to_satisfy_constraints(self, initValue)


    def get_is_free_to_satisfy_constraints(self, *args):
        """
        get_is_free_to_satisfy_constraints(Coordinate self, int i) -> bool const

        Parameters:
            i: int

        get_is_free_to_satisfy_constraints(Coordinate self) -> bool const &

        Parameters:
            self: OpenSim::Coordinate const *

        """
        return _opensim.Coordinate_get_is_free_to_satisfy_constraints(self, *args)


    def upd_is_free_to_satisfy_constraints(self, *args):
        """
        upd_is_free_to_satisfy_constraints(Coordinate self, int i) -> bool

        Parameters:
            i: int

        upd_is_free_to_satisfy_constraints(Coordinate self) -> bool &

        Parameters:
            self: OpenSim::Coordinate *

        """
        return _opensim.Coordinate_upd_is_free_to_satisfy_constraints(self, *args)


    def set_is_free_to_satisfy_constraints(self, *args):
        """
        set_is_free_to_satisfy_constraints(Coordinate self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_is_free_to_satisfy_constraints(Coordinate self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Coordinate_set_is_free_to_satisfy_constraints(self, *args)

    Rotational = _opensim.Coordinate_Rotational
    Translational = _opensim.Coordinate_Translational
    Coupled = _opensim.Coordinate_Coupled

    def getJoint(self):
        """
        getJoint(Coordinate self) -> Joint

        Parameters:
            self: OpenSim::Coordinate const *

        """
        return _opensim.Coordinate_getJoint(self)


    def getMotionType(self):
        """
        getMotionType(Coordinate self) -> OpenSim::Coordinate::MotionType

        Parameters:
            self: OpenSim::Coordinate const *

        """
        return _opensim.Coordinate_getMotionType(self)


    def setMotionType(self, aMotionType):
        """
        setMotionType(Coordinate self, OpenSim::Coordinate::MotionType aMotionType)

        Parameters:
            aMotionType: enum OpenSim::Coordinate::MotionType

        """
        return _opensim.Coordinate_setMotionType(self, aMotionType)


    def getValue(self, s):
        """
        getValue(Coordinate self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Coordinate_getValue(self, s)


    def setValue(self, s, aValue, aEnforceContraints=True):
        """
        setValue(Coordinate self, State s, double aValue, bool aEnforceContraints=True)

        Parameters:
            s: SimTK::State &
            aValue: double
            aEnforceContraints: bool

        setValue(Coordinate self, State s, double aValue)

        Parameters:
            s: SimTK::State &
            aValue: double

        """
        return _opensim.Coordinate_setValue(self, s, aValue, aEnforceContraints)


    def getSpeedValue(self, s):
        """
        getSpeedValue(Coordinate self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Coordinate_getSpeedValue(self, s)


    def setSpeedValue(self, s, aValue):
        """
        setSpeedValue(Coordinate self, State s, double aValue)

        Parameters:
            s: SimTK::State &
            aValue: double

        """
        return _opensim.Coordinate_setSpeedValue(self, s, aValue)


    def getSpeedName(self):
        """
        getSpeedName(Coordinate self) -> std::string const

        Parameters:
            self: OpenSim::Coordinate const *

        """
        return _opensim.Coordinate_getSpeedName(self)


    def getDefaultValue(self):
        """
        getDefaultValue(Coordinate self) -> double

        Parameters:
            self: OpenSim::Coordinate const *

        """
        return _opensim.Coordinate_getDefaultValue(self)


    def setDefaultValue(self, aDefaultValue):
        """
        setDefaultValue(Coordinate self, double aDefaultValue)

        Parameters:
            aDefaultValue: double

        """
        return _opensim.Coordinate_setDefaultValue(self, aDefaultValue)


    def getDefaultSpeedValue(self):
        """
        getDefaultSpeedValue(Coordinate self) -> double

        Parameters:
            self: OpenSim::Coordinate const *

        """
        return _opensim.Coordinate_getDefaultSpeedValue(self)


    def setDefaultSpeedValue(self, aDefaultSpeedValue):
        """
        setDefaultSpeedValue(Coordinate self, double aDefaultSpeedValue)

        Parameters:
            aDefaultSpeedValue: double

        """
        return _opensim.Coordinate_setDefaultSpeedValue(self, aDefaultSpeedValue)


    def getAccelerationValue(self, s):
        """
        getAccelerationValue(Coordinate self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Coordinate_getAccelerationValue(self, s)


    def getClamped(self, s):
        """
        getClamped(Coordinate self, State s) -> bool

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Coordinate_getClamped(self, s)


    def setClamped(self, s, aLocked):
        """
        setClamped(Coordinate self, State s, bool aLocked)

        Parameters:
            s: SimTK::State &
            aLocked: bool

        """
        return _opensim.Coordinate_setClamped(self, s, aLocked)


    def getDefaultClamped(self):
        """
        getDefaultClamped(Coordinate self) -> bool

        Parameters:
            self: OpenSim::Coordinate const *

        """
        return _opensim.Coordinate_getDefaultClamped(self)


    def setDefaultClamped(self, aClamped):
        """
        setDefaultClamped(Coordinate self, bool aClamped)

        Parameters:
            aClamped: bool

        """
        return _opensim.Coordinate_setDefaultClamped(self, aClamped)


    def getRangeMin(self):
        """
        getRangeMin(Coordinate self) -> double

        Parameters:
            self: OpenSim::Coordinate const *

        """
        return _opensim.Coordinate_getRangeMin(self)


    def getRangeMax(self):
        """
        getRangeMax(Coordinate self) -> double

        Parameters:
            self: OpenSim::Coordinate const *

        """
        return _opensim.Coordinate_getRangeMax(self)


    def setRange(self, aRange):
        """
        setRange(Coordinate self, double [2] aRange)

        Parameters:
            aRange: double [2]

        """
        return _opensim.Coordinate_setRange(self, aRange)


    def setRangeMin(self, aMin):
        """
        setRangeMin(Coordinate self, double aMin)

        Parameters:
            aMin: double

        """
        return _opensim.Coordinate_setRangeMin(self, aMin)


    def setRangeMax(self, aMax):
        """
        setRangeMax(Coordinate self, double aMax)

        Parameters:
            aMax: double

        """
        return _opensim.Coordinate_setRangeMax(self, aMax)


    def getLocked(self, s):
        """
        getLocked(Coordinate self, State s) -> bool

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Coordinate_getLocked(self, s)


    def setLocked(self, s, aLocked):
        """
        setLocked(Coordinate self, State s, bool aLocked)

        Parameters:
            s: SimTK::State &
            aLocked: bool

        """
        return _opensim.Coordinate_setLocked(self, s, aLocked)


    def getDefaultLocked(self):
        """
        getDefaultLocked(Coordinate self) -> bool

        Parameters:
            self: OpenSim::Coordinate const *

        """
        return _opensim.Coordinate_getDefaultLocked(self)


    def setDefaultLocked(self, aLocked):
        """
        setDefaultLocked(Coordinate self, bool aLocked)

        Parameters:
            aLocked: bool

        """
        return _opensim.Coordinate_setDefaultLocked(self, aLocked)


    def isPrescribed(self, s):
        """
        isPrescribed(Coordinate self, State s) -> bool

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Coordinate_isPrescribed(self, s)


    def setIsPrescribed(self, s, isPrescribed):
        """
        setIsPrescribed(Coordinate self, State s, bool isPrescribed)

        Parameters:
            s: SimTK::State &
            isPrescribed: bool

        """
        return _opensim.Coordinate_setIsPrescribed(self, s, isPrescribed)


    def getDefaultIsPrescribed(self):
        """
        getDefaultIsPrescribed(Coordinate self) -> bool

        Parameters:
            self: OpenSim::Coordinate const *

        """
        return _opensim.Coordinate_getDefaultIsPrescribed(self)


    def setDefaultIsPrescribed(self, isPrescribed):
        """
        setDefaultIsPrescribed(Coordinate self, bool isPrescribed)

        Parameters:
            isPrescribed: bool

        """
        return _opensim.Coordinate_setDefaultIsPrescribed(self, isPrescribed)


    def setPrescribedFunction(self, function):
        """
        setPrescribedFunction(Coordinate self, Function function)

        Parameters:
            function: OpenSim::Function const &

        """
        return _opensim.Coordinate_setPrescribedFunction(self, function)


    def getPrescribedFunction(self):
        """
        getPrescribedFunction(Coordinate self) -> Function

        Parameters:
            self: OpenSim::Coordinate const *

        """
        return _opensim.Coordinate_getPrescribedFunction(self)


    def isDependent(self, s):
        """
        isDependent(Coordinate self, State s) -> bool

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Coordinate_isDependent(self, s)


    def isConstrained(self, s):
        """
        isConstrained(Coordinate self, State s) -> bool

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Coordinate_isConstrained(self, s)


    def getMobilizerQIndex(self):
        """
        getMobilizerQIndex(Coordinate self) -> int

        Parameters:
            self: OpenSim::Coordinate const *

        """
        return _opensim.Coordinate_getMobilizerQIndex(self)


    def getBodyIndex(self):
        """
        getBodyIndex(Coordinate self) -> SimTK::MobilizedBodyIndex

        Parameters:
            self: OpenSim::Coordinate const *

        """
        return _opensim.Coordinate_getBodyIndex(self)


    def getStateVariableNames(self):
        """
        getStateVariableNames(Coordinate self) -> ArrayStr

        Parameters:
            self: OpenSim::Coordinate const *

        """
        return _opensim.Coordinate_getStateVariableNames(self)


    def getStateVariableSystemIndex(self, stateVariableName):
        """
        getStateVariableSystemIndex(Coordinate self, std::string const & stateVariableName) -> SimTK::SystemYIndex

        Parameters:
            stateVariableName: std::string const &

        """
        return _opensim.Coordinate_getStateVariableSystemIndex(self, stateVariableName)


    def __init__(self, *args):
        """
        __init__(OpenSim::Coordinate self) -> Coordinate
        __init__(OpenSim::Coordinate self, std::string const & aName, OpenSim::Coordinate::MotionType aMotionType, double defualtValue, double aRangeMin, double aRangeMax) -> Coordinate

        Parameters:
            aName: std::string const &
            aMotionType: enum OpenSim::Coordinate::MotionType
            defualtValue: double
            aRangeMin: double
            aRangeMax: double

        """
        this = _opensim.new_Coordinate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_Coordinate
    __del__ = lambda self: None
Coordinate_swigregister = _opensim.Coordinate_swigregister
Coordinate_swigregister(Coordinate)

def Coordinate_safeDownCast(obj):
    """
    Coordinate_safeDownCast(OpenSimObject obj) -> Coordinate

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Coordinate_safeDownCast(obj)

def Coordinate_getClassName():
    """Coordinate_getClassName() -> std::string const &"""
    return _opensim.Coordinate_getClassName()

class SetCoordinates(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::Coordinate)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetCoordinates, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetCoordinates, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetCoordinates

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetCoordinates_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetCoordinates self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetCoordinates_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetCoordinates_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetCoordinates self) -> SetCoordinates

        Parameters:
            self: OpenSim::Set< OpenSim::Coordinate > const *

        """
        return _opensim.SetCoordinates_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetCoordinates self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::Coordinate > const *

        """
        return _opensim.SetCoordinates_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetCoordinates
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Coordinate)> self) -> SetCoordinates
        __init__(OpenSim::Set<(OpenSim::Coordinate)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetCoordinates

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Coordinate)> self, std::string const & aFileName) -> SetCoordinates

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Coordinate)> self, SetCoordinates aSet) -> SetCoordinates

        Parameters:
            aSet: OpenSim::Set< OpenSim::Coordinate > const &

        """
        this = _opensim.new_SetCoordinates(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetCoordinates self)

        Parameters:
            self: OpenSim::Set< OpenSim::Coordinate > *

        """
        return _opensim.SetCoordinates_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetCoordinates self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetCoordinates_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetCoordinates self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetCoordinates_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetCoordinates self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Coordinate > const *

        """
        return _opensim.SetCoordinates_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetCoordinates self, Coordinate aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::Coordinate const *
            aStartIndex: int

        getIndex(SetCoordinates self, Coordinate aObject) -> int

        Parameters:
            aObject: OpenSim::Coordinate const *

        getIndex(SetCoordinates self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetCoordinates self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetCoordinates_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetCoordinates self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetCoordinates_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetCoordinates self, Coordinate aObject) -> bool

        Parameters:
            aObject: OpenSim::Coordinate *

        """
        return _opensim.SetCoordinates_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetCoordinates self, Coordinate aObject) -> bool

        Parameters:
            aObject: OpenSim::Coordinate const &

        """
        return _opensim.SetCoordinates_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetCoordinates self, int aIndex, Coordinate aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Coordinate *

        """
        return _opensim.SetCoordinates_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetCoordinates self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetCoordinates self, Coordinate aObject) -> bool

        Parameters:
            aObject: OpenSim::Coordinate const *

        """
        return _opensim.SetCoordinates_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetCoordinates self)

        Parameters:
            self: OpenSim::Set< OpenSim::Coordinate > *

        """
        return _opensim.SetCoordinates_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetCoordinates self, int aIndex, Coordinate aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Coordinate *
            preserveGroups: bool

        set(SetCoordinates self, int aIndex, Coordinate aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Coordinate *

        """
        return _opensim.SetCoordinates_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetCoordinates self, int aIndex) -> Coordinate

        Parameters:
            aIndex: int

        get(SetCoordinates self, std::string const & aName) -> Coordinate

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetCoordinates_get(self, *args)


    def contains(self, aName):
        """
        contains(SetCoordinates self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetCoordinates_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetCoordinates self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetCoordinates_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetCoordinates self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Coordinate > const *

        """
        return _opensim.SetCoordinates_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetCoordinates self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetCoordinates_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetCoordinates self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetCoordinates_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetCoordinates self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetCoordinates_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetCoordinates self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetCoordinates_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetCoordinates self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetCoordinates_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetCoordinates self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetCoordinates self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetCoordinates_getGroup(self, *args)

SetCoordinates_swigregister = _opensim.SetCoordinates_swigregister
SetCoordinates_swigregister(SetCoordinates)

def SetCoordinates_safeDownCast(obj):
    """
    SetCoordinates_safeDownCast(OpenSimObject obj) -> SetCoordinates

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetCoordinates_safeDownCast(obj)

def SetCoordinates_getClassName():
    """SetCoordinates_getClassName() -> std::string const &"""
    return _opensim.SetCoordinates_getClassName()

class ModelComponentSetCoordinates(SetCoordinates):
    """Proxy of C++ OpenSim::ModelComponentSet<(OpenSim::Coordinate)> class"""
    __swig_setmethods__ = {}
    for _s in [SetCoordinates]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponentSetCoordinates, name, value)
    __swig_getmethods__ = {}
    for _s in [SetCoordinates]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponentSetCoordinates, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelComponentSetCoordinates

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ModelComponentSetCoordinates_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ModelComponentSetCoordinates self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ModelComponentSetCoordinates_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ModelComponentSetCoordinates_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ModelComponentSetCoordinates self) -> ModelComponentSetCoordinates

        Parameters:
            self: OpenSim::ModelComponentSet< OpenSim::Coordinate > const *

        """
        return _opensim.ModelComponentSetCoordinates_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponentSetCoordinates self) -> std::string const &

        Parameters:
            self: OpenSim::ModelComponentSet< OpenSim::Coordinate > const *

        """
        return _opensim.ModelComponentSetCoordinates_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ModelComponentSet<(OpenSim::Coordinate)> self) -> ModelComponentSetCoordinates
        __init__(OpenSim::ModelComponentSet<(OpenSim::Coordinate)> self, Model model) -> ModelComponentSetCoordinates

        Parameters:
            model: OpenSim::Model &

        __init__(OpenSim::ModelComponentSet<(OpenSim::Coordinate)> self, Model model, std::string const & fileName, bool aUpdateFromXMLNode=True) -> ModelComponentSetCoordinates

        Parameters:
            model: OpenSim::Model &
            fileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::ModelComponentSet<(OpenSim::Coordinate)> self, Model model, std::string const & fileName) -> ModelComponentSetCoordinates

        Parameters:
            model: OpenSim::Model &
            fileName: std::string const &

        __init__(OpenSim::ModelComponentSet<(OpenSim::Coordinate)> self, ModelComponentSetCoordinates source) -> ModelComponentSetCoordinates

        Parameters:
            source: OpenSim::ModelComponentSet< OpenSim::Coordinate > const &

        """
        this = _opensim.new_ModelComponentSetCoordinates(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def insert(self, aIndex, aObject):
        """
        insert(ModelComponentSetCoordinates self, int aIndex, Coordinate aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Coordinate *

        """
        return _opensim.ModelComponentSetCoordinates_insert(self, aIndex, aObject)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(ModelComponentSetCoordinates self, int aIndex, Coordinate aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Coordinate *
            preserveGroups: bool

        set(ModelComponentSetCoordinates self, int aIndex, Coordinate aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Coordinate *

        """
        return _opensim.ModelComponentSetCoordinates_set(self, aIndex, aObject, preserveGroups)


    def invokeConnectToModel(self, model):
        """
        invokeConnectToModel(ModelComponentSetCoordinates self, Model model)

        Parameters:
            model: OpenSim::Model &

        """
        return _opensim.ModelComponentSetCoordinates_invokeConnectToModel(self, model)


    def invokeAddToSystem(self, system):
        """
        invokeAddToSystem(ModelComponentSetCoordinates self, SimTK::MultibodySystem & system)

        Parameters:
            system: SimTK::MultibodySystem &

        """
        return _opensim.ModelComponentSetCoordinates_invokeAddToSystem(self, system)


    def invokeInitStateFromProperties(self, state):
        """
        invokeInitStateFromProperties(ModelComponentSetCoordinates self, State state)

        Parameters:
            state: SimTK::State &

        """
        return _opensim.ModelComponentSetCoordinates_invokeInitStateFromProperties(self, state)


    def invokeSetPropertiesFromState(self, state):
        """
        invokeSetPropertiesFromState(ModelComponentSetCoordinates self, State state)

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.ModelComponentSetCoordinates_invokeSetPropertiesFromState(self, state)


    def invokeGenerateDecorations(self, fixed, hints, state, appendToThis):
        """
        invokeGenerateDecorations(ModelComponentSetCoordinates self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters:
            fixed: bool
            hints: OpenSim::ModelDisplayHints const &
            state: SimTK::State const &
            appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _opensim.ModelComponentSetCoordinates_invokeGenerateDecorations(self, fixed, hints, state, appendToThis)

    __swig_destroy__ = _opensim.delete_ModelComponentSetCoordinates
    __del__ = lambda self: None
ModelComponentSetCoordinates_swigregister = _opensim.ModelComponentSetCoordinates_swigregister
ModelComponentSetCoordinates_swigregister(ModelComponentSetCoordinates)

def ModelComponentSetCoordinates_safeDownCast(obj):
    """
    ModelComponentSetCoordinates_safeDownCast(OpenSimObject obj) -> ModelComponentSetCoordinates

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ModelComponentSetCoordinates_safeDownCast(obj)

def ModelComponentSetCoordinates_getClassName():
    """ModelComponentSetCoordinates_getClassName() -> std::string const &"""
    return _opensim.ModelComponentSetCoordinates_getClassName()

class CoordinateSet(ModelComponentSetCoordinates):
    """Proxy of C++ OpenSim::CoordinateSet class"""
    __swig_setmethods__ = {}
    for _s in [ModelComponentSetCoordinates]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoordinateSet, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponentSetCoordinates]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoordinateSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> CoordinateSet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.CoordinateSet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(CoordinateSet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.CoordinateSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.CoordinateSet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(CoordinateSet self) -> CoordinateSet

        Parameters:
            self: OpenSim::CoordinateSet const *

        """
        return _opensim.CoordinateSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(CoordinateSet self) -> std::string const &

        Parameters:
            self: OpenSim::CoordinateSet const *

        """
        return _opensim.CoordinateSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::CoordinateSet self) -> CoordinateSet
        __init__(OpenSim::CoordinateSet self, Model model) -> CoordinateSet

        Parameters:
            model: OpenSim::Model &

        __init__(OpenSim::CoordinateSet self, Model model, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> CoordinateSet

        Parameters:
            model: OpenSim::Model &
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::CoordinateSet self, Model model, std::string const & aFileName) -> CoordinateSet

        Parameters:
            model: OpenSim::Model &
            aFileName: std::string const &

        __init__(OpenSim::CoordinateSet self, CoordinateSet aCoordinateSet) -> CoordinateSet

        Parameters:
            aCoordinateSet: OpenSim::CoordinateSet const &

        """
        this = _opensim.new_CoordinateSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_CoordinateSet
    __del__ = lambda self: None

    def populate(self, model):
        """
        populate(CoordinateSet self, Model model)

        Parameters:
            model: OpenSim::Model &

        """
        return _opensim.CoordinateSet_populate(self, model)


    def getSpeedNames(self, rNames):
        """
        getSpeedNames(CoordinateSet self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.CoordinateSet_getSpeedNames(self, rNames)

    def adoptAndAppend(self, aCoordinate):
        aCoordinate._markAdopted()
        return super(CoordinateSet, self).adoptAndAppend(aCoordinate)

CoordinateSet_swigregister = _opensim.CoordinateSet_swigregister
CoordinateSet_swigregister(CoordinateSet)

def CoordinateSet_safeDownCast(obj):
    """
    CoordinateSet_safeDownCast(OpenSimObject obj) -> CoordinateSet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.CoordinateSet_safeDownCast(obj)

def CoordinateSet_getClassName():
    """CoordinateSet_getClassName() -> std::string const &"""
    return _opensim.CoordinateSet_getClassName()

class Joint(ModelComponent):
    """Proxy of C++ OpenSim::Joint class"""
    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Joint, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Joint, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Joint

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Joint_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Joint self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Joint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Joint_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Joint self) -> Joint

        Parameters:
            self: OpenSim::Joint const *

        """
        return _opensim.Joint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Joint self) -> std::string const &

        Parameters:
            self: OpenSim::Joint const *

        """
        return _opensim.Joint_getConcreteClassName(self)


    def copyProperty_parent_body(self, source):
        """
        copyProperty_parent_body(Joint self, Joint source)

        Parameters:
            source: OpenSim::Joint::Self const &

        """
        return _opensim.Joint_copyProperty_parent_body(self, source)


    def append_parent_body(self, value):
        """
        append_parent_body(Joint self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.Joint_append_parent_body(self, value)


    def constructProperty_parent_body(self, initValue):
        """
        constructProperty_parent_body(Joint self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.Joint_constructProperty_parent_body(self, initValue)


    def get_parent_body(self, *args):
        """
        get_parent_body(Joint self, int i) -> std::string const

        Parameters:
            i: int

        get_parent_body(Joint self) -> std::string const &

        Parameters:
            self: OpenSim::Joint const *

        """
        return _opensim.Joint_get_parent_body(self, *args)


    def upd_parent_body(self, *args):
        """
        upd_parent_body(Joint self, int i) -> std::string

        Parameters:
            i: int

        upd_parent_body(Joint self) -> std::string &

        Parameters:
            self: OpenSim::Joint *

        """
        return _opensim.Joint_upd_parent_body(self, *args)


    def set_parent_body(self, *args):
        """
        set_parent_body(Joint self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_parent_body(Joint self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.Joint_set_parent_body(self, *args)


    def copyProperty_location_in_parent(self, source):
        """
        copyProperty_location_in_parent(Joint self, Joint source)

        Parameters:
            source: OpenSim::Joint::Self const &

        """
        return _opensim.Joint_copyProperty_location_in_parent(self, source)


    def append_location_in_parent(self, value):
        """
        append_location_in_parent(Joint self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.Joint_append_location_in_parent(self, value)


    def constructProperty_location_in_parent(self, initValue):
        """
        constructProperty_location_in_parent(Joint self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.Joint_constructProperty_location_in_parent(self, initValue)


    def get_location_in_parent(self, *args):
        """
        get_location_in_parent(Joint self, int i) -> Vec3

        Parameters:
            i: int

        get_location_in_parent(Joint self) -> Vec3

        Parameters:
            self: OpenSim::Joint const *

        """
        return _opensim.Joint_get_location_in_parent(self, *args)


    def upd_location_in_parent(self, *args):
        """
        upd_location_in_parent(Joint self, int i) -> Vec3

        Parameters:
            i: int

        upd_location_in_parent(Joint self) -> Vec3

        Parameters:
            self: OpenSim::Joint *

        """
        return _opensim.Joint_upd_location_in_parent(self, *args)


    def set_location_in_parent(self, *args):
        """
        set_location_in_parent(Joint self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_location_in_parent(Joint self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.Joint_set_location_in_parent(self, *args)


    def copyProperty_orientation_in_parent(self, source):
        """
        copyProperty_orientation_in_parent(Joint self, Joint source)

        Parameters:
            source: OpenSim::Joint::Self const &

        """
        return _opensim.Joint_copyProperty_orientation_in_parent(self, source)


    def append_orientation_in_parent(self, value):
        """
        append_orientation_in_parent(Joint self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.Joint_append_orientation_in_parent(self, value)


    def constructProperty_orientation_in_parent(self, initValue):
        """
        constructProperty_orientation_in_parent(Joint self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.Joint_constructProperty_orientation_in_parent(self, initValue)


    def get_orientation_in_parent(self, *args):
        """
        get_orientation_in_parent(Joint self, int i) -> Vec3

        Parameters:
            i: int

        get_orientation_in_parent(Joint self) -> Vec3

        Parameters:
            self: OpenSim::Joint const *

        """
        return _opensim.Joint_get_orientation_in_parent(self, *args)


    def upd_orientation_in_parent(self, *args):
        """
        upd_orientation_in_parent(Joint self, int i) -> Vec3

        Parameters:
            i: int

        upd_orientation_in_parent(Joint self) -> Vec3

        Parameters:
            self: OpenSim::Joint *

        """
        return _opensim.Joint_upd_orientation_in_parent(self, *args)


    def set_orientation_in_parent(self, *args):
        """
        set_orientation_in_parent(Joint self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_orientation_in_parent(Joint self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.Joint_set_orientation_in_parent(self, *args)


    def copyProperty_location(self, source):
        """
        copyProperty_location(Joint self, Joint source)

        Parameters:
            source: OpenSim::Joint::Self const &

        """
        return _opensim.Joint_copyProperty_location(self, source)


    def append_location(self, value):
        """
        append_location(Joint self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.Joint_append_location(self, value)


    def constructProperty_location(self, initValue):
        """
        constructProperty_location(Joint self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.Joint_constructProperty_location(self, initValue)


    def get_location(self, *args):
        """
        get_location(Joint self, int i) -> Vec3

        Parameters:
            i: int

        get_location(Joint self) -> Vec3

        Parameters:
            self: OpenSim::Joint const *

        """
        return _opensim.Joint_get_location(self, *args)


    def upd_location(self, *args):
        """
        upd_location(Joint self, int i) -> Vec3

        Parameters:
            i: int

        upd_location(Joint self) -> Vec3

        Parameters:
            self: OpenSim::Joint *

        """
        return _opensim.Joint_upd_location(self, *args)


    def set_location(self, *args):
        """
        set_location(Joint self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_location(Joint self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.Joint_set_location(self, *args)


    def copyProperty_orientation(self, source):
        """
        copyProperty_orientation(Joint self, Joint source)

        Parameters:
            source: OpenSim::Joint::Self const &

        """
        return _opensim.Joint_copyProperty_orientation(self, source)


    def append_orientation(self, value):
        """
        append_orientation(Joint self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.Joint_append_orientation(self, value)


    def constructProperty_orientation(self, initValue):
        """
        constructProperty_orientation(Joint self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.Joint_constructProperty_orientation(self, initValue)


    def get_orientation(self, *args):
        """
        get_orientation(Joint self, int i) -> Vec3

        Parameters:
            i: int

        get_orientation(Joint self) -> Vec3

        Parameters:
            self: OpenSim::Joint const *

        """
        return _opensim.Joint_get_orientation(self, *args)


    def upd_orientation(self, *args):
        """
        upd_orientation(Joint self, int i) -> Vec3

        Parameters:
            i: int

        upd_orientation(Joint self) -> Vec3

        Parameters:
            self: OpenSim::Joint *

        """
        return _opensim.Joint_upd_orientation(self, *args)


    def set_orientation(self, *args):
        """
        set_orientation(Joint self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_orientation(Joint self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.Joint_set_orientation(self, *args)


    def copyProperty_CoordinateSet(self, source):
        """
        copyProperty_CoordinateSet(Joint self, Joint source)

        Parameters:
            source: OpenSim::Joint::Self const &

        """
        return _opensim.Joint_copyProperty_CoordinateSet(self, source)


    def append_CoordinateSet(self, value):
        """
        append_CoordinateSet(Joint self, CoordinateSet value) -> int

        Parameters:
            value: OpenSim::CoordinateSet const &

        """
        return _opensim.Joint_append_CoordinateSet(self, value)


    def constructProperty_CoordinateSet(self, initValue):
        """
        constructProperty_CoordinateSet(Joint self, CoordinateSet initValue)

        Parameters:
            initValue: OpenSim::CoordinateSet const &

        """
        return _opensim.Joint_constructProperty_CoordinateSet(self, initValue)


    def get_CoordinateSet(self, *args):
        """
        get_CoordinateSet(Joint self, int i) -> CoordinateSet

        Parameters:
            i: int

        get_CoordinateSet(Joint self) -> CoordinateSet

        Parameters:
            self: OpenSim::Joint const *

        """
        return _opensim.Joint_get_CoordinateSet(self, *args)


    def upd_CoordinateSet(self, *args):
        """
        upd_CoordinateSet(Joint self, int i) -> CoordinateSet

        Parameters:
            i: int

        upd_CoordinateSet(Joint self) -> CoordinateSet

        Parameters:
            self: OpenSim::Joint *

        """
        return _opensim.Joint_upd_CoordinateSet(self, *args)


    def set_CoordinateSet(self, *args):
        """
        set_CoordinateSet(Joint self, int i, CoordinateSet value)

        Parameters:
            i: int
            value: OpenSim::CoordinateSet const &

        set_CoordinateSet(Joint self, CoordinateSet value)

        Parameters:
            value: OpenSim::CoordinateSet const &

        """
        return _opensim.Joint_set_CoordinateSet(self, *args)


    def copyProperty_reverse(self, source):
        """
        copyProperty_reverse(Joint self, Joint source)

        Parameters:
            source: OpenSim::Joint::Self const &

        """
        return _opensim.Joint_copyProperty_reverse(self, source)


    def append_reverse(self, value):
        """
        append_reverse(Joint self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Joint_append_reverse(self, value)


    def constructProperty_reverse(self, initValue):
        """
        constructProperty_reverse(Joint self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Joint_constructProperty_reverse(self, initValue)


    def get_reverse(self, *args):
        """
        get_reverse(Joint self, int i) -> bool const

        Parameters:
            i: int

        get_reverse(Joint self) -> bool const &

        Parameters:
            self: OpenSim::Joint const *

        """
        return _opensim.Joint_get_reverse(self, *args)


    def upd_reverse(self, *args):
        """
        upd_reverse(Joint self, int i) -> bool

        Parameters:
            i: int

        upd_reverse(Joint self) -> bool &

        Parameters:
            self: OpenSim::Joint *

        """
        return _opensim.Joint_upd_reverse(self, *args)


    def set_reverse(self, *args):
        """
        set_reverse(Joint self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_reverse(Joint self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Joint_set_reverse(self, *args)

    __swig_destroy__ = _opensim.delete_Joint
    __del__ = lambda self: None

    def setBody(self, aBody):
        """
        setBody(Joint self, Body aBody)

        Parameters:
            aBody: OpenSim::Body &

        """
        return _opensim.Joint_setBody(self, aBody)


    def getBody(self):
        """
        getBody(Joint self) -> Body

        Parameters:
            self: OpenSim::Joint const *

        """
        return _opensim.Joint_getBody(self)


    def updBody(self):
        """
        updBody(Joint self) -> Body

        Parameters:
            self: OpenSim::Joint *

        """
        return _opensim.Joint_updBody(self)


    def setLocation(self, aLocation):
        """
        setLocation(Joint self, Vec3 aLocation)

        Parameters:
            aLocation: SimTK::Vec3 const &

        """
        return _opensim.Joint_setLocation(self, aLocation)


    def getLocation(self, rLocation):
        """
        getLocation(Joint self, Vec3 rLocation)

        Parameters:
            rLocation: SimTK::Vec3 &

        """
        return _opensim.Joint_getLocation(self, rLocation)


    def setOrientation(self, aOrientation):
        """
        setOrientation(Joint self, Vec3 aOrientation)

        Parameters:
            aOrientation: SimTK::Vec3 const &

        """
        return _opensim.Joint_setOrientation(self, aOrientation)


    def getOrientation(self, rOrientation):
        """
        getOrientation(Joint self, Vec3 rOrientation)

        Parameters:
            rOrientation: SimTK::Vec3 &

        """
        return _opensim.Joint_getOrientation(self, rOrientation)


    def setParentName(self, aName):
        """
        setParentName(Joint self, std::string const & aName)

        Parameters:
            aName: std::string const &

        """
        return _opensim.Joint_setParentName(self, aName)


    def getParentName(self):
        """
        getParentName(Joint self) -> std::string

        Parameters:
            self: OpenSim::Joint const *

        """
        return _opensim.Joint_getParentName(self)


    def setParentBody(self, aBody):
        """
        setParentBody(Joint self, Body aBody)

        Parameters:
            aBody: OpenSim::Body &

        """
        return _opensim.Joint_setParentBody(self, aBody)


    def getParentBody(self):
        """
        getParentBody(Joint self) -> Body

        Parameters:
            self: OpenSim::Joint const *

        """
        return _opensim.Joint_getParentBody(self)


    def updParentBody(self):
        """
        updParentBody(Joint self) -> Body

        Parameters:
            self: OpenSim::Joint *

        """
        return _opensim.Joint_updParentBody(self)


    def setLocationInParent(self, aLocation):
        """
        setLocationInParent(Joint self, Vec3 aLocation)

        Parameters:
            aLocation: SimTK::Vec3 const &

        """
        return _opensim.Joint_setLocationInParent(self, aLocation)


    def getLocationInParent(self, rLocation):
        """
        getLocationInParent(Joint self, Vec3 rLocation)

        Parameters:
            rLocation: SimTK::Vec3 &

        """
        return _opensim.Joint_getLocationInParent(self, rLocation)


    def setOrientationInParent(self, aOrientation):
        """
        setOrientationInParent(Joint self, Vec3 aOrientation)

        Parameters:
            aOrientation: SimTK::Vec3 const &

        """
        return _opensim.Joint_setOrientationInParent(self, aOrientation)


    def getOrientationInParent(self, rOrientation):
        """
        getOrientationInParent(Joint self, Vec3 rOrientation)

        Parameters:
            rOrientation: SimTK::Vec3 &

        """
        return _opensim.Joint_getOrientationInParent(self, rOrientation)


    def setLocationInChild(self, aLocation):
        """
        setLocationInChild(Joint self, Vec3 aLocation)

        Parameters:
            aLocation: SimTK::Vec3 const &

        """
        return _opensim.Joint_setLocationInChild(self, aLocation)


    def getLocationInChild(self):
        """
        getLocationInChild(Joint self) -> Vec3

        Parameters:
            self: OpenSim::Joint const *

        """
        return _opensim.Joint_getLocationInChild(self)


    def getCoordinateSet(self):
        """
        getCoordinateSet(Joint self) -> CoordinateSet

        Parameters:
            self: OpenSim::Joint const *

        """
        return _opensim.Joint_getCoordinateSet(self)


    def getReverse(self):
        """
        getReverse(Joint self) -> bool

        Parameters:
            self: OpenSim::Joint const *

        """
        return _opensim.Joint_getReverse(self)


    def numCoordinates(self):
        """
        numCoordinates(Joint self) -> int

        Parameters:
            self: OpenSim::Joint const *

        """
        return _opensim.Joint_numCoordinates(self)


    def checkParentBody(self):
        """
        checkParentBody(Joint self)

        Parameters:
            self: OpenSim::Joint *

        """
        return _opensim.Joint_checkParentBody(self)


    def isCoordinateUsed(self, aCoordinate):
        """
        isCoordinateUsed(Joint self, Coordinate aCoordinate) -> bool

        Parameters:
            aCoordinate: OpenSim::Coordinate &

        """
        return _opensim.Joint_isCoordinateUsed(self, aCoordinate)


    def calcEquivalentSpatialForce(self, s, mobilityForces):
        """
        calcEquivalentSpatialForce(Joint self, State s, Vector mobilityForces) -> SpatialVec

        Parameters:
            s: SimTK::State const &
            mobilityForces: SimTK::Vector const &

        """
        return _opensim.Joint_calcEquivalentSpatialForce(self, s, mobilityForces)


    def calcPower(self, s):
        """
        calcPower(Joint self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Joint_calcPower(self, s)


    def scale(self, aScaleSet):
        """
        scale(Joint self, ScaleSet aScaleSet)

        Parameters:
            aScaleSet: OpenSim::ScaleSet const &

        """
        return _opensim.Joint_scale(self, aScaleSet)


    def connectToModel(self, aModel):
        """
        connectToModel(Joint self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.Joint_connectToModel(self, aModel)

Joint_swigregister = _opensim.Joint_swigregister
Joint_swigregister(Joint)

def Joint_safeDownCast(obj):
    """
    Joint_safeDownCast(OpenSimObject obj) -> Joint

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Joint_safeDownCast(obj)

def Joint_getClassName():
    """Joint_getClassName() -> std::string const &"""
    return _opensim.Joint_getClassName()

class FreeJoint(Joint):
    """Proxy of C++ OpenSim::FreeJoint class"""
    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FreeJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FreeJoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> FreeJoint

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.FreeJoint_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(FreeJoint self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.FreeJoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.FreeJoint_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(FreeJoint self) -> FreeJoint

        Parameters:
            self: OpenSim::FreeJoint const *

        """
        return _opensim.FreeJoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(FreeJoint self) -> std::string const &

        Parameters:
            self: OpenSim::FreeJoint const *

        """
        return _opensim.FreeJoint_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::FreeJoint self) -> FreeJoint
        __init__(OpenSim::FreeJoint self, std::string const & name, Body parent, Vec3 locationInParent, Vec3 orientationInParent, Body body, Vec3 locationInBody, Vec3 orientationInBody, bool reverse=False) -> FreeJoint

        Parameters:
            name: std::string const &
            parent: OpenSim::Body &
            locationInParent: SimTK::Vec3
            orientationInParent: SimTK::Vec3
            body: OpenSim::Body &
            locationInBody: SimTK::Vec3
            orientationInBody: SimTK::Vec3
            reverse: bool

        __init__(OpenSim::FreeJoint self, std::string const & name, Body parent, Vec3 locationInParent, Vec3 orientationInParent, Body body, Vec3 locationInBody, Vec3 orientationInBody) -> FreeJoint

        Parameters:
            name: std::string const &
            parent: OpenSim::Body &
            locationInParent: SimTK::Vec3
            orientationInParent: SimTK::Vec3
            body: OpenSim::Body &
            locationInBody: SimTK::Vec3
            orientationInBody: SimTK::Vec3

        """
        this = _opensim.new_FreeJoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
        self._markAdopted()



    __swig_destroy__ = _opensim.delete_FreeJoint
    __del__ = lambda self: None

    def numCoordinates(self):
        """
        numCoordinates(FreeJoint self) -> int

        Parameters:
            self: OpenSim::FreeJoint const *

        """
        return _opensim.FreeJoint_numCoordinates(self)

FreeJoint_swigregister = _opensim.FreeJoint_swigregister
FreeJoint_swigregister(FreeJoint)

def FreeJoint_safeDownCast(obj):
    """
    FreeJoint_safeDownCast(OpenSimObject obj) -> FreeJoint

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.FreeJoint_safeDownCast(obj)

def FreeJoint_getClassName():
    """FreeJoint_getClassName() -> std::string const &"""
    return _opensim.FreeJoint_getClassName()

class CustomJoint(Joint):
    """Proxy of C++ OpenSim::CustomJoint class"""
    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustomJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CustomJoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> CustomJoint

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.CustomJoint_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(CustomJoint self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.CustomJoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.CustomJoint_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(CustomJoint self) -> CustomJoint

        Parameters:
            self: OpenSim::CustomJoint const *

        """
        return _opensim.CustomJoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(CustomJoint self) -> std::string const &

        Parameters:
            self: OpenSim::CustomJoint const *

        """
        return _opensim.CustomJoint_getConcreteClassName(self)


    def copyProperty_SpatialTransform(self, source):
        """
        copyProperty_SpatialTransform(CustomJoint self, CustomJoint source)

        Parameters:
            source: OpenSim::CustomJoint::Self const &

        """
        return _opensim.CustomJoint_copyProperty_SpatialTransform(self, source)


    def append_SpatialTransform(self, value):
        """
        append_SpatialTransform(CustomJoint self, SpatialTransform value) -> int

        Parameters:
            value: OpenSim::SpatialTransform const &

        """
        return _opensim.CustomJoint_append_SpatialTransform(self, value)


    def constructProperty_SpatialTransform(self, initValue):
        """
        constructProperty_SpatialTransform(CustomJoint self, SpatialTransform initValue)

        Parameters:
            initValue: OpenSim::SpatialTransform const &

        """
        return _opensim.CustomJoint_constructProperty_SpatialTransform(self, initValue)


    def get_SpatialTransform(self, *args):
        """
        get_SpatialTransform(CustomJoint self, int i) -> SpatialTransform

        Parameters:
            i: int

        get_SpatialTransform(CustomJoint self) -> SpatialTransform

        Parameters:
            self: OpenSim::CustomJoint const *

        """
        return _opensim.CustomJoint_get_SpatialTransform(self, *args)


    def upd_SpatialTransform(self, *args):
        """
        upd_SpatialTransform(CustomJoint self, int i) -> SpatialTransform

        Parameters:
            i: int

        upd_SpatialTransform(CustomJoint self) -> SpatialTransform

        Parameters:
            self: OpenSim::CustomJoint *

        """
        return _opensim.CustomJoint_upd_SpatialTransform(self, *args)


    def set_SpatialTransform(self, *args):
        """
        set_SpatialTransform(CustomJoint self, int i, SpatialTransform value)

        Parameters:
            i: int
            value: OpenSim::SpatialTransform const &

        set_SpatialTransform(CustomJoint self, SpatialTransform value)

        Parameters:
            value: OpenSim::SpatialTransform const &

        """
        return _opensim.CustomJoint_set_SpatialTransform(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::CustomJoint self) -> CustomJoint
        __init__(OpenSim::CustomJoint self, std::string const & name, Body parent, Vec3 locationInParent, Vec3 orientationInParent, Body body, Vec3 locationInBody, Vec3 orientationInBody, SpatialTransform aSpatialTransform, bool reverse=False) -> CustomJoint

        Parameters:
            name: std::string const &
            parent: OpenSim::Body &
            locationInParent: SimTK::Vec3
            orientationInParent: SimTK::Vec3
            body: OpenSim::Body &
            locationInBody: SimTK::Vec3
            orientationInBody: SimTK::Vec3
            aSpatialTransform: OpenSim::SpatialTransform &
            reverse: bool

        __init__(OpenSim::CustomJoint self, std::string const & name, Body parent, Vec3 locationInParent, Vec3 orientationInParent, Body body, Vec3 locationInBody, Vec3 orientationInBody, SpatialTransform aSpatialTransform) -> CustomJoint

        Parameters:
            name: std::string const &
            parent: OpenSim::Body &
            locationInParent: SimTK::Vec3
            orientationInParent: SimTK::Vec3
            body: OpenSim::Body &
            locationInBody: SimTK::Vec3
            orientationInBody: SimTK::Vec3
            aSpatialTransform: OpenSim::SpatialTransform &

        __init__(OpenSim::CustomJoint self, std::string const & name, Body parent, Vec3 locationInParent, Vec3 orientationInParent, Body body, Vec3 locationInBody, Vec3 orientationInBody, bool reverse=False) -> CustomJoint

        Parameters:
            name: std::string const &
            parent: OpenSim::Body &
            locationInParent: SimTK::Vec3
            orientationInParent: SimTK::Vec3
            body: OpenSim::Body &
            locationInBody: SimTK::Vec3
            orientationInBody: SimTK::Vec3
            reverse: bool

        __init__(OpenSim::CustomJoint self, std::string const & name, Body parent, Vec3 locationInParent, Vec3 orientationInParent, Body body, Vec3 locationInBody, Vec3 orientationInBody) -> CustomJoint

        Parameters:
            name: std::string const &
            parent: OpenSim::Body &
            locationInParent: SimTK::Vec3
            orientationInParent: SimTK::Vec3
            body: OpenSim::Body &
            locationInBody: SimTK::Vec3
            orientationInBody: SimTK::Vec3

        """
        this = _opensim.new_CustomJoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
        self._markAdopted()




    def numCoordinates(self):
        """
        numCoordinates(CustomJoint self) -> int

        Parameters:
            self: OpenSim::CustomJoint const *

        """
        return _opensim.CustomJoint_numCoordinates(self)


    def getSpatialTransform(self):
        """
        getSpatialTransform(CustomJoint self) -> SpatialTransform

        Parameters:
            self: OpenSim::CustomJoint const *

        """
        return _opensim.CustomJoint_getSpatialTransform(self)


    def updSpatialTransform(self):
        """
        updSpatialTransform(CustomJoint self) -> SpatialTransform

        Parameters:
            self: OpenSim::CustomJoint *

        """
        return _opensim.CustomJoint_updSpatialTransform(self)


    def scale(self, aScaleSet):
        """
        scale(CustomJoint self, ScaleSet aScaleSet)

        Parameters:
            aScaleSet: OpenSim::ScaleSet const &

        """
        return _opensim.CustomJoint_scale(self, aScaleSet)


    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(CustomJoint self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters:
            aNode: SimTK::Xml::Element &
            versionNumber: int

        updateFromXMLNode(CustomJoint self, SimTK::Xml::Element & aNode)

        Parameters:
            aNode: SimTK::Xml::Element &

        """
        return _opensim.CustomJoint_updateFromXMLNode(self, aNode, versionNumber)

    __swig_destroy__ = _opensim.delete_CustomJoint
    __del__ = lambda self: None
CustomJoint_swigregister = _opensim.CustomJoint_swigregister
CustomJoint_swigregister(CustomJoint)

def CustomJoint_safeDownCast(obj):
    """
    CustomJoint_safeDownCast(OpenSimObject obj) -> CustomJoint

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.CustomJoint_safeDownCast(obj)

def CustomJoint_getClassName():
    """CustomJoint_getClassName() -> std::string const &"""
    return _opensim.CustomJoint_getClassName()

class EllipsoidJoint(Joint):
    """Proxy of C++ OpenSim::EllipsoidJoint class"""
    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EllipsoidJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EllipsoidJoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> EllipsoidJoint

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.EllipsoidJoint_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(EllipsoidJoint self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.EllipsoidJoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.EllipsoidJoint_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(EllipsoidJoint self) -> EllipsoidJoint

        Parameters:
            self: OpenSim::EllipsoidJoint const *

        """
        return _opensim.EllipsoidJoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(EllipsoidJoint self) -> std::string const &

        Parameters:
            self: OpenSim::EllipsoidJoint const *

        """
        return _opensim.EllipsoidJoint_getConcreteClassName(self)


    def copyProperty_radii_x_y_z(self, source):
        """
        copyProperty_radii_x_y_z(EllipsoidJoint self, EllipsoidJoint source)

        Parameters:
            source: OpenSim::EllipsoidJoint::Self const &

        """
        return _opensim.EllipsoidJoint_copyProperty_radii_x_y_z(self, source)


    def append_radii_x_y_z(self, value):
        """
        append_radii_x_y_z(EllipsoidJoint self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.EllipsoidJoint_append_radii_x_y_z(self, value)


    def constructProperty_radii_x_y_z(self, initValue):
        """
        constructProperty_radii_x_y_z(EllipsoidJoint self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.EllipsoidJoint_constructProperty_radii_x_y_z(self, initValue)


    def get_radii_x_y_z(self, *args):
        """
        get_radii_x_y_z(EllipsoidJoint self, int i) -> Vec3

        Parameters:
            i: int

        get_radii_x_y_z(EllipsoidJoint self) -> Vec3

        Parameters:
            self: OpenSim::EllipsoidJoint const *

        """
        return _opensim.EllipsoidJoint_get_radii_x_y_z(self, *args)


    def upd_radii_x_y_z(self, *args):
        """
        upd_radii_x_y_z(EllipsoidJoint self, int i) -> Vec3

        Parameters:
            i: int

        upd_radii_x_y_z(EllipsoidJoint self) -> Vec3

        Parameters:
            self: OpenSim::EllipsoidJoint *

        """
        return _opensim.EllipsoidJoint_upd_radii_x_y_z(self, *args)


    def set_radii_x_y_z(self, *args):
        """
        set_radii_x_y_z(EllipsoidJoint self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_radii_x_y_z(EllipsoidJoint self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.EllipsoidJoint_set_radii_x_y_z(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::EllipsoidJoint self) -> EllipsoidJoint
        __init__(OpenSim::EllipsoidJoint self, std::string const & name, Body parent, Vec3 locationInParent, Vec3 orientationInParent, Body body, Vec3 locationInBody, Vec3 orientationInBody, Vec3 ellipsoidRadii, bool reverse=False) -> EllipsoidJoint

        Parameters:
            name: std::string const &
            parent: OpenSim::Body &
            locationInParent: SimTK::Vec3
            orientationInParent: SimTK::Vec3
            body: OpenSim::Body &
            locationInBody: SimTK::Vec3
            orientationInBody: SimTK::Vec3
            ellipsoidRadii: SimTK::Vec3
            reverse: bool

        __init__(OpenSim::EllipsoidJoint self, std::string const & name, Body parent, Vec3 locationInParent, Vec3 orientationInParent, Body body, Vec3 locationInBody, Vec3 orientationInBody, Vec3 ellipsoidRadii) -> EllipsoidJoint

        Parameters:
            name: std::string const &
            parent: OpenSim::Body &
            locationInParent: SimTK::Vec3
            orientationInParent: SimTK::Vec3
            body: OpenSim::Body &
            locationInBody: SimTK::Vec3
            orientationInBody: SimTK::Vec3
            ellipsoidRadii: SimTK::Vec3

        """
        this = _opensim.new_EllipsoidJoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
        self._markAdopted()



    __swig_destroy__ = _opensim.delete_EllipsoidJoint
    __del__ = lambda self: None

    def numCoordinates(self):
        """
        numCoordinates(EllipsoidJoint self) -> int

        Parameters:
            self: OpenSim::EllipsoidJoint const *

        """
        return _opensim.EllipsoidJoint_numCoordinates(self)


    def setEllipsoidRadii(self, radii):
        """
        setEllipsoidRadii(EllipsoidJoint self, Vec3 radii)

        Parameters:
            radii: SimTK::Vec3

        """
        return _opensim.EllipsoidJoint_setEllipsoidRadii(self, radii)


    def scale(self, aScaleSet):
        """
        scale(EllipsoidJoint self, ScaleSet aScaleSet)

        Parameters:
            aScaleSet: OpenSim::ScaleSet const &

        """
        return _opensim.EllipsoidJoint_scale(self, aScaleSet)

EllipsoidJoint_swigregister = _opensim.EllipsoidJoint_swigregister
EllipsoidJoint_swigregister(EllipsoidJoint)

def EllipsoidJoint_safeDownCast(obj):
    """
    EllipsoidJoint_safeDownCast(OpenSimObject obj) -> EllipsoidJoint

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.EllipsoidJoint_safeDownCast(obj)

def EllipsoidJoint_getClassName():
    """EllipsoidJoint_getClassName() -> std::string const &"""
    return _opensim.EllipsoidJoint_getClassName()

class BallJoint(Joint):
    """Proxy of C++ OpenSim::BallJoint class"""
    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BallJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BallJoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> BallJoint

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.BallJoint_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(BallJoint self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.BallJoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.BallJoint_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(BallJoint self) -> BallJoint

        Parameters:
            self: OpenSim::BallJoint const *

        """
        return _opensim.BallJoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(BallJoint self) -> std::string const &

        Parameters:
            self: OpenSim::BallJoint const *

        """
        return _opensim.BallJoint_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::BallJoint self) -> BallJoint
        __init__(OpenSim::BallJoint self, std::string const & name, Body parent, Vec3 locationInParent, Vec3 orientationInParent, Body body, Vec3 locationInBody, Vec3 orientationInBody, bool reverse=False) -> BallJoint

        Parameters:
            name: std::string const &
            parent: OpenSim::Body &
            locationInParent: SimTK::Vec3
            orientationInParent: SimTK::Vec3
            body: OpenSim::Body &
            locationInBody: SimTK::Vec3
            orientationInBody: SimTK::Vec3
            reverse: bool

        __init__(OpenSim::BallJoint self, std::string const & name, Body parent, Vec3 locationInParent, Vec3 orientationInParent, Body body, Vec3 locationInBody, Vec3 orientationInBody) -> BallJoint

        Parameters:
            name: std::string const &
            parent: OpenSim::Body &
            locationInParent: SimTK::Vec3
            orientationInParent: SimTK::Vec3
            body: OpenSim::Body &
            locationInBody: SimTK::Vec3
            orientationInBody: SimTK::Vec3

        """
        this = _opensim.new_BallJoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
        self._markAdopted()



    __swig_destroy__ = _opensim.delete_BallJoint
    __del__ = lambda self: None

    def numCoordinates(self):
        """
        numCoordinates(BallJoint self) -> int

        Parameters:
            self: OpenSim::BallJoint const *

        """
        return _opensim.BallJoint_numCoordinates(self)

BallJoint_swigregister = _opensim.BallJoint_swigregister
BallJoint_swigregister(BallJoint)

def BallJoint_safeDownCast(obj):
    """
    BallJoint_safeDownCast(OpenSimObject obj) -> BallJoint

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.BallJoint_safeDownCast(obj)

def BallJoint_getClassName():
    """BallJoint_getClassName() -> std::string const &"""
    return _opensim.BallJoint_getClassName()

class PinJoint(Joint):
    """Proxy of C++ OpenSim::PinJoint class"""
    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PinJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PinJoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PinJoint

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.PinJoint_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(PinJoint self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.PinJoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.PinJoint_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(PinJoint self) -> PinJoint

        Parameters:
            self: OpenSim::PinJoint const *

        """
        return _opensim.PinJoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PinJoint self) -> std::string const &

        Parameters:
            self: OpenSim::PinJoint const *

        """
        return _opensim.PinJoint_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::PinJoint self) -> PinJoint
        __init__(OpenSim::PinJoint self, std::string const & name, Body parent, Vec3 locationInParent, Vec3 orientationInParent, Body body, Vec3 locationInBody, Vec3 orientationInBody, bool reverse=False) -> PinJoint

        Parameters:
            name: std::string const &
            parent: OpenSim::Body &
            locationInParent: SimTK::Vec3
            orientationInParent: SimTK::Vec3
            body: OpenSim::Body &
            locationInBody: SimTK::Vec3
            orientationInBody: SimTK::Vec3
            reverse: bool

        __init__(OpenSim::PinJoint self, std::string const & name, Body parent, Vec3 locationInParent, Vec3 orientationInParent, Body body, Vec3 locationInBody, Vec3 orientationInBody) -> PinJoint

        Parameters:
            name: std::string const &
            parent: OpenSim::Body &
            locationInParent: SimTK::Vec3
            orientationInParent: SimTK::Vec3
            body: OpenSim::Body &
            locationInBody: SimTK::Vec3
            orientationInBody: SimTK::Vec3

        """
        this = _opensim.new_PinJoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
        self._markAdopted()



    __swig_destroy__ = _opensim.delete_PinJoint
    __del__ = lambda self: None

    def numCoordinates(self):
        """
        numCoordinates(PinJoint self) -> int

        Parameters:
            self: OpenSim::PinJoint const *

        """
        return _opensim.PinJoint_numCoordinates(self)

PinJoint_swigregister = _opensim.PinJoint_swigregister
PinJoint_swigregister(PinJoint)

def PinJoint_safeDownCast(obj):
    """
    PinJoint_safeDownCast(OpenSimObject obj) -> PinJoint

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.PinJoint_safeDownCast(obj)

def PinJoint_getClassName():
    """PinJoint_getClassName() -> std::string const &"""
    return _opensim.PinJoint_getClassName()

class SliderJoint(Joint):
    """Proxy of C++ OpenSim::SliderJoint class"""
    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SliderJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SliderJoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SliderJoint

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SliderJoint_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SliderJoint self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SliderJoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SliderJoint_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SliderJoint self) -> SliderJoint

        Parameters:
            self: OpenSim::SliderJoint const *

        """
        return _opensim.SliderJoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SliderJoint self) -> std::string const &

        Parameters:
            self: OpenSim::SliderJoint const *

        """
        return _opensim.SliderJoint_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::SliderJoint self) -> SliderJoint
        __init__(OpenSim::SliderJoint self, std::string const & name, Body parent, Vec3 locationInParent, Vec3 orientationInParent, Body body, Vec3 locationInBody, Vec3 orientationInBody, bool reverse=False) -> SliderJoint

        Parameters:
            name: std::string const &
            parent: OpenSim::Body &
            locationInParent: SimTK::Vec3
            orientationInParent: SimTK::Vec3
            body: OpenSim::Body &
            locationInBody: SimTK::Vec3
            orientationInBody: SimTK::Vec3
            reverse: bool

        __init__(OpenSim::SliderJoint self, std::string const & name, Body parent, Vec3 locationInParent, Vec3 orientationInParent, Body body, Vec3 locationInBody, Vec3 orientationInBody) -> SliderJoint

        Parameters:
            name: std::string const &
            parent: OpenSim::Body &
            locationInParent: SimTK::Vec3
            orientationInParent: SimTK::Vec3
            body: OpenSim::Body &
            locationInBody: SimTK::Vec3
            orientationInBody: SimTK::Vec3

        """
        this = _opensim.new_SliderJoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
        self._markAdopted()




    def numCoordinates(self):
        """
        numCoordinates(SliderJoint self) -> int

        Parameters:
            self: OpenSim::SliderJoint const *

        """
        return _opensim.SliderJoint_numCoordinates(self)

    __swig_destroy__ = _opensim.delete_SliderJoint
    __del__ = lambda self: None
SliderJoint_swigregister = _opensim.SliderJoint_swigregister
SliderJoint_swigregister(SliderJoint)

def SliderJoint_safeDownCast(obj):
    """
    SliderJoint_safeDownCast(OpenSimObject obj) -> SliderJoint

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SliderJoint_safeDownCast(obj)

def SliderJoint_getClassName():
    """SliderJoint_getClassName() -> std::string const &"""
    return _opensim.SliderJoint_getClassName()

class WeldJoint(Joint):
    """Proxy of C++ OpenSim::WeldJoint class"""
    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeldJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WeldJoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> WeldJoint

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.WeldJoint_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(WeldJoint self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.WeldJoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.WeldJoint_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(WeldJoint self) -> WeldJoint

        Parameters:
            self: OpenSim::WeldJoint const *

        """
        return _opensim.WeldJoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(WeldJoint self) -> std::string const &

        Parameters:
            self: OpenSim::WeldJoint const *

        """
        return _opensim.WeldJoint_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::WeldJoint self) -> WeldJoint
        __init__(OpenSim::WeldJoint self, std::string const & name, Body parent, Vec3 locationInParent, Vec3 orientationInParent, Body body, Vec3 locationInBody, Vec3 orientationInBody, bool reverse=False) -> WeldJoint

        Parameters:
            name: std::string const &
            parent: OpenSim::Body &
            locationInParent: SimTK::Vec3
            orientationInParent: SimTK::Vec3
            body: OpenSim::Body &
            locationInBody: SimTK::Vec3
            orientationInBody: SimTK::Vec3
            reverse: bool

        __init__(OpenSim::WeldJoint self, std::string const & name, Body parent, Vec3 locationInParent, Vec3 orientationInParent, Body body, Vec3 locationInBody, Vec3 orientationInBody) -> WeldJoint

        Parameters:
            name: std::string const &
            parent: OpenSim::Body &
            locationInParent: SimTK::Vec3
            orientationInParent: SimTK::Vec3
            body: OpenSim::Body &
            locationInBody: SimTK::Vec3
            orientationInBody: SimTK::Vec3

        """
        this = _opensim.new_WeldJoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
        self._markAdopted()



    __swig_destroy__ = _opensim.delete_WeldJoint
    __del__ = lambda self: None

    def numCoordinates(self):
        """
        numCoordinates(WeldJoint self) -> int

        Parameters:
            self: OpenSim::WeldJoint const *

        """
        return _opensim.WeldJoint_numCoordinates(self)


    def createMobilizedBody(self, parentTransform, childTransform):
        """
        createMobilizedBody(WeldJoint self, Transform parentTransform, Transform childTransform)

        Parameters:
            parentTransform: SimTK::Transform
            childTransform: SimTK::Transform

        """
        return _opensim.WeldJoint_createMobilizedBody(self, parentTransform, childTransform)

WeldJoint_swigregister = _opensim.WeldJoint_swigregister
WeldJoint_swigregister(WeldJoint)

def WeldJoint_safeDownCast(obj):
    """
    WeldJoint_safeDownCast(OpenSimObject obj) -> WeldJoint

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.WeldJoint_safeDownCast(obj)

def WeldJoint_getClassName():
    """WeldJoint_getClassName() -> std::string const &"""
    return _opensim.WeldJoint_getClassName()

class GimbalJoint(Joint):
    """Proxy of C++ OpenSim::GimbalJoint class"""
    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GimbalJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GimbalJoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> GimbalJoint

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.GimbalJoint_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(GimbalJoint self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.GimbalJoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.GimbalJoint_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(GimbalJoint self) -> GimbalJoint

        Parameters:
            self: OpenSim::GimbalJoint const *

        """
        return _opensim.GimbalJoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(GimbalJoint self) -> std::string const &

        Parameters:
            self: OpenSim::GimbalJoint const *

        """
        return _opensim.GimbalJoint_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::GimbalJoint self) -> GimbalJoint
        __init__(OpenSim::GimbalJoint self, std::string const & name, Body parent, Vec3 locationInParent, Vec3 orientationInParent, Body body, Vec3 locationInBody, Vec3 orientationInBody, bool reverse=False) -> GimbalJoint

        Parameters:
            name: std::string const &
            parent: OpenSim::Body &
            locationInParent: SimTK::Vec3
            orientationInParent: SimTK::Vec3
            body: OpenSim::Body &
            locationInBody: SimTK::Vec3
            orientationInBody: SimTK::Vec3
            reverse: bool

        __init__(OpenSim::GimbalJoint self, std::string const & name, Body parent, Vec3 locationInParent, Vec3 orientationInParent, Body body, Vec3 locationInBody, Vec3 orientationInBody) -> GimbalJoint

        Parameters:
            name: std::string const &
            parent: OpenSim::Body &
            locationInParent: SimTK::Vec3
            orientationInParent: SimTK::Vec3
            body: OpenSim::Body &
            locationInBody: SimTK::Vec3
            orientationInBody: SimTK::Vec3

        """
        this = _opensim.new_GimbalJoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
        self._markAdopted()



    __swig_destroy__ = _opensim.delete_GimbalJoint
    __del__ = lambda self: None

    def numCoordinates(self):
        """
        numCoordinates(GimbalJoint self) -> int

        Parameters:
            self: OpenSim::GimbalJoint const *

        """
        return _opensim.GimbalJoint_numCoordinates(self)

GimbalJoint_swigregister = _opensim.GimbalJoint_swigregister
GimbalJoint_swigregister(GimbalJoint)

def GimbalJoint_safeDownCast(obj):
    """
    GimbalJoint_safeDownCast(OpenSimObject obj) -> GimbalJoint

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.GimbalJoint_safeDownCast(obj)

def GimbalJoint_getClassName():
    """GimbalJoint_getClassName() -> std::string const &"""
    return _opensim.GimbalJoint_getClassName()

class UniversalJoint(Joint):
    """Proxy of C++ OpenSim::UniversalJoint class"""
    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UniversalJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UniversalJoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> UniversalJoint

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.UniversalJoint_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(UniversalJoint self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.UniversalJoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.UniversalJoint_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(UniversalJoint self) -> UniversalJoint

        Parameters:
            self: OpenSim::UniversalJoint const *

        """
        return _opensim.UniversalJoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(UniversalJoint self) -> std::string const &

        Parameters:
            self: OpenSim::UniversalJoint const *

        """
        return _opensim.UniversalJoint_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::UniversalJoint self) -> UniversalJoint
        __init__(OpenSim::UniversalJoint self, std::string const & name, Body parent, Vec3 locationInParent, Vec3 orientationInParent, Body body, Vec3 locationInBody, Vec3 orientationInBody, bool reverse=False) -> UniversalJoint

        Parameters:
            name: std::string const &
            parent: OpenSim::Body &
            locationInParent: SimTK::Vec3
            orientationInParent: SimTK::Vec3
            body: OpenSim::Body &
            locationInBody: SimTK::Vec3
            orientationInBody: SimTK::Vec3
            reverse: bool

        __init__(OpenSim::UniversalJoint self, std::string const & name, Body parent, Vec3 locationInParent, Vec3 orientationInParent, Body body, Vec3 locationInBody, Vec3 orientationInBody) -> UniversalJoint

        Parameters:
            name: std::string const &
            parent: OpenSim::Body &
            locationInParent: SimTK::Vec3
            orientationInParent: SimTK::Vec3
            body: OpenSim::Body &
            locationInBody: SimTK::Vec3
            orientationInBody: SimTK::Vec3

        """
        this = _opensim.new_UniversalJoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
        self._markAdopted()



    __swig_destroy__ = _opensim.delete_UniversalJoint
    __del__ = lambda self: None

    def numCoordinates(self):
        """
        numCoordinates(UniversalJoint self) -> int

        Parameters:
            self: OpenSim::UniversalJoint const *

        """
        return _opensim.UniversalJoint_numCoordinates(self)

UniversalJoint_swigregister = _opensim.UniversalJoint_swigregister
UniversalJoint_swigregister(UniversalJoint)

def UniversalJoint_safeDownCast(obj):
    """
    UniversalJoint_safeDownCast(OpenSimObject obj) -> UniversalJoint

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.UniversalJoint_safeDownCast(obj)

def UniversalJoint_getClassName():
    """UniversalJoint_getClassName() -> std::string const &"""
    return _opensim.UniversalJoint_getClassName()

class PlanarJoint(Joint):
    """Proxy of C++ OpenSim::PlanarJoint class"""
    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlanarJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlanarJoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PlanarJoint

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.PlanarJoint_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(PlanarJoint self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.PlanarJoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.PlanarJoint_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(PlanarJoint self) -> PlanarJoint

        Parameters:
            self: OpenSim::PlanarJoint const *

        """
        return _opensim.PlanarJoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PlanarJoint self) -> std::string const &

        Parameters:
            self: OpenSim::PlanarJoint const *

        """
        return _opensim.PlanarJoint_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::PlanarJoint self) -> PlanarJoint
        __init__(OpenSim::PlanarJoint self, std::string const & name, Body parent, Vec3 locationInParent, Vec3 orientationInParent, Body body, Vec3 locationInBody, Vec3 orientationInBody, bool reverse=False) -> PlanarJoint

        Parameters:
            name: std::string const &
            parent: OpenSim::Body &
            locationInParent: SimTK::Vec3
            orientationInParent: SimTK::Vec3
            body: OpenSim::Body &
            locationInBody: SimTK::Vec3
            orientationInBody: SimTK::Vec3
            reverse: bool

        __init__(OpenSim::PlanarJoint self, std::string const & name, Body parent, Vec3 locationInParent, Vec3 orientationInParent, Body body, Vec3 locationInBody, Vec3 orientationInBody) -> PlanarJoint

        Parameters:
            name: std::string const &
            parent: OpenSim::Body &
            locationInParent: SimTK::Vec3
            orientationInParent: SimTK::Vec3
            body: OpenSim::Body &
            locationInBody: SimTK::Vec3
            orientationInBody: SimTK::Vec3

        """
        this = _opensim.new_PlanarJoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
        self._markAdopted()




    def numCoordinates(self):
        """
        numCoordinates(PlanarJoint self) -> int

        Parameters:
            self: OpenSim::PlanarJoint const *

        """
        return _opensim.PlanarJoint_numCoordinates(self)

    __swig_destroy__ = _opensim.delete_PlanarJoint
    __del__ = lambda self: None
PlanarJoint_swigregister = _opensim.PlanarJoint_swigregister
PlanarJoint_swigregister(PlanarJoint)

def PlanarJoint_safeDownCast(obj):
    """
    PlanarJoint_safeDownCast(OpenSimObject obj) -> PlanarJoint

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.PlanarJoint_safeDownCast(obj)

def PlanarJoint_getClassName():
    """PlanarJoint_getClassName() -> std::string const &"""
    return _opensim.PlanarJoint_getClassName()

class SetJoints(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::Joint)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetJoints, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetJoints, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetJoints

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetJoints_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetJoints self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetJoints_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetJoints_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetJoints self) -> SetJoints

        Parameters:
            self: OpenSim::Set< OpenSim::Joint > const *

        """
        return _opensim.SetJoints_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetJoints self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::Joint > const *

        """
        return _opensim.SetJoints_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetJoints
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Joint)> self) -> SetJoints
        __init__(OpenSim::Set<(OpenSim::Joint)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetJoints

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Joint)> self, std::string const & aFileName) -> SetJoints

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Joint)> self, SetJoints aSet) -> SetJoints

        Parameters:
            aSet: OpenSim::Set< OpenSim::Joint > const &

        """
        this = _opensim.new_SetJoints(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetJoints self)

        Parameters:
            self: OpenSim::Set< OpenSim::Joint > *

        """
        return _opensim.SetJoints_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetJoints self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetJoints_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetJoints self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetJoints_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetJoints self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Joint > const *

        """
        return _opensim.SetJoints_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetJoints self, Joint aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::Joint const *
            aStartIndex: int

        getIndex(SetJoints self, Joint aObject) -> int

        Parameters:
            aObject: OpenSim::Joint const *

        getIndex(SetJoints self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetJoints self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetJoints_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetJoints self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetJoints_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetJoints self, Joint aObject) -> bool

        Parameters:
            aObject: OpenSim::Joint *

        """
        return _opensim.SetJoints_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetJoints self, Joint aObject) -> bool

        Parameters:
            aObject: OpenSim::Joint const &

        """
        return _opensim.SetJoints_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetJoints self, int aIndex, Joint aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Joint *

        """
        return _opensim.SetJoints_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetJoints self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetJoints self, Joint aObject) -> bool

        Parameters:
            aObject: OpenSim::Joint const *

        """
        return _opensim.SetJoints_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetJoints self)

        Parameters:
            self: OpenSim::Set< OpenSim::Joint > *

        """
        return _opensim.SetJoints_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetJoints self, int aIndex, Joint aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Joint *
            preserveGroups: bool

        set(SetJoints self, int aIndex, Joint aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Joint *

        """
        return _opensim.SetJoints_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetJoints self, int aIndex) -> Joint

        Parameters:
            aIndex: int

        get(SetJoints self, std::string const & aName) -> Joint

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetJoints_get(self, *args)


    def contains(self, aName):
        """
        contains(SetJoints self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetJoints_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetJoints self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetJoints_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetJoints self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Joint > const *

        """
        return _opensim.SetJoints_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetJoints self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetJoints_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetJoints self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetJoints_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetJoints self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetJoints_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetJoints self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetJoints_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetJoints self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetJoints_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetJoints self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetJoints self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetJoints_getGroup(self, *args)

SetJoints_swigregister = _opensim.SetJoints_swigregister
SetJoints_swigregister(SetJoints)

def SetJoints_safeDownCast(obj):
    """
    SetJoints_safeDownCast(OpenSimObject obj) -> SetJoints

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetJoints_safeDownCast(obj)

def SetJoints_getClassName():
    """SetJoints_getClassName() -> std::string const &"""
    return _opensim.SetJoints_getClassName()

class ModelComponentSetJoints(SetJoints):
    """Proxy of C++ OpenSim::ModelComponentSet<(OpenSim::Joint)> class"""
    __swig_setmethods__ = {}
    for _s in [SetJoints]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponentSetJoints, name, value)
    __swig_getmethods__ = {}
    for _s in [SetJoints]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponentSetJoints, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelComponentSetJoints

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ModelComponentSetJoints_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ModelComponentSetJoints self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ModelComponentSetJoints_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ModelComponentSetJoints_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ModelComponentSetJoints self) -> ModelComponentSetJoints

        Parameters:
            self: OpenSim::ModelComponentSet< OpenSim::Joint > const *

        """
        return _opensim.ModelComponentSetJoints_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponentSetJoints self) -> std::string const &

        Parameters:
            self: OpenSim::ModelComponentSet< OpenSim::Joint > const *

        """
        return _opensim.ModelComponentSetJoints_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ModelComponentSet<(OpenSim::Joint)> self) -> ModelComponentSetJoints
        __init__(OpenSim::ModelComponentSet<(OpenSim::Joint)> self, Model model) -> ModelComponentSetJoints

        Parameters:
            model: OpenSim::Model &

        __init__(OpenSim::ModelComponentSet<(OpenSim::Joint)> self, Model model, std::string const & fileName, bool aUpdateFromXMLNode=True) -> ModelComponentSetJoints

        Parameters:
            model: OpenSim::Model &
            fileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::ModelComponentSet<(OpenSim::Joint)> self, Model model, std::string const & fileName) -> ModelComponentSetJoints

        Parameters:
            model: OpenSim::Model &
            fileName: std::string const &

        __init__(OpenSim::ModelComponentSet<(OpenSim::Joint)> self, ModelComponentSetJoints source) -> ModelComponentSetJoints

        Parameters:
            source: OpenSim::ModelComponentSet< OpenSim::Joint > const &

        """
        this = _opensim.new_ModelComponentSetJoints(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def insert(self, aIndex, aObject):
        """
        insert(ModelComponentSetJoints self, int aIndex, Joint aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Joint *

        """
        return _opensim.ModelComponentSetJoints_insert(self, aIndex, aObject)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(ModelComponentSetJoints self, int aIndex, Joint aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Joint *
            preserveGroups: bool

        set(ModelComponentSetJoints self, int aIndex, Joint aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Joint *

        """
        return _opensim.ModelComponentSetJoints_set(self, aIndex, aObject, preserveGroups)


    def invokeConnectToModel(self, model):
        """
        invokeConnectToModel(ModelComponentSetJoints self, Model model)

        Parameters:
            model: OpenSim::Model &

        """
        return _opensim.ModelComponentSetJoints_invokeConnectToModel(self, model)


    def invokeAddToSystem(self, system):
        """
        invokeAddToSystem(ModelComponentSetJoints self, SimTK::MultibodySystem & system)

        Parameters:
            system: SimTK::MultibodySystem &

        """
        return _opensim.ModelComponentSetJoints_invokeAddToSystem(self, system)


    def invokeInitStateFromProperties(self, state):
        """
        invokeInitStateFromProperties(ModelComponentSetJoints self, State state)

        Parameters:
            state: SimTK::State &

        """
        return _opensim.ModelComponentSetJoints_invokeInitStateFromProperties(self, state)


    def invokeSetPropertiesFromState(self, state):
        """
        invokeSetPropertiesFromState(ModelComponentSetJoints self, State state)

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.ModelComponentSetJoints_invokeSetPropertiesFromState(self, state)


    def invokeGenerateDecorations(self, fixed, hints, state, appendToThis):
        """
        invokeGenerateDecorations(ModelComponentSetJoints self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters:
            fixed: bool
            hints: OpenSim::ModelDisplayHints const &
            state: SimTK::State const &
            appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _opensim.ModelComponentSetJoints_invokeGenerateDecorations(self, fixed, hints, state, appendToThis)

    __swig_destroy__ = _opensim.delete_ModelComponentSetJoints
    __del__ = lambda self: None
ModelComponentSetJoints_swigregister = _opensim.ModelComponentSetJoints_swigregister
ModelComponentSetJoints_swigregister(ModelComponentSetJoints)

def ModelComponentSetJoints_safeDownCast(obj):
    """
    ModelComponentSetJoints_safeDownCast(OpenSimObject obj) -> ModelComponentSetJoints

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ModelComponentSetJoints_safeDownCast(obj)

def ModelComponentSetJoints_getClassName():
    """ModelComponentSetJoints_getClassName() -> std::string const &"""
    return _opensim.ModelComponentSetJoints_getClassName()

class JointSet(ModelComponentSetJoints):
    """Proxy of C++ OpenSim::JointSet class"""
    __swig_setmethods__ = {}
    for _s in [ModelComponentSetJoints]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointSet, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponentSetJoints]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JointSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> JointSet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.JointSet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(JointSet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.JointSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.JointSet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(JointSet self) -> JointSet

        Parameters:
            self: OpenSim::JointSet const *

        """
        return _opensim.JointSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(JointSet self) -> std::string const &

        Parameters:
            self: OpenSim::JointSet const *

        """
        return _opensim.JointSet_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_JointSet
    __del__ = lambda self: None

    def populate(self, aModel):
        """
        populate(JointSet self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.JointSet_populate(self, aModel)


    def __init__(self, *args):
        """
        __init__(OpenSim::JointSet self) -> JointSet
        __init__(OpenSim::JointSet self, Model model) -> JointSet

        Parameters:
            model: OpenSim::Model &

        __init__(OpenSim::JointSet self, JointSet aJointSet) -> JointSet

        Parameters:
            aJointSet: OpenSim::JointSet const &

        __init__(OpenSim::JointSet self, Model model, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> JointSet

        Parameters:
            model: OpenSim::Model &
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::JointSet self, Model model, std::string const & aFileName) -> JointSet

        Parameters:
            model: OpenSim::Model &
            aFileName: std::string const &

        """
        this = _opensim.new_JointSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def scale(self, aScaleSet):
        """
        scale(JointSet self, ScaleSet aScaleSet)

        Parameters:
            aScaleSet: OpenSim::ScaleSet const &

        """
        return _opensim.JointSet_scale(self, aScaleSet)

    def adoptAndAppend(self, aJoint):
        aJoint._markAdopted()
        return super(JointSet, self).adoptAndAppend(aJoint)

JointSet_swigregister = _opensim.JointSet_swigregister
JointSet_swigregister(JointSet)

def JointSet_safeDownCast(obj):
    """
    JointSet_safeDownCast(OpenSimObject obj) -> JointSet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.JointSet_safeDownCast(obj)

def JointSet_getClassName():
    """JointSet_getClassName() -> std::string const &"""
    return _opensim.JointSet_getClassName()

class Constraint(ModelComponent):
    """Proxy of C++ OpenSim::Constraint class"""
    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constraint, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Constraint, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Constraint

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Constraint_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Constraint self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Constraint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Constraint_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Constraint self) -> Constraint

        Parameters:
            self: OpenSim::Constraint const *

        """
        return _opensim.Constraint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Constraint self) -> std::string const &

        Parameters:
            self: OpenSim::Constraint const *

        """
        return _opensim.Constraint_getConcreteClassName(self)


    def copyProperty_isDisabled(self, source):
        """
        copyProperty_isDisabled(Constraint self, Constraint source)

        Parameters:
            source: OpenSim::Constraint::Self const &

        """
        return _opensim.Constraint_copyProperty_isDisabled(self, source)


    def append_isDisabled(self, value):
        """
        append_isDisabled(Constraint self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Constraint_append_isDisabled(self, value)


    def constructProperty_isDisabled(self, initValue):
        """
        constructProperty_isDisabled(Constraint self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Constraint_constructProperty_isDisabled(self, initValue)


    def get_isDisabled(self, *args):
        """
        get_isDisabled(Constraint self, int i) -> bool const

        Parameters:
            i: int

        get_isDisabled(Constraint self) -> bool const &

        Parameters:
            self: OpenSim::Constraint const *

        """
        return _opensim.Constraint_get_isDisabled(self, *args)


    def upd_isDisabled(self, *args):
        """
        upd_isDisabled(Constraint self, int i) -> bool

        Parameters:
            i: int

        upd_isDisabled(Constraint self) -> bool &

        Parameters:
            self: OpenSim::Constraint *

        """
        return _opensim.Constraint_upd_isDisabled(self, *args)


    def set_isDisabled(self, *args):
        """
        set_isDisabled(Constraint self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_isDisabled(Constraint self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Constraint_set_isDisabled(self, *args)

    __swig_destroy__ = _opensim.delete_Constraint
    __del__ = lambda self: None

    def updateFromConstraint(self, s, aConstraint):
        """
        updateFromConstraint(Constraint self, State s, Constraint aConstraint)

        Parameters:
            s: SimTK::State &
            aConstraint: OpenSim::Constraint const &

        """
        return _opensim.Constraint_updateFromConstraint(self, s, aConstraint)


    def isDisabled(self, s):
        """
        isDisabled(Constraint self, State s) -> bool

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Constraint_isDisabled(self, s)


    def setDisabled(self, s, isDisabled):
        """
        setDisabled(Constraint self, State s, bool isDisabled) -> bool

        Parameters:
            s: SimTK::State &
            isDisabled: bool

        """
        return _opensim.Constraint_setDisabled(self, s, isDisabled)


    def calcConstraintForces(self, s, bodyForcesInAncestor, mobilityForces):
        """
        calcConstraintForces(Constraint self, State s, VectorOfSpatialVec bodyForcesInAncestor, Vector mobilityForces)

        Parameters:
            s: SimTK::State const &
            bodyForcesInAncestor: SimTK::Vector_< SimTK::SpatialVec > &
            mobilityForces: SimTK::Vector &

        """
        return _opensim.Constraint_calcConstraintForces(self, s, bodyForcesInAncestor, mobilityForces)


    def getRecordLabels(self):
        """
        getRecordLabels(Constraint self) -> ArrayStr

        Parameters:
            self: OpenSim::Constraint const *

        """
        return _opensim.Constraint_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(Constraint self, State state) -> ArrayDouble

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.Constraint_getRecordValues(self, state)


    def scale(self, aScaleSet):
        """
        scale(Constraint self, ScaleSet aScaleSet)

        Parameters:
            aScaleSet: OpenSim::ScaleSet const &

        """
        return _opensim.Constraint_scale(self, aScaleSet)


    def setContactPointForInducedAccelerations(self, s, point):
        """
        setContactPointForInducedAccelerations(Constraint self, State s, Vec3 point)

        Parameters:
            s: SimTK::State const &
            point: SimTK::Vec3

        """
        return _opensim.Constraint_setContactPointForInducedAccelerations(self, s, point)

Constraint_swigregister = _opensim.Constraint_swigregister
Constraint_swigregister(Constraint)

def Constraint_safeDownCast(obj):
    """
    Constraint_safeDownCast(OpenSimObject obj) -> Constraint

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Constraint_safeDownCast(obj)

def Constraint_getClassName():
    """Constraint_getClassName() -> std::string const &"""
    return _opensim.Constraint_getClassName()

class SetConstraints(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::Constraint)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetConstraints, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetConstraints, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetConstraints

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetConstraints_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetConstraints self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetConstraints_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetConstraints_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetConstraints self) -> SetConstraints

        Parameters:
            self: OpenSim::Set< OpenSim::Constraint > const *

        """
        return _opensim.SetConstraints_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetConstraints self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::Constraint > const *

        """
        return _opensim.SetConstraints_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetConstraints
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Constraint)> self) -> SetConstraints
        __init__(OpenSim::Set<(OpenSim::Constraint)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetConstraints

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Constraint)> self, std::string const & aFileName) -> SetConstraints

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Constraint)> self, SetConstraints aSet) -> SetConstraints

        Parameters:
            aSet: OpenSim::Set< OpenSim::Constraint > const &

        """
        this = _opensim.new_SetConstraints(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetConstraints self)

        Parameters:
            self: OpenSim::Set< OpenSim::Constraint > *

        """
        return _opensim.SetConstraints_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetConstraints self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetConstraints_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetConstraints self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetConstraints_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetConstraints self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Constraint > const *

        """
        return _opensim.SetConstraints_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetConstraints self, Constraint aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::Constraint const *
            aStartIndex: int

        getIndex(SetConstraints self, Constraint aObject) -> int

        Parameters:
            aObject: OpenSim::Constraint const *

        getIndex(SetConstraints self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetConstraints self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetConstraints_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetConstraints self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetConstraints_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetConstraints self, Constraint aObject) -> bool

        Parameters:
            aObject: OpenSim::Constraint *

        """
        return _opensim.SetConstraints_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetConstraints self, Constraint aObject) -> bool

        Parameters:
            aObject: OpenSim::Constraint const &

        """
        return _opensim.SetConstraints_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetConstraints self, int aIndex, Constraint aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Constraint *

        """
        return _opensim.SetConstraints_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetConstraints self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetConstraints self, Constraint aObject) -> bool

        Parameters:
            aObject: OpenSim::Constraint const *

        """
        return _opensim.SetConstraints_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetConstraints self)

        Parameters:
            self: OpenSim::Set< OpenSim::Constraint > *

        """
        return _opensim.SetConstraints_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetConstraints self, int aIndex, Constraint aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Constraint *
            preserveGroups: bool

        set(SetConstraints self, int aIndex, Constraint aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Constraint *

        """
        return _opensim.SetConstraints_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetConstraints self, int aIndex) -> Constraint

        Parameters:
            aIndex: int

        get(SetConstraints self, std::string const & aName) -> Constraint

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetConstraints_get(self, *args)


    def contains(self, aName):
        """
        contains(SetConstraints self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetConstraints_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetConstraints self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetConstraints_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetConstraints self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Constraint > const *

        """
        return _opensim.SetConstraints_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetConstraints self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetConstraints_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetConstraints self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetConstraints_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetConstraints self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetConstraints_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetConstraints self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetConstraints_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetConstraints self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetConstraints_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetConstraints self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetConstraints self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetConstraints_getGroup(self, *args)

SetConstraints_swigregister = _opensim.SetConstraints_swigregister
SetConstraints_swigregister(SetConstraints)

def SetConstraints_safeDownCast(obj):
    """
    SetConstraints_safeDownCast(OpenSimObject obj) -> SetConstraints

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetConstraints_safeDownCast(obj)

def SetConstraints_getClassName():
    """SetConstraints_getClassName() -> std::string const &"""
    return _opensim.SetConstraints_getClassName()

class ModelComponentSetConstraints(SetConstraints):
    """Proxy of C++ OpenSim::ModelComponentSet<(OpenSim::Constraint)> class"""
    __swig_setmethods__ = {}
    for _s in [SetConstraints]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponentSetConstraints, name, value)
    __swig_getmethods__ = {}
    for _s in [SetConstraints]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponentSetConstraints, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelComponentSetConstraints

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ModelComponentSetConstraints_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ModelComponentSetConstraints self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ModelComponentSetConstraints_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ModelComponentSetConstraints_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ModelComponentSetConstraints self) -> ModelComponentSetConstraints

        Parameters:
            self: OpenSim::ModelComponentSet< OpenSim::Constraint > const *

        """
        return _opensim.ModelComponentSetConstraints_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponentSetConstraints self) -> std::string const &

        Parameters:
            self: OpenSim::ModelComponentSet< OpenSim::Constraint > const *

        """
        return _opensim.ModelComponentSetConstraints_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ModelComponentSet<(OpenSim::Constraint)> self) -> ModelComponentSetConstraints
        __init__(OpenSim::ModelComponentSet<(OpenSim::Constraint)> self, Model model) -> ModelComponentSetConstraints

        Parameters:
            model: OpenSim::Model &

        __init__(OpenSim::ModelComponentSet<(OpenSim::Constraint)> self, Model model, std::string const & fileName, bool aUpdateFromXMLNode=True) -> ModelComponentSetConstraints

        Parameters:
            model: OpenSim::Model &
            fileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::ModelComponentSet<(OpenSim::Constraint)> self, Model model, std::string const & fileName) -> ModelComponentSetConstraints

        Parameters:
            model: OpenSim::Model &
            fileName: std::string const &

        __init__(OpenSim::ModelComponentSet<(OpenSim::Constraint)> self, ModelComponentSetConstraints source) -> ModelComponentSetConstraints

        Parameters:
            source: OpenSim::ModelComponentSet< OpenSim::Constraint > const &

        """
        this = _opensim.new_ModelComponentSetConstraints(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def insert(self, aIndex, aObject):
        """
        insert(ModelComponentSetConstraints self, int aIndex, Constraint aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Constraint *

        """
        return _opensim.ModelComponentSetConstraints_insert(self, aIndex, aObject)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(ModelComponentSetConstraints self, int aIndex, Constraint aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Constraint *
            preserveGroups: bool

        set(ModelComponentSetConstraints self, int aIndex, Constraint aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Constraint *

        """
        return _opensim.ModelComponentSetConstraints_set(self, aIndex, aObject, preserveGroups)


    def invokeConnectToModel(self, model):
        """
        invokeConnectToModel(ModelComponentSetConstraints self, Model model)

        Parameters:
            model: OpenSim::Model &

        """
        return _opensim.ModelComponentSetConstraints_invokeConnectToModel(self, model)


    def invokeAddToSystem(self, system):
        """
        invokeAddToSystem(ModelComponentSetConstraints self, SimTK::MultibodySystem & system)

        Parameters:
            system: SimTK::MultibodySystem &

        """
        return _opensim.ModelComponentSetConstraints_invokeAddToSystem(self, system)


    def invokeInitStateFromProperties(self, state):
        """
        invokeInitStateFromProperties(ModelComponentSetConstraints self, State state)

        Parameters:
            state: SimTK::State &

        """
        return _opensim.ModelComponentSetConstraints_invokeInitStateFromProperties(self, state)


    def invokeSetPropertiesFromState(self, state):
        """
        invokeSetPropertiesFromState(ModelComponentSetConstraints self, State state)

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.ModelComponentSetConstraints_invokeSetPropertiesFromState(self, state)


    def invokeGenerateDecorations(self, fixed, hints, state, appendToThis):
        """
        invokeGenerateDecorations(ModelComponentSetConstraints self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters:
            fixed: bool
            hints: OpenSim::ModelDisplayHints const &
            state: SimTK::State const &
            appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _opensim.ModelComponentSetConstraints_invokeGenerateDecorations(self, fixed, hints, state, appendToThis)

    __swig_destroy__ = _opensim.delete_ModelComponentSetConstraints
    __del__ = lambda self: None
ModelComponentSetConstraints_swigregister = _opensim.ModelComponentSetConstraints_swigregister
ModelComponentSetConstraints_swigregister(ModelComponentSetConstraints)

def ModelComponentSetConstraints_safeDownCast(obj):
    """
    ModelComponentSetConstraints_safeDownCast(OpenSimObject obj) -> ModelComponentSetConstraints

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ModelComponentSetConstraints_safeDownCast(obj)

def ModelComponentSetConstraints_getClassName():
    """ModelComponentSetConstraints_getClassName() -> std::string const &"""
    return _opensim.ModelComponentSetConstraints_getClassName()

class ConstraintSet(ModelComponentSetConstraints):
    """Proxy of C++ OpenSim::ConstraintSet class"""
    __swig_setmethods__ = {}
    for _s in [ModelComponentSetConstraints]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstraintSet, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponentSetConstraints]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstraintSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ConstraintSet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ConstraintSet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ConstraintSet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ConstraintSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ConstraintSet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ConstraintSet self) -> ConstraintSet

        Parameters:
            self: OpenSim::ConstraintSet const *

        """
        return _opensim.ConstraintSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ConstraintSet self) -> std::string const &

        Parameters:
            self: OpenSim::ConstraintSet const *

        """
        return _opensim.ConstraintSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ConstraintSet self) -> ConstraintSet
        __init__(OpenSim::ConstraintSet self, Model model) -> ConstraintSet

        Parameters:
            model: OpenSim::Model &

        __init__(OpenSim::ConstraintSet self, Model model, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> ConstraintSet

        Parameters:
            model: OpenSim::Model &
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::ConstraintSet self, Model model, std::string const & aFileName) -> ConstraintSet

        Parameters:
            model: OpenSim::Model &
            aFileName: std::string const &

        __init__(OpenSim::ConstraintSet self, ConstraintSet aAbsConstraintSet) -> ConstraintSet

        Parameters:
            aAbsConstraintSet: OpenSim::ConstraintSet const &

        """
        this = _opensim.new_ConstraintSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_ConstraintSet
    __del__ = lambda self: None

    def scale(self, aScaleSet):
        """
        scale(ConstraintSet self, ScaleSet aScaleSet)

        Parameters:
            aScaleSet: OpenSim::ScaleSet const &

        """
        return _opensim.ConstraintSet_scale(self, aScaleSet)

    def adoptAndAppend(self, aConstraint):
        aConstraint._markAdopted()
        return super(ConstraintSet, self).adoptAndAppend(aConstraint)

ConstraintSet_swigregister = _opensim.ConstraintSet_swigregister
ConstraintSet_swigregister(ConstraintSet)

def ConstraintSet_safeDownCast(obj):
    """
    ConstraintSet_safeDownCast(OpenSimObject obj) -> ConstraintSet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ConstraintSet_safeDownCast(obj)

def ConstraintSet_getClassName():
    """ConstraintSet_getClassName() -> std::string const &"""
    return _opensim.ConstraintSet_getClassName()

class WeldConstraint(Constraint):
    """Proxy of C++ OpenSim::WeldConstraint class"""
    __swig_setmethods__ = {}
    for _s in [Constraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeldConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Constraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WeldConstraint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> WeldConstraint

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.WeldConstraint_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(WeldConstraint self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.WeldConstraint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.WeldConstraint_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(WeldConstraint self) -> WeldConstraint

        Parameters:
            self: OpenSim::WeldConstraint const *

        """
        return _opensim.WeldConstraint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(WeldConstraint self) -> std::string const &

        Parameters:
            self: OpenSim::WeldConstraint const *

        """
        return _opensim.WeldConstraint_getConcreteClassName(self)


    def copyProperty_body_1(self, source):
        """
        copyProperty_body_1(WeldConstraint self, WeldConstraint source)

        Parameters:
            source: OpenSim::WeldConstraint::Self const &

        """
        return _opensim.WeldConstraint_copyProperty_body_1(self, source)


    def append_body_1(self, value):
        """
        append_body_1(WeldConstraint self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.WeldConstraint_append_body_1(self, value)


    def constructProperty_body_1(self, initValue):
        """
        constructProperty_body_1(WeldConstraint self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.WeldConstraint_constructProperty_body_1(self, initValue)


    def get_body_1(self, *args):
        """
        get_body_1(WeldConstraint self, int i) -> std::string const

        Parameters:
            i: int

        get_body_1(WeldConstraint self) -> std::string const &

        Parameters:
            self: OpenSim::WeldConstraint const *

        """
        return _opensim.WeldConstraint_get_body_1(self, *args)


    def upd_body_1(self, *args):
        """
        upd_body_1(WeldConstraint self, int i) -> std::string

        Parameters:
            i: int

        upd_body_1(WeldConstraint self) -> std::string &

        Parameters:
            self: OpenSim::WeldConstraint *

        """
        return _opensim.WeldConstraint_upd_body_1(self, *args)


    def set_body_1(self, *args):
        """
        set_body_1(WeldConstraint self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_body_1(WeldConstraint self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.WeldConstraint_set_body_1(self, *args)


    def copyProperty_body_2(self, source):
        """
        copyProperty_body_2(WeldConstraint self, WeldConstraint source)

        Parameters:
            source: OpenSim::WeldConstraint::Self const &

        """
        return _opensim.WeldConstraint_copyProperty_body_2(self, source)


    def append_body_2(self, value):
        """
        append_body_2(WeldConstraint self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.WeldConstraint_append_body_2(self, value)


    def constructProperty_body_2(self, initValue):
        """
        constructProperty_body_2(WeldConstraint self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.WeldConstraint_constructProperty_body_2(self, initValue)


    def get_body_2(self, *args):
        """
        get_body_2(WeldConstraint self, int i) -> std::string const

        Parameters:
            i: int

        get_body_2(WeldConstraint self) -> std::string const &

        Parameters:
            self: OpenSim::WeldConstraint const *

        """
        return _opensim.WeldConstraint_get_body_2(self, *args)


    def upd_body_2(self, *args):
        """
        upd_body_2(WeldConstraint self, int i) -> std::string

        Parameters:
            i: int

        upd_body_2(WeldConstraint self) -> std::string &

        Parameters:
            self: OpenSim::WeldConstraint *

        """
        return _opensim.WeldConstraint_upd_body_2(self, *args)


    def set_body_2(self, *args):
        """
        set_body_2(WeldConstraint self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_body_2(WeldConstraint self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.WeldConstraint_set_body_2(self, *args)


    def copyProperty_location_body_1(self, source):
        """
        copyProperty_location_body_1(WeldConstraint self, WeldConstraint source)

        Parameters:
            source: OpenSim::WeldConstraint::Self const &

        """
        return _opensim.WeldConstraint_copyProperty_location_body_1(self, source)


    def append_location_body_1(self, value):
        """
        append_location_body_1(WeldConstraint self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.WeldConstraint_append_location_body_1(self, value)


    def constructProperty_location_body_1(self, initValue):
        """
        constructProperty_location_body_1(WeldConstraint self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.WeldConstraint_constructProperty_location_body_1(self, initValue)


    def get_location_body_1(self, *args):
        """
        get_location_body_1(WeldConstraint self, int i) -> Vec3

        Parameters:
            i: int

        get_location_body_1(WeldConstraint self) -> Vec3

        Parameters:
            self: OpenSim::WeldConstraint const *

        """
        return _opensim.WeldConstraint_get_location_body_1(self, *args)


    def upd_location_body_1(self, *args):
        """
        upd_location_body_1(WeldConstraint self, int i) -> Vec3

        Parameters:
            i: int

        upd_location_body_1(WeldConstraint self) -> Vec3

        Parameters:
            self: OpenSim::WeldConstraint *

        """
        return _opensim.WeldConstraint_upd_location_body_1(self, *args)


    def set_location_body_1(self, *args):
        """
        set_location_body_1(WeldConstraint self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_location_body_1(WeldConstraint self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.WeldConstraint_set_location_body_1(self, *args)


    def copyProperty_location_body_2(self, source):
        """
        copyProperty_location_body_2(WeldConstraint self, WeldConstraint source)

        Parameters:
            source: OpenSim::WeldConstraint::Self const &

        """
        return _opensim.WeldConstraint_copyProperty_location_body_2(self, source)


    def append_location_body_2(self, value):
        """
        append_location_body_2(WeldConstraint self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.WeldConstraint_append_location_body_2(self, value)


    def constructProperty_location_body_2(self, initValue):
        """
        constructProperty_location_body_2(WeldConstraint self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.WeldConstraint_constructProperty_location_body_2(self, initValue)


    def get_location_body_2(self, *args):
        """
        get_location_body_2(WeldConstraint self, int i) -> Vec3

        Parameters:
            i: int

        get_location_body_2(WeldConstraint self) -> Vec3

        Parameters:
            self: OpenSim::WeldConstraint const *

        """
        return _opensim.WeldConstraint_get_location_body_2(self, *args)


    def upd_location_body_2(self, *args):
        """
        upd_location_body_2(WeldConstraint self, int i) -> Vec3

        Parameters:
            i: int

        upd_location_body_2(WeldConstraint self) -> Vec3

        Parameters:
            self: OpenSim::WeldConstraint *

        """
        return _opensim.WeldConstraint_upd_location_body_2(self, *args)


    def set_location_body_2(self, *args):
        """
        set_location_body_2(WeldConstraint self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_location_body_2(WeldConstraint self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.WeldConstraint_set_location_body_2(self, *args)


    def copyProperty_orientation_body_1(self, source):
        """
        copyProperty_orientation_body_1(WeldConstraint self, WeldConstraint source)

        Parameters:
            source: OpenSim::WeldConstraint::Self const &

        """
        return _opensim.WeldConstraint_copyProperty_orientation_body_1(self, source)


    def append_orientation_body_1(self, value):
        """
        append_orientation_body_1(WeldConstraint self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.WeldConstraint_append_orientation_body_1(self, value)


    def constructProperty_orientation_body_1(self, initValue):
        """
        constructProperty_orientation_body_1(WeldConstraint self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.WeldConstraint_constructProperty_orientation_body_1(self, initValue)


    def get_orientation_body_1(self, *args):
        """
        get_orientation_body_1(WeldConstraint self, int i) -> Vec3

        Parameters:
            i: int

        get_orientation_body_1(WeldConstraint self) -> Vec3

        Parameters:
            self: OpenSim::WeldConstraint const *

        """
        return _opensim.WeldConstraint_get_orientation_body_1(self, *args)


    def upd_orientation_body_1(self, *args):
        """
        upd_orientation_body_1(WeldConstraint self, int i) -> Vec3

        Parameters:
            i: int

        upd_orientation_body_1(WeldConstraint self) -> Vec3

        Parameters:
            self: OpenSim::WeldConstraint *

        """
        return _opensim.WeldConstraint_upd_orientation_body_1(self, *args)


    def set_orientation_body_1(self, *args):
        """
        set_orientation_body_1(WeldConstraint self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_orientation_body_1(WeldConstraint self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.WeldConstraint_set_orientation_body_1(self, *args)


    def copyProperty_orientation_body_2(self, source):
        """
        copyProperty_orientation_body_2(WeldConstraint self, WeldConstraint source)

        Parameters:
            source: OpenSim::WeldConstraint::Self const &

        """
        return _opensim.WeldConstraint_copyProperty_orientation_body_2(self, source)


    def append_orientation_body_2(self, value):
        """
        append_orientation_body_2(WeldConstraint self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.WeldConstraint_append_orientation_body_2(self, value)


    def constructProperty_orientation_body_2(self, initValue):
        """
        constructProperty_orientation_body_2(WeldConstraint self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.WeldConstraint_constructProperty_orientation_body_2(self, initValue)


    def get_orientation_body_2(self, *args):
        """
        get_orientation_body_2(WeldConstraint self, int i) -> Vec3

        Parameters:
            i: int

        get_orientation_body_2(WeldConstraint self) -> Vec3

        Parameters:
            self: OpenSim::WeldConstraint const *

        """
        return _opensim.WeldConstraint_get_orientation_body_2(self, *args)


    def upd_orientation_body_2(self, *args):
        """
        upd_orientation_body_2(WeldConstraint self, int i) -> Vec3

        Parameters:
            i: int

        upd_orientation_body_2(WeldConstraint self) -> Vec3

        Parameters:
            self: OpenSim::WeldConstraint *

        """
        return _opensim.WeldConstraint_upd_orientation_body_2(self, *args)


    def set_orientation_body_2(self, *args):
        """
        set_orientation_body_2(WeldConstraint self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_orientation_body_2(WeldConstraint self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.WeldConstraint_set_orientation_body_2(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::WeldConstraint self) -> WeldConstraint
        __init__(OpenSim::WeldConstraint self, std::string const & name, Body body1, Vec3 locationInBody1, Vec3 orientationInBody1, Body body2, Vec3 locationInBody2, Vec3 orientationInBody2) -> WeldConstraint

        Parameters:
            name: std::string const &
            body1: OpenSim::Body &
            locationInBody1: SimTK::Vec3
            orientationInBody1: SimTK::Vec3
            body2: OpenSim::Body &
            locationInBody2: SimTK::Vec3
            orientationInBody2: SimTK::Vec3

        __init__(OpenSim::WeldConstraint self, std::string const & name, Body body1, Transform transformInBody1, Body body2, Transform transformInBody2) -> WeldConstraint

        Parameters:
            name: std::string const &
            body1: OpenSim::Body &
            transformInBody1: SimTK::Transform
            body2: OpenSim::Body &
            transformInBody2: SimTK::Transform

        """
        this = _opensim.new_WeldConstraint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_WeldConstraint
    __del__ = lambda self: None

    def setBody1ByName(self, aBodyName):
        """
        setBody1ByName(WeldConstraint self, std::string aBodyName)

        Parameters:
            aBodyName: std::string

        """
        return _opensim.WeldConstraint_setBody1ByName(self, aBodyName)


    def setBody1WeldLocation(self, *args):
        """
        setBody1WeldLocation(WeldConstraint self, Vec3 location, Vec3 orientation)

        Parameters:
            location: SimTK::Vec3
            orientation: SimTK::Vec3

        setBody1WeldLocation(WeldConstraint self, Vec3 location)

        Parameters:
            location: SimTK::Vec3

        """
        return _opensim.WeldConstraint_setBody1WeldLocation(self, *args)


    def setBody2ByName(self, aBodyName):
        """
        setBody2ByName(WeldConstraint self, std::string aBodyName)

        Parameters:
            aBodyName: std::string

        """
        return _opensim.WeldConstraint_setBody2ByName(self, aBodyName)


    def setBody2WeldLocation(self, *args):
        """
        setBody2WeldLocation(WeldConstraint self, Vec3 location, Vec3 orientation)

        Parameters:
            location: SimTK::Vec3
            orientation: SimTK::Vec3

        setBody2WeldLocation(WeldConstraint self, Vec3 location)

        Parameters:
            location: SimTK::Vec3

        """
        return _opensim.WeldConstraint_setBody2WeldLocation(self, *args)


    def setContactPointForInducedAccelerations(self, s, point):
        """
        setContactPointForInducedAccelerations(WeldConstraint self, State s, Vec3 point)

        Parameters:
            s: SimTK::State const &
            point: SimTK::Vec3

        """
        return _opensim.WeldConstraint_setContactPointForInducedAccelerations(self, s, point)

WeldConstraint_swigregister = _opensim.WeldConstraint_swigregister
WeldConstraint_swigregister(WeldConstraint)

def WeldConstraint_safeDownCast(obj):
    """
    WeldConstraint_safeDownCast(OpenSimObject obj) -> WeldConstraint

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.WeldConstraint_safeDownCast(obj)

def WeldConstraint_getClassName():
    """WeldConstraint_getClassName() -> std::string const &"""
    return _opensim.WeldConstraint_getClassName()

class PointConstraint(Constraint):
    """Proxy of C++ OpenSim::PointConstraint class"""
    __swig_setmethods__ = {}
    for _s in [Constraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Constraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointConstraint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PointConstraint

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.PointConstraint_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(PointConstraint self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.PointConstraint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.PointConstraint_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(PointConstraint self) -> PointConstraint

        Parameters:
            self: OpenSim::PointConstraint const *

        """
        return _opensim.PointConstraint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PointConstraint self) -> std::string const &

        Parameters:
            self: OpenSim::PointConstraint const *

        """
        return _opensim.PointConstraint_getConcreteClassName(self)


    def copyProperty_body_1(self, source):
        """
        copyProperty_body_1(PointConstraint self, PointConstraint source)

        Parameters:
            source: OpenSim::PointConstraint::Self const &

        """
        return _opensim.PointConstraint_copyProperty_body_1(self, source)


    def append_body_1(self, value):
        """
        append_body_1(PointConstraint self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.PointConstraint_append_body_1(self, value)


    def constructProperty_body_1(self, initValue):
        """
        constructProperty_body_1(PointConstraint self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.PointConstraint_constructProperty_body_1(self, initValue)


    def get_body_1(self, *args):
        """
        get_body_1(PointConstraint self, int i) -> std::string const

        Parameters:
            i: int

        get_body_1(PointConstraint self) -> std::string const &

        Parameters:
            self: OpenSim::PointConstraint const *

        """
        return _opensim.PointConstraint_get_body_1(self, *args)


    def upd_body_1(self, *args):
        """
        upd_body_1(PointConstraint self, int i) -> std::string

        Parameters:
            i: int

        upd_body_1(PointConstraint self) -> std::string &

        Parameters:
            self: OpenSim::PointConstraint *

        """
        return _opensim.PointConstraint_upd_body_1(self, *args)


    def set_body_1(self, *args):
        """
        set_body_1(PointConstraint self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_body_1(PointConstraint self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.PointConstraint_set_body_1(self, *args)


    def copyProperty_body_2(self, source):
        """
        copyProperty_body_2(PointConstraint self, PointConstraint source)

        Parameters:
            source: OpenSim::PointConstraint::Self const &

        """
        return _opensim.PointConstraint_copyProperty_body_2(self, source)


    def append_body_2(self, value):
        """
        append_body_2(PointConstraint self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.PointConstraint_append_body_2(self, value)


    def constructProperty_body_2(self, initValue):
        """
        constructProperty_body_2(PointConstraint self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.PointConstraint_constructProperty_body_2(self, initValue)


    def get_body_2(self, *args):
        """
        get_body_2(PointConstraint self, int i) -> std::string const

        Parameters:
            i: int

        get_body_2(PointConstraint self) -> std::string const &

        Parameters:
            self: OpenSim::PointConstraint const *

        """
        return _opensim.PointConstraint_get_body_2(self, *args)


    def upd_body_2(self, *args):
        """
        upd_body_2(PointConstraint self, int i) -> std::string

        Parameters:
            i: int

        upd_body_2(PointConstraint self) -> std::string &

        Parameters:
            self: OpenSim::PointConstraint *

        """
        return _opensim.PointConstraint_upd_body_2(self, *args)


    def set_body_2(self, *args):
        """
        set_body_2(PointConstraint self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_body_2(PointConstraint self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.PointConstraint_set_body_2(self, *args)


    def copyProperty_location_body_1(self, source):
        """
        copyProperty_location_body_1(PointConstraint self, PointConstraint source)

        Parameters:
            source: OpenSim::PointConstraint::Self const &

        """
        return _opensim.PointConstraint_copyProperty_location_body_1(self, source)


    def append_location_body_1(self, value):
        """
        append_location_body_1(PointConstraint self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.PointConstraint_append_location_body_1(self, value)


    def constructProperty_location_body_1(self, initValue):
        """
        constructProperty_location_body_1(PointConstraint self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.PointConstraint_constructProperty_location_body_1(self, initValue)


    def get_location_body_1(self, *args):
        """
        get_location_body_1(PointConstraint self, int i) -> Vec3

        Parameters:
            i: int

        get_location_body_1(PointConstraint self) -> Vec3

        Parameters:
            self: OpenSim::PointConstraint const *

        """
        return _opensim.PointConstraint_get_location_body_1(self, *args)


    def upd_location_body_1(self, *args):
        """
        upd_location_body_1(PointConstraint self, int i) -> Vec3

        Parameters:
            i: int

        upd_location_body_1(PointConstraint self) -> Vec3

        Parameters:
            self: OpenSim::PointConstraint *

        """
        return _opensim.PointConstraint_upd_location_body_1(self, *args)


    def set_location_body_1(self, *args):
        """
        set_location_body_1(PointConstraint self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_location_body_1(PointConstraint self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.PointConstraint_set_location_body_1(self, *args)


    def copyProperty_location_body_2(self, source):
        """
        copyProperty_location_body_2(PointConstraint self, PointConstraint source)

        Parameters:
            source: OpenSim::PointConstraint::Self const &

        """
        return _opensim.PointConstraint_copyProperty_location_body_2(self, source)


    def append_location_body_2(self, value):
        """
        append_location_body_2(PointConstraint self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.PointConstraint_append_location_body_2(self, value)


    def constructProperty_location_body_2(self, initValue):
        """
        constructProperty_location_body_2(PointConstraint self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.PointConstraint_constructProperty_location_body_2(self, initValue)


    def get_location_body_2(self, *args):
        """
        get_location_body_2(PointConstraint self, int i) -> Vec3

        Parameters:
            i: int

        get_location_body_2(PointConstraint self) -> Vec3

        Parameters:
            self: OpenSim::PointConstraint const *

        """
        return _opensim.PointConstraint_get_location_body_2(self, *args)


    def upd_location_body_2(self, *args):
        """
        upd_location_body_2(PointConstraint self, int i) -> Vec3

        Parameters:
            i: int

        upd_location_body_2(PointConstraint self) -> Vec3

        Parameters:
            self: OpenSim::PointConstraint *

        """
        return _opensim.PointConstraint_upd_location_body_2(self, *args)


    def set_location_body_2(self, *args):
        """
        set_location_body_2(PointConstraint self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_location_body_2(PointConstraint self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.PointConstraint_set_location_body_2(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::PointConstraint self) -> PointConstraint
        __init__(OpenSim::PointConstraint self, Body body1, Vec3 locationBody1, Body body2, Vec3 locationBody2) -> PointConstraint

        Parameters:
            body1: OpenSim::Body &
            locationBody1: SimTK::Vec3 &
            body2: OpenSim::Body &
            locationBody2: SimTK::Vec3 &

        """
        this = _opensim.new_PointConstraint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_PointConstraint
    __del__ = lambda self: None

    def setBody1ByName(self, aBodyName):
        """
        setBody1ByName(PointConstraint self, std::string aBodyName)

        Parameters:
            aBodyName: std::string

        """
        return _opensim.PointConstraint_setBody1ByName(self, aBodyName)


    def setBody1PointLocation(self, location):
        """
        setBody1PointLocation(PointConstraint self, Vec3 location)

        Parameters:
            location: SimTK::Vec3

        """
        return _opensim.PointConstraint_setBody1PointLocation(self, location)


    def setBody2ByName(self, aBodyName):
        """
        setBody2ByName(PointConstraint self, std::string aBodyName)

        Parameters:
            aBodyName: std::string

        """
        return _opensim.PointConstraint_setBody2ByName(self, aBodyName)


    def setBody2PointLocation(self, location):
        """
        setBody2PointLocation(PointConstraint self, Vec3 location)

        Parameters:
            location: SimTK::Vec3

        """
        return _opensim.PointConstraint_setBody2PointLocation(self, location)


    def setContactPointForInducedAccelerations(self, s, point):
        """
        setContactPointForInducedAccelerations(PointConstraint self, State s, Vec3 point)

        Parameters:
            s: SimTK::State const &
            point: SimTK::Vec3

        """
        return _opensim.PointConstraint_setContactPointForInducedAccelerations(self, s, point)

PointConstraint_swigregister = _opensim.PointConstraint_swigregister
PointConstraint_swigregister(PointConstraint)

def PointConstraint_safeDownCast(obj):
    """
    PointConstraint_safeDownCast(OpenSimObject obj) -> PointConstraint

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.PointConstraint_safeDownCast(obj)

def PointConstraint_getClassName():
    """PointConstraint_getClassName() -> std::string const &"""
    return _opensim.PointConstraint_getClassName()

class ConstantDistanceConstraint(Constraint):
    """Proxy of C++ OpenSim::ConstantDistanceConstraint class"""
    __swig_setmethods__ = {}
    for _s in [Constraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantDistanceConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Constraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantDistanceConstraint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ConstantDistanceConstraint

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ConstantDistanceConstraint_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ConstantDistanceConstraint self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ConstantDistanceConstraint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ConstantDistanceConstraint_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ConstantDistanceConstraint self) -> ConstantDistanceConstraint

        Parameters:
            self: OpenSim::ConstantDistanceConstraint const *

        """
        return _opensim.ConstantDistanceConstraint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ConstantDistanceConstraint self) -> std::string const &

        Parameters:
            self: OpenSim::ConstantDistanceConstraint const *

        """
        return _opensim.ConstantDistanceConstraint_getConcreteClassName(self)


    def copyProperty_body_1(self, source):
        """
        copyProperty_body_1(ConstantDistanceConstraint self, ConstantDistanceConstraint source)

        Parameters:
            source: OpenSim::ConstantDistanceConstraint::Self const &

        """
        return _opensim.ConstantDistanceConstraint_copyProperty_body_1(self, source)


    def append_body_1(self, value):
        """
        append_body_1(ConstantDistanceConstraint self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ConstantDistanceConstraint_append_body_1(self, value)


    def constructProperty_body_1(self, initValue):
        """
        constructProperty_body_1(ConstantDistanceConstraint self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.ConstantDistanceConstraint_constructProperty_body_1(self, initValue)


    def get_body_1(self, *args):
        """
        get_body_1(ConstantDistanceConstraint self, int i) -> std::string const

        Parameters:
            i: int

        get_body_1(ConstantDistanceConstraint self) -> std::string const &

        Parameters:
            self: OpenSim::ConstantDistanceConstraint const *

        """
        return _opensim.ConstantDistanceConstraint_get_body_1(self, *args)


    def upd_body_1(self, *args):
        """
        upd_body_1(ConstantDistanceConstraint self, int i) -> std::string

        Parameters:
            i: int

        upd_body_1(ConstantDistanceConstraint self) -> std::string &

        Parameters:
            self: OpenSim::ConstantDistanceConstraint *

        """
        return _opensim.ConstantDistanceConstraint_upd_body_1(self, *args)


    def set_body_1(self, *args):
        """
        set_body_1(ConstantDistanceConstraint self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_body_1(ConstantDistanceConstraint self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.ConstantDistanceConstraint_set_body_1(self, *args)


    def copyProperty_body_2(self, source):
        """
        copyProperty_body_2(ConstantDistanceConstraint self, ConstantDistanceConstraint source)

        Parameters:
            source: OpenSim::ConstantDistanceConstraint::Self const &

        """
        return _opensim.ConstantDistanceConstraint_copyProperty_body_2(self, source)


    def append_body_2(self, value):
        """
        append_body_2(ConstantDistanceConstraint self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ConstantDistanceConstraint_append_body_2(self, value)


    def constructProperty_body_2(self, initValue):
        """
        constructProperty_body_2(ConstantDistanceConstraint self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.ConstantDistanceConstraint_constructProperty_body_2(self, initValue)


    def get_body_2(self, *args):
        """
        get_body_2(ConstantDistanceConstraint self, int i) -> std::string const

        Parameters:
            i: int

        get_body_2(ConstantDistanceConstraint self) -> std::string const &

        Parameters:
            self: OpenSim::ConstantDistanceConstraint const *

        """
        return _opensim.ConstantDistanceConstraint_get_body_2(self, *args)


    def upd_body_2(self, *args):
        """
        upd_body_2(ConstantDistanceConstraint self, int i) -> std::string

        Parameters:
            i: int

        upd_body_2(ConstantDistanceConstraint self) -> std::string &

        Parameters:
            self: OpenSim::ConstantDistanceConstraint *

        """
        return _opensim.ConstantDistanceConstraint_upd_body_2(self, *args)


    def set_body_2(self, *args):
        """
        set_body_2(ConstantDistanceConstraint self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_body_2(ConstantDistanceConstraint self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.ConstantDistanceConstraint_set_body_2(self, *args)


    def copyProperty_location_body_1(self, source):
        """
        copyProperty_location_body_1(ConstantDistanceConstraint self, ConstantDistanceConstraint source)

        Parameters:
            source: OpenSim::ConstantDistanceConstraint::Self const &

        """
        return _opensim.ConstantDistanceConstraint_copyProperty_location_body_1(self, source)


    def append_location_body_1(self, value):
        """
        append_location_body_1(ConstantDistanceConstraint self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.ConstantDistanceConstraint_append_location_body_1(self, value)


    def constructProperty_location_body_1(self, initValue):
        """
        constructProperty_location_body_1(ConstantDistanceConstraint self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.ConstantDistanceConstraint_constructProperty_location_body_1(self, initValue)


    def get_location_body_1(self, *args):
        """
        get_location_body_1(ConstantDistanceConstraint self, int i) -> Vec3

        Parameters:
            i: int

        get_location_body_1(ConstantDistanceConstraint self) -> Vec3

        Parameters:
            self: OpenSim::ConstantDistanceConstraint const *

        """
        return _opensim.ConstantDistanceConstraint_get_location_body_1(self, *args)


    def upd_location_body_1(self, *args):
        """
        upd_location_body_1(ConstantDistanceConstraint self, int i) -> Vec3

        Parameters:
            i: int

        upd_location_body_1(ConstantDistanceConstraint self) -> Vec3

        Parameters:
            self: OpenSim::ConstantDistanceConstraint *

        """
        return _opensim.ConstantDistanceConstraint_upd_location_body_1(self, *args)


    def set_location_body_1(self, *args):
        """
        set_location_body_1(ConstantDistanceConstraint self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_location_body_1(ConstantDistanceConstraint self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.ConstantDistanceConstraint_set_location_body_1(self, *args)


    def copyProperty_location_body_2(self, source):
        """
        copyProperty_location_body_2(ConstantDistanceConstraint self, ConstantDistanceConstraint source)

        Parameters:
            source: OpenSim::ConstantDistanceConstraint::Self const &

        """
        return _opensim.ConstantDistanceConstraint_copyProperty_location_body_2(self, source)


    def append_location_body_2(self, value):
        """
        append_location_body_2(ConstantDistanceConstraint self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.ConstantDistanceConstraint_append_location_body_2(self, value)


    def constructProperty_location_body_2(self, initValue):
        """
        constructProperty_location_body_2(ConstantDistanceConstraint self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.ConstantDistanceConstraint_constructProperty_location_body_2(self, initValue)


    def get_location_body_2(self, *args):
        """
        get_location_body_2(ConstantDistanceConstraint self, int i) -> Vec3

        Parameters:
            i: int

        get_location_body_2(ConstantDistanceConstraint self) -> Vec3

        Parameters:
            self: OpenSim::ConstantDistanceConstraint const *

        """
        return _opensim.ConstantDistanceConstraint_get_location_body_2(self, *args)


    def upd_location_body_2(self, *args):
        """
        upd_location_body_2(ConstantDistanceConstraint self, int i) -> Vec3

        Parameters:
            i: int

        upd_location_body_2(ConstantDistanceConstraint self) -> Vec3

        Parameters:
            self: OpenSim::ConstantDistanceConstraint *

        """
        return _opensim.ConstantDistanceConstraint_upd_location_body_2(self, *args)


    def set_location_body_2(self, *args):
        """
        set_location_body_2(ConstantDistanceConstraint self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_location_body_2(ConstantDistanceConstraint self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.ConstantDistanceConstraint_set_location_body_2(self, *args)


    def copyProperty_constant_distance(self, source):
        """
        copyProperty_constant_distance(ConstantDistanceConstraint self, ConstantDistanceConstraint source)

        Parameters:
            source: OpenSim::ConstantDistanceConstraint::Self const &

        """
        return _opensim.ConstantDistanceConstraint_copyProperty_constant_distance(self, source)


    def append_constant_distance(self, value):
        """
        append_constant_distance(ConstantDistanceConstraint self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ConstantDistanceConstraint_append_constant_distance(self, value)


    def constructProperty_constant_distance(self, initValue):
        """
        constructProperty_constant_distance(ConstantDistanceConstraint self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ConstantDistanceConstraint_constructProperty_constant_distance(self, initValue)


    def get_constant_distance(self, *args):
        """
        get_constant_distance(ConstantDistanceConstraint self, int i) -> double const

        Parameters:
            i: int

        get_constant_distance(ConstantDistanceConstraint self) -> double const &

        Parameters:
            self: OpenSim::ConstantDistanceConstraint const *

        """
        return _opensim.ConstantDistanceConstraint_get_constant_distance(self, *args)


    def upd_constant_distance(self, *args):
        """
        upd_constant_distance(ConstantDistanceConstraint self, int i) -> double

        Parameters:
            i: int

        upd_constant_distance(ConstantDistanceConstraint self) -> double &

        Parameters:
            self: OpenSim::ConstantDistanceConstraint *

        """
        return _opensim.ConstantDistanceConstraint_upd_constant_distance(self, *args)


    def set_constant_distance(self, *args):
        """
        set_constant_distance(ConstantDistanceConstraint self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_constant_distance(ConstantDistanceConstraint self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ConstantDistanceConstraint_set_constant_distance(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ConstantDistanceConstraint self) -> ConstantDistanceConstraint
        __init__(OpenSim::ConstantDistanceConstraint self, Body body1, Vec3 locationBody1, Body body2, Vec3 locationBody2, double & distance) -> ConstantDistanceConstraint

        Parameters:
            body1: OpenSim::Body &
            locationBody1: SimTK::Vec3 &
            body2: OpenSim::Body &
            locationBody2: SimTK::Vec3 &
            distance: double &

        """
        this = _opensim.new_ConstantDistanceConstraint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_ConstantDistanceConstraint
    __del__ = lambda self: None

    def setBody1ByName(self, aBodyName):
        """
        setBody1ByName(ConstantDistanceConstraint self, std::string aBodyName)

        Parameters:
            aBodyName: std::string

        """
        return _opensim.ConstantDistanceConstraint_setBody1ByName(self, aBodyName)


    def setBody1PointLocation(self, location):
        """
        setBody1PointLocation(ConstantDistanceConstraint self, Vec3 location)

        Parameters:
            location: SimTK::Vec3

        """
        return _opensim.ConstantDistanceConstraint_setBody1PointLocation(self, location)


    def setBody2ByName(self, aBodyName):
        """
        setBody2ByName(ConstantDistanceConstraint self, std::string aBodyName)

        Parameters:
            aBodyName: std::string

        """
        return _opensim.ConstantDistanceConstraint_setBody2ByName(self, aBodyName)


    def setBody2PointLocation(self, location):
        """
        setBody2PointLocation(ConstantDistanceConstraint self, Vec3 location)

        Parameters:
            location: SimTK::Vec3

        """
        return _opensim.ConstantDistanceConstraint_setBody2PointLocation(self, location)


    def setConstantDistance(self, distance):
        """
        setConstantDistance(ConstantDistanceConstraint self, double distance)

        Parameters:
            distance: double

        """
        return _opensim.ConstantDistanceConstraint_setConstantDistance(self, distance)

ConstantDistanceConstraint_swigregister = _opensim.ConstantDistanceConstraint_swigregister
ConstantDistanceConstraint_swigregister(ConstantDistanceConstraint)

def ConstantDistanceConstraint_safeDownCast(obj):
    """
    ConstantDistanceConstraint_safeDownCast(OpenSimObject obj) -> ConstantDistanceConstraint

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ConstantDistanceConstraint_safeDownCast(obj)

def ConstantDistanceConstraint_getClassName():
    """ConstantDistanceConstraint_getClassName() -> std::string const &"""
    return _opensim.ConstantDistanceConstraint_getClassName()

class CoordinateCouplerConstraint(Constraint):
    """Proxy of C++ OpenSim::CoordinateCouplerConstraint class"""
    __swig_setmethods__ = {}
    for _s in [Constraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoordinateCouplerConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Constraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoordinateCouplerConstraint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> CoordinateCouplerConstraint

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.CoordinateCouplerConstraint_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(CoordinateCouplerConstraint self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.CoordinateCouplerConstraint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.CoordinateCouplerConstraint_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(CoordinateCouplerConstraint self) -> CoordinateCouplerConstraint

        Parameters:
            self: OpenSim::CoordinateCouplerConstraint const *

        """
        return _opensim.CoordinateCouplerConstraint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(CoordinateCouplerConstraint self) -> std::string const &

        Parameters:
            self: OpenSim::CoordinateCouplerConstraint const *

        """
        return _opensim.CoordinateCouplerConstraint_getConcreteClassName(self)


    def __init__(self):
        """__init__(OpenSim::CoordinateCouplerConstraint self) -> CoordinateCouplerConstraint"""
        this = _opensim.new_CoordinateCouplerConstraint()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_CoordinateCouplerConstraint
    __del__ = lambda self: None

    def setIndependentCoordinateNames(self, aCoordNames):
        """
        setIndependentCoordinateNames(CoordinateCouplerConstraint self, ArrayStr aCoordNames)

        Parameters:
            aCoordNames: OpenSim::Array< std::string > const &

        """
        return _opensim.CoordinateCouplerConstraint_setIndependentCoordinateNames(self, aCoordNames)


    def getIndependentCoordinateNames(self):
        """
        getIndependentCoordinateNames(CoordinateCouplerConstraint self) -> ArrayStr

        Parameters:
            self: OpenSim::CoordinateCouplerConstraint const *

        """
        return _opensim.CoordinateCouplerConstraint_getIndependentCoordinateNames(self)


    def setDependentCoordinateName(self, aCoordName):
        """
        setDependentCoordinateName(CoordinateCouplerConstraint self, std::string const & aCoordName)

        Parameters:
            aCoordName: std::string const &

        """
        return _opensim.CoordinateCouplerConstraint_setDependentCoordinateName(self, aCoordName)


    def getDependentCoordinateName(self):
        """
        getDependentCoordinateName(CoordinateCouplerConstraint self) -> std::string const &

        Parameters:
            self: OpenSim::CoordinateCouplerConstraint const *

        """
        return _opensim.CoordinateCouplerConstraint_getDependentCoordinateName(self)


    def getFunction(self):
        """
        getFunction(CoordinateCouplerConstraint self) -> Function

        Parameters:
            self: OpenSim::CoordinateCouplerConstraint const *

        """
        return _opensim.CoordinateCouplerConstraint_getFunction(self)


    def setFunction(self, *args):
        """
        setFunction(CoordinateCouplerConstraint self, Function aFunction)

        Parameters:
            aFunction: OpenSim::Function const &

        setFunction(CoordinateCouplerConstraint self, Function aFunction)

        Parameters:
            aFunction: OpenSim::Function *

        """
        return _opensim.CoordinateCouplerConstraint_setFunction(self, *args)


    def scale(self, aScaleSet):
        """
        scale(CoordinateCouplerConstraint self, ScaleSet aScaleSet)

        Parameters:
            aScaleSet: OpenSim::ScaleSet const &

        """
        return _opensim.CoordinateCouplerConstraint_scale(self, aScaleSet)

CoordinateCouplerConstraint_swigregister = _opensim.CoordinateCouplerConstraint_swigregister
CoordinateCouplerConstraint_swigregister(CoordinateCouplerConstraint)

def CoordinateCouplerConstraint_safeDownCast(obj):
    """
    CoordinateCouplerConstraint_safeDownCast(OpenSimObject obj) -> CoordinateCouplerConstraint

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.CoordinateCouplerConstraint_safeDownCast(obj)

def CoordinateCouplerConstraint_getClassName():
    """CoordinateCouplerConstraint_getClassName() -> std::string const &"""
    return _opensim.CoordinateCouplerConstraint_getClassName()

class PointOnLineConstraint(Constraint):
    """Proxy of C++ OpenSim::PointOnLineConstraint class"""
    __swig_setmethods__ = {}
    for _s in [Constraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointOnLineConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Constraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointOnLineConstraint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PointOnLineConstraint

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.PointOnLineConstraint_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(PointOnLineConstraint self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.PointOnLineConstraint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.PointOnLineConstraint_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(PointOnLineConstraint self) -> PointOnLineConstraint

        Parameters:
            self: OpenSim::PointOnLineConstraint const *

        """
        return _opensim.PointOnLineConstraint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PointOnLineConstraint self) -> std::string const &

        Parameters:
            self: OpenSim::PointOnLineConstraint const *

        """
        return _opensim.PointOnLineConstraint_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::PointOnLineConstraint self) -> PointOnLineConstraint
        __init__(OpenSim::PointOnLineConstraint self, Body lineBody, Vec3 lineDirection, Vec3 pointOnLine, Body followerBody, Vec3 followerPoint) -> PointOnLineConstraint

        Parameters:
            lineBody: OpenSim::Body &
            lineDirection: SimTK::Vec3
            pointOnLine: SimTK::Vec3
            followerBody: OpenSim::Body &
            followerPoint: SimTK::Vec3

        """
        this = _opensim.new_PointOnLineConstraint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_PointOnLineConstraint
    __del__ = lambda self: None

    def setLineBodyByName(self, aBodyName):
        """
        setLineBodyByName(PointOnLineConstraint self, std::string aBodyName)

        Parameters:
            aBodyName: std::string

        """
        return _opensim.PointOnLineConstraint_setLineBodyByName(self, aBodyName)


    def setFollowerBodyByName(self, aBodyName):
        """
        setFollowerBodyByName(PointOnLineConstraint self, std::string aBodyName)

        Parameters:
            aBodyName: std::string

        """
        return _opensim.PointOnLineConstraint_setFollowerBodyByName(self, aBodyName)


    def setLineDirection(self, direction):
        """
        setLineDirection(PointOnLineConstraint self, Vec3 direction)

        Parameters:
            direction: SimTK::Vec3

        """
        return _opensim.PointOnLineConstraint_setLineDirection(self, direction)


    def setPointOnLine(self, point):
        """
        setPointOnLine(PointOnLineConstraint self, Vec3 point)

        Parameters:
            point: SimTK::Vec3

        """
        return _opensim.PointOnLineConstraint_setPointOnLine(self, point)


    def setPointOnFollower(self, point):
        """
        setPointOnFollower(PointOnLineConstraint self, Vec3 point)

        Parameters:
            point: SimTK::Vec3

        """
        return _opensim.PointOnLineConstraint_setPointOnFollower(self, point)

PointOnLineConstraint_swigregister = _opensim.PointOnLineConstraint_swigregister
PointOnLineConstraint_swigregister(PointOnLineConstraint)

def PointOnLineConstraint_safeDownCast(obj):
    """
    PointOnLineConstraint_safeDownCast(OpenSimObject obj) -> PointOnLineConstraint

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.PointOnLineConstraint_safeDownCast(obj)

def PointOnLineConstraint_getClassName():
    """PointOnLineConstraint_getClassName() -> std::string const &"""
    return _opensim.PointOnLineConstraint_getClassName()

class Probe(ModelComponent):
    """Proxy of C++ OpenSim::Probe class"""
    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Probe, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Probe, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Probe

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Probe_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Probe self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Probe_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Probe_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Probe self) -> Probe

        Parameters:
            self: OpenSim::Probe const *

        """
        return _opensim.Probe_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Probe self) -> std::string const &

        Parameters:
            self: OpenSim::Probe const *

        """
        return _opensim.Probe_getConcreteClassName(self)


    def copyProperty_isDisabled(self, source):
        """
        copyProperty_isDisabled(Probe self, Probe source)

        Parameters:
            source: OpenSim::Probe::Self const &

        """
        return _opensim.Probe_copyProperty_isDisabled(self, source)


    def append_isDisabled(self, value):
        """
        append_isDisabled(Probe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Probe_append_isDisabled(self, value)


    def constructProperty_isDisabled(self, initValue):
        """
        constructProperty_isDisabled(Probe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Probe_constructProperty_isDisabled(self, initValue)


    def get_isDisabled(self, *args):
        """
        get_isDisabled(Probe self, int i) -> bool const

        Parameters:
            i: int

        get_isDisabled(Probe self) -> bool const &

        Parameters:
            self: OpenSim::Probe const *

        """
        return _opensim.Probe_get_isDisabled(self, *args)


    def upd_isDisabled(self, *args):
        """
        upd_isDisabled(Probe self, int i) -> bool

        Parameters:
            i: int

        upd_isDisabled(Probe self) -> bool &

        Parameters:
            self: OpenSim::Probe *

        """
        return _opensim.Probe_upd_isDisabled(self, *args)


    def set_isDisabled(self, *args):
        """
        set_isDisabled(Probe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_isDisabled(Probe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Probe_set_isDisabled(self, *args)


    def copyProperty_probe_operation(self, source):
        """
        copyProperty_probe_operation(Probe self, Probe source)

        Parameters:
            source: OpenSim::Probe::Self const &

        """
        return _opensim.Probe_copyProperty_probe_operation(self, source)


    def append_probe_operation(self, value):
        """
        append_probe_operation(Probe self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.Probe_append_probe_operation(self, value)


    def constructProperty_probe_operation(self, initValue):
        """
        constructProperty_probe_operation(Probe self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.Probe_constructProperty_probe_operation(self, initValue)


    def get_probe_operation(self, *args):
        """
        get_probe_operation(Probe self, int i) -> std::string const

        Parameters:
            i: int

        get_probe_operation(Probe self) -> std::string const &

        Parameters:
            self: OpenSim::Probe const *

        """
        return _opensim.Probe_get_probe_operation(self, *args)


    def upd_probe_operation(self, *args):
        """
        upd_probe_operation(Probe self, int i) -> std::string

        Parameters:
            i: int

        upd_probe_operation(Probe self) -> std::string &

        Parameters:
            self: OpenSim::Probe *

        """
        return _opensim.Probe_upd_probe_operation(self, *args)


    def set_probe_operation(self, *args):
        """
        set_probe_operation(Probe self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_probe_operation(Probe self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.Probe_set_probe_operation(self, *args)


    def copyProperty_initial_conditions_for_integration(self, source):
        """
        copyProperty_initial_conditions_for_integration(Probe self, Probe source)

        Parameters:
            source: OpenSim::Probe::Self const &

        """
        return _opensim.Probe_copyProperty_initial_conditions_for_integration(self, source)


    def get_initial_conditions_for_integration(self, i):
        """
        get_initial_conditions_for_integration(Probe self, int i) -> double const &

        Parameters:
            i: int

        """
        return _opensim.Probe_get_initial_conditions_for_integration(self, i)


    def upd_initial_conditions_for_integration(self, i):
        """
        upd_initial_conditions_for_integration(Probe self, int i) -> double &

        Parameters:
            i: int

        """
        return _opensim.Probe_upd_initial_conditions_for_integration(self, i)


    def set_initial_conditions_for_integration(self, i, value):
        """
        set_initial_conditions_for_integration(Probe self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        """
        return _opensim.Probe_set_initial_conditions_for_integration(self, i, value)


    def append_initial_conditions_for_integration(self, value):
        """
        append_initial_conditions_for_integration(Probe self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Probe_append_initial_conditions_for_integration(self, value)


    def constructProperty_initial_conditions_for_integration(self):
        """
        constructProperty_initial_conditions_for_integration(Probe self)

        Parameters:
            self: OpenSim::Probe *

        """
        return _opensim.Probe_constructProperty_initial_conditions_for_integration(self)


    def copyProperty_gain(self, source):
        """
        copyProperty_gain(Probe self, Probe source)

        Parameters:
            source: OpenSim::Probe::Self const &

        """
        return _opensim.Probe_copyProperty_gain(self, source)


    def append_gain(self, value):
        """
        append_gain(Probe self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Probe_append_gain(self, value)


    def constructProperty_gain(self, initValue):
        """
        constructProperty_gain(Probe self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Probe_constructProperty_gain(self, initValue)


    def get_gain(self, *args):
        """
        get_gain(Probe self, int i) -> double const

        Parameters:
            i: int

        get_gain(Probe self) -> double const &

        Parameters:
            self: OpenSim::Probe const *

        """
        return _opensim.Probe_get_gain(self, *args)


    def upd_gain(self, *args):
        """
        upd_gain(Probe self, int i) -> double

        Parameters:
            i: int

        upd_gain(Probe self) -> double &

        Parameters:
            self: OpenSim::Probe *

        """
        return _opensim.Probe_upd_gain(self, *args)


    def set_gain(self, *args):
        """
        set_gain(Probe self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_gain(Probe self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Probe_set_gain(self, *args)


    def reset(self, s):
        """
        reset(Probe self, State s)

        Parameters:
            s: SimTK::State &

        """
        return _opensim.Probe_reset(self, s)


    def getNumInternalMeasureStates(self):
        """
        getNumInternalMeasureStates(Probe self) -> int

        Parameters:
            self: OpenSim::Probe const *

        """
        return _opensim.Probe_getNumInternalMeasureStates(self)


    def isDisabled(self):
        """
        isDisabled(Probe self) -> bool

        Parameters:
            self: OpenSim::Probe const *

        """
        return _opensim.Probe_isDisabled(self)


    def setDisabled(self, isDisabled):
        """
        setDisabled(Probe self, bool isDisabled)

        Parameters:
            isDisabled: bool

        """
        return _opensim.Probe_setDisabled(self, isDisabled)


    def getOperation(self):
        """
        getOperation(Probe self) -> std::string

        Parameters:
            self: OpenSim::Probe const *

        """
        return _opensim.Probe_getOperation(self)


    def setOperation(self, probe_operation):
        """
        setOperation(Probe self, std::string probe_operation)

        Parameters:
            probe_operation: std::string

        """
        return _opensim.Probe_setOperation(self, probe_operation)


    def getInitialConditions(self):
        """
        getInitialConditions(Probe self) -> Vector

        Parameters:
            self: OpenSim::Probe const *

        """
        return _opensim.Probe_getInitialConditions(self)


    def setInitialConditions(self, initial_conditions_for_integration):
        """
        setInitialConditions(Probe self, Vector initial_conditions_for_integration)

        Parameters:
            initial_conditions_for_integration: SimTK::Vector

        """
        return _opensim.Probe_setInitialConditions(self, initial_conditions_for_integration)


    def getGain(self):
        """
        getGain(Probe self) -> double

        Parameters:
            self: OpenSim::Probe const *

        """
        return _opensim.Probe_getGain(self)


    def setGain(self, gain):
        """
        setGain(Probe self, double gain)

        Parameters:
            gain: double

        """
        return _opensim.Probe_setGain(self, gain)


    def getProbeOutputs(self, state):
        """
        getProbeOutputs(Probe self, State state) -> Vector

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.Probe_getProbeOutputs(self, state)

    __swig_destroy__ = _opensim.delete_Probe
    __del__ = lambda self: None
Probe_swigregister = _opensim.Probe_swigregister
Probe_swigregister(Probe)

def Probe_safeDownCast(obj):
    """
    Probe_safeDownCast(OpenSimObject obj) -> Probe

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Probe_safeDownCast(obj)

def Probe_getClassName():
    """Probe_getClassName() -> std::string const &"""
    return _opensim.Probe_getClassName()

class SetProbes(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::Probe)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetProbes, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetProbes, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetProbes

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetProbes_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetProbes self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetProbes_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetProbes_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetProbes self) -> SetProbes

        Parameters:
            self: OpenSim::Set< OpenSim::Probe > const *

        """
        return _opensim.SetProbes_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetProbes self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::Probe > const *

        """
        return _opensim.SetProbes_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetProbes
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Probe)> self) -> SetProbes
        __init__(OpenSim::Set<(OpenSim::Probe)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetProbes

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Probe)> self, std::string const & aFileName) -> SetProbes

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Probe)> self, SetProbes aSet) -> SetProbes

        Parameters:
            aSet: OpenSim::Set< OpenSim::Probe > const &

        """
        this = _opensim.new_SetProbes(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetProbes self)

        Parameters:
            self: OpenSim::Set< OpenSim::Probe > *

        """
        return _opensim.SetProbes_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetProbes self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetProbes_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetProbes self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetProbes_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetProbes self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Probe > const *

        """
        return _opensim.SetProbes_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetProbes self, Probe aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::Probe const *
            aStartIndex: int

        getIndex(SetProbes self, Probe aObject) -> int

        Parameters:
            aObject: OpenSim::Probe const *

        getIndex(SetProbes self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetProbes self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetProbes_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetProbes self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetProbes_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetProbes self, Probe aObject) -> bool

        Parameters:
            aObject: OpenSim::Probe *

        """
        return _opensim.SetProbes_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetProbes self, Probe aObject) -> bool

        Parameters:
            aObject: OpenSim::Probe const &

        """
        return _opensim.SetProbes_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetProbes self, int aIndex, Probe aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Probe *

        """
        return _opensim.SetProbes_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetProbes self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetProbes self, Probe aObject) -> bool

        Parameters:
            aObject: OpenSim::Probe const *

        """
        return _opensim.SetProbes_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetProbes self)

        Parameters:
            self: OpenSim::Set< OpenSim::Probe > *

        """
        return _opensim.SetProbes_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetProbes self, int aIndex, Probe aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Probe *
            preserveGroups: bool

        set(SetProbes self, int aIndex, Probe aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Probe *

        """
        return _opensim.SetProbes_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetProbes self, int aIndex) -> Probe

        Parameters:
            aIndex: int

        get(SetProbes self, std::string const & aName) -> Probe

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetProbes_get(self, *args)


    def contains(self, aName):
        """
        contains(SetProbes self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetProbes_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetProbes self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetProbes_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetProbes self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Probe > const *

        """
        return _opensim.SetProbes_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetProbes self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetProbes_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetProbes self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetProbes_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetProbes self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetProbes_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetProbes self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetProbes_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetProbes self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetProbes_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetProbes self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetProbes self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetProbes_getGroup(self, *args)

SetProbes_swigregister = _opensim.SetProbes_swigregister
SetProbes_swigregister(SetProbes)

def SetProbes_safeDownCast(obj):
    """
    SetProbes_safeDownCast(OpenSimObject obj) -> SetProbes

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetProbes_safeDownCast(obj)

def SetProbes_getClassName():
    """SetProbes_getClassName() -> std::string const &"""
    return _opensim.SetProbes_getClassName()

class ModelComponentSetProbes(SetProbes):
    """Proxy of C++ OpenSim::ModelComponentSet<(OpenSim::Probe)> class"""
    __swig_setmethods__ = {}
    for _s in [SetProbes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponentSetProbes, name, value)
    __swig_getmethods__ = {}
    for _s in [SetProbes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponentSetProbes, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelComponentSetProbes

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ModelComponentSetProbes_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ModelComponentSetProbes self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ModelComponentSetProbes_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ModelComponentSetProbes_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ModelComponentSetProbes self) -> ModelComponentSetProbes

        Parameters:
            self: OpenSim::ModelComponentSet< OpenSim::Probe > const *

        """
        return _opensim.ModelComponentSetProbes_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponentSetProbes self) -> std::string const &

        Parameters:
            self: OpenSim::ModelComponentSet< OpenSim::Probe > const *

        """
        return _opensim.ModelComponentSetProbes_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ModelComponentSet<(OpenSim::Probe)> self) -> ModelComponentSetProbes
        __init__(OpenSim::ModelComponentSet<(OpenSim::Probe)> self, Model model) -> ModelComponentSetProbes

        Parameters:
            model: OpenSim::Model &

        __init__(OpenSim::ModelComponentSet<(OpenSim::Probe)> self, Model model, std::string const & fileName, bool aUpdateFromXMLNode=True) -> ModelComponentSetProbes

        Parameters:
            model: OpenSim::Model &
            fileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::ModelComponentSet<(OpenSim::Probe)> self, Model model, std::string const & fileName) -> ModelComponentSetProbes

        Parameters:
            model: OpenSim::Model &
            fileName: std::string const &

        __init__(OpenSim::ModelComponentSet<(OpenSim::Probe)> self, ModelComponentSetProbes source) -> ModelComponentSetProbes

        Parameters:
            source: OpenSim::ModelComponentSet< OpenSim::Probe > const &

        """
        this = _opensim.new_ModelComponentSetProbes(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def insert(self, aIndex, aObject):
        """
        insert(ModelComponentSetProbes self, int aIndex, Probe aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Probe *

        """
        return _opensim.ModelComponentSetProbes_insert(self, aIndex, aObject)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(ModelComponentSetProbes self, int aIndex, Probe aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Probe *
            preserveGroups: bool

        set(ModelComponentSetProbes self, int aIndex, Probe aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Probe *

        """
        return _opensim.ModelComponentSetProbes_set(self, aIndex, aObject, preserveGroups)


    def invokeConnectToModel(self, model):
        """
        invokeConnectToModel(ModelComponentSetProbes self, Model model)

        Parameters:
            model: OpenSim::Model &

        """
        return _opensim.ModelComponentSetProbes_invokeConnectToModel(self, model)


    def invokeAddToSystem(self, system):
        """
        invokeAddToSystem(ModelComponentSetProbes self, SimTK::MultibodySystem & system)

        Parameters:
            system: SimTK::MultibodySystem &

        """
        return _opensim.ModelComponentSetProbes_invokeAddToSystem(self, system)


    def invokeInitStateFromProperties(self, state):
        """
        invokeInitStateFromProperties(ModelComponentSetProbes self, State state)

        Parameters:
            state: SimTK::State &

        """
        return _opensim.ModelComponentSetProbes_invokeInitStateFromProperties(self, state)


    def invokeSetPropertiesFromState(self, state):
        """
        invokeSetPropertiesFromState(ModelComponentSetProbes self, State state)

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.ModelComponentSetProbes_invokeSetPropertiesFromState(self, state)


    def invokeGenerateDecorations(self, fixed, hints, state, appendToThis):
        """
        invokeGenerateDecorations(ModelComponentSetProbes self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters:
            fixed: bool
            hints: OpenSim::ModelDisplayHints const &
            state: SimTK::State const &
            appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _opensim.ModelComponentSetProbes_invokeGenerateDecorations(self, fixed, hints, state, appendToThis)

    __swig_destroy__ = _opensim.delete_ModelComponentSetProbes
    __del__ = lambda self: None
ModelComponentSetProbes_swigregister = _opensim.ModelComponentSetProbes_swigregister
ModelComponentSetProbes_swigregister(ModelComponentSetProbes)

def ModelComponentSetProbes_safeDownCast(obj):
    """
    ModelComponentSetProbes_safeDownCast(OpenSimObject obj) -> ModelComponentSetProbes

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ModelComponentSetProbes_safeDownCast(obj)

def ModelComponentSetProbes_getClassName():
    """ModelComponentSetProbes_getClassName() -> std::string const &"""
    return _opensim.ModelComponentSetProbes_getClassName()

class ProbeSet(ModelComponentSetProbes):
    """Proxy of C++ OpenSim::ProbeSet class"""
    __swig_setmethods__ = {}
    for _s in [ModelComponentSetProbes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProbeSet, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponentSetProbes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProbeSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ProbeSet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ProbeSet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ProbeSet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ProbeSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ProbeSet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ProbeSet self) -> ProbeSet

        Parameters:
            self: OpenSim::ProbeSet const *

        """
        return _opensim.ProbeSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ProbeSet self) -> std::string const &

        Parameters:
            self: OpenSim::ProbeSet const *

        """
        return _opensim.ProbeSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ProbeSet self) -> ProbeSet
        __init__(OpenSim::ProbeSet self, ProbeSet aAbsProbeSet) -> ProbeSet

        Parameters:
            aAbsProbeSet: OpenSim::ProbeSet const &

        """
        this = _opensim.new_ProbeSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    def adoptAndAppend(self, aProbe):
        aProbe._markAdopted()
        return super(ProbeSet, self).adoptAndAppend(aProbe)

    __swig_destroy__ = _opensim.delete_ProbeSet
    __del__ = lambda self: None
ProbeSet_swigregister = _opensim.ProbeSet_swigregister
ProbeSet_swigregister(ProbeSet)

def ProbeSet_safeDownCast(obj):
    """
    ProbeSet_safeDownCast(OpenSimObject obj) -> ProbeSet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ProbeSet_safeDownCast(obj)

def ProbeSet_getClassName():
    """ProbeSet_getClassName() -> std::string const &"""
    return _opensim.ProbeSet_getClassName()

class SystemEnergyProbe(Probe):
    """Proxy of C++ OpenSim::SystemEnergyProbe class"""
    __swig_setmethods__ = {}
    for _s in [Probe]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SystemEnergyProbe, name, value)
    __swig_getmethods__ = {}
    for _s in [Probe]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SystemEnergyProbe, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SystemEnergyProbe

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SystemEnergyProbe_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SystemEnergyProbe self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SystemEnergyProbe_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SystemEnergyProbe_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SystemEnergyProbe self) -> SystemEnergyProbe

        Parameters:
            self: OpenSim::SystemEnergyProbe const *

        """
        return _opensim.SystemEnergyProbe_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SystemEnergyProbe self) -> std::string const &

        Parameters:
            self: OpenSim::SystemEnergyProbe const *

        """
        return _opensim.SystemEnergyProbe_getConcreteClassName(self)


    def copyProperty_compute_kinetic_energy(self, source):
        """
        copyProperty_compute_kinetic_energy(SystemEnergyProbe self, SystemEnergyProbe source)

        Parameters:
            source: OpenSim::SystemEnergyProbe::Self const &

        """
        return _opensim.SystemEnergyProbe_copyProperty_compute_kinetic_energy(self, source)


    def append_compute_kinetic_energy(self, value):
        """
        append_compute_kinetic_energy(SystemEnergyProbe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.SystemEnergyProbe_append_compute_kinetic_energy(self, value)


    def constructProperty_compute_kinetic_energy(self, initValue):
        """
        constructProperty_compute_kinetic_energy(SystemEnergyProbe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.SystemEnergyProbe_constructProperty_compute_kinetic_energy(self, initValue)


    def get_compute_kinetic_energy(self, *args):
        """
        get_compute_kinetic_energy(SystemEnergyProbe self, int i) -> bool const

        Parameters:
            i: int

        get_compute_kinetic_energy(SystemEnergyProbe self) -> bool const &

        Parameters:
            self: OpenSim::SystemEnergyProbe const *

        """
        return _opensim.SystemEnergyProbe_get_compute_kinetic_energy(self, *args)


    def upd_compute_kinetic_energy(self, *args):
        """
        upd_compute_kinetic_energy(SystemEnergyProbe self, int i) -> bool

        Parameters:
            i: int

        upd_compute_kinetic_energy(SystemEnergyProbe self) -> bool &

        Parameters:
            self: OpenSim::SystemEnergyProbe *

        """
        return _opensim.SystemEnergyProbe_upd_compute_kinetic_energy(self, *args)


    def set_compute_kinetic_energy(self, *args):
        """
        set_compute_kinetic_energy(SystemEnergyProbe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_compute_kinetic_energy(SystemEnergyProbe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.SystemEnergyProbe_set_compute_kinetic_energy(self, *args)


    def copyProperty_compute_potential_energy(self, source):
        """
        copyProperty_compute_potential_energy(SystemEnergyProbe self, SystemEnergyProbe source)

        Parameters:
            source: OpenSim::SystemEnergyProbe::Self const &

        """
        return _opensim.SystemEnergyProbe_copyProperty_compute_potential_energy(self, source)


    def append_compute_potential_energy(self, value):
        """
        append_compute_potential_energy(SystemEnergyProbe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.SystemEnergyProbe_append_compute_potential_energy(self, value)


    def constructProperty_compute_potential_energy(self, initValue):
        """
        constructProperty_compute_potential_energy(SystemEnergyProbe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.SystemEnergyProbe_constructProperty_compute_potential_energy(self, initValue)


    def get_compute_potential_energy(self, *args):
        """
        get_compute_potential_energy(SystemEnergyProbe self, int i) -> bool const

        Parameters:
            i: int

        get_compute_potential_energy(SystemEnergyProbe self) -> bool const &

        Parameters:
            self: OpenSim::SystemEnergyProbe const *

        """
        return _opensim.SystemEnergyProbe_get_compute_potential_energy(self, *args)


    def upd_compute_potential_energy(self, *args):
        """
        upd_compute_potential_energy(SystemEnergyProbe self, int i) -> bool

        Parameters:
            i: int

        upd_compute_potential_energy(SystemEnergyProbe self) -> bool &

        Parameters:
            self: OpenSim::SystemEnergyProbe *

        """
        return _opensim.SystemEnergyProbe_upd_compute_potential_energy(self, *args)


    def set_compute_potential_energy(self, *args):
        """
        set_compute_potential_energy(SystemEnergyProbe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_compute_potential_energy(SystemEnergyProbe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.SystemEnergyProbe_set_compute_potential_energy(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::SystemEnergyProbe self) -> SystemEnergyProbe
        __init__(OpenSim::SystemEnergyProbe self, bool computeKE, bool computePE) -> SystemEnergyProbe

        Parameters:
            computeKE: bool
            computePE: bool

        """
        this = _opensim.new_SystemEnergyProbe(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getComputeKineticEnergy(self):
        """
        getComputeKineticEnergy(SystemEnergyProbe self) -> bool

        Parameters:
            self: OpenSim::SystemEnergyProbe const *

        """
        return _opensim.SystemEnergyProbe_getComputeKineticEnergy(self)


    def getComputePotentialEnergy(self):
        """
        getComputePotentialEnergy(SystemEnergyProbe self) -> bool

        Parameters:
            self: OpenSim::SystemEnergyProbe const *

        """
        return _opensim.SystemEnergyProbe_getComputePotentialEnergy(self)


    def setComputeKineticEnergy(self, c):
        """
        setComputeKineticEnergy(SystemEnergyProbe self, bool c)

        Parameters:
            c: bool

        """
        return _opensim.SystemEnergyProbe_setComputeKineticEnergy(self, c)


    def setComputePotentialEnergy(self, c):
        """
        setComputePotentialEnergy(SystemEnergyProbe self, bool c)

        Parameters:
            c: bool

        """
        return _opensim.SystemEnergyProbe_setComputePotentialEnergy(self, c)


    def computeProbeInputs(self, state):
        """
        computeProbeInputs(SystemEnergyProbe self, State state) -> Vector

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.SystemEnergyProbe_computeProbeInputs(self, state)


    def getNumProbeInputs(self):
        """
        getNumProbeInputs(SystemEnergyProbe self) -> int

        Parameters:
            self: OpenSim::SystemEnergyProbe const *

        """
        return _opensim.SystemEnergyProbe_getNumProbeInputs(self)


    def getProbeOutputLabels(self):
        """
        getProbeOutputLabels(SystemEnergyProbe self) -> ArrayStr

        Parameters:
            self: OpenSim::SystemEnergyProbe const *

        """
        return _opensim.SystemEnergyProbe_getProbeOutputLabels(self)

    __swig_destroy__ = _opensim.delete_SystemEnergyProbe
    __del__ = lambda self: None
SystemEnergyProbe_swigregister = _opensim.SystemEnergyProbe_swigregister
SystemEnergyProbe_swigregister(SystemEnergyProbe)

def SystemEnergyProbe_safeDownCast(obj):
    """
    SystemEnergyProbe_safeDownCast(OpenSimObject obj) -> SystemEnergyProbe

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SystemEnergyProbe_safeDownCast(obj)

def SystemEnergyProbe_getClassName():
    """SystemEnergyProbe_getClassName() -> std::string const &"""
    return _opensim.SystemEnergyProbe_getClassName()

class JointInternalPowerProbe(Probe):
    """Proxy of C++ OpenSim::JointInternalPowerProbe class"""
    __swig_setmethods__ = {}
    for _s in [Probe]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointInternalPowerProbe, name, value)
    __swig_getmethods__ = {}
    for _s in [Probe]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JointInternalPowerProbe, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> JointInternalPowerProbe

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.JointInternalPowerProbe_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(JointInternalPowerProbe self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.JointInternalPowerProbe_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.JointInternalPowerProbe_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(JointInternalPowerProbe self) -> JointInternalPowerProbe

        Parameters:
            self: OpenSim::JointInternalPowerProbe const *

        """
        return _opensim.JointInternalPowerProbe_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(JointInternalPowerProbe self) -> std::string const &

        Parameters:
            self: OpenSim::JointInternalPowerProbe const *

        """
        return _opensim.JointInternalPowerProbe_getConcreteClassName(self)


    def copyProperty_joint_names(self, source):
        """
        copyProperty_joint_names(JointInternalPowerProbe self, JointInternalPowerProbe source)

        Parameters:
            source: OpenSim::JointInternalPowerProbe::Self const &

        """
        return _opensim.JointInternalPowerProbe_copyProperty_joint_names(self, source)


    def get_joint_names(self, i):
        """
        get_joint_names(JointInternalPowerProbe self, int i) -> std::string const &

        Parameters:
            i: int

        """
        return _opensim.JointInternalPowerProbe_get_joint_names(self, i)


    def upd_joint_names(self, i):
        """
        upd_joint_names(JointInternalPowerProbe self, int i) -> std::string &

        Parameters:
            i: int

        """
        return _opensim.JointInternalPowerProbe_upd_joint_names(self, i)


    def set_joint_names(self, i, value):
        """
        set_joint_names(JointInternalPowerProbe self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        """
        return _opensim.JointInternalPowerProbe_set_joint_names(self, i, value)


    def append_joint_names(self, value):
        """
        append_joint_names(JointInternalPowerProbe self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.JointInternalPowerProbe_append_joint_names(self, value)


    def constructProperty_joint_names(self):
        """
        constructProperty_joint_names(JointInternalPowerProbe self)

        Parameters:
            self: OpenSim::JointInternalPowerProbe *

        """
        return _opensim.JointInternalPowerProbe_constructProperty_joint_names(self)


    def copyProperty_sum_powers_together(self, source):
        """
        copyProperty_sum_powers_together(JointInternalPowerProbe self, JointInternalPowerProbe source)

        Parameters:
            source: OpenSim::JointInternalPowerProbe::Self const &

        """
        return _opensim.JointInternalPowerProbe_copyProperty_sum_powers_together(self, source)


    def append_sum_powers_together(self, value):
        """
        append_sum_powers_together(JointInternalPowerProbe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.JointInternalPowerProbe_append_sum_powers_together(self, value)


    def constructProperty_sum_powers_together(self, initValue):
        """
        constructProperty_sum_powers_together(JointInternalPowerProbe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.JointInternalPowerProbe_constructProperty_sum_powers_together(self, initValue)


    def get_sum_powers_together(self, *args):
        """
        get_sum_powers_together(JointInternalPowerProbe self, int i) -> bool const

        Parameters:
            i: int

        get_sum_powers_together(JointInternalPowerProbe self) -> bool const &

        Parameters:
            self: OpenSim::JointInternalPowerProbe const *

        """
        return _opensim.JointInternalPowerProbe_get_sum_powers_together(self, *args)


    def upd_sum_powers_together(self, *args):
        """
        upd_sum_powers_together(JointInternalPowerProbe self, int i) -> bool

        Parameters:
            i: int

        upd_sum_powers_together(JointInternalPowerProbe self) -> bool &

        Parameters:
            self: OpenSim::JointInternalPowerProbe *

        """
        return _opensim.JointInternalPowerProbe_upd_sum_powers_together(self, *args)


    def set_sum_powers_together(self, *args):
        """
        set_sum_powers_together(JointInternalPowerProbe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_sum_powers_together(JointInternalPowerProbe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.JointInternalPowerProbe_set_sum_powers_together(self, *args)


    def copyProperty_exponent(self, source):
        """
        copyProperty_exponent(JointInternalPowerProbe self, JointInternalPowerProbe source)

        Parameters:
            source: OpenSim::JointInternalPowerProbe::Self const &

        """
        return _opensim.JointInternalPowerProbe_copyProperty_exponent(self, source)


    def append_exponent(self, value):
        """
        append_exponent(JointInternalPowerProbe self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.JointInternalPowerProbe_append_exponent(self, value)


    def constructProperty_exponent(self, initValue):
        """
        constructProperty_exponent(JointInternalPowerProbe self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.JointInternalPowerProbe_constructProperty_exponent(self, initValue)


    def get_exponent(self, *args):
        """
        get_exponent(JointInternalPowerProbe self, int i) -> double const

        Parameters:
            i: int

        get_exponent(JointInternalPowerProbe self) -> double const &

        Parameters:
            self: OpenSim::JointInternalPowerProbe const *

        """
        return _opensim.JointInternalPowerProbe_get_exponent(self, *args)


    def upd_exponent(self, *args):
        """
        upd_exponent(JointInternalPowerProbe self, int i) -> double

        Parameters:
            i: int

        upd_exponent(JointInternalPowerProbe self) -> double &

        Parameters:
            self: OpenSim::JointInternalPowerProbe *

        """
        return _opensim.JointInternalPowerProbe_upd_exponent(self, *args)


    def set_exponent(self, *args):
        """
        set_exponent(JointInternalPowerProbe self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_exponent(JointInternalPowerProbe self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.JointInternalPowerProbe_set_exponent(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::JointInternalPowerProbe self) -> JointInternalPowerProbe
        __init__(OpenSim::JointInternalPowerProbe self, ArrayStr joint_names, bool const sum_powers_together, double const exponent) -> JointInternalPowerProbe

        Parameters:
            joint_names: OpenSim::Array< std::string > const &
            sum_powers_together: bool const
            exponent: double const

        """
        this = _opensim.new_JointInternalPowerProbe(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getJointNames(self):
        """
        getJointNames(JointInternalPowerProbe self) -> OpenSim::Property< std::string > const &

        Parameters:
            self: OpenSim::JointInternalPowerProbe const *

        """
        return _opensim.JointInternalPowerProbe_getJointNames(self)


    def getSumPowersTogether(self):
        """
        getSumPowersTogether(JointInternalPowerProbe self) -> bool const

        Parameters:
            self: OpenSim::JointInternalPowerProbe const *

        """
        return _opensim.JointInternalPowerProbe_getSumPowersTogether(self)


    def getExponent(self):
        """
        getExponent(JointInternalPowerProbe self) -> double const

        Parameters:
            self: OpenSim::JointInternalPowerProbe const *

        """
        return _opensim.JointInternalPowerProbe_getExponent(self)


    def setJointNames(self, aJointNames):
        """
        setJointNames(JointInternalPowerProbe self, ArrayStr aJointNames)

        Parameters:
            aJointNames: OpenSim::Array< std::string > const &

        """
        return _opensim.JointInternalPowerProbe_setJointNames(self, aJointNames)


    def setSumPowersTogether(self, sum_powers_together):
        """
        setSumPowersTogether(JointInternalPowerProbe self, bool sum_powers_together)

        Parameters:
            sum_powers_together: bool

        """
        return _opensim.JointInternalPowerProbe_setSumPowersTogether(self, sum_powers_together)


    def setExponent(self, exponent):
        """
        setExponent(JointInternalPowerProbe self, double const exponent)

        Parameters:
            exponent: double const

        """
        return _opensim.JointInternalPowerProbe_setExponent(self, exponent)


    def computeProbeInputs(self, state):
        """
        computeProbeInputs(JointInternalPowerProbe self, State state) -> Vector

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.JointInternalPowerProbe_computeProbeInputs(self, state)


    def getNumProbeInputs(self):
        """
        getNumProbeInputs(JointInternalPowerProbe self) -> int

        Parameters:
            self: OpenSim::JointInternalPowerProbe const *

        """
        return _opensim.JointInternalPowerProbe_getNumProbeInputs(self)


    def getProbeOutputLabels(self):
        """
        getProbeOutputLabels(JointInternalPowerProbe self) -> ArrayStr

        Parameters:
            self: OpenSim::JointInternalPowerProbe const *

        """
        return _opensim.JointInternalPowerProbe_getProbeOutputLabels(self)

    __swig_destroy__ = _opensim.delete_JointInternalPowerProbe
    __del__ = lambda self: None
JointInternalPowerProbe_swigregister = _opensim.JointInternalPowerProbe_swigregister
JointInternalPowerProbe_swigregister(JointInternalPowerProbe)

def JointInternalPowerProbe_safeDownCast(obj):
    """
    JointInternalPowerProbe_safeDownCast(OpenSimObject obj) -> JointInternalPowerProbe

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.JointInternalPowerProbe_safeDownCast(obj)

def JointInternalPowerProbe_getClassName():
    """JointInternalPowerProbe_getClassName() -> std::string const &"""
    return _opensim.JointInternalPowerProbe_getClassName()

class ActuatorPowerProbe(Probe):
    """Proxy of C++ OpenSim::ActuatorPowerProbe class"""
    __swig_setmethods__ = {}
    for _s in [Probe]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActuatorPowerProbe, name, value)
    __swig_getmethods__ = {}
    for _s in [Probe]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ActuatorPowerProbe, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ActuatorPowerProbe

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ActuatorPowerProbe_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ActuatorPowerProbe self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ActuatorPowerProbe_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ActuatorPowerProbe_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ActuatorPowerProbe self) -> ActuatorPowerProbe

        Parameters:
            self: OpenSim::ActuatorPowerProbe const *

        """
        return _opensim.ActuatorPowerProbe_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ActuatorPowerProbe self) -> std::string const &

        Parameters:
            self: OpenSim::ActuatorPowerProbe const *

        """
        return _opensim.ActuatorPowerProbe_getConcreteClassName(self)


    def copyProperty_actuator_names(self, source):
        """
        copyProperty_actuator_names(ActuatorPowerProbe self, ActuatorPowerProbe source)

        Parameters:
            source: OpenSim::ActuatorPowerProbe::Self const &

        """
        return _opensim.ActuatorPowerProbe_copyProperty_actuator_names(self, source)


    def get_actuator_names(self, i):
        """
        get_actuator_names(ActuatorPowerProbe self, int i) -> std::string const &

        Parameters:
            i: int

        """
        return _opensim.ActuatorPowerProbe_get_actuator_names(self, i)


    def upd_actuator_names(self, i):
        """
        upd_actuator_names(ActuatorPowerProbe self, int i) -> std::string &

        Parameters:
            i: int

        """
        return _opensim.ActuatorPowerProbe_upd_actuator_names(self, i)


    def set_actuator_names(self, i, value):
        """
        set_actuator_names(ActuatorPowerProbe self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        """
        return _opensim.ActuatorPowerProbe_set_actuator_names(self, i, value)


    def append_actuator_names(self, value):
        """
        append_actuator_names(ActuatorPowerProbe self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ActuatorPowerProbe_append_actuator_names(self, value)


    def constructProperty_actuator_names(self):
        """
        constructProperty_actuator_names(ActuatorPowerProbe self)

        Parameters:
            self: OpenSim::ActuatorPowerProbe *

        """
        return _opensim.ActuatorPowerProbe_constructProperty_actuator_names(self)


    def copyProperty_sum_powers_together(self, source):
        """
        copyProperty_sum_powers_together(ActuatorPowerProbe self, ActuatorPowerProbe source)

        Parameters:
            source: OpenSim::ActuatorPowerProbe::Self const &

        """
        return _opensim.ActuatorPowerProbe_copyProperty_sum_powers_together(self, source)


    def append_sum_powers_together(self, value):
        """
        append_sum_powers_together(ActuatorPowerProbe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.ActuatorPowerProbe_append_sum_powers_together(self, value)


    def constructProperty_sum_powers_together(self, initValue):
        """
        constructProperty_sum_powers_together(ActuatorPowerProbe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.ActuatorPowerProbe_constructProperty_sum_powers_together(self, initValue)


    def get_sum_powers_together(self, *args):
        """
        get_sum_powers_together(ActuatorPowerProbe self, int i) -> bool const

        Parameters:
            i: int

        get_sum_powers_together(ActuatorPowerProbe self) -> bool const &

        Parameters:
            self: OpenSim::ActuatorPowerProbe const *

        """
        return _opensim.ActuatorPowerProbe_get_sum_powers_together(self, *args)


    def upd_sum_powers_together(self, *args):
        """
        upd_sum_powers_together(ActuatorPowerProbe self, int i) -> bool

        Parameters:
            i: int

        upd_sum_powers_together(ActuatorPowerProbe self) -> bool &

        Parameters:
            self: OpenSim::ActuatorPowerProbe *

        """
        return _opensim.ActuatorPowerProbe_upd_sum_powers_together(self, *args)


    def set_sum_powers_together(self, *args):
        """
        set_sum_powers_together(ActuatorPowerProbe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_sum_powers_together(ActuatorPowerProbe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.ActuatorPowerProbe_set_sum_powers_together(self, *args)


    def copyProperty_exponent(self, source):
        """
        copyProperty_exponent(ActuatorPowerProbe self, ActuatorPowerProbe source)

        Parameters:
            source: OpenSim::ActuatorPowerProbe::Self const &

        """
        return _opensim.ActuatorPowerProbe_copyProperty_exponent(self, source)


    def append_exponent(self, value):
        """
        append_exponent(ActuatorPowerProbe self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ActuatorPowerProbe_append_exponent(self, value)


    def constructProperty_exponent(self, initValue):
        """
        constructProperty_exponent(ActuatorPowerProbe self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ActuatorPowerProbe_constructProperty_exponent(self, initValue)


    def get_exponent(self, *args):
        """
        get_exponent(ActuatorPowerProbe self, int i) -> double const

        Parameters:
            i: int

        get_exponent(ActuatorPowerProbe self) -> double const &

        Parameters:
            self: OpenSim::ActuatorPowerProbe const *

        """
        return _opensim.ActuatorPowerProbe_get_exponent(self, *args)


    def upd_exponent(self, *args):
        """
        upd_exponent(ActuatorPowerProbe self, int i) -> double

        Parameters:
            i: int

        upd_exponent(ActuatorPowerProbe self) -> double &

        Parameters:
            self: OpenSim::ActuatorPowerProbe *

        """
        return _opensim.ActuatorPowerProbe_upd_exponent(self, *args)


    def set_exponent(self, *args):
        """
        set_exponent(ActuatorPowerProbe self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_exponent(ActuatorPowerProbe self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ActuatorPowerProbe_set_exponent(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ActuatorPowerProbe self) -> ActuatorPowerProbe
        __init__(OpenSim::ActuatorPowerProbe self, ArrayStr actuator_names, bool const sum_powers_together, double const exponent) -> ActuatorPowerProbe

        Parameters:
            actuator_names: OpenSim::Array< std::string > const
            sum_powers_together: bool const
            exponent: double const

        """
        this = _opensim.new_ActuatorPowerProbe(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getActuatorNames(self):
        """
        getActuatorNames(ActuatorPowerProbe self) -> OpenSim::Property< std::string > const &

        Parameters:
            self: OpenSim::ActuatorPowerProbe const *

        """
        return _opensim.ActuatorPowerProbe_getActuatorNames(self)


    def getSumPowersTogether(self):
        """
        getSumPowersTogether(ActuatorPowerProbe self) -> bool const

        Parameters:
            self: OpenSim::ActuatorPowerProbe const *

        """
        return _opensim.ActuatorPowerProbe_getSumPowersTogether(self)


    def getExponent(self):
        """
        getExponent(ActuatorPowerProbe self) -> double const

        Parameters:
            self: OpenSim::ActuatorPowerProbe const *

        """
        return _opensim.ActuatorPowerProbe_getExponent(self)


    def setActuatorNames(self, actuatorNames):
        """
        setActuatorNames(ActuatorPowerProbe self, ArrayStr actuatorNames)

        Parameters:
            actuatorNames: OpenSim::Array< std::string > const &

        """
        return _opensim.ActuatorPowerProbe_setActuatorNames(self, actuatorNames)


    def setSumPowersTogether(self, sum_powers_together):
        """
        setSumPowersTogether(ActuatorPowerProbe self, bool sum_powers_together)

        Parameters:
            sum_powers_together: bool

        """
        return _opensim.ActuatorPowerProbe_setSumPowersTogether(self, sum_powers_together)


    def setExponent(self, exponent):
        """
        setExponent(ActuatorPowerProbe self, double const exponent)

        Parameters:
            exponent: double const

        """
        return _opensim.ActuatorPowerProbe_setExponent(self, exponent)


    def computeProbeInputs(self, state):
        """
        computeProbeInputs(ActuatorPowerProbe self, State state) -> Vector

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.ActuatorPowerProbe_computeProbeInputs(self, state)


    def getNumProbeInputs(self):
        """
        getNumProbeInputs(ActuatorPowerProbe self) -> int

        Parameters:
            self: OpenSim::ActuatorPowerProbe const *

        """
        return _opensim.ActuatorPowerProbe_getNumProbeInputs(self)


    def getProbeOutputLabels(self):
        """
        getProbeOutputLabels(ActuatorPowerProbe self) -> ArrayStr

        Parameters:
            self: OpenSim::ActuatorPowerProbe const *

        """
        return _opensim.ActuatorPowerProbe_getProbeOutputLabels(self)


    def connectToModel(self, aModel):
        """
        connectToModel(ActuatorPowerProbe self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.ActuatorPowerProbe_connectToModel(self, aModel)

    __swig_destroy__ = _opensim.delete_ActuatorPowerProbe
    __del__ = lambda self: None
ActuatorPowerProbe_swigregister = _opensim.ActuatorPowerProbe_swigregister
ActuatorPowerProbe_swigregister(ActuatorPowerProbe)

def ActuatorPowerProbe_safeDownCast(obj):
    """
    ActuatorPowerProbe_safeDownCast(OpenSimObject obj) -> ActuatorPowerProbe

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ActuatorPowerProbe_safeDownCast(obj)

def ActuatorPowerProbe_getClassName():
    """ActuatorPowerProbe_getClassName() -> std::string const &"""
    return _opensim.ActuatorPowerProbe_getClassName()

class ActuatorForceProbe(Probe):
    """Proxy of C++ OpenSim::ActuatorForceProbe class"""
    __swig_setmethods__ = {}
    for _s in [Probe]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActuatorForceProbe, name, value)
    __swig_getmethods__ = {}
    for _s in [Probe]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ActuatorForceProbe, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ActuatorForceProbe

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ActuatorForceProbe_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ActuatorForceProbe self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ActuatorForceProbe_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ActuatorForceProbe_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ActuatorForceProbe self) -> ActuatorForceProbe

        Parameters:
            self: OpenSim::ActuatorForceProbe const *

        """
        return _opensim.ActuatorForceProbe_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ActuatorForceProbe self) -> std::string const &

        Parameters:
            self: OpenSim::ActuatorForceProbe const *

        """
        return _opensim.ActuatorForceProbe_getConcreteClassName(self)


    def copyProperty_actuator_names(self, source):
        """
        copyProperty_actuator_names(ActuatorForceProbe self, ActuatorForceProbe source)

        Parameters:
            source: OpenSim::ActuatorForceProbe::Self const &

        """
        return _opensim.ActuatorForceProbe_copyProperty_actuator_names(self, source)


    def get_actuator_names(self, i):
        """
        get_actuator_names(ActuatorForceProbe self, int i) -> std::string const &

        Parameters:
            i: int

        """
        return _opensim.ActuatorForceProbe_get_actuator_names(self, i)


    def upd_actuator_names(self, i):
        """
        upd_actuator_names(ActuatorForceProbe self, int i) -> std::string &

        Parameters:
            i: int

        """
        return _opensim.ActuatorForceProbe_upd_actuator_names(self, i)


    def set_actuator_names(self, i, value):
        """
        set_actuator_names(ActuatorForceProbe self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        """
        return _opensim.ActuatorForceProbe_set_actuator_names(self, i, value)


    def append_actuator_names(self, value):
        """
        append_actuator_names(ActuatorForceProbe self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ActuatorForceProbe_append_actuator_names(self, value)


    def constructProperty_actuator_names(self):
        """
        constructProperty_actuator_names(ActuatorForceProbe self)

        Parameters:
            self: OpenSim::ActuatorForceProbe *

        """
        return _opensim.ActuatorForceProbe_constructProperty_actuator_names(self)


    def copyProperty_sum_forces_together(self, source):
        """
        copyProperty_sum_forces_together(ActuatorForceProbe self, ActuatorForceProbe source)

        Parameters:
            source: OpenSim::ActuatorForceProbe::Self const &

        """
        return _opensim.ActuatorForceProbe_copyProperty_sum_forces_together(self, source)


    def append_sum_forces_together(self, value):
        """
        append_sum_forces_together(ActuatorForceProbe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.ActuatorForceProbe_append_sum_forces_together(self, value)


    def constructProperty_sum_forces_together(self, initValue):
        """
        constructProperty_sum_forces_together(ActuatorForceProbe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.ActuatorForceProbe_constructProperty_sum_forces_together(self, initValue)


    def get_sum_forces_together(self, *args):
        """
        get_sum_forces_together(ActuatorForceProbe self, int i) -> bool const

        Parameters:
            i: int

        get_sum_forces_together(ActuatorForceProbe self) -> bool const &

        Parameters:
            self: OpenSim::ActuatorForceProbe const *

        """
        return _opensim.ActuatorForceProbe_get_sum_forces_together(self, *args)


    def upd_sum_forces_together(self, *args):
        """
        upd_sum_forces_together(ActuatorForceProbe self, int i) -> bool

        Parameters:
            i: int

        upd_sum_forces_together(ActuatorForceProbe self) -> bool &

        Parameters:
            self: OpenSim::ActuatorForceProbe *

        """
        return _opensim.ActuatorForceProbe_upd_sum_forces_together(self, *args)


    def set_sum_forces_together(self, *args):
        """
        set_sum_forces_together(ActuatorForceProbe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_sum_forces_together(ActuatorForceProbe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.ActuatorForceProbe_set_sum_forces_together(self, *args)


    def copyProperty_exponent(self, source):
        """
        copyProperty_exponent(ActuatorForceProbe self, ActuatorForceProbe source)

        Parameters:
            source: OpenSim::ActuatorForceProbe::Self const &

        """
        return _opensim.ActuatorForceProbe_copyProperty_exponent(self, source)


    def append_exponent(self, value):
        """
        append_exponent(ActuatorForceProbe self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ActuatorForceProbe_append_exponent(self, value)


    def constructProperty_exponent(self, initValue):
        """
        constructProperty_exponent(ActuatorForceProbe self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ActuatorForceProbe_constructProperty_exponent(self, initValue)


    def get_exponent(self, *args):
        """
        get_exponent(ActuatorForceProbe self, int i) -> double const

        Parameters:
            i: int

        get_exponent(ActuatorForceProbe self) -> double const &

        Parameters:
            self: OpenSim::ActuatorForceProbe const *

        """
        return _opensim.ActuatorForceProbe_get_exponent(self, *args)


    def upd_exponent(self, *args):
        """
        upd_exponent(ActuatorForceProbe self, int i) -> double

        Parameters:
            i: int

        upd_exponent(ActuatorForceProbe self) -> double &

        Parameters:
            self: OpenSim::ActuatorForceProbe *

        """
        return _opensim.ActuatorForceProbe_upd_exponent(self, *args)


    def set_exponent(self, *args):
        """
        set_exponent(ActuatorForceProbe self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_exponent(ActuatorForceProbe self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ActuatorForceProbe_set_exponent(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ActuatorForceProbe self) -> ActuatorForceProbe
        __init__(OpenSim::ActuatorForceProbe self, ArrayStr actuator_names, bool const sum_forces_together, double const exponent) -> ActuatorForceProbe

        Parameters:
            actuator_names: OpenSim::Array< std::string > const &
            sum_forces_together: bool const
            exponent: double const

        """
        this = _opensim.new_ActuatorForceProbe(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getActuatorNames(self):
        """
        getActuatorNames(ActuatorForceProbe self) -> OpenSim::Property< std::string > const &

        Parameters:
            self: OpenSim::ActuatorForceProbe const *

        """
        return _opensim.ActuatorForceProbe_getActuatorNames(self)


    def getSumForcesTogether(self):
        """
        getSumForcesTogether(ActuatorForceProbe self) -> bool const

        Parameters:
            self: OpenSim::ActuatorForceProbe const *

        """
        return _opensim.ActuatorForceProbe_getSumForcesTogether(self)


    def getExponent(self):
        """
        getExponent(ActuatorForceProbe self) -> double const

        Parameters:
            self: OpenSim::ActuatorForceProbe const *

        """
        return _opensim.ActuatorForceProbe_getExponent(self)


    def setActuatorNames(self, actuatorNames):
        """
        setActuatorNames(ActuatorForceProbe self, ArrayStr actuatorNames)

        Parameters:
            actuatorNames: OpenSim::Array< std::string > const &

        """
        return _opensim.ActuatorForceProbe_setActuatorNames(self, actuatorNames)


    def setSumForcesTogether(self, sum_forces_together):
        """
        setSumForcesTogether(ActuatorForceProbe self, bool sum_forces_together)

        Parameters:
            sum_forces_together: bool

        """
        return _opensim.ActuatorForceProbe_setSumForcesTogether(self, sum_forces_together)


    def setExponent(self, exponent):
        """
        setExponent(ActuatorForceProbe self, double const exponent)

        Parameters:
            exponent: double const

        """
        return _opensim.ActuatorForceProbe_setExponent(self, exponent)


    def computeProbeInputs(self, state):
        """
        computeProbeInputs(ActuatorForceProbe self, State state) -> Vector

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.ActuatorForceProbe_computeProbeInputs(self, state)


    def getNumProbeInputs(self):
        """
        getNumProbeInputs(ActuatorForceProbe self) -> int

        Parameters:
            self: OpenSim::ActuatorForceProbe const *

        """
        return _opensim.ActuatorForceProbe_getNumProbeInputs(self)


    def getProbeOutputLabels(self):
        """
        getProbeOutputLabels(ActuatorForceProbe self) -> ArrayStr

        Parameters:
            self: OpenSim::ActuatorForceProbe const *

        """
        return _opensim.ActuatorForceProbe_getProbeOutputLabels(self)


    def connectToModel(self, model):
        """
        connectToModel(ActuatorForceProbe self, Model model)

        Parameters:
            model: OpenSim::Model &

        """
        return _opensim.ActuatorForceProbe_connectToModel(self, model)

    __swig_destroy__ = _opensim.delete_ActuatorForceProbe
    __del__ = lambda self: None
ActuatorForceProbe_swigregister = _opensim.ActuatorForceProbe_swigregister
ActuatorForceProbe_swigregister(ActuatorForceProbe)

def ActuatorForceProbe_safeDownCast(obj):
    """
    ActuatorForceProbe_safeDownCast(OpenSimObject obj) -> ActuatorForceProbe

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ActuatorForceProbe_safeDownCast(obj)

def ActuatorForceProbe_getClassName():
    """ActuatorForceProbe_getClassName() -> std::string const &"""
    return _opensim.ActuatorForceProbe_getClassName()

class MuscleActiveFiberPowerProbe(Probe):
    """Proxy of C++ OpenSim::MuscleActiveFiberPowerProbe class"""
    __swig_setmethods__ = {}
    for _s in [Probe]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MuscleActiveFiberPowerProbe, name, value)
    __swig_getmethods__ = {}
    for _s in [Probe]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MuscleActiveFiberPowerProbe, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MuscleActiveFiberPowerProbe

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.MuscleActiveFiberPowerProbe_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(MuscleActiveFiberPowerProbe self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.MuscleActiveFiberPowerProbe_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.MuscleActiveFiberPowerProbe_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(MuscleActiveFiberPowerProbe self) -> MuscleActiveFiberPowerProbe

        Parameters:
            self: OpenSim::MuscleActiveFiberPowerProbe const *

        """
        return _opensim.MuscleActiveFiberPowerProbe_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MuscleActiveFiberPowerProbe self) -> std::string const &

        Parameters:
            self: OpenSim::MuscleActiveFiberPowerProbe const *

        """
        return _opensim.MuscleActiveFiberPowerProbe_getConcreteClassName(self)


    def copyProperty_muscle_names(self, source):
        """
        copyProperty_muscle_names(MuscleActiveFiberPowerProbe self, MuscleActiveFiberPowerProbe source)

        Parameters:
            source: OpenSim::MuscleActiveFiberPowerProbe::Self const &

        """
        return _opensim.MuscleActiveFiberPowerProbe_copyProperty_muscle_names(self, source)


    def get_muscle_names(self, i):
        """
        get_muscle_names(MuscleActiveFiberPowerProbe self, int i) -> std::string const &

        Parameters:
            i: int

        """
        return _opensim.MuscleActiveFiberPowerProbe_get_muscle_names(self, i)


    def upd_muscle_names(self, i):
        """
        upd_muscle_names(MuscleActiveFiberPowerProbe self, int i) -> std::string &

        Parameters:
            i: int

        """
        return _opensim.MuscleActiveFiberPowerProbe_upd_muscle_names(self, i)


    def set_muscle_names(self, i, value):
        """
        set_muscle_names(MuscleActiveFiberPowerProbe self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        """
        return _opensim.MuscleActiveFiberPowerProbe_set_muscle_names(self, i, value)


    def append_muscle_names(self, value):
        """
        append_muscle_names(MuscleActiveFiberPowerProbe self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.MuscleActiveFiberPowerProbe_append_muscle_names(self, value)


    def constructProperty_muscle_names(self):
        """
        constructProperty_muscle_names(MuscleActiveFiberPowerProbe self)

        Parameters:
            self: OpenSim::MuscleActiveFiberPowerProbe *

        """
        return _opensim.MuscleActiveFiberPowerProbe_constructProperty_muscle_names(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::MuscleActiveFiberPowerProbe self) -> MuscleActiveFiberPowerProbe
        __init__(OpenSim::MuscleActiveFiberPowerProbe self, ArrayStr muscle_names) -> MuscleActiveFiberPowerProbe

        Parameters:
            muscle_names: OpenSim::Array< std::string > const

        """
        this = _opensim.new_MuscleActiveFiberPowerProbe(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getMuscleNames(self):
        """
        getMuscleNames(MuscleActiveFiberPowerProbe self) -> OpenSim::Property< std::string > const &

        Parameters:
            self: OpenSim::MuscleActiveFiberPowerProbe const *

        """
        return _opensim.MuscleActiveFiberPowerProbe_getMuscleNames(self)


    def setMuscleNames(self, muscleNames):
        """
        setMuscleNames(MuscleActiveFiberPowerProbe self, ArrayStr muscleNames)

        Parameters:
            muscleNames: OpenSim::Array< std::string > const &

        """
        return _opensim.MuscleActiveFiberPowerProbe_setMuscleNames(self, muscleNames)


    def computeProbeInputs(self, state):
        """
        computeProbeInputs(MuscleActiveFiberPowerProbe self, State state) -> Vector

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.MuscleActiveFiberPowerProbe_computeProbeInputs(self, state)


    def getNumProbeInputs(self):
        """
        getNumProbeInputs(MuscleActiveFiberPowerProbe self) -> int

        Parameters:
            self: OpenSim::MuscleActiveFiberPowerProbe const *

        """
        return _opensim.MuscleActiveFiberPowerProbe_getNumProbeInputs(self)


    def getProbeOutputLabels(self):
        """
        getProbeOutputLabels(MuscleActiveFiberPowerProbe self) -> ArrayStr

        Parameters:
            self: OpenSim::MuscleActiveFiberPowerProbe const *

        """
        return _opensim.MuscleActiveFiberPowerProbe_getProbeOutputLabels(self)

    __swig_destroy__ = _opensim.delete_MuscleActiveFiberPowerProbe
    __del__ = lambda self: None
MuscleActiveFiberPowerProbe_swigregister = _opensim.MuscleActiveFiberPowerProbe_swigregister
MuscleActiveFiberPowerProbe_swigregister(MuscleActiveFiberPowerProbe)

def MuscleActiveFiberPowerProbe_safeDownCast(obj):
    """
    MuscleActiveFiberPowerProbe_safeDownCast(OpenSimObject obj) -> MuscleActiveFiberPowerProbe

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.MuscleActiveFiberPowerProbe_safeDownCast(obj)

def MuscleActiveFiberPowerProbe_getClassName():
    """MuscleActiveFiberPowerProbe_getClassName() -> std::string const &"""
    return _opensim.MuscleActiveFiberPowerProbe_getClassName()

class Bhargava2004MuscleMetabolicsProbe(Probe):
    """Proxy of C++ OpenSim::Bhargava2004MuscleMetabolicsProbe class"""
    __swig_setmethods__ = {}
    for _s in [Probe]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bhargava2004MuscleMetabolicsProbe, name, value)
    __swig_getmethods__ = {}
    for _s in [Probe]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bhargava2004MuscleMetabolicsProbe, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Bhargava2004MuscleMetabolicsProbe

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Bhargava2004MuscleMetabolicsProbe self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Bhargava2004MuscleMetabolicsProbe_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Bhargava2004MuscleMetabolicsProbe self) -> Bhargava2004MuscleMetabolicsProbe

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Bhargava2004MuscleMetabolicsProbe self) -> std::string const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_getConcreteClassName(self)


    def copyProperty_activation_rate_on(self, source):
        """
        copyProperty_activation_rate_on(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_copyProperty_activation_rate_on(self, source)


    def append_activation_rate_on(self, value):
        """
        append_activation_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_append_activation_rate_on(self, value)


    def constructProperty_activation_rate_on(self, initValue):
        """
        constructProperty_activation_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_constructProperty_activation_rate_on(self, initValue)


    def get_activation_rate_on(self, *args):
        """
        get_activation_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool const

        Parameters:
            i: int

        get_activation_rate_on(Bhargava2004MuscleMetabolicsProbe self) -> bool const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_get_activation_rate_on(self, *args)


    def upd_activation_rate_on(self, *args):
        """
        upd_activation_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool

        Parameters:
            i: int

        upd_activation_rate_on(Bhargava2004MuscleMetabolicsProbe self) -> bool &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_upd_activation_rate_on(self, *args)


    def set_activation_rate_on(self, *args):
        """
        set_activation_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_activation_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_set_activation_rate_on(self, *args)


    def copyProperty_maintenance_rate_on(self, source):
        """
        copyProperty_maintenance_rate_on(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_copyProperty_maintenance_rate_on(self, source)


    def append_maintenance_rate_on(self, value):
        """
        append_maintenance_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_append_maintenance_rate_on(self, value)


    def constructProperty_maintenance_rate_on(self, initValue):
        """
        constructProperty_maintenance_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_constructProperty_maintenance_rate_on(self, initValue)


    def get_maintenance_rate_on(self, *args):
        """
        get_maintenance_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool const

        Parameters:
            i: int

        get_maintenance_rate_on(Bhargava2004MuscleMetabolicsProbe self) -> bool const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_get_maintenance_rate_on(self, *args)


    def upd_maintenance_rate_on(self, *args):
        """
        upd_maintenance_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool

        Parameters:
            i: int

        upd_maintenance_rate_on(Bhargava2004MuscleMetabolicsProbe self) -> bool &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_upd_maintenance_rate_on(self, *args)


    def set_maintenance_rate_on(self, *args):
        """
        set_maintenance_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_maintenance_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_set_maintenance_rate_on(self, *args)


    def copyProperty_shortening_rate_on(self, source):
        """
        copyProperty_shortening_rate_on(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_copyProperty_shortening_rate_on(self, source)


    def append_shortening_rate_on(self, value):
        """
        append_shortening_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_append_shortening_rate_on(self, value)


    def constructProperty_shortening_rate_on(self, initValue):
        """
        constructProperty_shortening_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_constructProperty_shortening_rate_on(self, initValue)


    def get_shortening_rate_on(self, *args):
        """
        get_shortening_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool const

        Parameters:
            i: int

        get_shortening_rate_on(Bhargava2004MuscleMetabolicsProbe self) -> bool const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_get_shortening_rate_on(self, *args)


    def upd_shortening_rate_on(self, *args):
        """
        upd_shortening_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool

        Parameters:
            i: int

        upd_shortening_rate_on(Bhargava2004MuscleMetabolicsProbe self) -> bool &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_upd_shortening_rate_on(self, *args)


    def set_shortening_rate_on(self, *args):
        """
        set_shortening_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_shortening_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_set_shortening_rate_on(self, *args)


    def copyProperty_basal_rate_on(self, source):
        """
        copyProperty_basal_rate_on(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_copyProperty_basal_rate_on(self, source)


    def append_basal_rate_on(self, value):
        """
        append_basal_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_append_basal_rate_on(self, value)


    def constructProperty_basal_rate_on(self, initValue):
        """
        constructProperty_basal_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_constructProperty_basal_rate_on(self, initValue)


    def get_basal_rate_on(self, *args):
        """
        get_basal_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool const

        Parameters:
            i: int

        get_basal_rate_on(Bhargava2004MuscleMetabolicsProbe self) -> bool const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_get_basal_rate_on(self, *args)


    def upd_basal_rate_on(self, *args):
        """
        upd_basal_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool

        Parameters:
            i: int

        upd_basal_rate_on(Bhargava2004MuscleMetabolicsProbe self) -> bool &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_upd_basal_rate_on(self, *args)


    def set_basal_rate_on(self, *args):
        """
        set_basal_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_basal_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_set_basal_rate_on(self, *args)


    def copyProperty_mechanical_work_rate_on(self, source):
        """
        copyProperty_mechanical_work_rate_on(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_copyProperty_mechanical_work_rate_on(self, source)


    def append_mechanical_work_rate_on(self, value):
        """
        append_mechanical_work_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_append_mechanical_work_rate_on(self, value)


    def constructProperty_mechanical_work_rate_on(self, initValue):
        """
        constructProperty_mechanical_work_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_constructProperty_mechanical_work_rate_on(self, initValue)


    def get_mechanical_work_rate_on(self, *args):
        """
        get_mechanical_work_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool const

        Parameters:
            i: int

        get_mechanical_work_rate_on(Bhargava2004MuscleMetabolicsProbe self) -> bool const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_get_mechanical_work_rate_on(self, *args)


    def upd_mechanical_work_rate_on(self, *args):
        """
        upd_mechanical_work_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool

        Parameters:
            i: int

        upd_mechanical_work_rate_on(Bhargava2004MuscleMetabolicsProbe self) -> bool &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_upd_mechanical_work_rate_on(self, *args)


    def set_mechanical_work_rate_on(self, *args):
        """
        set_mechanical_work_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_mechanical_work_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_set_mechanical_work_rate_on(self, *args)


    def copyProperty_enforce_minimum_heat_rate_per_muscle(self, source):
        """
        copyProperty_enforce_minimum_heat_rate_per_muscle(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_copyProperty_enforce_minimum_heat_rate_per_muscle(self, source)


    def append_enforce_minimum_heat_rate_per_muscle(self, value):
        """
        append_enforce_minimum_heat_rate_per_muscle(Bhargava2004MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_append_enforce_minimum_heat_rate_per_muscle(self, value)


    def constructProperty_enforce_minimum_heat_rate_per_muscle(self, initValue):
        """
        constructProperty_enforce_minimum_heat_rate_per_muscle(Bhargava2004MuscleMetabolicsProbe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_constructProperty_enforce_minimum_heat_rate_per_muscle(self, initValue)


    def get_enforce_minimum_heat_rate_per_muscle(self, *args):
        """
        get_enforce_minimum_heat_rate_per_muscle(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool const

        Parameters:
            i: int

        get_enforce_minimum_heat_rate_per_muscle(Bhargava2004MuscleMetabolicsProbe self) -> bool const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_get_enforce_minimum_heat_rate_per_muscle(self, *args)


    def upd_enforce_minimum_heat_rate_per_muscle(self, *args):
        """
        upd_enforce_minimum_heat_rate_per_muscle(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool

        Parameters:
            i: int

        upd_enforce_minimum_heat_rate_per_muscle(Bhargava2004MuscleMetabolicsProbe self) -> bool &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_upd_enforce_minimum_heat_rate_per_muscle(self, *args)


    def set_enforce_minimum_heat_rate_per_muscle(self, *args):
        """
        set_enforce_minimum_heat_rate_per_muscle(Bhargava2004MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_enforce_minimum_heat_rate_per_muscle(Bhargava2004MuscleMetabolicsProbe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_set_enforce_minimum_heat_rate_per_muscle(self, *args)


    def copyProperty_normalized_fiber_length_dependence_on_maintenance_rate(self, source):
        """
        copyProperty_normalized_fiber_length_dependence_on_maintenance_rate(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_copyProperty_normalized_fiber_length_dependence_on_maintenance_rate(self, source)


    def append_normalized_fiber_length_dependence_on_maintenance_rate(self, value):
        """
        append_normalized_fiber_length_dependence_on_maintenance_rate(Bhargava2004MuscleMetabolicsProbe self, PiecewiseLinearFunction value) -> int

        Parameters:
            value: OpenSim::PiecewiseLinearFunction const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_append_normalized_fiber_length_dependence_on_maintenance_rate(self, value)


    def constructProperty_normalized_fiber_length_dependence_on_maintenance_rate(self, initValue):
        """
        constructProperty_normalized_fiber_length_dependence_on_maintenance_rate(Bhargava2004MuscleMetabolicsProbe self, PiecewiseLinearFunction initValue)

        Parameters:
            initValue: OpenSim::PiecewiseLinearFunction const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_constructProperty_normalized_fiber_length_dependence_on_maintenance_rate(self, initValue)


    def get_normalized_fiber_length_dependence_on_maintenance_rate(self, *args):
        """
        get_normalized_fiber_length_dependence_on_maintenance_rate(Bhargava2004MuscleMetabolicsProbe self, int i) -> PiecewiseLinearFunction

        Parameters:
            i: int

        get_normalized_fiber_length_dependence_on_maintenance_rate(Bhargava2004MuscleMetabolicsProbe self) -> PiecewiseLinearFunction

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_get_normalized_fiber_length_dependence_on_maintenance_rate(self, *args)


    def upd_normalized_fiber_length_dependence_on_maintenance_rate(self, *args):
        """
        upd_normalized_fiber_length_dependence_on_maintenance_rate(Bhargava2004MuscleMetabolicsProbe self, int i) -> PiecewiseLinearFunction

        Parameters:
            i: int

        upd_normalized_fiber_length_dependence_on_maintenance_rate(Bhargava2004MuscleMetabolicsProbe self) -> PiecewiseLinearFunction

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_upd_normalized_fiber_length_dependence_on_maintenance_rate(self, *args)


    def set_normalized_fiber_length_dependence_on_maintenance_rate(self, *args):
        """
        set_normalized_fiber_length_dependence_on_maintenance_rate(Bhargava2004MuscleMetabolicsProbe self, int i, PiecewiseLinearFunction value)

        Parameters:
            i: int
            value: OpenSim::PiecewiseLinearFunction const &

        set_normalized_fiber_length_dependence_on_maintenance_rate(Bhargava2004MuscleMetabolicsProbe self, PiecewiseLinearFunction value)

        Parameters:
            value: OpenSim::PiecewiseLinearFunction const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_set_normalized_fiber_length_dependence_on_maintenance_rate(self, *args)


    def copyProperty_use_force_dependent_shortening_prop_constant(self, source):
        """
        copyProperty_use_force_dependent_shortening_prop_constant(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_copyProperty_use_force_dependent_shortening_prop_constant(self, source)


    def append_use_force_dependent_shortening_prop_constant(self, value):
        """
        append_use_force_dependent_shortening_prop_constant(Bhargava2004MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_append_use_force_dependent_shortening_prop_constant(self, value)


    def constructProperty_use_force_dependent_shortening_prop_constant(self, initValue):
        """
        constructProperty_use_force_dependent_shortening_prop_constant(Bhargava2004MuscleMetabolicsProbe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_constructProperty_use_force_dependent_shortening_prop_constant(self, initValue)


    def get_use_force_dependent_shortening_prop_constant(self, *args):
        """
        get_use_force_dependent_shortening_prop_constant(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool const

        Parameters:
            i: int

        get_use_force_dependent_shortening_prop_constant(Bhargava2004MuscleMetabolicsProbe self) -> bool const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_get_use_force_dependent_shortening_prop_constant(self, *args)


    def upd_use_force_dependent_shortening_prop_constant(self, *args):
        """
        upd_use_force_dependent_shortening_prop_constant(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool

        Parameters:
            i: int

        upd_use_force_dependent_shortening_prop_constant(Bhargava2004MuscleMetabolicsProbe self) -> bool &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_upd_use_force_dependent_shortening_prop_constant(self, *args)


    def set_use_force_dependent_shortening_prop_constant(self, *args):
        """
        set_use_force_dependent_shortening_prop_constant(Bhargava2004MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_use_force_dependent_shortening_prop_constant(Bhargava2004MuscleMetabolicsProbe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_set_use_force_dependent_shortening_prop_constant(self, *args)


    def copyProperty_basal_coefficient(self, source):
        """
        copyProperty_basal_coefficient(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_copyProperty_basal_coefficient(self, source)


    def append_basal_coefficient(self, value):
        """
        append_basal_coefficient(Bhargava2004MuscleMetabolicsProbe self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_append_basal_coefficient(self, value)


    def constructProperty_basal_coefficient(self, initValue):
        """
        constructProperty_basal_coefficient(Bhargava2004MuscleMetabolicsProbe self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_constructProperty_basal_coefficient(self, initValue)


    def get_basal_coefficient(self, *args):
        """
        get_basal_coefficient(Bhargava2004MuscleMetabolicsProbe self, int i) -> double const

        Parameters:
            i: int

        get_basal_coefficient(Bhargava2004MuscleMetabolicsProbe self) -> double const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_get_basal_coefficient(self, *args)


    def upd_basal_coefficient(self, *args):
        """
        upd_basal_coefficient(Bhargava2004MuscleMetabolicsProbe self, int i) -> double

        Parameters:
            i: int

        upd_basal_coefficient(Bhargava2004MuscleMetabolicsProbe self) -> double &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_upd_basal_coefficient(self, *args)


    def set_basal_coefficient(self, *args):
        """
        set_basal_coefficient(Bhargava2004MuscleMetabolicsProbe self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_basal_coefficient(Bhargava2004MuscleMetabolicsProbe self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_set_basal_coefficient(self, *args)


    def copyProperty_basal_exponent(self, source):
        """
        copyProperty_basal_exponent(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_copyProperty_basal_exponent(self, source)


    def append_basal_exponent(self, value):
        """
        append_basal_exponent(Bhargava2004MuscleMetabolicsProbe self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_append_basal_exponent(self, value)


    def constructProperty_basal_exponent(self, initValue):
        """
        constructProperty_basal_exponent(Bhargava2004MuscleMetabolicsProbe self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_constructProperty_basal_exponent(self, initValue)


    def get_basal_exponent(self, *args):
        """
        get_basal_exponent(Bhargava2004MuscleMetabolicsProbe self, int i) -> double const

        Parameters:
            i: int

        get_basal_exponent(Bhargava2004MuscleMetabolicsProbe self) -> double const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_get_basal_exponent(self, *args)


    def upd_basal_exponent(self, *args):
        """
        upd_basal_exponent(Bhargava2004MuscleMetabolicsProbe self, int i) -> double

        Parameters:
            i: int

        upd_basal_exponent(Bhargava2004MuscleMetabolicsProbe self) -> double &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_upd_basal_exponent(self, *args)


    def set_basal_exponent(self, *args):
        """
        set_basal_exponent(Bhargava2004MuscleMetabolicsProbe self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_basal_exponent(Bhargava2004MuscleMetabolicsProbe self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_set_basal_exponent(self, *args)


    def copyProperty_muscle_effort_scaling_factor(self, source):
        """
        copyProperty_muscle_effort_scaling_factor(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_copyProperty_muscle_effort_scaling_factor(self, source)


    def append_muscle_effort_scaling_factor(self, value):
        """
        append_muscle_effort_scaling_factor(Bhargava2004MuscleMetabolicsProbe self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_append_muscle_effort_scaling_factor(self, value)


    def constructProperty_muscle_effort_scaling_factor(self, initValue):
        """
        constructProperty_muscle_effort_scaling_factor(Bhargava2004MuscleMetabolicsProbe self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_constructProperty_muscle_effort_scaling_factor(self, initValue)


    def get_muscle_effort_scaling_factor(self, *args):
        """
        get_muscle_effort_scaling_factor(Bhargava2004MuscleMetabolicsProbe self, int i) -> double const

        Parameters:
            i: int

        get_muscle_effort_scaling_factor(Bhargava2004MuscleMetabolicsProbe self) -> double const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_get_muscle_effort_scaling_factor(self, *args)


    def upd_muscle_effort_scaling_factor(self, *args):
        """
        upd_muscle_effort_scaling_factor(Bhargava2004MuscleMetabolicsProbe self, int i) -> double

        Parameters:
            i: int

        upd_muscle_effort_scaling_factor(Bhargava2004MuscleMetabolicsProbe self) -> double &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_upd_muscle_effort_scaling_factor(self, *args)


    def set_muscle_effort_scaling_factor(self, *args):
        """
        set_muscle_effort_scaling_factor(Bhargava2004MuscleMetabolicsProbe self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_muscle_effort_scaling_factor(Bhargava2004MuscleMetabolicsProbe self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_set_muscle_effort_scaling_factor(self, *args)


    def copyProperty_include_negative_mechanical_work(self, source):
        """
        copyProperty_include_negative_mechanical_work(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_copyProperty_include_negative_mechanical_work(self, source)


    def append_include_negative_mechanical_work(self, value):
        """
        append_include_negative_mechanical_work(Bhargava2004MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_append_include_negative_mechanical_work(self, value)


    def constructProperty_include_negative_mechanical_work(self, initValue):
        """
        constructProperty_include_negative_mechanical_work(Bhargava2004MuscleMetabolicsProbe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_constructProperty_include_negative_mechanical_work(self, initValue)


    def get_include_negative_mechanical_work(self, *args):
        """
        get_include_negative_mechanical_work(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool const

        Parameters:
            i: int

        get_include_negative_mechanical_work(Bhargava2004MuscleMetabolicsProbe self) -> bool const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_get_include_negative_mechanical_work(self, *args)


    def upd_include_negative_mechanical_work(self, *args):
        """
        upd_include_negative_mechanical_work(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool

        Parameters:
            i: int

        upd_include_negative_mechanical_work(Bhargava2004MuscleMetabolicsProbe self) -> bool &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_upd_include_negative_mechanical_work(self, *args)


    def set_include_negative_mechanical_work(self, *args):
        """
        set_include_negative_mechanical_work(Bhargava2004MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_include_negative_mechanical_work(Bhargava2004MuscleMetabolicsProbe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_set_include_negative_mechanical_work(self, *args)


    def copyProperty_forbid_negative_total_power(self, source):
        """
        copyProperty_forbid_negative_total_power(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_copyProperty_forbid_negative_total_power(self, source)


    def append_forbid_negative_total_power(self, value):
        """
        append_forbid_negative_total_power(Bhargava2004MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_append_forbid_negative_total_power(self, value)


    def constructProperty_forbid_negative_total_power(self, initValue):
        """
        constructProperty_forbid_negative_total_power(Bhargava2004MuscleMetabolicsProbe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_constructProperty_forbid_negative_total_power(self, initValue)


    def get_forbid_negative_total_power(self, *args):
        """
        get_forbid_negative_total_power(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool const

        Parameters:
            i: int

        get_forbid_negative_total_power(Bhargava2004MuscleMetabolicsProbe self) -> bool const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_get_forbid_negative_total_power(self, *args)


    def upd_forbid_negative_total_power(self, *args):
        """
        upd_forbid_negative_total_power(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool

        Parameters:
            i: int

        upd_forbid_negative_total_power(Bhargava2004MuscleMetabolicsProbe self) -> bool &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_upd_forbid_negative_total_power(self, *args)


    def set_forbid_negative_total_power(self, *args):
        """
        set_forbid_negative_total_power(Bhargava2004MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_forbid_negative_total_power(Bhargava2004MuscleMetabolicsProbe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_set_forbid_negative_total_power(self, *args)


    def copyProperty_report_total_metabolics_only(self, source):
        """
        copyProperty_report_total_metabolics_only(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_copyProperty_report_total_metabolics_only(self, source)


    def append_report_total_metabolics_only(self, value):
        """
        append_report_total_metabolics_only(Bhargava2004MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_append_report_total_metabolics_only(self, value)


    def constructProperty_report_total_metabolics_only(self, initValue):
        """
        constructProperty_report_total_metabolics_only(Bhargava2004MuscleMetabolicsProbe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_constructProperty_report_total_metabolics_only(self, initValue)


    def get_report_total_metabolics_only(self, *args):
        """
        get_report_total_metabolics_only(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool const

        Parameters:
            i: int

        get_report_total_metabolics_only(Bhargava2004MuscleMetabolicsProbe self) -> bool const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_get_report_total_metabolics_only(self, *args)


    def upd_report_total_metabolics_only(self, *args):
        """
        upd_report_total_metabolics_only(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool

        Parameters:
            i: int

        upd_report_total_metabolics_only(Bhargava2004MuscleMetabolicsProbe self) -> bool &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_upd_report_total_metabolics_only(self, *args)


    def set_report_total_metabolics_only(self, *args):
        """
        set_report_total_metabolics_only(Bhargava2004MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_report_total_metabolics_only(Bhargava2004MuscleMetabolicsProbe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_set_report_total_metabolics_only(self, *args)


    def copyProperty_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, source):
        """
        copyProperty_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_copyProperty_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, source)


    def append_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, value):
        """
        append_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet value) -> int

        Parameters:
            value: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_append_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, value)


    def constructProperty_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, initValue):
        """
        constructProperty_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet initValue)

        Parameters:
            initValue: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_constructProperty_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, initValue)


    def get_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args):
        """
        get_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Bhargava2004MuscleMetabolicsProbe self, int i) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet

        Parameters:
            i: int

        get_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Bhargava2004MuscleMetabolicsProbe self) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_get_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args)


    def upd_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args):
        """
        upd_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Bhargava2004MuscleMetabolicsProbe self, int i) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet

        Parameters:
            i: int

        upd_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Bhargava2004MuscleMetabolicsProbe self) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_upd_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args)


    def set_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args):
        """
        set_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Bhargava2004MuscleMetabolicsProbe self, int i, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet value)

        Parameters:
            i: int
            value: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet const &

        set_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet value)

        Parameters:
            value: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_set_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::Bhargava2004MuscleMetabolicsProbe self) -> Bhargava2004MuscleMetabolicsProbe
        __init__(OpenSim::Bhargava2004MuscleMetabolicsProbe self, bool const activation_rate_on, bool const maintenance_rate_on, bool const shortening_rate_on, bool const basal_rate_on, bool const work_rate_on) -> Bhargava2004MuscleMetabolicsProbe

        Parameters:
            activation_rate_on: bool const
            maintenance_rate_on: bool const
            shortening_rate_on: bool const
            basal_rate_on: bool const
            work_rate_on: bool const

        """
        this = _opensim.new_Bhargava2004MuscleMetabolicsProbe(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def computeProbeInputs(self, state):
        """
        computeProbeInputs(Bhargava2004MuscleMetabolicsProbe self, State state) -> Vector

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_computeProbeInputs(self, state)


    def getNumProbeInputs(self):
        """
        getNumProbeInputs(Bhargava2004MuscleMetabolicsProbe self) -> int

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_getNumProbeInputs(self)


    def getProbeOutputLabels(self):
        """
        getProbeOutputLabels(Bhargava2004MuscleMetabolicsProbe self) -> ArrayStr

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_getProbeOutputLabels(self)


    def getNumMetabolicMuscles(self):
        """
        getNumMetabolicMuscles(Bhargava2004MuscleMetabolicsProbe self) -> int const

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_getNumMetabolicMuscles(self)


    def addMuscle(self, *args):
        """
        addMuscle(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName, double ratio_slow_twitch_fibers, double activation_constant_slow_twitch, double activation_constant_fast_twitch, double maintenance_constant_slow_twitch, double maintenance_constant_fast_twitch)

        Parameters:
            muscleName: std::string const &
            ratio_slow_twitch_fibers: double
            activation_constant_slow_twitch: double
            activation_constant_fast_twitch: double
            maintenance_constant_slow_twitch: double
            maintenance_constant_fast_twitch: double

        addMuscle(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName, double ratio_slow_twitch_fibers, double activation_constant_slow_twitch, double activation_constant_fast_twitch, double maintenance_constant_slow_twitch, double maintenance_constant_fast_twitch, double muscle_mass)

        Parameters:
            muscleName: std::string const &
            ratio_slow_twitch_fibers: double
            activation_constant_slow_twitch: double
            activation_constant_fast_twitch: double
            maintenance_constant_slow_twitch: double
            maintenance_constant_fast_twitch: double
            muscle_mass: double

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_addMuscle(self, *args)


    def removeMuscle(self, muscleName):
        """
        removeMuscle(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName)

        Parameters:
            muscleName: std::string const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_removeMuscle(self, muscleName)


    def useProvidedMass(self, muscleName, providedMass):
        """
        useProvidedMass(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName, double providedMass)

        Parameters:
            muscleName: std::string const &
            providedMass: double

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_useProvidedMass(self, muscleName, providedMass)


    def useCalculatedMass(self, muscleName):
        """
        useCalculatedMass(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName)

        Parameters:
            muscleName: std::string const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_useCalculatedMass(self, muscleName)


    def isUsingProvidedMass(self, muscleName):
        """
        isUsingProvidedMass(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName) -> bool

        Parameters:
            muscleName: std::string const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_isUsingProvidedMass(self, muscleName)


    def getMuscleMass(self, muscleName):
        """
        getMuscleMass(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName) -> double const

        Parameters:
            muscleName: std::string const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_getMuscleMass(self, muscleName)


    def getRatioSlowTwitchFibers(self, muscleName):
        """
        getRatioSlowTwitchFibers(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName) -> double const

        Parameters:
            muscleName: std::string const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_getRatioSlowTwitchFibers(self, muscleName)


    def setRatioSlowTwitchFibers(self, muscleName, ratio):
        """
        setRatioSlowTwitchFibers(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName, double const & ratio)

        Parameters:
            muscleName: std::string const &
            ratio: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_setRatioSlowTwitchFibers(self, muscleName, ratio)


    def getDensity(self, muscleName):
        """
        getDensity(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName) -> double const

        Parameters:
            muscleName: std::string const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_getDensity(self, muscleName)


    def setDensity(self, muscleName, density):
        """
        setDensity(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName, double const & density)

        Parameters:
            muscleName: std::string const &
            density: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_setDensity(self, muscleName, density)


    def getSpecificTension(self, muscleName):
        """
        getSpecificTension(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName) -> double const

        Parameters:
            muscleName: std::string const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_getSpecificTension(self, muscleName)


    def setSpecificTension(self, muscleName, specificTension):
        """
        setSpecificTension(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName, double const & specificTension)

        Parameters:
            muscleName: std::string const &
            specificTension: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_setSpecificTension(self, muscleName, specificTension)


    def getActivationConstantSlowTwitch(self, muscleName):
        """
        getActivationConstantSlowTwitch(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName) -> double const

        Parameters:
            muscleName: std::string const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_getActivationConstantSlowTwitch(self, muscleName)


    def setActivationConstantSlowTwitch(self, muscleName, c):
        """
        setActivationConstantSlowTwitch(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName, double const & c)

        Parameters:
            muscleName: std::string const &
            c: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_setActivationConstantSlowTwitch(self, muscleName, c)


    def getActivationConstantFastTwitch(self, muscleName):
        """
        getActivationConstantFastTwitch(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName) -> double const

        Parameters:
            muscleName: std::string const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_getActivationConstantFastTwitch(self, muscleName)


    def setActivationConstantFastTwitch(self, muscleName, c):
        """
        setActivationConstantFastTwitch(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName, double const & c)

        Parameters:
            muscleName: std::string const &
            c: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_setActivationConstantFastTwitch(self, muscleName, c)


    def getMaintenanceConstantSlowTwitch(self, muscleName):
        """
        getMaintenanceConstantSlowTwitch(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName) -> double const

        Parameters:
            muscleName: std::string const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_getMaintenanceConstantSlowTwitch(self, muscleName)


    def setMaintenanceConstantSlowTwitch(self, muscleName, c):
        """
        setMaintenanceConstantSlowTwitch(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName, double const & c)

        Parameters:
            muscleName: std::string const &
            c: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_setMaintenanceConstantSlowTwitch(self, muscleName, c)


    def getMaintenanceConstantFastTwitch(self, muscleName):
        """
        getMaintenanceConstantFastTwitch(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName) -> double const

        Parameters:
            muscleName: std::string const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_getMaintenanceConstantFastTwitch(self, muscleName)


    def setMaintenanceConstantFastTwitch(self, muscleName, c):
        """
        setMaintenanceConstantFastTwitch(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName, double const & c)

        Parameters:
            muscleName: std::string const &
            c: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_setMaintenanceConstantFastTwitch(self, muscleName, c)

    __swig_destroy__ = _opensim.delete_Bhargava2004MuscleMetabolicsProbe
    __del__ = lambda self: None
Bhargava2004MuscleMetabolicsProbe_swigregister = _opensim.Bhargava2004MuscleMetabolicsProbe_swigregister
Bhargava2004MuscleMetabolicsProbe_swigregister(Bhargava2004MuscleMetabolicsProbe)

def Bhargava2004MuscleMetabolicsProbe_safeDownCast(obj):
    """
    Bhargava2004MuscleMetabolicsProbe_safeDownCast(OpenSimObject obj) -> Bhargava2004MuscleMetabolicsProbe

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Bhargava2004MuscleMetabolicsProbe_safeDownCast(obj)

def Bhargava2004MuscleMetabolicsProbe_getClassName():
    """Bhargava2004MuscleMetabolicsProbe_getClassName() -> std::string const &"""
    return _opensim.Bhargava2004MuscleMetabolicsProbe_getClassName()

class Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter(OpenSimObject):
    """Proxy of C++ OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> std::string const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_getConcreteClassName(self)


    def copyProperty_specific_tension(self, source):
        """
        copyProperty_specific_tension(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters:
            source: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_specific_tension(self, source)


    def append_specific_tension(self, value):
        """
        append_specific_tension(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_append_specific_tension(self, value)


    def constructProperty_specific_tension(self, initValue):
        """
        constructProperty_specific_tension(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_specific_tension(self, initValue)


    def get_specific_tension(self, *args):
        """
        get_specific_tension(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double const

        Parameters:
            i: int

        get_specific_tension(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_get_specific_tension(self, *args)


    def upd_specific_tension(self, *args):
        """
        upd_specific_tension(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double

        Parameters:
            i: int

        upd_specific_tension(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_specific_tension(self, *args)


    def set_specific_tension(self, *args):
        """
        set_specific_tension(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_specific_tension(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_set_specific_tension(self, *args)


    def copyProperty_density(self, source):
        """
        copyProperty_density(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters:
            source: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_density(self, source)


    def append_density(self, value):
        """
        append_density(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_append_density(self, value)


    def constructProperty_density(self, initValue):
        """
        constructProperty_density(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_density(self, initValue)


    def get_density(self, *args):
        """
        get_density(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double const

        Parameters:
            i: int

        get_density(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_get_density(self, *args)


    def upd_density(self, *args):
        """
        upd_density(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double

        Parameters:
            i: int

        upd_density(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_density(self, *args)


    def set_density(self, *args):
        """
        set_density(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_density(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_set_density(self, *args)


    def copyProperty_ratio_slow_twitch_fibers(self, source):
        """
        copyProperty_ratio_slow_twitch_fibers(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters:
            source: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_ratio_slow_twitch_fibers(self, source)


    def append_ratio_slow_twitch_fibers(self, value):
        """
        append_ratio_slow_twitch_fibers(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_append_ratio_slow_twitch_fibers(self, value)


    def constructProperty_ratio_slow_twitch_fibers(self, initValue):
        """
        constructProperty_ratio_slow_twitch_fibers(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_ratio_slow_twitch_fibers(self, initValue)


    def get_ratio_slow_twitch_fibers(self, *args):
        """
        get_ratio_slow_twitch_fibers(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double const

        Parameters:
            i: int

        get_ratio_slow_twitch_fibers(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_get_ratio_slow_twitch_fibers(self, *args)


    def upd_ratio_slow_twitch_fibers(self, *args):
        """
        upd_ratio_slow_twitch_fibers(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double

        Parameters:
            i: int

        upd_ratio_slow_twitch_fibers(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_ratio_slow_twitch_fibers(self, *args)


    def set_ratio_slow_twitch_fibers(self, *args):
        """
        set_ratio_slow_twitch_fibers(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_ratio_slow_twitch_fibers(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_set_ratio_slow_twitch_fibers(self, *args)


    def copyProperty_use_provided_muscle_mass(self, source):
        """
        copyProperty_use_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters:
            source: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_use_provided_muscle_mass(self, source)


    def append_use_provided_muscle_mass(self, value):
        """
        append_use_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_append_use_provided_muscle_mass(self, value)


    def constructProperty_use_provided_muscle_mass(self, *args):
        """
        constructProperty_use_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self)
        constructProperty_use_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_use_provided_muscle_mass(self, *args)


    def get_use_provided_muscle_mass(self, *args):
        """
        get_use_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> bool const

        Parameters:
            i: int

        get_use_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> bool const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_get_use_provided_muscle_mass(self, *args)


    def upd_use_provided_muscle_mass(self, *args):
        """
        upd_use_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> bool

        Parameters:
            i: int

        upd_use_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> bool &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_use_provided_muscle_mass(self, *args)


    def set_use_provided_muscle_mass(self, *args):
        """
        set_use_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_use_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_set_use_provided_muscle_mass(self, *args)


    def copyProperty_provided_muscle_mass(self, source):
        """
        copyProperty_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters:
            source: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_provided_muscle_mass(self, source)


    def append_provided_muscle_mass(self, value):
        """
        append_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_append_provided_muscle_mass(self, value)


    def constructProperty_provided_muscle_mass(self, *args):
        """
        constructProperty_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self)
        constructProperty_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_provided_muscle_mass(self, *args)


    def get_provided_muscle_mass(self, *args):
        """
        get_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double const

        Parameters:
            i: int

        get_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_get_provided_muscle_mass(self, *args)


    def upd_provided_muscle_mass(self, *args):
        """
        upd_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double

        Parameters:
            i: int

        upd_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_provided_muscle_mass(self, *args)


    def set_provided_muscle_mass(self, *args):
        """
        set_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_set_provided_muscle_mass(self, *args)


    def copyProperty_activation_constant_slow_twitch(self, source):
        """
        copyProperty_activation_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters:
            source: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_activation_constant_slow_twitch(self, source)


    def append_activation_constant_slow_twitch(self, value):
        """
        append_activation_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_append_activation_constant_slow_twitch(self, value)


    def constructProperty_activation_constant_slow_twitch(self, initValue):
        """
        constructProperty_activation_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_activation_constant_slow_twitch(self, initValue)


    def get_activation_constant_slow_twitch(self, *args):
        """
        get_activation_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double const

        Parameters:
            i: int

        get_activation_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_get_activation_constant_slow_twitch(self, *args)


    def upd_activation_constant_slow_twitch(self, *args):
        """
        upd_activation_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double

        Parameters:
            i: int

        upd_activation_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_activation_constant_slow_twitch(self, *args)


    def set_activation_constant_slow_twitch(self, *args):
        """
        set_activation_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_activation_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_set_activation_constant_slow_twitch(self, *args)


    def copyProperty_activation_constant_fast_twitch(self, source):
        """
        copyProperty_activation_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters:
            source: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_activation_constant_fast_twitch(self, source)


    def append_activation_constant_fast_twitch(self, value):
        """
        append_activation_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_append_activation_constant_fast_twitch(self, value)


    def constructProperty_activation_constant_fast_twitch(self, initValue):
        """
        constructProperty_activation_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_activation_constant_fast_twitch(self, initValue)


    def get_activation_constant_fast_twitch(self, *args):
        """
        get_activation_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double const

        Parameters:
            i: int

        get_activation_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_get_activation_constant_fast_twitch(self, *args)


    def upd_activation_constant_fast_twitch(self, *args):
        """
        upd_activation_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double

        Parameters:
            i: int

        upd_activation_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_activation_constant_fast_twitch(self, *args)


    def set_activation_constant_fast_twitch(self, *args):
        """
        set_activation_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_activation_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_set_activation_constant_fast_twitch(self, *args)


    def copyProperty_maintenance_constant_slow_twitch(self, source):
        """
        copyProperty_maintenance_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters:
            source: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_maintenance_constant_slow_twitch(self, source)


    def append_maintenance_constant_slow_twitch(self, value):
        """
        append_maintenance_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_append_maintenance_constant_slow_twitch(self, value)


    def constructProperty_maintenance_constant_slow_twitch(self, initValue):
        """
        constructProperty_maintenance_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_maintenance_constant_slow_twitch(self, initValue)


    def get_maintenance_constant_slow_twitch(self, *args):
        """
        get_maintenance_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double const

        Parameters:
            i: int

        get_maintenance_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_get_maintenance_constant_slow_twitch(self, *args)


    def upd_maintenance_constant_slow_twitch(self, *args):
        """
        upd_maintenance_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double

        Parameters:
            i: int

        upd_maintenance_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_maintenance_constant_slow_twitch(self, *args)


    def set_maintenance_constant_slow_twitch(self, *args):
        """
        set_maintenance_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_maintenance_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_set_maintenance_constant_slow_twitch(self, *args)


    def copyProperty_maintenance_constant_fast_twitch(self, source):
        """
        copyProperty_maintenance_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters:
            source: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_maintenance_constant_fast_twitch(self, source)


    def append_maintenance_constant_fast_twitch(self, value):
        """
        append_maintenance_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_append_maintenance_constant_fast_twitch(self, value)


    def constructProperty_maintenance_constant_fast_twitch(self, initValue):
        """
        constructProperty_maintenance_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_maintenance_constant_fast_twitch(self, initValue)


    def get_maintenance_constant_fast_twitch(self, *args):
        """
        get_maintenance_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double const

        Parameters:
            i: int

        get_maintenance_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_get_maintenance_constant_fast_twitch(self, *args)


    def upd_maintenance_constant_fast_twitch(self, *args):
        """
        upd_maintenance_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double

        Parameters:
            i: int

        upd_maintenance_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_maintenance_constant_fast_twitch(self, *args)


    def set_maintenance_constant_fast_twitch(self, *args):
        """
        set_maintenance_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_maintenance_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_set_maintenance_constant_fast_twitch(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter
        __init__(OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, std::string const & muscleName, double ratio_slow_twitch_fibers, double muscle_mass) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter

        Parameters:
            muscleName: std::string const &
            ratio_slow_twitch_fibers: double
            muscle_mass: double

        __init__(OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, std::string const & muscleName, double ratio_slow_twitch_fibers) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter

        Parameters:
            muscleName: std::string const &
            ratio_slow_twitch_fibers: double

        __init__(OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, std::string const & muscleName, double ratio_slow_twitch_fibers, double activation_constant_slow_twitch, double activation_constant_fast_twitch, double maintenance_constant_slow_twitch, double maintenance_constant_fast_twitch, double muscle_mass) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter

        Parameters:
            muscleName: std::string const &
            ratio_slow_twitch_fibers: double
            activation_constant_slow_twitch: double
            activation_constant_fast_twitch: double
            maintenance_constant_slow_twitch: double
            maintenance_constant_fast_twitch: double
            muscle_mass: double

        __init__(OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, std::string const & muscleName, double ratio_slow_twitch_fibers, double activation_constant_slow_twitch, double activation_constant_fast_twitch, double maintenance_constant_slow_twitch, double maintenance_constant_fast_twitch) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter

        Parameters:
            muscleName: std::string const &
            ratio_slow_twitch_fibers: double
            activation_constant_slow_twitch: double
            activation_constant_fast_twitch: double
            maintenance_constant_slow_twitch: double
            maintenance_constant_fast_twitch: double

        """
        this = _opensim.new_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getMuscleMass(self):
        """
        getMuscleMass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_getMuscleMass(self)


    def setMuscleMass(self):
        """
        setMuscleMass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self)

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_setMuscleMass(self)


    def getMuscle(self):
        """
        getMuscle(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> Muscle

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_getMuscle(self)


    def setMuscle(self, m):
        """
        setMuscle(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, Muscle m)

        Parameters:
            m: OpenSim::Muscle *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_setMuscle(self, m)

    __swig_destroy__ = _opensim.delete_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter
    __del__ = lambda self: None
Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_swigregister = _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_swigregister
Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_swigregister(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter)

def Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_safeDownCast(obj):
    """
    Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_safeDownCast(OpenSimObject obj) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_safeDownCast(obj)

def Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_getClassName():
    """Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_getClassName() -> std::string const &"""
    return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_getClassName()

class Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(_object):
    """Proxy of C++ OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet self) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet self) -> std::string const &

        Parameters:
            self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet const *

        """
        return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_getConcreteClassName(self)


    def __init__(self):
        """__init__(OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet self) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet"""
        this = _opensim.new_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet
    __del__ = lambda self: None
Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_swigregister = _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_swigregister
Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_swigregister(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet)

def Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_safeDownCast(obj):
    """
    Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_safeDownCast(OpenSimObject obj) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_safeDownCast(obj)

def Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_getClassName():
    """Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_getClassName() -> std::string const &"""
    return _opensim.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_getClassName()

class Umberger2010MuscleMetabolicsProbe(Probe):
    """Proxy of C++ OpenSim::Umberger2010MuscleMetabolicsProbe class"""
    __swig_setmethods__ = {}
    for _s in [Probe]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Umberger2010MuscleMetabolicsProbe, name, value)
    __swig_getmethods__ = {}
    for _s in [Probe]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Umberger2010MuscleMetabolicsProbe, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Umberger2010MuscleMetabolicsProbe

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Umberger2010MuscleMetabolicsProbe self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Umberger2010MuscleMetabolicsProbe_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Umberger2010MuscleMetabolicsProbe self) -> Umberger2010MuscleMetabolicsProbe

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Umberger2010MuscleMetabolicsProbe self) -> std::string const &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_getConcreteClassName(self)


    def copyProperty_activation_maintenance_rate_on(self, source):
        """
        copyProperty_activation_maintenance_rate_on(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_copyProperty_activation_maintenance_rate_on(self, source)


    def append_activation_maintenance_rate_on(self, value):
        """
        append_activation_maintenance_rate_on(Umberger2010MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_append_activation_maintenance_rate_on(self, value)


    def constructProperty_activation_maintenance_rate_on(self, initValue):
        """
        constructProperty_activation_maintenance_rate_on(Umberger2010MuscleMetabolicsProbe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_constructProperty_activation_maintenance_rate_on(self, initValue)


    def get_activation_maintenance_rate_on(self, *args):
        """
        get_activation_maintenance_rate_on(Umberger2010MuscleMetabolicsProbe self, int i) -> bool const

        Parameters:
            i: int

        get_activation_maintenance_rate_on(Umberger2010MuscleMetabolicsProbe self) -> bool const &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_get_activation_maintenance_rate_on(self, *args)


    def upd_activation_maintenance_rate_on(self, *args):
        """
        upd_activation_maintenance_rate_on(Umberger2010MuscleMetabolicsProbe self, int i) -> bool

        Parameters:
            i: int

        upd_activation_maintenance_rate_on(Umberger2010MuscleMetabolicsProbe self) -> bool &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_upd_activation_maintenance_rate_on(self, *args)


    def set_activation_maintenance_rate_on(self, *args):
        """
        set_activation_maintenance_rate_on(Umberger2010MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_activation_maintenance_rate_on(Umberger2010MuscleMetabolicsProbe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_set_activation_maintenance_rate_on(self, *args)


    def copyProperty_shortening_rate_on(self, source):
        """
        copyProperty_shortening_rate_on(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_copyProperty_shortening_rate_on(self, source)


    def append_shortening_rate_on(self, value):
        """
        append_shortening_rate_on(Umberger2010MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_append_shortening_rate_on(self, value)


    def constructProperty_shortening_rate_on(self, initValue):
        """
        constructProperty_shortening_rate_on(Umberger2010MuscleMetabolicsProbe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_constructProperty_shortening_rate_on(self, initValue)


    def get_shortening_rate_on(self, *args):
        """
        get_shortening_rate_on(Umberger2010MuscleMetabolicsProbe self, int i) -> bool const

        Parameters:
            i: int

        get_shortening_rate_on(Umberger2010MuscleMetabolicsProbe self) -> bool const &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_get_shortening_rate_on(self, *args)


    def upd_shortening_rate_on(self, *args):
        """
        upd_shortening_rate_on(Umberger2010MuscleMetabolicsProbe self, int i) -> bool

        Parameters:
            i: int

        upd_shortening_rate_on(Umberger2010MuscleMetabolicsProbe self) -> bool &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_upd_shortening_rate_on(self, *args)


    def set_shortening_rate_on(self, *args):
        """
        set_shortening_rate_on(Umberger2010MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_shortening_rate_on(Umberger2010MuscleMetabolicsProbe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_set_shortening_rate_on(self, *args)


    def copyProperty_basal_rate_on(self, source):
        """
        copyProperty_basal_rate_on(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_copyProperty_basal_rate_on(self, source)


    def append_basal_rate_on(self, value):
        """
        append_basal_rate_on(Umberger2010MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_append_basal_rate_on(self, value)


    def constructProperty_basal_rate_on(self, initValue):
        """
        constructProperty_basal_rate_on(Umberger2010MuscleMetabolicsProbe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_constructProperty_basal_rate_on(self, initValue)


    def get_basal_rate_on(self, *args):
        """
        get_basal_rate_on(Umberger2010MuscleMetabolicsProbe self, int i) -> bool const

        Parameters:
            i: int

        get_basal_rate_on(Umberger2010MuscleMetabolicsProbe self) -> bool const &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_get_basal_rate_on(self, *args)


    def upd_basal_rate_on(self, *args):
        """
        upd_basal_rate_on(Umberger2010MuscleMetabolicsProbe self, int i) -> bool

        Parameters:
            i: int

        upd_basal_rate_on(Umberger2010MuscleMetabolicsProbe self) -> bool &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_upd_basal_rate_on(self, *args)


    def set_basal_rate_on(self, *args):
        """
        set_basal_rate_on(Umberger2010MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_basal_rate_on(Umberger2010MuscleMetabolicsProbe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_set_basal_rate_on(self, *args)


    def copyProperty_mechanical_work_rate_on(self, source):
        """
        copyProperty_mechanical_work_rate_on(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_copyProperty_mechanical_work_rate_on(self, source)


    def append_mechanical_work_rate_on(self, value):
        """
        append_mechanical_work_rate_on(Umberger2010MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_append_mechanical_work_rate_on(self, value)


    def constructProperty_mechanical_work_rate_on(self, initValue):
        """
        constructProperty_mechanical_work_rate_on(Umberger2010MuscleMetabolicsProbe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_constructProperty_mechanical_work_rate_on(self, initValue)


    def get_mechanical_work_rate_on(self, *args):
        """
        get_mechanical_work_rate_on(Umberger2010MuscleMetabolicsProbe self, int i) -> bool const

        Parameters:
            i: int

        get_mechanical_work_rate_on(Umberger2010MuscleMetabolicsProbe self) -> bool const &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_get_mechanical_work_rate_on(self, *args)


    def upd_mechanical_work_rate_on(self, *args):
        """
        upd_mechanical_work_rate_on(Umberger2010MuscleMetabolicsProbe self, int i) -> bool

        Parameters:
            i: int

        upd_mechanical_work_rate_on(Umberger2010MuscleMetabolicsProbe self) -> bool &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_upd_mechanical_work_rate_on(self, *args)


    def set_mechanical_work_rate_on(self, *args):
        """
        set_mechanical_work_rate_on(Umberger2010MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_mechanical_work_rate_on(Umberger2010MuscleMetabolicsProbe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_set_mechanical_work_rate_on(self, *args)


    def copyProperty_enforce_minimum_heat_rate_per_muscle(self, source):
        """
        copyProperty_enforce_minimum_heat_rate_per_muscle(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_copyProperty_enforce_minimum_heat_rate_per_muscle(self, source)


    def append_enforce_minimum_heat_rate_per_muscle(self, value):
        """
        append_enforce_minimum_heat_rate_per_muscle(Umberger2010MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_append_enforce_minimum_heat_rate_per_muscle(self, value)


    def constructProperty_enforce_minimum_heat_rate_per_muscle(self, initValue):
        """
        constructProperty_enforce_minimum_heat_rate_per_muscle(Umberger2010MuscleMetabolicsProbe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_constructProperty_enforce_minimum_heat_rate_per_muscle(self, initValue)


    def get_enforce_minimum_heat_rate_per_muscle(self, *args):
        """
        get_enforce_minimum_heat_rate_per_muscle(Umberger2010MuscleMetabolicsProbe self, int i) -> bool const

        Parameters:
            i: int

        get_enforce_minimum_heat_rate_per_muscle(Umberger2010MuscleMetabolicsProbe self) -> bool const &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_get_enforce_minimum_heat_rate_per_muscle(self, *args)


    def upd_enforce_minimum_heat_rate_per_muscle(self, *args):
        """
        upd_enforce_minimum_heat_rate_per_muscle(Umberger2010MuscleMetabolicsProbe self, int i) -> bool

        Parameters:
            i: int

        upd_enforce_minimum_heat_rate_per_muscle(Umberger2010MuscleMetabolicsProbe self) -> bool &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_upd_enforce_minimum_heat_rate_per_muscle(self, *args)


    def set_enforce_minimum_heat_rate_per_muscle(self, *args):
        """
        set_enforce_minimum_heat_rate_per_muscle(Umberger2010MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_enforce_minimum_heat_rate_per_muscle(Umberger2010MuscleMetabolicsProbe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_set_enforce_minimum_heat_rate_per_muscle(self, *args)


    def copyProperty_aerobic_factor(self, source):
        """
        copyProperty_aerobic_factor(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_copyProperty_aerobic_factor(self, source)


    def append_aerobic_factor(self, value):
        """
        append_aerobic_factor(Umberger2010MuscleMetabolicsProbe self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_append_aerobic_factor(self, value)


    def constructProperty_aerobic_factor(self, initValue):
        """
        constructProperty_aerobic_factor(Umberger2010MuscleMetabolicsProbe self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_constructProperty_aerobic_factor(self, initValue)


    def get_aerobic_factor(self, *args):
        """
        get_aerobic_factor(Umberger2010MuscleMetabolicsProbe self, int i) -> double const

        Parameters:
            i: int

        get_aerobic_factor(Umberger2010MuscleMetabolicsProbe self) -> double const &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_get_aerobic_factor(self, *args)


    def upd_aerobic_factor(self, *args):
        """
        upd_aerobic_factor(Umberger2010MuscleMetabolicsProbe self, int i) -> double

        Parameters:
            i: int

        upd_aerobic_factor(Umberger2010MuscleMetabolicsProbe self) -> double &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_upd_aerobic_factor(self, *args)


    def set_aerobic_factor(self, *args):
        """
        set_aerobic_factor(Umberger2010MuscleMetabolicsProbe self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_aerobic_factor(Umberger2010MuscleMetabolicsProbe self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_set_aerobic_factor(self, *args)


    def copyProperty_basal_coefficient(self, source):
        """
        copyProperty_basal_coefficient(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_copyProperty_basal_coefficient(self, source)


    def append_basal_coefficient(self, value):
        """
        append_basal_coefficient(Umberger2010MuscleMetabolicsProbe self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_append_basal_coefficient(self, value)


    def constructProperty_basal_coefficient(self, initValue):
        """
        constructProperty_basal_coefficient(Umberger2010MuscleMetabolicsProbe self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_constructProperty_basal_coefficient(self, initValue)


    def get_basal_coefficient(self, *args):
        """
        get_basal_coefficient(Umberger2010MuscleMetabolicsProbe self, int i) -> double const

        Parameters:
            i: int

        get_basal_coefficient(Umberger2010MuscleMetabolicsProbe self) -> double const &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_get_basal_coefficient(self, *args)


    def upd_basal_coefficient(self, *args):
        """
        upd_basal_coefficient(Umberger2010MuscleMetabolicsProbe self, int i) -> double

        Parameters:
            i: int

        upd_basal_coefficient(Umberger2010MuscleMetabolicsProbe self) -> double &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_upd_basal_coefficient(self, *args)


    def set_basal_coefficient(self, *args):
        """
        set_basal_coefficient(Umberger2010MuscleMetabolicsProbe self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_basal_coefficient(Umberger2010MuscleMetabolicsProbe self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_set_basal_coefficient(self, *args)


    def copyProperty_basal_exponent(self, source):
        """
        copyProperty_basal_exponent(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_copyProperty_basal_exponent(self, source)


    def append_basal_exponent(self, value):
        """
        append_basal_exponent(Umberger2010MuscleMetabolicsProbe self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_append_basal_exponent(self, value)


    def constructProperty_basal_exponent(self, initValue):
        """
        constructProperty_basal_exponent(Umberger2010MuscleMetabolicsProbe self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_constructProperty_basal_exponent(self, initValue)


    def get_basal_exponent(self, *args):
        """
        get_basal_exponent(Umberger2010MuscleMetabolicsProbe self, int i) -> double const

        Parameters:
            i: int

        get_basal_exponent(Umberger2010MuscleMetabolicsProbe self) -> double const &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_get_basal_exponent(self, *args)


    def upd_basal_exponent(self, *args):
        """
        upd_basal_exponent(Umberger2010MuscleMetabolicsProbe self, int i) -> double

        Parameters:
            i: int

        upd_basal_exponent(Umberger2010MuscleMetabolicsProbe self) -> double &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_upd_basal_exponent(self, *args)


    def set_basal_exponent(self, *args):
        """
        set_basal_exponent(Umberger2010MuscleMetabolicsProbe self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_basal_exponent(Umberger2010MuscleMetabolicsProbe self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_set_basal_exponent(self, *args)


    def copyProperty_muscle_effort_scaling_factor(self, source):
        """
        copyProperty_muscle_effort_scaling_factor(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_copyProperty_muscle_effort_scaling_factor(self, source)


    def append_muscle_effort_scaling_factor(self, value):
        """
        append_muscle_effort_scaling_factor(Umberger2010MuscleMetabolicsProbe self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_append_muscle_effort_scaling_factor(self, value)


    def constructProperty_muscle_effort_scaling_factor(self, initValue):
        """
        constructProperty_muscle_effort_scaling_factor(Umberger2010MuscleMetabolicsProbe self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_constructProperty_muscle_effort_scaling_factor(self, initValue)


    def get_muscle_effort_scaling_factor(self, *args):
        """
        get_muscle_effort_scaling_factor(Umberger2010MuscleMetabolicsProbe self, int i) -> double const

        Parameters:
            i: int

        get_muscle_effort_scaling_factor(Umberger2010MuscleMetabolicsProbe self) -> double const &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_get_muscle_effort_scaling_factor(self, *args)


    def upd_muscle_effort_scaling_factor(self, *args):
        """
        upd_muscle_effort_scaling_factor(Umberger2010MuscleMetabolicsProbe self, int i) -> double

        Parameters:
            i: int

        upd_muscle_effort_scaling_factor(Umberger2010MuscleMetabolicsProbe self) -> double &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_upd_muscle_effort_scaling_factor(self, *args)


    def set_muscle_effort_scaling_factor(self, *args):
        """
        set_muscle_effort_scaling_factor(Umberger2010MuscleMetabolicsProbe self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_muscle_effort_scaling_factor(Umberger2010MuscleMetabolicsProbe self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_set_muscle_effort_scaling_factor(self, *args)


    def copyProperty_use_Bhargava_recruitment_model(self, source):
        """
        copyProperty_use_Bhargava_recruitment_model(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_copyProperty_use_Bhargava_recruitment_model(self, source)


    def append_use_Bhargava_recruitment_model(self, value):
        """
        append_use_Bhargava_recruitment_model(Umberger2010MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_append_use_Bhargava_recruitment_model(self, value)


    def constructProperty_use_Bhargava_recruitment_model(self, initValue):
        """
        constructProperty_use_Bhargava_recruitment_model(Umberger2010MuscleMetabolicsProbe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_constructProperty_use_Bhargava_recruitment_model(self, initValue)


    def get_use_Bhargava_recruitment_model(self, *args):
        """
        get_use_Bhargava_recruitment_model(Umberger2010MuscleMetabolicsProbe self, int i) -> bool const

        Parameters:
            i: int

        get_use_Bhargava_recruitment_model(Umberger2010MuscleMetabolicsProbe self) -> bool const &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_get_use_Bhargava_recruitment_model(self, *args)


    def upd_use_Bhargava_recruitment_model(self, *args):
        """
        upd_use_Bhargava_recruitment_model(Umberger2010MuscleMetabolicsProbe self, int i) -> bool

        Parameters:
            i: int

        upd_use_Bhargava_recruitment_model(Umberger2010MuscleMetabolicsProbe self) -> bool &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_upd_use_Bhargava_recruitment_model(self, *args)


    def set_use_Bhargava_recruitment_model(self, *args):
        """
        set_use_Bhargava_recruitment_model(Umberger2010MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_use_Bhargava_recruitment_model(Umberger2010MuscleMetabolicsProbe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_set_use_Bhargava_recruitment_model(self, *args)


    def copyProperty_include_negative_mechanical_work(self, source):
        """
        copyProperty_include_negative_mechanical_work(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_copyProperty_include_negative_mechanical_work(self, source)


    def append_include_negative_mechanical_work(self, value):
        """
        append_include_negative_mechanical_work(Umberger2010MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_append_include_negative_mechanical_work(self, value)


    def constructProperty_include_negative_mechanical_work(self, initValue):
        """
        constructProperty_include_negative_mechanical_work(Umberger2010MuscleMetabolicsProbe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_constructProperty_include_negative_mechanical_work(self, initValue)


    def get_include_negative_mechanical_work(self, *args):
        """
        get_include_negative_mechanical_work(Umberger2010MuscleMetabolicsProbe self, int i) -> bool const

        Parameters:
            i: int

        get_include_negative_mechanical_work(Umberger2010MuscleMetabolicsProbe self) -> bool const &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_get_include_negative_mechanical_work(self, *args)


    def upd_include_negative_mechanical_work(self, *args):
        """
        upd_include_negative_mechanical_work(Umberger2010MuscleMetabolicsProbe self, int i) -> bool

        Parameters:
            i: int

        upd_include_negative_mechanical_work(Umberger2010MuscleMetabolicsProbe self) -> bool &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_upd_include_negative_mechanical_work(self, *args)


    def set_include_negative_mechanical_work(self, *args):
        """
        set_include_negative_mechanical_work(Umberger2010MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_include_negative_mechanical_work(Umberger2010MuscleMetabolicsProbe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_set_include_negative_mechanical_work(self, *args)


    def copyProperty_forbid_negative_total_power(self, source):
        """
        copyProperty_forbid_negative_total_power(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_copyProperty_forbid_negative_total_power(self, source)


    def append_forbid_negative_total_power(self, value):
        """
        append_forbid_negative_total_power(Umberger2010MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_append_forbid_negative_total_power(self, value)


    def constructProperty_forbid_negative_total_power(self, initValue):
        """
        constructProperty_forbid_negative_total_power(Umberger2010MuscleMetabolicsProbe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_constructProperty_forbid_negative_total_power(self, initValue)


    def get_forbid_negative_total_power(self, *args):
        """
        get_forbid_negative_total_power(Umberger2010MuscleMetabolicsProbe self, int i) -> bool const

        Parameters:
            i: int

        get_forbid_negative_total_power(Umberger2010MuscleMetabolicsProbe self) -> bool const &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_get_forbid_negative_total_power(self, *args)


    def upd_forbid_negative_total_power(self, *args):
        """
        upd_forbid_negative_total_power(Umberger2010MuscleMetabolicsProbe self, int i) -> bool

        Parameters:
            i: int

        upd_forbid_negative_total_power(Umberger2010MuscleMetabolicsProbe self) -> bool &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_upd_forbid_negative_total_power(self, *args)


    def set_forbid_negative_total_power(self, *args):
        """
        set_forbid_negative_total_power(Umberger2010MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_forbid_negative_total_power(Umberger2010MuscleMetabolicsProbe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_set_forbid_negative_total_power(self, *args)


    def copyProperty_report_total_metabolics_only(self, source):
        """
        copyProperty_report_total_metabolics_only(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_copyProperty_report_total_metabolics_only(self, source)


    def append_report_total_metabolics_only(self, value):
        """
        append_report_total_metabolics_only(Umberger2010MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_append_report_total_metabolics_only(self, value)


    def constructProperty_report_total_metabolics_only(self, initValue):
        """
        constructProperty_report_total_metabolics_only(Umberger2010MuscleMetabolicsProbe self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_constructProperty_report_total_metabolics_only(self, initValue)


    def get_report_total_metabolics_only(self, *args):
        """
        get_report_total_metabolics_only(Umberger2010MuscleMetabolicsProbe self, int i) -> bool const

        Parameters:
            i: int

        get_report_total_metabolics_only(Umberger2010MuscleMetabolicsProbe self) -> bool const &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_get_report_total_metabolics_only(self, *args)


    def upd_report_total_metabolics_only(self, *args):
        """
        upd_report_total_metabolics_only(Umberger2010MuscleMetabolicsProbe self, int i) -> bool

        Parameters:
            i: int

        upd_report_total_metabolics_only(Umberger2010MuscleMetabolicsProbe self) -> bool &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_upd_report_total_metabolics_only(self, *args)


    def set_report_total_metabolics_only(self, *args):
        """
        set_report_total_metabolics_only(Umberger2010MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_report_total_metabolics_only(Umberger2010MuscleMetabolicsProbe self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_set_report_total_metabolics_only(self, *args)


    def copyProperty_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, source):
        """
        copyProperty_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters:
            source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_copyProperty_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, source)


    def append_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, value):
        """
        append_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet value) -> int

        Parameters:
            value: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_append_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, value)


    def constructProperty_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, initValue):
        """
        constructProperty_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet initValue)

        Parameters:
            initValue: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_constructProperty_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, initValue)


    def get_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args):
        """
        get_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Umberger2010MuscleMetabolicsProbe self, int i) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet

        Parameters:
            i: int

        get_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Umberger2010MuscleMetabolicsProbe self) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_get_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args)


    def upd_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args):
        """
        upd_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Umberger2010MuscleMetabolicsProbe self, int i) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet

        Parameters:
            i: int

        upd_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Umberger2010MuscleMetabolicsProbe self) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_upd_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args)


    def set_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args):
        """
        set_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Umberger2010MuscleMetabolicsProbe self, int i, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet value)

        Parameters:
            i: int
            value: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet const &

        set_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet value)

        Parameters:
            value: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_set_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::Umberger2010MuscleMetabolicsProbe self) -> Umberger2010MuscleMetabolicsProbe
        __init__(OpenSim::Umberger2010MuscleMetabolicsProbe self, bool const activation_maintenance_rate_on, bool const shortening_rate_on, bool const basal_rate_on, bool const work_rate_on) -> Umberger2010MuscleMetabolicsProbe

        Parameters:
            activation_maintenance_rate_on: bool const
            shortening_rate_on: bool const
            basal_rate_on: bool const
            work_rate_on: bool const

        """
        this = _opensim.new_Umberger2010MuscleMetabolicsProbe(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def computeProbeInputs(self, state):
        """
        computeProbeInputs(Umberger2010MuscleMetabolicsProbe self, State state) -> Vector

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_computeProbeInputs(self, state)


    def getNumProbeInputs(self):
        """
        getNumProbeInputs(Umberger2010MuscleMetabolicsProbe self) -> int

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_getNumProbeInputs(self)


    def getProbeOutputLabels(self):
        """
        getProbeOutputLabels(Umberger2010MuscleMetabolicsProbe self) -> ArrayStr

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_getProbeOutputLabels(self)


    def getNumMetabolicMuscles(self):
        """
        getNumMetabolicMuscles(Umberger2010MuscleMetabolicsProbe self) -> int const

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_getNumMetabolicMuscles(self)


    def addMuscle(self, *args):
        """
        addMuscle(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName, double ratio_slow_twitch_fibers)

        Parameters:
            muscleName: std::string const &
            ratio_slow_twitch_fibers: double

        addMuscle(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName, double ratio_slow_twitch_fibers, double muscle_mass)

        Parameters:
            muscleName: std::string const &
            ratio_slow_twitch_fibers: double
            muscle_mass: double

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_addMuscle(self, *args)


    def removeMuscle(self, muscleName):
        """
        removeMuscle(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName)

        Parameters:
            muscleName: std::string const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_removeMuscle(self, muscleName)


    def useProvidedMass(self, muscleName, providedMass):
        """
        useProvidedMass(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName, double providedMass)

        Parameters:
            muscleName: std::string const &
            providedMass: double

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_useProvidedMass(self, muscleName, providedMass)


    def useCalculatedMass(self, muscleName):
        """
        useCalculatedMass(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName)

        Parameters:
            muscleName: std::string const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_useCalculatedMass(self, muscleName)


    def isUsingProvidedMass(self, muscleName):
        """
        isUsingProvidedMass(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName) -> bool

        Parameters:
            muscleName: std::string const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_isUsingProvidedMass(self, muscleName)


    def getMuscleMass(self, muscleName):
        """
        getMuscleMass(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName) -> double const

        Parameters:
            muscleName: std::string const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_getMuscleMass(self, muscleName)


    def getRatioSlowTwitchFibers(self, muscleName):
        """
        getRatioSlowTwitchFibers(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName) -> double const

        Parameters:
            muscleName: std::string const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_getRatioSlowTwitchFibers(self, muscleName)


    def setRatioSlowTwitchFibers(self, muscleName, ratio):
        """
        setRatioSlowTwitchFibers(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName, double const & ratio)

        Parameters:
            muscleName: std::string const &
            ratio: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_setRatioSlowTwitchFibers(self, muscleName, ratio)


    def getDensity(self, muscleName):
        """
        getDensity(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName) -> double const

        Parameters:
            muscleName: std::string const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_getDensity(self, muscleName)


    def setDensity(self, muscleName, density):
        """
        setDensity(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName, double const & density)

        Parameters:
            muscleName: std::string const &
            density: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_setDensity(self, muscleName, density)


    def getSpecificTension(self, muscleName):
        """
        getSpecificTension(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName) -> double const

        Parameters:
            muscleName: std::string const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_getSpecificTension(self, muscleName)


    def setSpecificTension(self, muscleName, specificTension):
        """
        setSpecificTension(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName, double const & specificTension)

        Parameters:
            muscleName: std::string const &
            specificTension: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_setSpecificTension(self, muscleName, specificTension)

    __swig_destroy__ = _opensim.delete_Umberger2010MuscleMetabolicsProbe
    __del__ = lambda self: None
Umberger2010MuscleMetabolicsProbe_swigregister = _opensim.Umberger2010MuscleMetabolicsProbe_swigregister
Umberger2010MuscleMetabolicsProbe_swigregister(Umberger2010MuscleMetabolicsProbe)

def Umberger2010MuscleMetabolicsProbe_safeDownCast(obj):
    """
    Umberger2010MuscleMetabolicsProbe_safeDownCast(OpenSimObject obj) -> Umberger2010MuscleMetabolicsProbe

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Umberger2010MuscleMetabolicsProbe_safeDownCast(obj)

def Umberger2010MuscleMetabolicsProbe_getClassName():
    """Umberger2010MuscleMetabolicsProbe_getClassName() -> std::string const &"""
    return _opensim.Umberger2010MuscleMetabolicsProbe_getClassName()

class Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter(OpenSimObject):
    """Proxy of C++ OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> std::string const &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_getConcreteClassName(self)


    def copyProperty_specific_tension(self, source):
        """
        copyProperty_specific_tension(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters:
            source: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_specific_tension(self, source)


    def append_specific_tension(self, value):
        """
        append_specific_tension(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_append_specific_tension(self, value)


    def constructProperty_specific_tension(self, initValue):
        """
        constructProperty_specific_tension(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_specific_tension(self, initValue)


    def get_specific_tension(self, *args):
        """
        get_specific_tension(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double const

        Parameters:
            i: int

        get_specific_tension(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_get_specific_tension(self, *args)


    def upd_specific_tension(self, *args):
        """
        upd_specific_tension(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double

        Parameters:
            i: int

        upd_specific_tension(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_specific_tension(self, *args)


    def set_specific_tension(self, *args):
        """
        set_specific_tension(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_specific_tension(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_set_specific_tension(self, *args)


    def copyProperty_density(self, source):
        """
        copyProperty_density(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters:
            source: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_density(self, source)


    def append_density(self, value):
        """
        append_density(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_append_density(self, value)


    def constructProperty_density(self, initValue):
        """
        constructProperty_density(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_density(self, initValue)


    def get_density(self, *args):
        """
        get_density(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double const

        Parameters:
            i: int

        get_density(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_get_density(self, *args)


    def upd_density(self, *args):
        """
        upd_density(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double

        Parameters:
            i: int

        upd_density(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_density(self, *args)


    def set_density(self, *args):
        """
        set_density(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_density(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_set_density(self, *args)


    def copyProperty_ratio_slow_twitch_fibers(self, source):
        """
        copyProperty_ratio_slow_twitch_fibers(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters:
            source: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_ratio_slow_twitch_fibers(self, source)


    def append_ratio_slow_twitch_fibers(self, value):
        """
        append_ratio_slow_twitch_fibers(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_append_ratio_slow_twitch_fibers(self, value)


    def constructProperty_ratio_slow_twitch_fibers(self, initValue):
        """
        constructProperty_ratio_slow_twitch_fibers(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_ratio_slow_twitch_fibers(self, initValue)


    def get_ratio_slow_twitch_fibers(self, *args):
        """
        get_ratio_slow_twitch_fibers(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double const

        Parameters:
            i: int

        get_ratio_slow_twitch_fibers(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_get_ratio_slow_twitch_fibers(self, *args)


    def upd_ratio_slow_twitch_fibers(self, *args):
        """
        upd_ratio_slow_twitch_fibers(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double

        Parameters:
            i: int

        upd_ratio_slow_twitch_fibers(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_ratio_slow_twitch_fibers(self, *args)


    def set_ratio_slow_twitch_fibers(self, *args):
        """
        set_ratio_slow_twitch_fibers(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_ratio_slow_twitch_fibers(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_set_ratio_slow_twitch_fibers(self, *args)


    def copyProperty_use_provided_muscle_mass(self, source):
        """
        copyProperty_use_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters:
            source: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_use_provided_muscle_mass(self, source)


    def append_use_provided_muscle_mass(self, value):
        """
        append_use_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_append_use_provided_muscle_mass(self, value)


    def constructProperty_use_provided_muscle_mass(self, initValue):
        """
        constructProperty_use_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_use_provided_muscle_mass(self, initValue)


    def get_use_provided_muscle_mass(self, *args):
        """
        get_use_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> bool const

        Parameters:
            i: int

        get_use_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> bool const &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_get_use_provided_muscle_mass(self, *args)


    def upd_use_provided_muscle_mass(self, *args):
        """
        upd_use_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> bool

        Parameters:
            i: int

        upd_use_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> bool &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_use_provided_muscle_mass(self, *args)


    def set_use_provided_muscle_mass(self, *args):
        """
        set_use_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_use_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_set_use_provided_muscle_mass(self, *args)


    def copyProperty_provided_muscle_mass(self, source):
        """
        copyProperty_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters:
            source: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_provided_muscle_mass(self, source)


    def append_provided_muscle_mass(self, value):
        """
        append_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_append_provided_muscle_mass(self, value)


    def constructProperty_provided_muscle_mass(self, initValue):
        """
        constructProperty_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_provided_muscle_mass(self, initValue)


    def get_provided_muscle_mass(self, *args):
        """
        get_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double const

        Parameters:
            i: int

        get_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_get_provided_muscle_mass(self, *args)


    def upd_provided_muscle_mass(self, *args):
        """
        upd_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double

        Parameters:
            i: int

        upd_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_provided_muscle_mass(self, *args)


    def set_provided_muscle_mass(self, *args):
        """
        set_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_set_provided_muscle_mass(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter
        __init__(OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, std::string const & muscleName, double ratio_slow_twitch_fibers, double muscle_mass) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter

        Parameters:
            muscleName: std::string const &
            ratio_slow_twitch_fibers: double
            muscle_mass: double

        __init__(OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, std::string const & muscleName, double ratio_slow_twitch_fibers) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter

        Parameters:
            muscleName: std::string const &
            ratio_slow_twitch_fibers: double

        """
        this = _opensim.new_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getMuscleMass(self):
        """
        getMuscleMass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_getMuscleMass(self)


    def setMuscleMass(self):
        """
        setMuscleMass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self)

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_setMuscleMass(self)


    def getMuscle(self):
        """
        getMuscle(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> Muscle

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_getMuscle(self)


    def setMuscle(self, m):
        """
        setMuscle(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, Muscle m)

        Parameters:
            m: OpenSim::Muscle *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_setMuscle(self, m)

    __swig_destroy__ = _opensim.delete_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter
    __del__ = lambda self: None
Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_swigregister = _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_swigregister
Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_swigregister(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter)

def Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_safeDownCast(obj):
    """
    Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_safeDownCast(OpenSimObject obj) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_safeDownCast(obj)

def Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_getClassName():
    """Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_getClassName() -> std::string const &"""
    return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_getClassName()

class Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(_object):
    """Proxy of C++ OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet self) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet self) -> std::string const &

        Parameters:
            self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet const *

        """
        return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_getConcreteClassName(self)


    def __init__(self):
        """__init__(OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet self) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet"""
        this = _opensim.new_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet
    __del__ = lambda self: None
Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_swigregister = _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_swigregister
Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_swigregister(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet)

def Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_safeDownCast(obj):
    """
    Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_safeDownCast(OpenSimObject obj) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_safeDownCast(obj)

def Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_getClassName():
    """Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_getClassName() -> std::string const &"""
    return _opensim.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_getClassName()

class ModelDisplayHints(_object):
    """Proxy of C++ OpenSim::ModelDisplayHints class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelDisplayHints, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelDisplayHints, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(OpenSim::ModelDisplayHints self) -> ModelDisplayHints"""
        this = _opensim.new_ModelDisplayHints()
        try:
            self.this.append(this)
        except:
            self.this = this

    def setShowWrapGeometry(self, showWrap):
        """
        setShowWrapGeometry(ModelDisplayHints self, bool showWrap) -> ModelDisplayHints

        Parameters:
            showWrap: bool

        """
        return _opensim.ModelDisplayHints_setShowWrapGeometry(self, showWrap)


    def getShowWrapGeometry(self):
        """
        getShowWrapGeometry(ModelDisplayHints self) -> bool

        Parameters:
            self: OpenSim::ModelDisplayHints const *

        """
        return _opensim.ModelDisplayHints_getShowWrapGeometry(self)


    def setShowContactGeometry(self, showContact):
        """
        setShowContactGeometry(ModelDisplayHints self, bool showContact) -> ModelDisplayHints

        Parameters:
            showContact: bool

        """
        return _opensim.ModelDisplayHints_setShowContactGeometry(self, showContact)


    def getShowContactGeometry(self):
        """
        getShowContactGeometry(ModelDisplayHints self) -> bool

        Parameters:
            self: OpenSim::ModelDisplayHints const *

        """
        return _opensim.ModelDisplayHints_getShowContactGeometry(self)


    def setShowMusclePaths(self, showMusclePaths):
        """
        setShowMusclePaths(ModelDisplayHints self, bool showMusclePaths) -> ModelDisplayHints

        Parameters:
            showMusclePaths: bool

        """
        return _opensim.ModelDisplayHints_setShowMusclePaths(self, showMusclePaths)


    def getShowMusclePaths(self):
        """
        getShowMusclePaths(ModelDisplayHints self) -> bool

        Parameters:
            self: OpenSim::ModelDisplayHints const *

        """
        return _opensim.ModelDisplayHints_getShowMusclePaths(self)


    def setShowPathPoints(self, showPathPoints):
        """
        setShowPathPoints(ModelDisplayHints self, bool showPathPoints) -> ModelDisplayHints

        Parameters:
            showPathPoints: bool

        """
        return _opensim.ModelDisplayHints_setShowPathPoints(self, showPathPoints)


    def getShowPathPoints(self):
        """
        getShowPathPoints(ModelDisplayHints self) -> bool

        Parameters:
            self: OpenSim::ModelDisplayHints const *

        """
        return _opensim.ModelDisplayHints_getShowPathPoints(self)


    def setShowMarkers(self, showMarkers):
        """
        setShowMarkers(ModelDisplayHints self, bool showMarkers) -> ModelDisplayHints

        Parameters:
            showMarkers: bool

        """
        return _opensim.ModelDisplayHints_setShowMarkers(self, showMarkers)


    def getShowMarkers(self):
        """
        getShowMarkers(ModelDisplayHints self) -> bool

        Parameters:
            self: OpenSim::ModelDisplayHints const *

        """
        return _opensim.ModelDisplayHints_getShowMarkers(self)


    def setShowForces(self, showForces):
        """
        setShowForces(ModelDisplayHints self, bool showForces) -> ModelDisplayHints

        Parameters:
            showForces: bool

        """
        return _opensim.ModelDisplayHints_setShowForces(self, showForces)


    def getShowForces(self):
        """
        getShowForces(ModelDisplayHints self) -> bool

        Parameters:
            self: OpenSim::ModelDisplayHints const *

        """
        return _opensim.ModelDisplayHints_getShowForces(self)


    def setShowFrames(self, showFrames):
        """
        setShowFrames(ModelDisplayHints self, bool showFrames) -> ModelDisplayHints

        Parameters:
            showFrames: bool

        """
        return _opensim.ModelDisplayHints_setShowFrames(self, showFrames)


    def getShowFrames(self):
        """
        getShowFrames(ModelDisplayHints self) -> bool

        Parameters:
            self: OpenSim::ModelDisplayHints const *

        """
        return _opensim.ModelDisplayHints_getShowFrames(self)


    def setShowLabels(self, showLabels):
        """
        setShowLabels(ModelDisplayHints self, bool showLabels) -> ModelDisplayHints

        Parameters:
            showLabels: bool

        """
        return _opensim.ModelDisplayHints_setShowLabels(self, showLabels)


    def getShowLabels(self):
        """
        getShowLabels(ModelDisplayHints self) -> bool

        Parameters:
            self: OpenSim::ModelDisplayHints const *

        """
        return _opensim.ModelDisplayHints_getShowLabels(self)


    def setShowDebugGeometry(self, showDebugGeometry):
        """
        setShowDebugGeometry(ModelDisplayHints self, bool showDebugGeometry) -> ModelDisplayHints

        Parameters:
            showDebugGeometry: bool

        """
        return _opensim.ModelDisplayHints_setShowDebugGeometry(self, showDebugGeometry)


    def getShowDebugGeometry(self):
        """
        getShowDebugGeometry(ModelDisplayHints self) -> bool

        Parameters:
            self: OpenSim::ModelDisplayHints const *

        """
        return _opensim.ModelDisplayHints_getShowDebugGeometry(self)


    def clear(self):
        """
        clear(ModelDisplayHints self)

        Parameters:
            self: OpenSim::ModelDisplayHints *

        """
        return _opensim.ModelDisplayHints_clear(self)

    __swig_destroy__ = _opensim.delete_ModelDisplayHints
    __del__ = lambda self: None
ModelDisplayHints_swigregister = _opensim.ModelDisplayHints_swigregister
ModelDisplayHints_swigregister(ModelDisplayHints)

class ModelVisualizer(_object):
    """Proxy of C++ OpenSim::ModelVisualizer class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelVisualizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelVisualizer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def show(self, state):
        """
        show(ModelVisualizer self, State state)

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.ModelVisualizer_show(self, state)


    def getInputSilo(self):
        """
        getInputSilo(ModelVisualizer self) -> SimTK::Visualizer::InputSilo const &

        Parameters:
            self: OpenSim::ModelVisualizer const *

        """
        return _opensim.ModelVisualizer_getInputSilo(self)


    def updInputSilo(self):
        """
        updInputSilo(ModelVisualizer self) -> SimTK::Visualizer::InputSilo &

        Parameters:
            self: OpenSim::ModelVisualizer *

        """
        return _opensim.ModelVisualizer_updInputSilo(self)


    def getSimbodyVisualizer(self):
        """
        getSimbodyVisualizer(ModelVisualizer self) -> SimTK::Visualizer const &

        Parameters:
            self: OpenSim::ModelVisualizer const *

        """
        return _opensim.ModelVisualizer_getSimbodyVisualizer(self)


    def updSimbodyVisualizer(self):
        """
        updSimbodyVisualizer(ModelVisualizer self) -> SimTK::Visualizer &

        Parameters:
            self: OpenSim::ModelVisualizer *

        """
        return _opensim.ModelVisualizer_updSimbodyVisualizer(self)


    def getGeometryDecorationGenerator(self):
        """
        getGeometryDecorationGenerator(ModelVisualizer self) -> SimTK::DefaultGeometry *

        Parameters:
            self: OpenSim::ModelVisualizer *

        """
        return _opensim.ModelVisualizer_getGeometryDecorationGenerator(self)


    def getModel(self):
        """
        getModel(ModelVisualizer self) -> Model

        Parameters:
            self: OpenSim::ModelVisualizer const *

        """
        return _opensim.ModelVisualizer_getModel(self)


    def updModel(self):
        """
        updModel(ModelVisualizer self) -> Model

        Parameters:
            self: OpenSim::ModelVisualizer *

        """
        return _opensim.ModelVisualizer_updModel(self)


    def findGeometryFile(self, geoFile, isAbsolute, attempts):
        """
        findGeometryFile(ModelVisualizer self, std::string const & geoFile, bool & isAbsolute, SimTK::Array_< std::string,unsigned int > & attempts) -> bool

        Parameters:
            geoFile: std::string const &
            isAbsolute: bool &
            attempts: SimTK::Array_< std::string,unsigned int > &

        """
        return _opensim.ModelVisualizer_findGeometryFile(self, geoFile, isAbsolute, attempts)

ModelVisualizer_swigregister = _opensim.ModelVisualizer_swigregister
ModelVisualizer_swigregister(ModelVisualizer)

class Model(ModelComponent):
    """Proxy of C++ OpenSim::Model class"""
    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Model

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Model_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Model self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Model_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Model_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Model self) -> Model

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Model self) -> std::string const &

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::Model self) -> Model
        __init__(OpenSim::Model self, std::string const & filename, bool connectToModel=True) -> Model

        Parameters:
            filename: std::string const &
            connectToModel: bool

        __init__(OpenSim::Model self, std::string const & filename) -> Model

        Parameters:
            filename: std::string const &

        __init__(OpenSim::Model self, Model source) -> Model

        Parameters:
            source: OpenSim::Model const &

        """
        this = _opensim.new_Model(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setup(self):
        """
        setup(Model self)

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_setup(self)


    def cleanup(self):
        """
        cleanup(Model self)

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_cleanup(self)


    def getDisplayHints(self):
        """
        getDisplayHints(Model self) -> ModelDisplayHints

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getDisplayHints(self)


    def updDisplayHints(self):
        """
        updDisplayHints(Model self) -> ModelDisplayHints

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_updDisplayHints(self)


    def setUseVisualizer(self, visualize):
        """
        setUseVisualizer(Model self, bool visualize)

        Parameters:
            visualize: bool

        """
        return _opensim.Model_setUseVisualizer(self, visualize)


    def getUseVisualizer(self):
        """
        getUseVisualizer(Model self) -> bool

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getUseVisualizer(self)


    def hasVisualizer(self):
        """
        hasVisualizer(Model self) -> bool

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_hasVisualizer(self)


    def getVisualizer(self):
        """
        getVisualizer(Model self) -> ModelVisualizer

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getVisualizer(self)


    def updVisualizer(self):
        """
        updVisualizer(Model self) -> ModelVisualizer

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_updVisualizer(self)


    def buildSystem(self):
        """
        buildSystem(Model self)

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_buildSystem(self)


    def initializeState(self):
        """
        initializeState(Model self) -> State

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_initializeState(self)


    def initSystem(self):
        """
        initSystem(Model self) -> State

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_initSystem(self)


    def getWorkingState(self):
        """
        getWorkingState(Model self) -> State

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getWorkingState(self)


    def updWorkingState(self):
        """
        updWorkingState(Model self) -> State

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_updWorkingState(self)


    def copyDefaultStateIntoWorkingState(self):
        """
        copyDefaultStateIntoWorkingState(Model self)

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_copyDefaultStateIntoWorkingState(self)


    def initStateWithoutRecreatingSystem(self, state):
        """
        initStateWithoutRecreatingSystem(Model self, State state)

        Parameters:
            state: SimTK::State &

        """
        return _opensim.Model_initStateWithoutRecreatingSystem(self, state)


    def invalidateSystem(self):
        """
        invalidateSystem(Model self)

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_invalidateSystem(self)


    def isValidSystem(self):
        """
        isValidSystem(Model self) -> bool

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_isValidSystem(self)


    def formStateStorage(self, originalStorage, statesStorage):
        """
        formStateStorage(Model self, Storage originalStorage, Storage statesStorage)

        Parameters:
            originalStorage: OpenSim::Storage const &
            statesStorage: OpenSim::Storage &

        """
        return _opensim.Model_formStateStorage(self, originalStorage, statesStorage)


    def formQStorage(self, originalStorage, qStorage):
        """
        formQStorage(Model self, Storage originalStorage, Storage qStorage)

        Parameters:
            originalStorage: OpenSim::Storage const &
            qStorage: OpenSim::Storage &

        """
        return _opensim.Model_formQStorage(self, originalStorage, qStorage)


    def updateAssemblyConditions(self, s):
        """
        updateAssemblyConditions(Model self, State s)

        Parameters:
            s: SimTK::State &

        """
        return _opensim.Model_updateAssemblyConditions(self, s)


    def assemble(self, state, coord=None, weight=10):
        """
        assemble(Model self, State state, Coordinate coord=None, double weight=10)

        Parameters:
            state: SimTK::State &
            coord: OpenSim::Coordinate const *
            weight: double

        assemble(Model self, State state, Coordinate coord=None)

        Parameters:
            state: SimTK::State &
            coord: OpenSim::Coordinate const *

        assemble(Model self, State state)

        Parameters:
            state: SimTK::State &

        """
        return _opensim.Model_assemble(self, state, coord, weight)


    def equilibrateMuscles(self, state):
        """
        equilibrateMuscles(Model self, State state)

        Parameters:
            state: SimTK::State &

        """
        return _opensim.Model_equilibrateMuscles(self, state)


    def getMultibodySystem(self):
        """
        getMultibodySystem(Model self) -> SimTK::MultibodySystem const &

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getMultibodySystem(self)


    def updMultibodySystem(self):
        """
        updMultibodySystem(Model self) -> SimTK::MultibodySystem &

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_updMultibodySystem(self)


    def getDefaultSubsystem(self):
        """
        getDefaultSubsystem(Model self) -> SimTK::DefaultSystemSubsystem const &

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getDefaultSubsystem(self)


    def updDefaultSubsystem(self):
        """
        updDefaultSubsystem(Model self) -> SimTK::DefaultSystemSubsystem &

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_updDefaultSubsystem(self)


    def getMatterSubsystem(self):
        """
        getMatterSubsystem(Model self) -> SimTK::SimbodyMatterSubsystem const &

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getMatterSubsystem(self)


    def updMatterSubsystem(self):
        """
        updMatterSubsystem(Model self) -> SimTK::SimbodyMatterSubsystem &

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_updMatterSubsystem(self)


    def getGravityForce(self):
        """
        getGravityForce(Model self) -> SimTK::Force::Gravity const &

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getGravityForce(self)


    def updGravityForce(self):
        """
        updGravityForce(Model self) -> SimTK::Force::Gravity &

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_updGravityForce(self)


    def getForceSubsystem(self):
        """
        getForceSubsystem(Model self) -> SimTK::GeneralForceSubsystem const &

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getForceSubsystem(self)


    def updForceSubsystem(self):
        """
        updForceSubsystem(Model self) -> SimTK::GeneralForceSubsystem &

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_updForceSubsystem(self)


    def getNumStateVariables(self):
        """
        getNumStateVariables(Model self) -> int

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getNumStateVariables(self)


    def addComponent(self, aComponent):
        """
        addComponent(Model self, ModelComponent aComponent)

        Parameters:
            aComponent: OpenSim::ModelComponent *

        """
        val = _opensim.Model_addComponent(self, aComponent)
        args[0]._markAdopted()


        return val


    def addBody(self, aBody):
        """
        addBody(Model self, Body aBody)

        Parameters:
            aBody: OpenSim::Body *

        """
        val = _opensim.Model_addBody(self, aBody)
        args[0]._markAdopted()


        return val


    def addConstraint(self, aConstraint):
        """
        addConstraint(Model self, Constraint aConstraint)

        Parameters:
            aConstraint: OpenSim::Constraint *

        """
        val = _opensim.Model_addConstraint(self, aConstraint)
        args[0]._markAdopted()


        return val


    def addForce(self, aForce):
        """
        addForce(Model self, Force aForce)

        Parameters:
            aForce: OpenSim::Force *

        """
        val = _opensim.Model_addForce(self, aForce)
        args[0]._markAdopted()


        return val


    def addProbe(self, aProbe):
        """
        addProbe(Model self, Probe aProbe)

        Parameters:
            aProbe: OpenSim::Probe *

        """
        val = _opensim.Model_addProbe(self, aProbe)
        args[0]._markAdopted()


        return val


    def addContactGeometry(self, aContactGeometry):
        """
        addContactGeometry(Model self, ContactGeometry aContactGeometry)

        Parameters:
            aContactGeometry: OpenSim::ContactGeometry *

        """
        val = _opensim.Model_addContactGeometry(self, aContactGeometry)
        args[0]._markAdopted()


        return val


    def removeProbe(self, aProbe):
        """
        removeProbe(Model self, Probe aProbe)

        Parameters:
            aProbe: OpenSim::Probe *

        """
        return _opensim.Model_removeProbe(self, aProbe)


    def getInputFileName(self):
        """
        getInputFileName(Model self) -> std::string const &

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getInputFileName(self)


    def setInputFileName(self, fileName):
        """
        setInputFileName(Model self, std::string const & fileName)

        Parameters:
            fileName: std::string const &

        """
        return _opensim.Model_setInputFileName(self, fileName)


    def getCredits(self):
        """
        getCredits(Model self) -> std::string const &

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getCredits(self)


    def setAuthors(self, aCredits):
        """
        setAuthors(Model self, std::string const & aCredits)

        Parameters:
            aCredits: std::string const &

        """
        return _opensim.Model_setAuthors(self, aCredits)


    def getPublications(self):
        """
        getPublications(Model self) -> std::string const &

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getPublications(self)


    def setPublications(self, aPublications):
        """
        setPublications(Model self, std::string const & aPublications)

        Parameters:
            aPublications: std::string const &

        """
        return _opensim.Model_setPublications(self, aPublications)


    def getLengthUnits(self):
        """
        getLengthUnits(Model self) -> Units

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getLengthUnits(self)


    def getForceUnits(self):
        """
        getForceUnits(Model self) -> Units

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getForceUnits(self)


    def getGravity(self):
        """
        getGravity(Model self) -> Vec3

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getGravity(self)


    def setGravity(self, aGrav):
        """
        setGravity(Model self, Vec3 aGrav) -> bool

        Parameters:
            aGrav: SimTK::Vec3 const &

        """
        return _opensim.Model_setGravity(self, aGrav)


    def getNumMarkers(self):
        """
        getNumMarkers(Model self) -> int

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getNumMarkers(self)


    def getNumContactGeometries(self):
        """
        getNumContactGeometries(Model self) -> int

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getNumContactGeometries(self)


    def getNumBodies(self):
        """
        getNumBodies(Model self) -> int

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getNumBodies(self)


    def getNumJoints(self):
        """
        getNumJoints(Model self) -> int

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getNumJoints(self)


    def getNumCoordinates(self):
        """
        getNumCoordinates(Model self) -> int

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getNumCoordinates(self)


    def getNumSpeeds(self):
        """
        getNumSpeeds(Model self) -> int

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getNumSpeeds(self)


    def getNumProbes(self):
        """
        getNumProbes(Model self) -> int

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getNumProbes(self)


    def getActuators(self):
        """
        getActuators(Model self) -> SetActuators

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getActuators(self)


    def updActuators(self):
        """
        updActuators(Model self) -> SetActuators

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_updActuators(self)


    def getMuscles(self):
        """
        getMuscles(Model self) -> SetMuscles

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getMuscles(self)


    def updMuscles(self):
        """
        updMuscles(Model self) -> SetMuscles

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_updMuscles(self)


    def getForceSet(self):
        """
        getForceSet(Model self) -> ForceSet

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getForceSet(self)


    def updForceSet(self):
        """
        updForceSet(Model self) -> ForceSet

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_updForceSet(self)


    def getProbeSet(self):
        """
        getProbeSet(Model self) -> ProbeSet

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getProbeSet(self)


    def updProbeSet(self):
        """
        updProbeSet(Model self) -> ProbeSet

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_updProbeSet(self)


    def getMiscModelComponentSet(self):
        """
        getMiscModelComponentSet(Model self) -> ComponentSet

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getMiscModelComponentSet(self)


    def updMiscModelComponentSet(self):
        """
        updMiscModelComponentSet(Model self) -> ComponentSet

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_updMiscModelComponentSet(self)


    def getNumAnalyses(self):
        """
        getNumAnalyses(Model self) -> int

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getNumAnalyses(self)


    def getNumControls(self):
        """
        getNumControls(Model self) -> int

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getNumControls(self)


    def updDefaultControls(self):
        """
        updDefaultControls(Model self) -> Vector

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_updDefaultControls(self)


    def setDefaultControls(self, controls):
        """
        setDefaultControls(Model self, Vector controls)

        Parameters:
            controls: SimTK::Vector const &

        """
        return _opensim.Model_setDefaultControls(self, controls)


    def getDefaultControls(self):
        """
        getDefaultControls(Model self) -> Vector

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getDefaultControls(self)


    def updControls(self, s):
        """
        updControls(Model self, State s) -> Vector

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Model_updControls(self, s)


    def markControlsAsValid(self, s):
        """
        markControlsAsValid(Model self, State s)

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Model_markControlsAsValid(self, s)


    def setControls(self, s, controls):
        """
        setControls(Model self, State s, Vector controls)

        Parameters:
            s: SimTK::State const &
            controls: SimTK::Vector const &

        """
        return _opensim.Model_setControls(self, s, controls)


    def getControls(self, s):
        """
        getControls(Model self, State s) -> Vector

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Model_getControls(self, s)


    def computeControls(self, state, controls):
        """
        computeControls(Model self, State state, Vector controls)

        Parameters:
            state: SimTK::State const &
            controls: SimTK::Vector &

        """
        return _opensim.Model_computeControls(self, state, controls)


    def isControlled(self):
        """
        isControlled(Model self) -> bool

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_isControlled(self)


    def storeControls(self, s, step):
        """
        storeControls(Model self, State s, int step)

        Parameters:
            s: SimTK::State const &
            step: int

        """
        return _opensim.Model_storeControls(self, s, step)


    def printControlStorage(self, fileName):
        """
        printControlStorage(Model self, std::string const & fileName)

        Parameters:
            fileName: std::string const &

        """
        return _opensim.Model_printControlStorage(self, fileName)


    def getControllerSet(self):
        """
        getControllerSet(Model self) -> ControllerSet

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getControllerSet(self)


    def updControllerSet(self):
        """
        updControllerSet(Model self) -> ControllerSet

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_updControllerSet(self)


    def getAllControllersEnabled(self):
        """
        getAllControllersEnabled(Model self) -> bool

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getAllControllersEnabled(self)


    def setAllControllersEnabled(self, enabled):
        """
        setAllControllersEnabled(Model self, bool enabled)

        Parameters:
            enabled: bool

        """
        return _opensim.Model_setAllControllersEnabled(self, enabled)


    def applyDefaultConfiguration(self, s):
        """
        applyDefaultConfiguration(Model self, State s)

        Parameters:
            s: SimTK::State &

        """
        return _opensim.Model_applyDefaultConfiguration(self, s)


    def getSimbodyEngine(self):
        """
        getSimbodyEngine(Model self) -> SimbodyEngine

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getSimbodyEngine(self)


    def updSimbodyEngine(self):
        """
        updSimbodyEngine(Model self) -> SimbodyEngine

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_updSimbodyEngine(self)


    def computeStateVariableDerivatives(self, s):
        """
        computeStateVariableDerivatives(Model self, State s) -> Vector

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Model_computeStateVariableDerivatives(self, s)


    def getTotalMass(self, s):
        """
        getTotalMass(Model self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Model_getTotalMass(self, s)


    def getInertiaAboutMassCenter(self, s):
        """
        getInertiaAboutMassCenter(Model self, State s) -> Inertia

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Model_getInertiaAboutMassCenter(self, s)


    def calcMassCenterPosition(self, s):
        """
        calcMassCenterPosition(Model self, State s) -> Vec3

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Model_calcMassCenterPosition(self, s)


    def calcMassCenterVelocity(self, s):
        """
        calcMassCenterVelocity(Model self, State s) -> Vec3

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Model_calcMassCenterVelocity(self, s)


    def calcMassCenterAcceleration(self, s):
        """
        calcMassCenterAcceleration(Model self, State s) -> Vec3

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Model_calcMassCenterAcceleration(self, s)


    def getStateValues(self, *args):
        """
        getStateValues(Model self, State state, ArrayDouble stateValues)

        Parameters:
            state: SimTK::State const &
            stateValues: OpenSim::Array< double > &

        getStateValues(Model self, State s) -> Vector

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Model_getStateValues(self, *args)


    def setStateValues(self, state, stateValues):
        """
        setStateValues(Model self, State state, double const * stateValues)

        Parameters:
            state: SimTK::State &
            stateValues: double const *

        """
        return _opensim.Model_setStateValues(self, state, stateValues)


    def getNumMuscleStates(self):
        """
        getNumMuscleStates(Model self) -> int

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getNumMuscleStates(self)


    def getNumProbeStates(self):
        """
        getNumProbeStates(Model self) -> int

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getNumProbeStates(self)


    def updCoordinateSet(self):
        """
        updCoordinateSet(Model self) -> CoordinateSet

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_updCoordinateSet(self)


    def getCoordinateSet(self):
        """
        getCoordinateSet(Model self) -> CoordinateSet

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getCoordinateSet(self)


    def updBodySet(self):
        """
        updBodySet(Model self) -> BodySet

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_updBodySet(self)


    def getBodySet(self):
        """
        getBodySet(Model self) -> BodySet

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getBodySet(self)


    def updJointSet(self):
        """
        updJointSet(Model self) -> JointSet

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_updJointSet(self)


    def getJointSet(self):
        """
        getJointSet(Model self) -> JointSet

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getJointSet(self)


    def updAnalysisSet(self):
        """
        updAnalysisSet(Model self) -> AnalysisSet

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_updAnalysisSet(self)


    def getAnalysisSet(self):
        """
        getAnalysisSet(Model self) -> AnalysisSet

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getAnalysisSet(self)


    def updContactGeometrySet(self):
        """
        updContactGeometrySet(Model self) -> ContactGeometrySet

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_updContactGeometrySet(self)


    def getContactGeometrySet(self):
        """
        getContactGeometrySet(Model self) -> ContactGeometrySet

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getContactGeometrySet(self)


    def getGroundBody(self):
        """
        getGroundBody(Model self) -> Body

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getGroundBody(self)


    def updConstraintSet(self):
        """
        updConstraintSet(Model self) -> ConstraintSet

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_updConstraintSet(self)


    def getConstraintSet(self):
        """
        getConstraintSet(Model self) -> ConstraintSet

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getConstraintSet(self)


    def updMarkerSet(self):
        """
        updMarkerSet(Model self) -> MarkerSet

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_updMarkerSet(self)


    def getMarkerSet(self):
        """
        getMarkerSet(Model self) -> MarkerSet

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getMarkerSet(self)


    def replaceMarkerSet(self, s, aMarkerSet):
        """
        replaceMarkerSet(Model self, State s, MarkerSet aMarkerSet) -> int

        Parameters:
            s: SimTK::State const &
            aMarkerSet: OpenSim::MarkerSet &

        """
        return _opensim.Model_replaceMarkerSet(self, s, aMarkerSet)


    def writeMarkerFile(self, aFileName):
        """
        writeMarkerFile(Model self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.Model_writeMarkerFile(self, aFileName)


    def updateMarkerSet(self, aMarkerSet):
        """
        updateMarkerSet(Model self, MarkerSet aMarkerSet)

        Parameters:
            aMarkerSet: OpenSim::MarkerSet &

        """
        return _opensim.Model_updateMarkerSet(self, aMarkerSet)


    def deleteUnusedMarkers(self, aMarkerNames):
        """
        deleteUnusedMarkers(Model self, ArrayStr aMarkerNames) -> int

        Parameters:
            aMarkerNames: OpenSim::Array< std::string > const &

        """
        return _opensim.Model_deleteUnusedMarkers(self, aMarkerNames)


    def addAnalysis(self, analysis):
        """
        addAnalysis(Model self, Analysis analysis)

        Parameters:
            analysis: OpenSim::Analysis *

        """
        val = _opensim.Model_addAnalysis(self, analysis)
        args[0]._markAdopted()


        return val


    def addController(self, aController):
        """
        addController(Model self, Controller aController)

        Parameters:
            aController: OpenSim::Controller *

        """
        val = _opensim.Model_addController(self, aController)
        args[0]._markAdopted()


        return val


    def removeAnalysis(self, analysis, deleteIt=True):
        """
        removeAnalysis(Model self, Analysis analysis, bool deleteIt=True)

        Parameters:
            analysis: OpenSim::Analysis *
            deleteIt: bool

        removeAnalysis(Model self, Analysis analysis)

        Parameters:
            analysis: OpenSim::Analysis *

        """
        return _opensim.Model_removeAnalysis(self, analysis, deleteIt)


    def removeController(self, aController):
        """
        removeController(Model self, Controller aController)

        Parameters:
            aController: OpenSim::Controller *

        """
        return _opensim.Model_removeController(self, aController)


    def scale(self, state, scaleSet, finalMass=-1.0, preserveMassDist=False):
        """
        scale(Model self, State state, ScaleSet scaleSet, double finalMass=-1.0, bool preserveMassDist=False) -> bool

        Parameters:
            state: SimTK::State &
            scaleSet: OpenSim::ScaleSet const &
            finalMass: double
            preserveMassDist: bool

        scale(Model self, State state, ScaleSet scaleSet, double finalMass=-1.0) -> bool

        Parameters:
            state: SimTK::State &
            scaleSet: OpenSim::ScaleSet const &
            finalMass: double

        scale(Model self, State state, ScaleSet scaleSet) -> bool

        Parameters:
            state: SimTK::State &
            scaleSet: OpenSim::ScaleSet const &

        """
        return _opensim.Model_scale(self, state, scaleSet, finalMass, preserveMassDist)


    def printBasicInfo(self, aOStream):
        """
        printBasicInfo(Model self, std::ostream & aOStream)

        Parameters:
            aOStream: std::ostream &

        """
        return _opensim.Model_printBasicInfo(self, aOStream)


    def printDetailedInfo(self, s, aOStream):
        """
        printDetailedInfo(Model self, State s, std::ostream & aOStream)

        Parameters:
            s: SimTK::State const &
            aOStream: std::ostream &

        """
        return _opensim.Model_printDetailedInfo(self, s, aOStream)


    def disownAllComponents(self):
        """
        disownAllComponents(Model self)

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_disownAllComponents(self)


    def overrideAllActuators(self, s, flag):
        """
        overrideAllActuators(Model self, State s, bool flag)

        Parameters:
            s: SimTK::State &
            flag: bool

        """
        return _opensim.Model_overrideAllActuators(self, s, flag)


    def getValidationLog(self):
        """
        getValidationLog(Model self) -> std::string const &

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_getValidationLog(self)


    def clearValidationLog(self):
        """
        clearValidationLog(Model self)

        Parameters:
            self: OpenSim::Model *

        """
        return _opensim.Model_clearValidationLog(self)


    def getObjectByTypeAndName(self, typeString, nameString):
        """
        getObjectByTypeAndName(Model self, std::string const & typeString, std::string const & nameString) -> OpenSimObject

        Parameters:
            typeString: std::string const &
            nameString: std::string const &

        """
        return _opensim.Model_getObjectByTypeAndName(self, typeString, nameString)

    __swig_destroy__ = _opensim.delete_Model
    __del__ = lambda self: None

    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(Model self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters:
            aNode: SimTK::Xml::Element &
            versionNumber: int

        updateFromXMLNode(Model self, SimTK::Xml::Element & aNode)

        Parameters:
            aNode: SimTK::Xml::Element &

        """
        return _opensim.Model_updateFromXMLNode(self, aNode, versionNumber)


    def connectToModel(self, model):
        """
        connectToModel(Model self, Model model)

        Parameters:
            model: OpenSim::Model &

        """
        return _opensim.Model_connectToModel(self, model)


    def addToSystem(self, system):
        """
        addToSystem(Model self, SimTK::MultibodySystem & system)

        Parameters:
            system: SimTK::MultibodySystem &

        """
        return _opensim.Model_addToSystem(self, system)


    def initStateFromProperties(self, state):
        """
        initStateFromProperties(Model self, State state)

        Parameters:
            state: SimTK::State &

        """
        return _opensim.Model_initStateFromProperties(self, state)


    def setPropertiesFromState(self, state):
        """
        setPropertiesFromState(Model self, State state)

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.Model_setPropertiesFromState(self, state)


    def generateDecorations(self, fixed, hints, state, appendToThis):
        """
        generateDecorations(Model self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters:
            fixed: bool
            hints: OpenSim::ModelDisplayHints const &
            state: SimTK::State const &
            appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _opensim.Model_generateDecorations(self, fixed, hints, state, appendToThis)


    def getStateVariableNames(self):
        """
        getStateVariableNames(Model self) -> ArrayStr

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getStateVariableNames(self)


    def getStateVariableSystemIndices(self):
        """
        getStateVariableSystemIndices(Model self) -> ArrayInt

        Parameters:
            self: OpenSim::Model const *

        """
        return _opensim.Model_getStateVariableSystemIndices(self)


    def getStateVariable(self, s, name):
        """
        getStateVariable(Model self, State s, std::string const & name) -> double

        Parameters:
            s: SimTK::State const &
            name: std::string const &

        """
        return _opensim.Model_getStateVariable(self, s, name)


    def setStateVariable(self, s, name, value):
        """
        setStateVariable(Model self, State s, std::string const & name, double value)

        Parameters:
            s: SimTK::State &
            name: std::string const &
            value: double

        """
        return _opensim.Model_setStateVariable(self, s, name, value)


    def getStateVariableSystemIndex(self, stateVariableName):
        """
        getStateVariableSystemIndex(Model self, std::string const & stateVariableName) -> SimTK::SystemYIndex

        Parameters:
            stateVariableName: std::string const &

        """
        return _opensim.Model_getStateVariableSystemIndex(self, stateVariableName)

Model_swigregister = _opensim.Model_swigregister
Model_swigregister(Model)

def Model_safeDownCast(obj):
    """
    Model_safeDownCast(OpenSimObject obj) -> Model

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Model_safeDownCast(obj)

def Model_getClassName():
    """Model_getClassName() -> std::string const &"""
    return _opensim.Model_getClassName()

class PathPoint(OpenSimObject):
    """Proxy of C++ OpenSim::PathPoint class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PathPoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PathPoint

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.PathPoint_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(PathPoint self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.PathPoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.PathPoint_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(PathPoint self) -> PathPoint

        Parameters:
            self: OpenSim::PathPoint const *

        """
        return _opensim.PathPoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PathPoint self) -> std::string const &

        Parameters:
            self: OpenSim::PathPoint const *

        """
        return _opensim.PathPoint_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::PathPoint self) -> PathPoint
        __init__(OpenSim::PathPoint self, PathPoint aPoint) -> PathPoint

        Parameters:
            aPoint: OpenSim::PathPoint const &

        """
        this = _opensim.new_PathPoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_PathPoint
    __del__ = lambda self: None

    def copyData(self, aPoint):
        """
        copyData(PathPoint self, PathPoint aPoint)

        Parameters:
            aPoint: OpenSim::PathPoint const &

        """
        return _opensim.PathPoint_copyData(self, aPoint)


    def init(self, aPoint):
        """
        init(PathPoint self, PathPoint aPoint)

        Parameters:
            aPoint: OpenSim::PathPoint const &

        """
        return _opensim.PathPoint_init(self, aPoint)


    def getLocation(self):
        """
        getLocation(PathPoint self) -> Vec3

        Parameters:
            self: OpenSim::PathPoint *

        """
        return _opensim.PathPoint_getLocation(self)


    def getLocationCoord(self, aXYZ):
        """
        getLocationCoord(PathPoint self, int aXYZ) -> double const &

        Parameters:
            aXYZ: int

        """
        return _opensim.PathPoint_getLocationCoord(self, aXYZ)


    def setLocationCoord(self, aXYZ, aValue):
        """
        setLocationCoord(PathPoint self, int aXYZ, double aValue)

        Parameters:
            aXYZ: int
            aValue: double

        """
        return _opensim.PathPoint_setLocationCoord(self, aXYZ, aValue)


    def setLocation(self, *args):
        """
        setLocation(PathPoint self, State s, Vec3 aLocation)

        Parameters:
            s: SimTK::State const &
            aLocation: SimTK::Vec3 const &

        setLocation(PathPoint self, State s, int aCoordIndex, double aLocation)

        Parameters:
            s: SimTK::State const &
            aCoordIndex: int
            aLocation: double

        setLocation(PathPoint self, State s, double [] pt)

        Parameters:
            s: SimTK::State const &
            pt: double []

        """
        return _opensim.PathPoint_setLocation(self, *args)


    def setBody(self, aBody):
        """
        setBody(PathPoint self, Body aBody)

        Parameters:
            aBody: OpenSim::Body &

        """
        return _opensim.PathPoint_setBody(self, aBody)


    def changeBodyPreserveLocation(self, s, aBody):
        """
        changeBodyPreserveLocation(PathPoint self, State s, Body aBody)

        Parameters:
            s: SimTK::State const &
            aBody: OpenSim::Body &

        """
        return _opensim.PathPoint_changeBodyPreserveLocation(self, s, aBody)


    def getBody(self):
        """
        getBody(PathPoint self) -> Body

        Parameters:
            self: OpenSim::PathPoint const *

        """
        return _opensim.PathPoint_getBody(self)


    def getBodyName(self):
        """
        getBodyName(PathPoint self) -> std::string const &

        Parameters:
            self: OpenSim::PathPoint const *

        """
        return _opensim.PathPoint_getBodyName(self)


    def getPath(self):
        """
        getPath(PathPoint self) -> GeometryPath

        Parameters:
            self: OpenSim::PathPoint const *

        """
        return _opensim.PathPoint_getPath(self)


    def scale(self, s, aScaleFactors):
        """
        scale(PathPoint self, State s, Vec3 aScaleFactors)

        Parameters:
            s: SimTK::State const &
            aScaleFactors: SimTK::Vec3 const &

        """
        return _opensim.PathPoint_scale(self, s, aScaleFactors)


    def getWrapObject(self):
        """
        getWrapObject(PathPoint self) -> WrapObject

        Parameters:
            self: OpenSim::PathPoint const *

        """
        return _opensim.PathPoint_getWrapObject(self)


    def isActive(self, s):
        """
        isActive(PathPoint self, State s) -> bool

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.PathPoint_isActive(self, s)


    def connectToModelAndPath(self, aModel, aPath):
        """
        connectToModelAndPath(PathPoint self, Model aModel, GeometryPath aPath)

        Parameters:
            aModel: OpenSim::Model const &
            aPath: OpenSim::GeometryPath &

        """
        return _opensim.PathPoint_connectToModelAndPath(self, aModel, aPath)


    def update(self, s):
        """
        update(PathPoint self, State s)

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.PathPoint_update(self, s)


    def getVelocity(self, s, aVelocity):
        """
        getVelocity(PathPoint self, State s, Vec3 aVelocity)

        Parameters:
            s: SimTK::State const &
            aVelocity: SimTK::Vec3 &

        """
        return _opensim.PathPoint_getVelocity(self, s, aVelocity)


    def getdPointdQ(self, s):
        """
        getdPointdQ(PathPoint self, State s) -> Vec3

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.PathPoint_getdPointdQ(self, s)


    def getDisplayer(self):
        """
        getDisplayer(PathPoint self) -> VisibleObject

        Parameters:
            self: OpenSim::PathPoint const *

        """
        return _opensim.PathPoint_getDisplayer(self)


    def updDisplayer(self):
        """
        updDisplayer(PathPoint self) -> VisibleObject

        Parameters:
            self: OpenSim::PathPoint *

        """
        return _opensim.PathPoint_updDisplayer(self)


    def updateGeometry(self):
        """
        updateGeometry(PathPoint self)

        Parameters:
            self: OpenSim::PathPoint *

        """
        return _opensim.PathPoint_updateGeometry(self)


    def makePathPointOfType(aPoint, aNewTypeName):
        """
        makePathPointOfType(PathPoint aPoint, std::string const & aNewTypeName) -> PathPoint

        Parameters:
            aPoint: OpenSim::PathPoint *
            aNewTypeName: std::string const &

        """
        return _opensim.PathPoint_makePathPointOfType(aPoint, aNewTypeName)

    if _newclass:
        makePathPointOfType = staticmethod(makePathPointOfType)
    __swig_getmethods__["makePathPointOfType"] = lambda x: makePathPointOfType

    def deletePathPoint(aPoint):
        """
        deletePathPoint(PathPoint aPoint)

        Parameters:
            aPoint: OpenSim::PathPoint *

        """
        return _opensim.PathPoint_deletePathPoint(aPoint)

    if _newclass:
        deletePathPoint = staticmethod(deletePathPoint)
    __swig_getmethods__["deletePathPoint"] = lambda x: deletePathPoint
PathPoint_swigregister = _opensim.PathPoint_swigregister
PathPoint_swigregister(PathPoint)

def PathPoint_safeDownCast(obj):
    """
    PathPoint_safeDownCast(OpenSimObject obj) -> PathPoint

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.PathPoint_safeDownCast(obj)

def PathPoint_getClassName():
    """PathPoint_getClassName() -> std::string const &"""
    return _opensim.PathPoint_getClassName()

def PathPoint_makePathPointOfType(aPoint, aNewTypeName):
    """
    PathPoint_makePathPointOfType(PathPoint aPoint, std::string const & aNewTypeName) -> PathPoint

    Parameters:
        aPoint: OpenSim::PathPoint *
        aNewTypeName: std::string const &

    """
    return _opensim.PathPoint_makePathPointOfType(aPoint, aNewTypeName)

def PathPoint_deletePathPoint(aPoint):
    """
    PathPoint_deletePathPoint(PathPoint aPoint)

    Parameters:
        aPoint: OpenSim::PathPoint *

    """
    return _opensim.PathPoint_deletePathPoint(aPoint)

class PathWrapPoint(PathPoint):
    """Proxy of C++ OpenSim::PathWrapPoint class"""
    __swig_setmethods__ = {}
    for _s in [PathPoint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathWrapPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [PathPoint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PathWrapPoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PathWrapPoint

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.PathWrapPoint_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(PathWrapPoint self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.PathWrapPoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.PathWrapPoint_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(PathWrapPoint self) -> PathWrapPoint

        Parameters:
            self: OpenSim::PathWrapPoint const *

        """
        return _opensim.PathWrapPoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PathWrapPoint self) -> std::string const &

        Parameters:
            self: OpenSim::PathWrapPoint const *

        """
        return _opensim.PathWrapPoint_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::PathWrapPoint self) -> PathWrapPoint
        __init__(OpenSim::PathWrapPoint self, PathWrapPoint aPoint) -> PathWrapPoint

        Parameters:
            aPoint: OpenSim::PathWrapPoint const &

        """
        this = _opensim.new_PathWrapPoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_PathWrapPoint
    __del__ = lambda self: None

    def copyData(self, aPoint):
        """
        copyData(PathWrapPoint self, PathWrapPoint aPoint)

        Parameters:
            aPoint: OpenSim::PathWrapPoint const &

        """
        return _opensim.PathWrapPoint_copyData(self, aPoint)


    def getWrapPath(self):
        """
        getWrapPath(PathWrapPoint self) -> OpenSim::Array< SimTK::Vec3 > &

        Parameters:
            self: OpenSim::PathWrapPoint *

        """
        return _opensim.PathWrapPoint_getWrapPath(self)


    def getWrapLength(self):
        """
        getWrapLength(PathWrapPoint self) -> double

        Parameters:
            self: OpenSim::PathWrapPoint const *

        """
        return _opensim.PathWrapPoint_getWrapLength(self)


    def setWrapLength(self, aLength):
        """
        setWrapLength(PathWrapPoint self, double aLength)

        Parameters:
            aLength: double

        """
        return _opensim.PathWrapPoint_setWrapLength(self, aLength)


    def getWrapObject(self):
        """
        getWrapObject(PathWrapPoint self) -> WrapObject

        Parameters:
            self: OpenSim::PathWrapPoint const *

        """
        return _opensim.PathWrapPoint_getWrapObject(self)


    def setWrapObject(self, aWrapObject):
        """
        setWrapObject(PathWrapPoint self, WrapObject aWrapObject)

        Parameters:
            aWrapObject: OpenSim::WrapObject *

        """
        return _opensim.PathWrapPoint_setWrapObject(self, aWrapObject)

PathWrapPoint_swigregister = _opensim.PathWrapPoint_swigregister
PathWrapPoint_swigregister(PathWrapPoint)

def PathWrapPoint_safeDownCast(obj):
    """
    PathWrapPoint_safeDownCast(OpenSimObject obj) -> PathWrapPoint

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.PathWrapPoint_safeDownCast(obj)

def PathWrapPoint_getClassName():
    """PathWrapPoint_getClassName() -> std::string const &"""
    return _opensim.PathWrapPoint_getClassName()

class ConditionalPathPoint(PathPoint):
    """Proxy of C++ OpenSim::ConditionalPathPoint class"""
    __swig_setmethods__ = {}
    for _s in [PathPoint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConditionalPathPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [PathPoint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConditionalPathPoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ConditionalPathPoint

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ConditionalPathPoint_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ConditionalPathPoint self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ConditionalPathPoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ConditionalPathPoint_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ConditionalPathPoint self) -> ConditionalPathPoint

        Parameters:
            self: OpenSim::ConditionalPathPoint const *

        """
        return _opensim.ConditionalPathPoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ConditionalPathPoint self) -> std::string const &

        Parameters:
            self: OpenSim::ConditionalPathPoint const *

        """
        return _opensim.ConditionalPathPoint_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ConditionalPathPoint self) -> ConditionalPathPoint
        __init__(OpenSim::ConditionalPathPoint self, ConditionalPathPoint aPoint) -> ConditionalPathPoint

        Parameters:
            aPoint: OpenSim::ConditionalPathPoint const &

        """
        this = _opensim.new_ConditionalPathPoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_ConditionalPathPoint
    __del__ = lambda self: None

    def copyData(self, aPoint):
        """
        copyData(ConditionalPathPoint self, ConditionalPathPoint aPoint)

        Parameters:
            aPoint: OpenSim::ConditionalPathPoint const &

        """
        return _opensim.ConditionalPathPoint_copyData(self, aPoint)


    def init(self, aPoint):
        """
        init(ConditionalPathPoint self, PathPoint aPoint)

        Parameters:
            aPoint: OpenSim::PathPoint const &

        """
        return _opensim.ConditionalPathPoint_init(self, aPoint)


    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(ConditionalPathPoint self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters:
            aNode: SimTK::Xml::Element &
            versionNumber: int

        updateFromXMLNode(ConditionalPathPoint self, SimTK::Xml::Element & aNode)

        Parameters:
            aNode: SimTK::Xml::Element &

        """
        return _opensim.ConditionalPathPoint_updateFromXMLNode(self, aNode, versionNumber)


    def getRange(self):
        """
        getRange(ConditionalPathPoint self) -> ArrayDouble

        Parameters:
            self: OpenSim::ConditionalPathPoint const *

        """
        return _opensim.ConditionalPathPoint_getRange(self)


    def getCoordinate(self):
        """
        getCoordinate(ConditionalPathPoint self) -> Coordinate

        Parameters:
            self: OpenSim::ConditionalPathPoint const *

        """
        return _opensim.ConditionalPathPoint_getCoordinate(self)


    def getCoordinateName(self):
        """
        getCoordinateName(ConditionalPathPoint self) -> std::string const &

        Parameters:
            self: OpenSim::ConditionalPathPoint const *

        """
        return _opensim.ConditionalPathPoint_getCoordinateName(self)

ConditionalPathPoint_swigregister = _opensim.ConditionalPathPoint_swigregister
ConditionalPathPoint_swigregister(ConditionalPathPoint)

def ConditionalPathPoint_safeDownCast(obj):
    """
    ConditionalPathPoint_safeDownCast(OpenSimObject obj) -> ConditionalPathPoint

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ConditionalPathPoint_safeDownCast(obj)

def ConditionalPathPoint_getClassName():
    """ConditionalPathPoint_getClassName() -> std::string const &"""
    return _opensim.ConditionalPathPoint_getClassName()

class MovingPathPoint(PathPoint):
    """Proxy of C++ OpenSim::MovingPathPoint class"""
    __swig_setmethods__ = {}
    for _s in [PathPoint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MovingPathPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [PathPoint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MovingPathPoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MovingPathPoint

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.MovingPathPoint_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(MovingPathPoint self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.MovingPathPoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.MovingPathPoint_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(MovingPathPoint self) -> MovingPathPoint

        Parameters:
            self: OpenSim::MovingPathPoint const *

        """
        return _opensim.MovingPathPoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MovingPathPoint self) -> std::string const &

        Parameters:
            self: OpenSim::MovingPathPoint const *

        """
        return _opensim.MovingPathPoint_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::MovingPathPoint self) -> MovingPathPoint
        __init__(OpenSim::MovingPathPoint self, MovingPathPoint aPoint) -> MovingPathPoint

        Parameters:
            aPoint: OpenSim::MovingPathPoint const &

        """
        this = _opensim.new_MovingPathPoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_MovingPathPoint
    __del__ = lambda self: None

    def copyData(self, aPoint):
        """
        copyData(MovingPathPoint self, MovingPathPoint aPoint)

        Parameters:
            aPoint: OpenSim::MovingPathPoint const &

        """
        return _opensim.MovingPathPoint_copyData(self, aPoint)


    def updateFromXMLNode(self, aNode, versionNumber):
        """
        updateFromXMLNode(MovingPathPoint self, SimTK::Xml::Element & aNode, int versionNumber)

        Parameters:
            aNode: SimTK::Xml::Element &
            versionNumber: int

        """
        return _opensim.MovingPathPoint_updateFromXMLNode(self, aNode, versionNumber)


    def init(self, aPoint):
        """
        init(MovingPathPoint self, PathPoint aPoint)

        Parameters:
            aPoint: OpenSim::PathPoint const &

        """
        return _opensim.MovingPathPoint_init(self, aPoint)


    def getXCoordinate(self):
        """
        getXCoordinate(MovingPathPoint self) -> Coordinate

        Parameters:
            self: OpenSim::MovingPathPoint const *

        """
        return _opensim.MovingPathPoint_getXCoordinate(self)


    def getYCoordinate(self):
        """
        getYCoordinate(MovingPathPoint self) -> Coordinate

        Parameters:
            self: OpenSim::MovingPathPoint const *

        """
        return _opensim.MovingPathPoint_getYCoordinate(self)


    def getZCoordinate(self):
        """
        getZCoordinate(MovingPathPoint self) -> Coordinate

        Parameters:
            self: OpenSim::MovingPathPoint const *

        """
        return _opensim.MovingPathPoint_getZCoordinate(self)


    def getdPointdQ(self, s):
        """
        getdPointdQ(MovingPathPoint self, State s) -> Vec3

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.MovingPathPoint_getdPointdQ(self, s)


    def getXCoordinateName(self):
        """
        getXCoordinateName(MovingPathPoint self) -> std::string const &

        Parameters:
            self: OpenSim::MovingPathPoint const *

        """
        return _opensim.MovingPathPoint_getXCoordinateName(self)


    def getYCoordinateName(self):
        """
        getYCoordinateName(MovingPathPoint self) -> std::string const &

        Parameters:
            self: OpenSim::MovingPathPoint const *

        """
        return _opensim.MovingPathPoint_getYCoordinateName(self)


    def getZCoordinateName(self):
        """
        getZCoordinateName(MovingPathPoint self) -> std::string const &

        Parameters:
            self: OpenSim::MovingPathPoint const *

        """
        return _opensim.MovingPathPoint_getZCoordinateName(self)


    def getXFunction(self):
        """
        getXFunction(MovingPathPoint self) -> Function

        Parameters:
            self: OpenSim::MovingPathPoint const *

        """
        return _opensim.MovingPathPoint_getXFunction(self)


    def getYFunction(self):
        """
        getYFunction(MovingPathPoint self) -> Function

        Parameters:
            self: OpenSim::MovingPathPoint const *

        """
        return _opensim.MovingPathPoint_getYFunction(self)


    def getZFunction(self):
        """
        getZFunction(MovingPathPoint self) -> Function

        Parameters:
            self: OpenSim::MovingPathPoint const *

        """
        return _opensim.MovingPathPoint_getZFunction(self)


    def scale(self, s, aScaleFactors):
        """
        scale(MovingPathPoint self, State s, Vec3 aScaleFactors)

        Parameters:
            s: SimTK::State const &
            aScaleFactors: SimTK::Vec3 const &

        """
        return _opensim.MovingPathPoint_scale(self, s, aScaleFactors)

MovingPathPoint_swigregister = _opensim.MovingPathPoint_swigregister
MovingPathPoint_swigregister(MovingPathPoint)

def MovingPathPoint_safeDownCast(obj):
    """
    MovingPathPoint_safeDownCast(OpenSimObject obj) -> MovingPathPoint

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.MovingPathPoint_safeDownCast(obj)

def MovingPathPoint_getClassName():
    """MovingPathPoint_getClassName() -> std::string const &"""
    return _opensim.MovingPathPoint_getClassName()

class SetPathPoint(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::PathPoint)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetPathPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetPathPoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetPathPoint

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetPathPoint_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetPathPoint self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetPathPoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetPathPoint_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetPathPoint self) -> SetPathPoint

        Parameters:
            self: OpenSim::Set< OpenSim::PathPoint > const *

        """
        return _opensim.SetPathPoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetPathPoint self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::PathPoint > const *

        """
        return _opensim.SetPathPoint_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetPathPoint
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::PathPoint)> self) -> SetPathPoint
        __init__(OpenSim::Set<(OpenSim::PathPoint)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetPathPoint

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::PathPoint)> self, std::string const & aFileName) -> SetPathPoint

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::PathPoint)> self, SetPathPoint aSet) -> SetPathPoint

        Parameters:
            aSet: OpenSim::Set< OpenSim::PathPoint > const &

        """
        this = _opensim.new_SetPathPoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetPathPoint self)

        Parameters:
            self: OpenSim::Set< OpenSim::PathPoint > *

        """
        return _opensim.SetPathPoint_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetPathPoint self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetPathPoint_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetPathPoint self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetPathPoint_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetPathPoint self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::PathPoint > const *

        """
        return _opensim.SetPathPoint_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetPathPoint self, PathPoint aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::PathPoint const *
            aStartIndex: int

        getIndex(SetPathPoint self, PathPoint aObject) -> int

        Parameters:
            aObject: OpenSim::PathPoint const *

        getIndex(SetPathPoint self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetPathPoint self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetPathPoint_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetPathPoint self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetPathPoint_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetPathPoint self, PathPoint aObject) -> bool

        Parameters:
            aObject: OpenSim::PathPoint *

        """
        return _opensim.SetPathPoint_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetPathPoint self, PathPoint aObject) -> bool

        Parameters:
            aObject: OpenSim::PathPoint const &

        """
        return _opensim.SetPathPoint_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetPathPoint self, int aIndex, PathPoint aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::PathPoint *

        """
        return _opensim.SetPathPoint_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetPathPoint self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetPathPoint self, PathPoint aObject) -> bool

        Parameters:
            aObject: OpenSim::PathPoint const *

        """
        return _opensim.SetPathPoint_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetPathPoint self)

        Parameters:
            self: OpenSim::Set< OpenSim::PathPoint > *

        """
        return _opensim.SetPathPoint_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetPathPoint self, int aIndex, PathPoint aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::PathPoint *
            preserveGroups: bool

        set(SetPathPoint self, int aIndex, PathPoint aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::PathPoint *

        """
        return _opensim.SetPathPoint_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetPathPoint self, int aIndex) -> PathPoint

        Parameters:
            aIndex: int

        get(SetPathPoint self, std::string const & aName) -> PathPoint

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetPathPoint_get(self, *args)


    def contains(self, aName):
        """
        contains(SetPathPoint self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetPathPoint_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetPathPoint self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetPathPoint_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetPathPoint self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::PathPoint > const *

        """
        return _opensim.SetPathPoint_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetPathPoint self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetPathPoint_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetPathPoint self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetPathPoint_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetPathPoint self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetPathPoint_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetPathPoint self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetPathPoint_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetPathPoint self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetPathPoint_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetPathPoint self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetPathPoint self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetPathPoint_getGroup(self, *args)

SetPathPoint_swigregister = _opensim.SetPathPoint_swigregister
SetPathPoint_swigregister(SetPathPoint)

def SetPathPoint_safeDownCast(obj):
    """
    SetPathPoint_safeDownCast(OpenSimObject obj) -> SetPathPoint

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetPathPoint_safeDownCast(obj)

def SetPathPoint_getClassName():
    """SetPathPoint_getClassName() -> std::string const &"""
    return _opensim.SetPathPoint_getClassName()

class ArrayPathPoint(_object):
    """Proxy of C++ OpenSim::Array<(p.OpenSim::PathPoint)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayPathPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayPathPoint, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _opensim.delete_ArrayPathPoint
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Array<(p.OpenSim::PathPoint)> self, PathPoint aDefaultValue, int aSize=0, int aCapacity) -> ArrayPathPoint

        Parameters:
            aDefaultValue: OpenSim::PathPoint *const &
            aSize: int
            aCapacity: int

        __init__(OpenSim::Array<(p.OpenSim::PathPoint)> self, PathPoint aDefaultValue, int aSize=0) -> ArrayPathPoint

        Parameters:
            aDefaultValue: OpenSim::PathPoint *const &
            aSize: int

        __init__(OpenSim::Array<(p.OpenSim::PathPoint)> self, PathPoint aDefaultValue) -> ArrayPathPoint

        Parameters:
            aDefaultValue: OpenSim::PathPoint *const &

        __init__(OpenSim::Array<(p.OpenSim::PathPoint)> self) -> ArrayPathPoint
        __init__(OpenSim::Array<(p.OpenSim::PathPoint)> self, ArrayPathPoint aArray) -> ArrayPathPoint

        Parameters:
            aArray: OpenSim::Array< OpenSim::PathPoint * > const &

        """
        this = _opensim.new_ArrayPathPoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def arrayEquals(self, aArray):
        """
        arrayEquals(ArrayPathPoint self, ArrayPathPoint aArray) -> bool

        Parameters:
            aArray: OpenSim::Array< OpenSim::PathPoint * > const &

        """
        return _opensim.ArrayPathPoint_arrayEquals(self, aArray)


    def trim(self):
        """
        trim(ArrayPathPoint self)

        Parameters:
            self: OpenSim::Array< OpenSim::PathPoint * > *

        """
        return _opensim.ArrayPathPoint_trim(self)


    def setSize(self, aSize):
        """
        setSize(ArrayPathPoint self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.ArrayPathPoint_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayPathPoint self) -> int

        Parameters:
            self: OpenSim::Array< OpenSim::PathPoint * > const *

        """
        return _opensim.ArrayPathPoint_getSize(self)


    def size(self):
        """
        size(ArrayPathPoint self) -> int

        Parameters:
            self: OpenSim::Array< OpenSim::PathPoint * > const *

        """
        return _opensim.ArrayPathPoint_size(self)


    def append(self, *args):
        """
        append(ArrayPathPoint self, PathPoint aValue) -> int

        Parameters:
            aValue: OpenSim::PathPoint *const &

        append(ArrayPathPoint self, ArrayPathPoint aArray) -> int

        Parameters:
            aArray: OpenSim::Array< OpenSim::PathPoint * > const &

        """
        return _opensim.ArrayPathPoint_append(self, *args)


    def insert(self, aIndex, aValue):
        """
        insert(ArrayPathPoint self, int aIndex, PathPoint aValue) -> int

        Parameters:
            aIndex: int
            aValue: OpenSim::PathPoint *const &

        """
        return _opensim.ArrayPathPoint_insert(self, aIndex, aValue)


    def remove(self, aIndex):
        """
        remove(ArrayPathPoint self, int aIndex) -> int

        Parameters:
            aIndex: int

        """
        return _opensim.ArrayPathPoint_remove(self, aIndex)


    def set(self, aIndex, aValue):
        """
        set(ArrayPathPoint self, int aIndex, PathPoint aValue)

        Parameters:
            aIndex: int
            aValue: OpenSim::PathPoint *const &

        """
        return _opensim.ArrayPathPoint_set(self, aIndex, aValue)


    def get(self, aIndex):
        """
        get(ArrayPathPoint self, int aIndex) -> PathPoint

        Parameters:
            aIndex: int

        """
        return _opensim.ArrayPathPoint_get(self, aIndex)


    def getitem(self, index):
        """
        getitem(ArrayPathPoint self, int index) -> PathPoint

        Parameters:
            index: int

        """
        return _opensim.ArrayPathPoint_getitem(self, index)


    def setitem(self, index, val):
        """
        setitem(ArrayPathPoint self, int index, PathPoint val)

        Parameters:
            index: int
            val: OpenSim::PathPoint *

        """
        return _opensim.ArrayPathPoint_setitem(self, index, val)


    def getLast(self):
        """
        getLast(ArrayPathPoint self) -> PathPoint

        Parameters:
            self: OpenSim::Array< OpenSim::PathPoint * > const *

        """
        return _opensim.ArrayPathPoint_getLast(self)


    def findIndex(self, aValue):
        """
        findIndex(ArrayPathPoint self, PathPoint aValue) -> int

        Parameters:
            aValue: OpenSim::PathPoint *const &

        """
        return _opensim.ArrayPathPoint_findIndex(self, aValue)


    def rfindIndex(self, aValue):
        """
        rfindIndex(ArrayPathPoint self, PathPoint aValue) -> int

        Parameters:
            aValue: OpenSim::PathPoint *const &

        """
        return _opensim.ArrayPathPoint_rfindIndex(self, aValue)


    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayPathPoint self, PathPoint aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters:
            aValue: OpenSim::PathPoint *const &
            aFindFirst: bool
            aLo: int
            aHi: int

        searchBinary(ArrayPathPoint self, PathPoint aValue, bool aFindFirst=False, int aLo=-1) -> int

        Parameters:
            aValue: OpenSim::PathPoint *const &
            aFindFirst: bool
            aLo: int

        searchBinary(ArrayPathPoint self, PathPoint aValue, bool aFindFirst=False) -> int

        Parameters:
            aValue: OpenSim::PathPoint *const &
            aFindFirst: bool

        searchBinary(ArrayPathPoint self, PathPoint aValue) -> int

        Parameters:
            aValue: OpenSim::PathPoint *const &

        """
        return _opensim.ArrayPathPoint_searchBinary(self, aValue, aFindFirst, aLo, aHi)

ArrayPathPoint_swigregister = _opensim.ArrayPathPoint_swigregister
ArrayPathPoint_swigregister(ArrayPathPoint)

class PathPointSet(SetPathPoint):
    """Proxy of C++ OpenSim::PathPointSet class"""
    __swig_setmethods__ = {}
    for _s in [SetPathPoint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathPointSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetPathPoint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PathPointSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PathPointSet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.PathPointSet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(PathPointSet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.PathPointSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.PathPointSet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(PathPointSet self) -> PathPointSet

        Parameters:
            self: OpenSim::PathPointSet const *

        """
        return _opensim.PathPointSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PathPointSet self) -> std::string const &

        Parameters:
            self: OpenSim::PathPointSet const *

        """
        return _opensim.PathPointSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::PathPointSet self) -> PathPointSet
        __init__(OpenSim::PathPointSet self, PathPointSet aPathPointSet) -> PathPointSet

        Parameters:
            aPathPointSet: OpenSim::PathPointSet const &

        """
        this = _opensim.new_PathPointSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_PathPointSet
    __del__ = lambda self: None
    def adoptAndAppend(self, aPathPoint):
        aPathPoint._markAdopted()
        return super(PathPointSet, self).adoptAndAppend(aPathPoint)

PathPointSet_swigregister = _opensim.PathPointSet_swigregister
PathPointSet_swigregister(PathPointSet)

def PathPointSet_safeDownCast(obj):
    """
    PathPointSet_safeDownCast(OpenSimObject obj) -> PathPointSet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.PathPointSet_safeDownCast(obj)

def PathPointSet_getClassName():
    """PathPointSet_getClassName() -> std::string const &"""
    return _opensim.PathPointSet_getClassName()

class PointForceDirection(_object):
    """Proxy of C++ OpenSim::PointForceDirection class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointForceDirection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointForceDirection, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _opensim.delete_PointForceDirection
    __del__ = lambda self: None

    def __init__(self, point, body, direction, scale=1):
        """
        __init__(OpenSim::PointForceDirection self, Vec3 point, Body body, Vec3 direction, double scale=1) -> PointForceDirection

        Parameters:
            point: SimTK::Vec3
            body: OpenSim::Body &
            direction: SimTK::Vec3
            scale: double

        __init__(OpenSim::PointForceDirection self, Vec3 point, Body body, Vec3 direction) -> PointForceDirection

        Parameters:
            point: SimTK::Vec3
            body: OpenSim::Body &
            direction: SimTK::Vec3

        """
        this = _opensim.new_PointForceDirection(point, body, direction, scale)
        try:
            self.this.append(this)
        except:
            self.this = this

    def point(self):
        """
        point(PointForceDirection self) -> Vec3

        Parameters:
            self: OpenSim::PointForceDirection *

        """
        return _opensim.PointForceDirection_point(self)


    def body(self):
        """
        body(PointForceDirection self) -> Body

        Parameters:
            self: OpenSim::PointForceDirection *

        """
        return _opensim.PointForceDirection_body(self)


    def direction(self):
        """
        direction(PointForceDirection self) -> Vec3

        Parameters:
            self: OpenSim::PointForceDirection *

        """
        return _opensim.PointForceDirection_direction(self)


    def scale(self):
        """
        scale(PointForceDirection self) -> double

        Parameters:
            self: OpenSim::PointForceDirection *

        """
        return _opensim.PointForceDirection_scale(self)


    def addToDirection(self, newDirection):
        """
        addToDirection(PointForceDirection self, Vec3 newDirection)

        Parameters:
            newDirection: SimTK::Vec3

        """
        return _opensim.PointForceDirection_addToDirection(self, newDirection)

PointForceDirection_swigregister = _opensim.PointForceDirection_swigregister
PointForceDirection_swigregister(PointForceDirection)

class ArrayPointForceDirection(_object):
    """Proxy of C++ OpenSim::Array<(p.OpenSim::PointForceDirection)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayPointForceDirection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayPointForceDirection, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _opensim.delete_ArrayPointForceDirection
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Array<(p.OpenSim::PointForceDirection)> self, PointForceDirection aDefaultValue, int aSize=0, int aCapacity) -> ArrayPointForceDirection

        Parameters:
            aDefaultValue: OpenSim::PointForceDirection *const &
            aSize: int
            aCapacity: int

        __init__(OpenSim::Array<(p.OpenSim::PointForceDirection)> self, PointForceDirection aDefaultValue, int aSize=0) -> ArrayPointForceDirection

        Parameters:
            aDefaultValue: OpenSim::PointForceDirection *const &
            aSize: int

        __init__(OpenSim::Array<(p.OpenSim::PointForceDirection)> self, PointForceDirection aDefaultValue) -> ArrayPointForceDirection

        Parameters:
            aDefaultValue: OpenSim::PointForceDirection *const &

        __init__(OpenSim::Array<(p.OpenSim::PointForceDirection)> self) -> ArrayPointForceDirection
        __init__(OpenSim::Array<(p.OpenSim::PointForceDirection)> self, ArrayPointForceDirection aArray) -> ArrayPointForceDirection

        Parameters:
            aArray: OpenSim::Array< OpenSim::PointForceDirection * > const &

        """
        this = _opensim.new_ArrayPointForceDirection(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def arrayEquals(self, aArray):
        """
        arrayEquals(ArrayPointForceDirection self, ArrayPointForceDirection aArray) -> bool

        Parameters:
            aArray: OpenSim::Array< OpenSim::PointForceDirection * > const &

        """
        return _opensim.ArrayPointForceDirection_arrayEquals(self, aArray)


    def trim(self):
        """
        trim(ArrayPointForceDirection self)

        Parameters:
            self: OpenSim::Array< OpenSim::PointForceDirection * > *

        """
        return _opensim.ArrayPointForceDirection_trim(self)


    def setSize(self, aSize):
        """
        setSize(ArrayPointForceDirection self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.ArrayPointForceDirection_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayPointForceDirection self) -> int

        Parameters:
            self: OpenSim::Array< OpenSim::PointForceDirection * > const *

        """
        return _opensim.ArrayPointForceDirection_getSize(self)


    def size(self):
        """
        size(ArrayPointForceDirection self) -> int

        Parameters:
            self: OpenSim::Array< OpenSim::PointForceDirection * > const *

        """
        return _opensim.ArrayPointForceDirection_size(self)


    def append(self, *args):
        """
        append(ArrayPointForceDirection self, PointForceDirection aValue) -> int

        Parameters:
            aValue: OpenSim::PointForceDirection *const &

        append(ArrayPointForceDirection self, ArrayPointForceDirection aArray) -> int

        Parameters:
            aArray: OpenSim::Array< OpenSim::PointForceDirection * > const &

        """
        return _opensim.ArrayPointForceDirection_append(self, *args)


    def insert(self, aIndex, aValue):
        """
        insert(ArrayPointForceDirection self, int aIndex, PointForceDirection aValue) -> int

        Parameters:
            aIndex: int
            aValue: OpenSim::PointForceDirection *const &

        """
        return _opensim.ArrayPointForceDirection_insert(self, aIndex, aValue)


    def remove(self, aIndex):
        """
        remove(ArrayPointForceDirection self, int aIndex) -> int

        Parameters:
            aIndex: int

        """
        return _opensim.ArrayPointForceDirection_remove(self, aIndex)


    def set(self, aIndex, aValue):
        """
        set(ArrayPointForceDirection self, int aIndex, PointForceDirection aValue)

        Parameters:
            aIndex: int
            aValue: OpenSim::PointForceDirection *const &

        """
        return _opensim.ArrayPointForceDirection_set(self, aIndex, aValue)


    def get(self, aIndex):
        """
        get(ArrayPointForceDirection self, int aIndex) -> PointForceDirection

        Parameters:
            aIndex: int

        """
        return _opensim.ArrayPointForceDirection_get(self, aIndex)


    def getitem(self, index):
        """
        getitem(ArrayPointForceDirection self, int index) -> PointForceDirection

        Parameters:
            index: int

        """
        return _opensim.ArrayPointForceDirection_getitem(self, index)


    def setitem(self, index, val):
        """
        setitem(ArrayPointForceDirection self, int index, PointForceDirection val)

        Parameters:
            index: int
            val: OpenSim::PointForceDirection *

        """
        return _opensim.ArrayPointForceDirection_setitem(self, index, val)


    def getLast(self):
        """
        getLast(ArrayPointForceDirection self) -> PointForceDirection

        Parameters:
            self: OpenSim::Array< OpenSim::PointForceDirection * > const *

        """
        return _opensim.ArrayPointForceDirection_getLast(self)


    def findIndex(self, aValue):
        """
        findIndex(ArrayPointForceDirection self, PointForceDirection aValue) -> int

        Parameters:
            aValue: OpenSim::PointForceDirection *const &

        """
        return _opensim.ArrayPointForceDirection_findIndex(self, aValue)


    def rfindIndex(self, aValue):
        """
        rfindIndex(ArrayPointForceDirection self, PointForceDirection aValue) -> int

        Parameters:
            aValue: OpenSim::PointForceDirection *const &

        """
        return _opensim.ArrayPointForceDirection_rfindIndex(self, aValue)


    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayPointForceDirection self, PointForceDirection aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters:
            aValue: OpenSim::PointForceDirection *const &
            aFindFirst: bool
            aLo: int
            aHi: int

        searchBinary(ArrayPointForceDirection self, PointForceDirection aValue, bool aFindFirst=False, int aLo=-1) -> int

        Parameters:
            aValue: OpenSim::PointForceDirection *const &
            aFindFirst: bool
            aLo: int

        searchBinary(ArrayPointForceDirection self, PointForceDirection aValue, bool aFindFirst=False) -> int

        Parameters:
            aValue: OpenSim::PointForceDirection *const &
            aFindFirst: bool

        searchBinary(ArrayPointForceDirection self, PointForceDirection aValue) -> int

        Parameters:
            aValue: OpenSim::PointForceDirection *const &

        """
        return _opensim.ArrayPointForceDirection_searchBinary(self, aValue, aFindFirst, aLo, aHi)

ArrayPointForceDirection_swigregister = _opensim.ArrayPointForceDirection_swigregister
ArrayPointForceDirection_swigregister(ArrayPointForceDirection)

class GeometryPath(ModelComponent):
    """Proxy of C++ OpenSim::GeometryPath class"""
    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryPath, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryPath, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> GeometryPath

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.GeometryPath_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(GeometryPath self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.GeometryPath_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.GeometryPath_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(GeometryPath self) -> GeometryPath

        Parameters:
            self: OpenSim::GeometryPath const *

        """
        return _opensim.GeometryPath_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(GeometryPath self) -> std::string const &

        Parameters:
            self: OpenSim::GeometryPath const *

        """
        return _opensim.GeometryPath_getConcreteClassName(self)


    def __init__(self):
        """__init__(OpenSim::GeometryPath self) -> GeometryPath"""
        this = _opensim.new_GeometryPath()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_GeometryPath
    __del__ = lambda self: None

    def getPathPointSet(self):
        """
        getPathPointSet(GeometryPath self) -> PathPointSet

        Parameters:
            self: OpenSim::GeometryPath const *

        """
        return _opensim.GeometryPath_getPathPointSet(self)


    def updPathPointSet(self):
        """
        updPathPointSet(GeometryPath self) -> PathPointSet

        Parameters:
            self: OpenSim::GeometryPath *

        """
        return _opensim.GeometryPath_updPathPointSet(self)


    def getWrapSet(self):
        """
        getWrapSet(GeometryPath self) -> PathWrapSet

        Parameters:
            self: OpenSim::GeometryPath const *

        """
        return _opensim.GeometryPath_getWrapSet(self)


    def addPathWrap(self, aWrapObject):
        """
        addPathWrap(GeometryPath self, WrapObject aWrapObject)

        Parameters:
            aWrapObject: OpenSim::WrapObject &

        """
        return _opensim.GeometryPath_addPathWrap(self, aWrapObject)


    def addPathPoint(self, s, aIndex, aBody):
        """
        addPathPoint(GeometryPath self, State s, int aIndex, Body aBody) -> PathPoint

        Parameters:
            s: SimTK::State const &
            aIndex: int
            aBody: OpenSim::Body &

        """
        return _opensim.GeometryPath_addPathPoint(self, s, aIndex, aBody)


    def appendNewPathPoint(self, proposedName, aBody, aPositionOnBody):
        """
        appendNewPathPoint(GeometryPath self, std::string const & proposedName, Body aBody, Vec3 aPositionOnBody) -> PathPoint

        Parameters:
            proposedName: std::string const &
            aBody: OpenSim::Body &
            aPositionOnBody: SimTK::Vec3 const &

        """
        return _opensim.GeometryPath_appendNewPathPoint(self, proposedName, aBody, aPositionOnBody)


    def canDeletePathPoint(self, aIndex):
        """
        canDeletePathPoint(GeometryPath self, int aIndex) -> bool

        Parameters:
            aIndex: int

        """
        return _opensim.GeometryPath_canDeletePathPoint(self, aIndex)


    def deletePathPoint(self, s, aIndex):
        """
        deletePathPoint(GeometryPath self, State s, int aIndex) -> bool

        Parameters:
            s: SimTK::State const &
            aIndex: int

        """
        return _opensim.GeometryPath_deletePathPoint(self, s, aIndex)


    def moveUpPathWrap(self, s, aIndex):
        """
        moveUpPathWrap(GeometryPath self, State s, int aIndex)

        Parameters:
            s: SimTK::State const &
            aIndex: int

        """
        return _opensim.GeometryPath_moveUpPathWrap(self, s, aIndex)


    def moveDownPathWrap(self, s, aIndex):
        """
        moveDownPathWrap(GeometryPath self, State s, int aIndex)

        Parameters:
            s: SimTK::State const &
            aIndex: int

        """
        return _opensim.GeometryPath_moveDownPathWrap(self, s, aIndex)


    def deletePathWrap(self, s, aIndex):
        """
        deletePathWrap(GeometryPath self, State s, int aIndex)

        Parameters:
            s: SimTK::State const &
            aIndex: int

        """
        return _opensim.GeometryPath_deletePathWrap(self, s, aIndex)


    def replacePathPoint(self, s, aOldPathPoint, aNewPathPoint):
        """
        replacePathPoint(GeometryPath self, State s, PathPoint aOldPathPoint, PathPoint aNewPathPoint) -> bool

        Parameters:
            s: SimTK::State const &
            aOldPathPoint: OpenSim::PathPoint *
            aNewPathPoint: OpenSim::PathPoint *

        """
        return _opensim.GeometryPath_replacePathPoint(self, s, aOldPathPoint, aNewPathPoint)


    def getOwner(self):
        """
        getOwner(GeometryPath self) -> OpenSimObject

        Parameters:
            self: OpenSim::GeometryPath const *

        """
        return _opensim.GeometryPath_getOwner(self)


    def setOwner(self, anObject):
        """
        setOwner(GeometryPath self, OpenSimObject anObject)

        Parameters:
            anObject: OpenSim::Object *

        """
        return _opensim.GeometryPath_setOwner(self, anObject)


    def setDefaultColor(self, color):
        """
        setDefaultColor(GeometryPath self, Vec3 color)

        Parameters:
            color: SimTK::Vec3 const &

        """
        return _opensim.GeometryPath_setDefaultColor(self, color)


    def getDefaultColor(self):
        """
        getDefaultColor(GeometryPath self) -> Vec3

        Parameters:
            self: OpenSim::GeometryPath const *

        """
        return _opensim.GeometryPath_getDefaultColor(self)


    def setColor(self, s, color):
        """
        setColor(GeometryPath self, State s, Vec3 color)

        Parameters:
            s: SimTK::State const &
            color: SimTK::Vec3 const &

        """
        return _opensim.GeometryPath_setColor(self, s, color)


    def getColor(self, s):
        """
        getColor(GeometryPath self, State s) -> Vec3

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.GeometryPath_getColor(self, s)


    def getLength(self, s):
        """
        getLength(GeometryPath self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.GeometryPath_getLength(self, s)


    def setLength(self, s, length):
        """
        setLength(GeometryPath self, State s, double length)

        Parameters:
            s: SimTK::State const &
            length: double

        """
        return _opensim.GeometryPath_setLength(self, s, length)


    def getPreScaleLength(self, s):
        """
        getPreScaleLength(GeometryPath self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.GeometryPath_getPreScaleLength(self, s)


    def setPreScaleLength(self, s, preScaleLength):
        """
        setPreScaleLength(GeometryPath self, State s, double preScaleLength)

        Parameters:
            s: SimTK::State const &
            preScaleLength: double

        """
        return _opensim.GeometryPath_setPreScaleLength(self, s, preScaleLength)


    def getCurrentPath(self, s):
        """
        getCurrentPath(GeometryPath self, State s) -> ArrayPathPoint

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.GeometryPath_getCurrentPath(self, s)


    def getCurrentDisplayPath(self, s):
        """
        getCurrentDisplayPath(GeometryPath self, State s) -> ArrayPathPoint

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.GeometryPath_getCurrentDisplayPath(self, s)


    def getLengtheningSpeed(self, s):
        """
        getLengtheningSpeed(GeometryPath self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.GeometryPath_getLengtheningSpeed(self, s)


    def setLengtheningSpeed(self, s, speed):
        """
        setLengtheningSpeed(GeometryPath self, State s, double speed)

        Parameters:
            s: SimTK::State const &
            speed: double

        """
        return _opensim.GeometryPath_setLengtheningSpeed(self, s, speed)


    def getPointForceDirections(self, s, rPFDs):
        """
        getPointForceDirections(GeometryPath self, State s, ArrayPointForceDirection rPFDs)

        Parameters:
            s: SimTK::State const &
            rPFDs: OpenSim::Array< OpenSim::PointForceDirection * > *

        """
        return _opensim.GeometryPath_getPointForceDirections(self, s, rPFDs)


    def addInEquivalentForces(self, state, tension, bodyForces, mobilityForces):
        """
        addInEquivalentForces(GeometryPath self, State state, double const & tension, VectorOfSpatialVec bodyForces, Vector mobilityForces)

        Parameters:
            state: SimTK::State const &
            tension: double const &
            bodyForces: SimTK::Vector_< SimTK::SpatialVec > &
            mobilityForces: SimTK::Vector &

        """
        return _opensim.GeometryPath_addInEquivalentForces(self, state, tension, bodyForces, mobilityForces)


    def computeMomentArm(self, s, aCoord):
        """
        computeMomentArm(GeometryPath self, State s, Coordinate aCoord) -> double

        Parameters:
            s: SimTK::State const &
            aCoord: OpenSim::Coordinate const &

        """
        return _opensim.GeometryPath_computeMomentArm(self, s, aCoord)


    def preScale(self, s, aScaleSet):
        """
        preScale(GeometryPath self, State s, ScaleSet aScaleSet)

        Parameters:
            s: SimTK::State const &
            aScaleSet: OpenSim::ScaleSet const &

        """
        return _opensim.GeometryPath_preScale(self, s, aScaleSet)


    def scale(self, s, aScaleSet):
        """
        scale(GeometryPath self, State s, ScaleSet aScaleSet)

        Parameters:
            s: SimTK::State const &
            aScaleSet: OpenSim::ScaleSet const &

        """
        return _opensim.GeometryPath_scale(self, s, aScaleSet)


    def postScale(self, s, aScaleSet):
        """
        postScale(GeometryPath self, State s, ScaleSet aScaleSet)

        Parameters:
            s: SimTK::State const &
            aScaleSet: OpenSim::ScaleSet const &

        """
        return _opensim.GeometryPath_postScale(self, s, aScaleSet)


    def getDisplayer(self):
        """
        getDisplayer(GeometryPath self) -> VisibleObject

        Parameters:
            self: OpenSim::GeometryPath const *

        """
        return _opensim.GeometryPath_getDisplayer(self)


    def updateDisplayer(self, s):
        """
        updateDisplayer(GeometryPath self, State s)

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.GeometryPath_updateDisplayer(self, s)


    def updateGeometry(self, s):
        """
        updateGeometry(GeometryPath self, State s)

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.GeometryPath_updateGeometry(self, s)

GeometryPath_swigregister = _opensim.GeometryPath_swigregister
GeometryPath_swigregister(GeometryPath)

def GeometryPath_safeDownCast(obj):
    """
    GeometryPath_safeDownCast(OpenSimObject obj) -> GeometryPath

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.GeometryPath_safeDownCast(obj)

def GeometryPath_getClassName():
    """GeometryPath_getClassName() -> std::string const &"""
    return _opensim.GeometryPath_getClassName()

class Ligament(Force):
    """Proxy of C++ OpenSim::Ligament class"""
    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ligament, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ligament, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Ligament

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Ligament_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Ligament self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Ligament_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Ligament_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Ligament self) -> Ligament

        Parameters:
            self: OpenSim::Ligament const *

        """
        return _opensim.Ligament_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Ligament self) -> std::string const &

        Parameters:
            self: OpenSim::Ligament const *

        """
        return _opensim.Ligament_getConcreteClassName(self)


    def copyProperty_GeometryPath(self, source):
        """
        copyProperty_GeometryPath(Ligament self, Ligament source)

        Parameters:
            source: OpenSim::Ligament::Self const &

        """
        return _opensim.Ligament_copyProperty_GeometryPath(self, source)


    def append_GeometryPath(self, value):
        """
        append_GeometryPath(Ligament self, GeometryPath value) -> int

        Parameters:
            value: OpenSim::GeometryPath const &

        """
        return _opensim.Ligament_append_GeometryPath(self, value)


    def constructProperty_GeometryPath(self, initValue):
        """
        constructProperty_GeometryPath(Ligament self, GeometryPath initValue)

        Parameters:
            initValue: OpenSim::GeometryPath const &

        """
        return _opensim.Ligament_constructProperty_GeometryPath(self, initValue)


    def get_GeometryPath(self, *args):
        """
        get_GeometryPath(Ligament self, int i) -> GeometryPath

        Parameters:
            i: int

        get_GeometryPath(Ligament self) -> GeometryPath

        Parameters:
            self: OpenSim::Ligament const *

        """
        return _opensim.Ligament_get_GeometryPath(self, *args)


    def upd_GeometryPath(self, *args):
        """
        upd_GeometryPath(Ligament self, int i) -> GeometryPath

        Parameters:
            i: int

        upd_GeometryPath(Ligament self) -> GeometryPath

        Parameters:
            self: OpenSim::Ligament *

        """
        return _opensim.Ligament_upd_GeometryPath(self, *args)


    def set_GeometryPath(self, *args):
        """
        set_GeometryPath(Ligament self, int i, GeometryPath value)

        Parameters:
            i: int
            value: OpenSim::GeometryPath const &

        set_GeometryPath(Ligament self, GeometryPath value)

        Parameters:
            value: OpenSim::GeometryPath const &

        """
        return _opensim.Ligament_set_GeometryPath(self, *args)


    def copyProperty_resting_length(self, source):
        """
        copyProperty_resting_length(Ligament self, Ligament source)

        Parameters:
            source: OpenSim::Ligament::Self const &

        """
        return _opensim.Ligament_copyProperty_resting_length(self, source)


    def append_resting_length(self, value):
        """
        append_resting_length(Ligament self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Ligament_append_resting_length(self, value)


    def constructProperty_resting_length(self, initValue):
        """
        constructProperty_resting_length(Ligament self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Ligament_constructProperty_resting_length(self, initValue)


    def get_resting_length(self, *args):
        """
        get_resting_length(Ligament self, int i) -> double const

        Parameters:
            i: int

        get_resting_length(Ligament self) -> double const &

        Parameters:
            self: OpenSim::Ligament const *

        """
        return _opensim.Ligament_get_resting_length(self, *args)


    def upd_resting_length(self, *args):
        """
        upd_resting_length(Ligament self, int i) -> double

        Parameters:
            i: int

        upd_resting_length(Ligament self) -> double &

        Parameters:
            self: OpenSim::Ligament *

        """
        return _opensim.Ligament_upd_resting_length(self, *args)


    def set_resting_length(self, *args):
        """
        set_resting_length(Ligament self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_resting_length(Ligament self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Ligament_set_resting_length(self, *args)


    def copyProperty_pcsa_force(self, source):
        """
        copyProperty_pcsa_force(Ligament self, Ligament source)

        Parameters:
            source: OpenSim::Ligament::Self const &

        """
        return _opensim.Ligament_copyProperty_pcsa_force(self, source)


    def append_pcsa_force(self, value):
        """
        append_pcsa_force(Ligament self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Ligament_append_pcsa_force(self, value)


    def constructProperty_pcsa_force(self, initValue):
        """
        constructProperty_pcsa_force(Ligament self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Ligament_constructProperty_pcsa_force(self, initValue)


    def get_pcsa_force(self, *args):
        """
        get_pcsa_force(Ligament self, int i) -> double const

        Parameters:
            i: int

        get_pcsa_force(Ligament self) -> double const &

        Parameters:
            self: OpenSim::Ligament const *

        """
        return _opensim.Ligament_get_pcsa_force(self, *args)


    def upd_pcsa_force(self, *args):
        """
        upd_pcsa_force(Ligament self, int i) -> double

        Parameters:
            i: int

        upd_pcsa_force(Ligament self) -> double &

        Parameters:
            self: OpenSim::Ligament *

        """
        return _opensim.Ligament_upd_pcsa_force(self, *args)


    def set_pcsa_force(self, *args):
        """
        set_pcsa_force(Ligament self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_pcsa_force(Ligament self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Ligament_set_pcsa_force(self, *args)


    def copyProperty_force_length_curve(self, source):
        """
        copyProperty_force_length_curve(Ligament self, Ligament source)

        Parameters:
            source: OpenSim::Ligament::Self const &

        """
        return _opensim.Ligament_copyProperty_force_length_curve(self, source)


    def append_force_length_curve(self, value):
        """
        append_force_length_curve(Ligament self, Function value) -> int

        Parameters:
            value: OpenSim::Function const &

        """
        return _opensim.Ligament_append_force_length_curve(self, value)


    def constructProperty_force_length_curve(self, initValue):
        """
        constructProperty_force_length_curve(Ligament self, Function initValue)

        Parameters:
            initValue: OpenSim::Function const &

        """
        return _opensim.Ligament_constructProperty_force_length_curve(self, initValue)


    def get_force_length_curve(self, *args):
        """
        get_force_length_curve(Ligament self, int i) -> Function

        Parameters:
            i: int

        get_force_length_curve(Ligament self) -> Function

        Parameters:
            self: OpenSim::Ligament const *

        """
        return _opensim.Ligament_get_force_length_curve(self, *args)


    def upd_force_length_curve(self, *args):
        """
        upd_force_length_curve(Ligament self, int i) -> Function

        Parameters:
            i: int

        upd_force_length_curve(Ligament self) -> Function

        Parameters:
            self: OpenSim::Ligament *

        """
        return _opensim.Ligament_upd_force_length_curve(self, *args)


    def set_force_length_curve(self, *args):
        """
        set_force_length_curve(Ligament self, int i, Function value)

        Parameters:
            i: int
            value: OpenSim::Function const &

        set_force_length_curve(Ligament self, Function value)

        Parameters:
            value: OpenSim::Function const &

        """
        return _opensim.Ligament_set_force_length_curve(self, *args)


    def __init__(self):
        """__init__(OpenSim::Ligament self) -> Ligament"""
        this = _opensim.new_Ligament()
        try:
            self.this.append(this)
        except:
            self.this = this

    def getGeometryPath(self):
        """
        getGeometryPath(Ligament self) -> GeometryPath

        Parameters:
            self: OpenSim::Ligament const *

        """
        return _opensim.Ligament_getGeometryPath(self)


    def updGeometryPath(self):
        """
        updGeometryPath(Ligament self) -> GeometryPath

        Parameters:
            self: OpenSim::Ligament *

        """
        return _opensim.Ligament_updGeometryPath(self)


    def hasGeometryPath(self):
        """
        hasGeometryPath(Ligament self) -> bool

        Parameters:
            self: OpenSim::Ligament const *

        """
        return _opensim.Ligament_hasGeometryPath(self)


    def getLength(self, s):
        """
        getLength(Ligament self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Ligament_getLength(self, s)


    def getRestingLength(self):
        """
        getRestingLength(Ligament self) -> double

        Parameters:
            self: OpenSim::Ligament const *

        """
        return _opensim.Ligament_getRestingLength(self)


    def setRestingLength(self, aRestingLength):
        """
        setRestingLength(Ligament self, double aRestingLength) -> bool

        Parameters:
            aRestingLength: double

        """
        return _opensim.Ligament_setRestingLength(self, aRestingLength)


    def getMaxIsometricForce(self):
        """
        getMaxIsometricForce(Ligament self) -> double

        Parameters:
            self: OpenSim::Ligament const *

        """
        return _opensim.Ligament_getMaxIsometricForce(self)


    def setMaxIsometricForce(self, aMaxIsometricForce):
        """
        setMaxIsometricForce(Ligament self, double aMaxIsometricForce) -> bool

        Parameters:
            aMaxIsometricForce: double

        """
        return _opensim.Ligament_setMaxIsometricForce(self, aMaxIsometricForce)


    def getForceLengthCurve(self):
        """
        getForceLengthCurve(Ligament self) -> Function

        Parameters:
            self: OpenSim::Ligament const *

        """
        return _opensim.Ligament_getForceLengthCurve(self)


    def setForceLengthCurve(self, aForceLengthCurve):
        """
        setForceLengthCurve(Ligament self, Function aForceLengthCurve) -> bool

        Parameters:
            aForceLengthCurve: OpenSim::Function const &

        """
        return _opensim.Ligament_setForceLengthCurve(self, aForceLengthCurve)


    def getTension(self, s):
        """
        getTension(Ligament self, State s) -> double const &

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Ligament_getTension(self, s)


    def computeMomentArm(self, s, aCoord):
        """
        computeMomentArm(Ligament self, State s, Coordinate aCoord) -> double

        Parameters:
            s: SimTK::State const &
            aCoord: OpenSim::Coordinate &

        """
        return _opensim.Ligament_computeMomentArm(self, s, aCoord)


    def computeForce(self, s, bodyForces, generalizedForces):
        """
        computeForce(Ligament self, State s, VectorOfSpatialVec bodyForces, Vector generalizedForces)

        Parameters:
            s: SimTK::State const &
            bodyForces: SimTK::Vector_< SimTK::SpatialVec > &
            generalizedForces: SimTK::Vector &

        """
        return _opensim.Ligament_computeForce(self, s, bodyForces, generalizedForces)


    def preScale(self, s, aScaleSet):
        """
        preScale(Ligament self, State s, ScaleSet aScaleSet)

        Parameters:
            s: SimTK::State const &
            aScaleSet: OpenSim::ScaleSet const &

        """
        return _opensim.Ligament_preScale(self, s, aScaleSet)


    def scale(self, s, aScaleSet):
        """
        scale(Ligament self, State s, ScaleSet aScaleSet)

        Parameters:
            s: SimTK::State const &
            aScaleSet: OpenSim::ScaleSet const &

        """
        return _opensim.Ligament_scale(self, s, aScaleSet)


    def postScale(self, s, aScaleSet):
        """
        postScale(Ligament self, State s, ScaleSet aScaleSet)

        Parameters:
            s: SimTK::State const &
            aScaleSet: OpenSim::ScaleSet const &

        """
        return _opensim.Ligament_postScale(self, s, aScaleSet)


    def getDisplayer(self):
        """
        getDisplayer(Ligament self) -> VisibleObject

        Parameters:
            self: OpenSim::Ligament const *

        """
        return _opensim.Ligament_getDisplayer(self)


    def updateDisplayer(self, s):
        """
        updateDisplayer(Ligament self, State s)

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Ligament_updateDisplayer(self, s)

    __swig_destroy__ = _opensim.delete_Ligament
    __del__ = lambda self: None
Ligament_swigregister = _opensim.Ligament_swigregister
Ligament_swigregister(Ligament)

def Ligament_safeDownCast(obj):
    """
    Ligament_safeDownCast(OpenSimObject obj) -> Ligament

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Ligament_safeDownCast(obj)

def Ligament_getClassName():
    """Ligament_getClassName() -> std::string const &"""
    return _opensim.Ligament_getClassName()

class PathActuator(Actuator):
    """Proxy of C++ OpenSim::PathActuator class"""
    __swig_setmethods__ = {}
    for _s in [Actuator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathActuator, name, value)
    __swig_getmethods__ = {}
    for _s in [Actuator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PathActuator, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PathActuator

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.PathActuator_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(PathActuator self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.PathActuator_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.PathActuator_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(PathActuator self) -> PathActuator

        Parameters:
            self: OpenSim::PathActuator const *

        """
        return _opensim.PathActuator_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PathActuator self) -> std::string const &

        Parameters:
            self: OpenSim::PathActuator const *

        """
        return _opensim.PathActuator_getConcreteClassName(self)


    def copyProperty_GeometryPath(self, source):
        """
        copyProperty_GeometryPath(PathActuator self, PathActuator source)

        Parameters:
            source: OpenSim::PathActuator::Self const &

        """
        return _opensim.PathActuator_copyProperty_GeometryPath(self, source)


    def append_GeometryPath(self, value):
        """
        append_GeometryPath(PathActuator self, GeometryPath value) -> int

        Parameters:
            value: OpenSim::GeometryPath const &

        """
        return _opensim.PathActuator_append_GeometryPath(self, value)


    def constructProperty_GeometryPath(self, initValue):
        """
        constructProperty_GeometryPath(PathActuator self, GeometryPath initValue)

        Parameters:
            initValue: OpenSim::GeometryPath const &

        """
        return _opensim.PathActuator_constructProperty_GeometryPath(self, initValue)


    def get_GeometryPath(self, *args):
        """
        get_GeometryPath(PathActuator self, int i) -> GeometryPath

        Parameters:
            i: int

        get_GeometryPath(PathActuator self) -> GeometryPath

        Parameters:
            self: OpenSim::PathActuator const *

        """
        return _opensim.PathActuator_get_GeometryPath(self, *args)


    def upd_GeometryPath(self, *args):
        """
        upd_GeometryPath(PathActuator self, int i) -> GeometryPath

        Parameters:
            i: int

        upd_GeometryPath(PathActuator self) -> GeometryPath

        Parameters:
            self: OpenSim::PathActuator *

        """
        return _opensim.PathActuator_upd_GeometryPath(self, *args)


    def set_GeometryPath(self, *args):
        """
        set_GeometryPath(PathActuator self, int i, GeometryPath value)

        Parameters:
            i: int
            value: OpenSim::GeometryPath const &

        set_GeometryPath(PathActuator self, GeometryPath value)

        Parameters:
            value: OpenSim::GeometryPath const &

        """
        return _opensim.PathActuator_set_GeometryPath(self, *args)


    def copyProperty_optimal_force(self, source):
        """
        copyProperty_optimal_force(PathActuator self, PathActuator source)

        Parameters:
            source: OpenSim::PathActuator::Self const &

        """
        return _opensim.PathActuator_copyProperty_optimal_force(self, source)


    def append_optimal_force(self, value):
        """
        append_optimal_force(PathActuator self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.PathActuator_append_optimal_force(self, value)


    def constructProperty_optimal_force(self, initValue):
        """
        constructProperty_optimal_force(PathActuator self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.PathActuator_constructProperty_optimal_force(self, initValue)


    def get_optimal_force(self, *args):
        """
        get_optimal_force(PathActuator self, int i) -> double const

        Parameters:
            i: int

        get_optimal_force(PathActuator self) -> double const &

        Parameters:
            self: OpenSim::PathActuator const *

        """
        return _opensim.PathActuator_get_optimal_force(self, *args)


    def upd_optimal_force(self, *args):
        """
        upd_optimal_force(PathActuator self, int i) -> double

        Parameters:
            i: int

        upd_optimal_force(PathActuator self) -> double &

        Parameters:
            self: OpenSim::PathActuator *

        """
        return _opensim.PathActuator_upd_optimal_force(self, *args)


    def set_optimal_force(self, *args):
        """
        set_optimal_force(PathActuator self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_optimal_force(PathActuator self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.PathActuator_set_optimal_force(self, *args)


    def __init__(self):
        """__init__(OpenSim::PathActuator self) -> PathActuator"""
        this = _opensim.new_PathActuator()
        try:
            self.this.append(this)
        except:
            self.this = this

    def updGeometryPath(self):
        """
        updGeometryPath(PathActuator self) -> GeometryPath

        Parameters:
            self: OpenSim::PathActuator *

        """
        return _opensim.PathActuator_updGeometryPath(self)


    def getGeometryPath(self):
        """
        getGeometryPath(PathActuator self) -> GeometryPath

        Parameters:
            self: OpenSim::PathActuator const *

        """
        return _opensim.PathActuator_getGeometryPath(self)


    def hasGeometryPath(self):
        """
        hasGeometryPath(PathActuator self) -> bool

        Parameters:
            self: OpenSim::PathActuator const *

        """
        return _opensim.PathActuator_hasGeometryPath(self)


    def setOptimalForce(self, aOptimalForce):
        """
        setOptimalForce(PathActuator self, double aOptimalForce)

        Parameters:
            aOptimalForce: double

        """
        return _opensim.PathActuator_setOptimalForce(self, aOptimalForce)


    def getOptimalForce(self):
        """
        getOptimalForce(PathActuator self) -> double

        Parameters:
            self: OpenSim::PathActuator const *

        """
        return _opensim.PathActuator_getOptimalForce(self)


    def getLength(self, s):
        """
        getLength(PathActuator self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.PathActuator_getLength(self, s)


    def getLengtheningSpeed(self, s):
        """
        getLengtheningSpeed(PathActuator self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.PathActuator_getLengtheningSpeed(self, s)


    def getPower(self, s):
        """
        getPower(PathActuator self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.PathActuator_getPower(self, s)


    def getStress(self, s):
        """
        getStress(PathActuator self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.PathActuator_getStress(self, s)


    def addNewPathPoint(self, proposedName, aBody, aPositionOnBody):
        """
        addNewPathPoint(PathActuator self, std::string const & proposedName, Body aBody, Vec3 aPositionOnBody)

        Parameters:
            proposedName: std::string const &
            aBody: OpenSim::Body &
            aPositionOnBody: SimTK::Vec3 const &

        """
        return _opensim.PathActuator_addNewPathPoint(self, proposedName, aBody, aPositionOnBody)


    def computeForce(self, state, bodyForces, mobilityForces):
        """
        computeForce(PathActuator self, State state, VectorOfSpatialVec bodyForces, Vector mobilityForces)

        Parameters:
            state: SimTK::State const &
            bodyForces: SimTK::Vector_< SimTK::SpatialVec > &
            mobilityForces: SimTK::Vector &

        """
        return _opensim.PathActuator_computeForce(self, state, bodyForces, mobilityForces)


    def computeActuation(self, s):
        """
        computeActuation(PathActuator self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.PathActuator_computeActuation(self, s)


    def computeMomentArm(self, s, aCoord):
        """
        computeMomentArm(PathActuator self, State s, Coordinate aCoord) -> double

        Parameters:
            s: SimTK::State const &
            aCoord: OpenSim::Coordinate &

        """
        return _opensim.PathActuator_computeMomentArm(self, s, aCoord)


    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(PathActuator self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters:
            aNode: SimTK::Xml::Element &
            versionNumber: int

        updateFromXMLNode(PathActuator self, SimTK::Xml::Element & aNode)

        Parameters:
            aNode: SimTK::Xml::Element &

        """
        return _opensim.PathActuator_updateFromXMLNode(self, aNode, versionNumber)


    def preScale(self, s, aScaleSet):
        """
        preScale(PathActuator self, State s, ScaleSet aScaleSet)

        Parameters:
            s: SimTK::State const &
            aScaleSet: OpenSim::ScaleSet const &

        """
        return _opensim.PathActuator_preScale(self, s, aScaleSet)


    def scale(self, s, aScaleSet):
        """
        scale(PathActuator self, State s, ScaleSet aScaleSet)

        Parameters:
            s: SimTK::State const &
            aScaleSet: OpenSim::ScaleSet const &

        """
        return _opensim.PathActuator_scale(self, s, aScaleSet)


    def postScale(self, s, aScaleSet):
        """
        postScale(PathActuator self, State s, ScaleSet aScaleSet)

        Parameters:
            s: SimTK::State const &
            aScaleSet: OpenSim::ScaleSet const &

        """
        return _opensim.PathActuator_postScale(self, s, aScaleSet)


    def getDisplayer(self):
        """
        getDisplayer(PathActuator self) -> VisibleObject

        Parameters:
            self: OpenSim::PathActuator const *

        """
        return _opensim.PathActuator_getDisplayer(self)


    def updateDisplayer(self, s):
        """
        updateDisplayer(PathActuator self, State s)

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.PathActuator_updateDisplayer(self, s)

    __swig_destroy__ = _opensim.delete_PathActuator
    __del__ = lambda self: None
PathActuator_swigregister = _opensim.PathActuator_swigregister
PathActuator_swigregister(PathActuator)

def PathActuator_safeDownCast(obj):
    """
    PathActuator_safeDownCast(OpenSimObject obj) -> PathActuator

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.PathActuator_safeDownCast(obj)

def PathActuator_getClassName():
    """PathActuator_getClassName() -> std::string const &"""
    return _opensim.PathActuator_getClassName()

class Muscle(PathActuator):
    """Proxy of C++ OpenSim::Muscle class"""
    __swig_setmethods__ = {}
    for _s in [PathActuator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Muscle, name, value)
    __swig_getmethods__ = {}
    for _s in [PathActuator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Muscle, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Muscle

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Muscle_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Muscle self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Muscle_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Muscle_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Muscle self) -> Muscle

        Parameters:
            self: OpenSim::Muscle const *

        """
        return _opensim.Muscle_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Muscle self) -> std::string const &

        Parameters:
            self: OpenSim::Muscle const *

        """
        return _opensim.Muscle_getConcreteClassName(self)


    def copyProperty_max_isometric_force(self, source):
        """
        copyProperty_max_isometric_force(Muscle self, Muscle source)

        Parameters:
            source: OpenSim::Muscle::Self const &

        """
        return _opensim.Muscle_copyProperty_max_isometric_force(self, source)


    def append_max_isometric_force(self, value):
        """
        append_max_isometric_force(Muscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Muscle_append_max_isometric_force(self, value)


    def constructProperty_max_isometric_force(self, initValue):
        """
        constructProperty_max_isometric_force(Muscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Muscle_constructProperty_max_isometric_force(self, initValue)


    def get_max_isometric_force(self, *args):
        """
        get_max_isometric_force(Muscle self, int i) -> double const

        Parameters:
            i: int

        get_max_isometric_force(Muscle self) -> double const &

        Parameters:
            self: OpenSim::Muscle const *

        """
        return _opensim.Muscle_get_max_isometric_force(self, *args)


    def upd_max_isometric_force(self, *args):
        """
        upd_max_isometric_force(Muscle self, int i) -> double

        Parameters:
            i: int

        upd_max_isometric_force(Muscle self) -> double &

        Parameters:
            self: OpenSim::Muscle *

        """
        return _opensim.Muscle_upd_max_isometric_force(self, *args)


    def set_max_isometric_force(self, *args):
        """
        set_max_isometric_force(Muscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_max_isometric_force(Muscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Muscle_set_max_isometric_force(self, *args)


    def copyProperty_optimal_fiber_length(self, source):
        """
        copyProperty_optimal_fiber_length(Muscle self, Muscle source)

        Parameters:
            source: OpenSim::Muscle::Self const &

        """
        return _opensim.Muscle_copyProperty_optimal_fiber_length(self, source)


    def append_optimal_fiber_length(self, value):
        """
        append_optimal_fiber_length(Muscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Muscle_append_optimal_fiber_length(self, value)


    def constructProperty_optimal_fiber_length(self, initValue):
        """
        constructProperty_optimal_fiber_length(Muscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Muscle_constructProperty_optimal_fiber_length(self, initValue)


    def get_optimal_fiber_length(self, *args):
        """
        get_optimal_fiber_length(Muscle self, int i) -> double const

        Parameters:
            i: int

        get_optimal_fiber_length(Muscle self) -> double const &

        Parameters:
            self: OpenSim::Muscle const *

        """
        return _opensim.Muscle_get_optimal_fiber_length(self, *args)


    def upd_optimal_fiber_length(self, *args):
        """
        upd_optimal_fiber_length(Muscle self, int i) -> double

        Parameters:
            i: int

        upd_optimal_fiber_length(Muscle self) -> double &

        Parameters:
            self: OpenSim::Muscle *

        """
        return _opensim.Muscle_upd_optimal_fiber_length(self, *args)


    def set_optimal_fiber_length(self, *args):
        """
        set_optimal_fiber_length(Muscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_optimal_fiber_length(Muscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Muscle_set_optimal_fiber_length(self, *args)


    def copyProperty_tendon_slack_length(self, source):
        """
        copyProperty_tendon_slack_length(Muscle self, Muscle source)

        Parameters:
            source: OpenSim::Muscle::Self const &

        """
        return _opensim.Muscle_copyProperty_tendon_slack_length(self, source)


    def append_tendon_slack_length(self, value):
        """
        append_tendon_slack_length(Muscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Muscle_append_tendon_slack_length(self, value)


    def constructProperty_tendon_slack_length(self, initValue):
        """
        constructProperty_tendon_slack_length(Muscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Muscle_constructProperty_tendon_slack_length(self, initValue)


    def get_tendon_slack_length(self, *args):
        """
        get_tendon_slack_length(Muscle self, int i) -> double const

        Parameters:
            i: int

        get_tendon_slack_length(Muscle self) -> double const &

        Parameters:
            self: OpenSim::Muscle const *

        """
        return _opensim.Muscle_get_tendon_slack_length(self, *args)


    def upd_tendon_slack_length(self, *args):
        """
        upd_tendon_slack_length(Muscle self, int i) -> double

        Parameters:
            i: int

        upd_tendon_slack_length(Muscle self) -> double &

        Parameters:
            self: OpenSim::Muscle *

        """
        return _opensim.Muscle_upd_tendon_slack_length(self, *args)


    def set_tendon_slack_length(self, *args):
        """
        set_tendon_slack_length(Muscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_tendon_slack_length(Muscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Muscle_set_tendon_slack_length(self, *args)


    def copyProperty_pennation_angle_at_optimal(self, source):
        """
        copyProperty_pennation_angle_at_optimal(Muscle self, Muscle source)

        Parameters:
            source: OpenSim::Muscle::Self const &

        """
        return _opensim.Muscle_copyProperty_pennation_angle_at_optimal(self, source)


    def append_pennation_angle_at_optimal(self, value):
        """
        append_pennation_angle_at_optimal(Muscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Muscle_append_pennation_angle_at_optimal(self, value)


    def constructProperty_pennation_angle_at_optimal(self, initValue):
        """
        constructProperty_pennation_angle_at_optimal(Muscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Muscle_constructProperty_pennation_angle_at_optimal(self, initValue)


    def get_pennation_angle_at_optimal(self, *args):
        """
        get_pennation_angle_at_optimal(Muscle self, int i) -> double const

        Parameters:
            i: int

        get_pennation_angle_at_optimal(Muscle self) -> double const &

        Parameters:
            self: OpenSim::Muscle const *

        """
        return _opensim.Muscle_get_pennation_angle_at_optimal(self, *args)


    def upd_pennation_angle_at_optimal(self, *args):
        """
        upd_pennation_angle_at_optimal(Muscle self, int i) -> double

        Parameters:
            i: int

        upd_pennation_angle_at_optimal(Muscle self) -> double &

        Parameters:
            self: OpenSim::Muscle *

        """
        return _opensim.Muscle_upd_pennation_angle_at_optimal(self, *args)


    def set_pennation_angle_at_optimal(self, *args):
        """
        set_pennation_angle_at_optimal(Muscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_pennation_angle_at_optimal(Muscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Muscle_set_pennation_angle_at_optimal(self, *args)


    def copyProperty_max_contraction_velocity(self, source):
        """
        copyProperty_max_contraction_velocity(Muscle self, Muscle source)

        Parameters:
            source: OpenSim::Muscle::Self const &

        """
        return _opensim.Muscle_copyProperty_max_contraction_velocity(self, source)


    def append_max_contraction_velocity(self, value):
        """
        append_max_contraction_velocity(Muscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Muscle_append_max_contraction_velocity(self, value)


    def constructProperty_max_contraction_velocity(self, initValue):
        """
        constructProperty_max_contraction_velocity(Muscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Muscle_constructProperty_max_contraction_velocity(self, initValue)


    def get_max_contraction_velocity(self, *args):
        """
        get_max_contraction_velocity(Muscle self, int i) -> double const

        Parameters:
            i: int

        get_max_contraction_velocity(Muscle self) -> double const &

        Parameters:
            self: OpenSim::Muscle const *

        """
        return _opensim.Muscle_get_max_contraction_velocity(self, *args)


    def upd_max_contraction_velocity(self, *args):
        """
        upd_max_contraction_velocity(Muscle self, int i) -> double

        Parameters:
            i: int

        upd_max_contraction_velocity(Muscle self) -> double &

        Parameters:
            self: OpenSim::Muscle *

        """
        return _opensim.Muscle_upd_max_contraction_velocity(self, *args)


    def set_max_contraction_velocity(self, *args):
        """
        set_max_contraction_velocity(Muscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_max_contraction_velocity(Muscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Muscle_set_max_contraction_velocity(self, *args)


    def copyProperty_ignore_tendon_compliance(self, source):
        """
        copyProperty_ignore_tendon_compliance(Muscle self, Muscle source)

        Parameters:
            source: OpenSim::Muscle::Self const &

        """
        return _opensim.Muscle_copyProperty_ignore_tendon_compliance(self, source)


    def append_ignore_tendon_compliance(self, value):
        """
        append_ignore_tendon_compliance(Muscle self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Muscle_append_ignore_tendon_compliance(self, value)


    def constructProperty_ignore_tendon_compliance(self, initValue):
        """
        constructProperty_ignore_tendon_compliance(Muscle self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Muscle_constructProperty_ignore_tendon_compliance(self, initValue)


    def get_ignore_tendon_compliance(self, *args):
        """
        get_ignore_tendon_compliance(Muscle self, int i) -> bool const

        Parameters:
            i: int

        get_ignore_tendon_compliance(Muscle self) -> bool const &

        Parameters:
            self: OpenSim::Muscle const *

        """
        return _opensim.Muscle_get_ignore_tendon_compliance(self, *args)


    def upd_ignore_tendon_compliance(self, *args):
        """
        upd_ignore_tendon_compliance(Muscle self, int i) -> bool

        Parameters:
            i: int

        upd_ignore_tendon_compliance(Muscle self) -> bool &

        Parameters:
            self: OpenSim::Muscle *

        """
        return _opensim.Muscle_upd_ignore_tendon_compliance(self, *args)


    def set_ignore_tendon_compliance(self, *args):
        """
        set_ignore_tendon_compliance(Muscle self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_ignore_tendon_compliance(Muscle self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Muscle_set_ignore_tendon_compliance(self, *args)


    def copyProperty_ignore_activation_dynamics(self, source):
        """
        copyProperty_ignore_activation_dynamics(Muscle self, Muscle source)

        Parameters:
            source: OpenSim::Muscle::Self const &

        """
        return _opensim.Muscle_copyProperty_ignore_activation_dynamics(self, source)


    def append_ignore_activation_dynamics(self, value):
        """
        append_ignore_activation_dynamics(Muscle self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.Muscle_append_ignore_activation_dynamics(self, value)


    def constructProperty_ignore_activation_dynamics(self, initValue):
        """
        constructProperty_ignore_activation_dynamics(Muscle self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.Muscle_constructProperty_ignore_activation_dynamics(self, initValue)


    def get_ignore_activation_dynamics(self, *args):
        """
        get_ignore_activation_dynamics(Muscle self, int i) -> bool const

        Parameters:
            i: int

        get_ignore_activation_dynamics(Muscle self) -> bool const &

        Parameters:
            self: OpenSim::Muscle const *

        """
        return _opensim.Muscle_get_ignore_activation_dynamics(self, *args)


    def upd_ignore_activation_dynamics(self, *args):
        """
        upd_ignore_activation_dynamics(Muscle self, int i) -> bool

        Parameters:
            i: int

        upd_ignore_activation_dynamics(Muscle self) -> bool &

        Parameters:
            self: OpenSim::Muscle *

        """
        return _opensim.Muscle_upd_ignore_activation_dynamics(self, *args)


    def set_ignore_activation_dynamics(self, *args):
        """
        set_ignore_activation_dynamics(Muscle self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_ignore_activation_dynamics(Muscle self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.Muscle_set_ignore_activation_dynamics(self, *args)


    def getMaxIsometricForce(self):
        """
        getMaxIsometricForce(Muscle self) -> double

        Parameters:
            self: OpenSim::Muscle const *

        """
        return _opensim.Muscle_getMaxIsometricForce(self)


    def setMaxIsometricForce(self, maxIsometricForce):
        """
        setMaxIsometricForce(Muscle self, double maxIsometricForce)

        Parameters:
            maxIsometricForce: double

        """
        return _opensim.Muscle_setMaxIsometricForce(self, maxIsometricForce)


    def getOptimalFiberLength(self):
        """
        getOptimalFiberLength(Muscle self) -> double

        Parameters:
            self: OpenSim::Muscle const *

        """
        return _opensim.Muscle_getOptimalFiberLength(self)


    def setOptimalFiberLength(self, optimalFiberLength):
        """
        setOptimalFiberLength(Muscle self, double optimalFiberLength)

        Parameters:
            optimalFiberLength: double

        """
        return _opensim.Muscle_setOptimalFiberLength(self, optimalFiberLength)


    def getTendonSlackLength(self):
        """
        getTendonSlackLength(Muscle self) -> double

        Parameters:
            self: OpenSim::Muscle const *

        """
        return _opensim.Muscle_getTendonSlackLength(self)


    def setTendonSlackLength(self, tendonSlackLength):
        """
        setTendonSlackLength(Muscle self, double tendonSlackLength)

        Parameters:
            tendonSlackLength: double

        """
        return _opensim.Muscle_setTendonSlackLength(self, tendonSlackLength)


    def getPennationAngleAtOptimalFiberLength(self):
        """
        getPennationAngleAtOptimalFiberLength(Muscle self) -> double

        Parameters:
            self: OpenSim::Muscle const *

        """
        return _opensim.Muscle_getPennationAngleAtOptimalFiberLength(self)


    def setPennationAngleAtOptimalFiberLength(self, pennationAngle):
        """
        setPennationAngleAtOptimalFiberLength(Muscle self, double pennationAngle)

        Parameters:
            pennationAngle: double

        """
        return _opensim.Muscle_setPennationAngleAtOptimalFiberLength(self, pennationAngle)


    def getMaxContractionVelocity(self):
        """
        getMaxContractionVelocity(Muscle self) -> double

        Parameters:
            self: OpenSim::Muscle const *

        """
        return _opensim.Muscle_getMaxContractionVelocity(self)


    def setMaxContractionVelocity(self, maxContractionVelocity):
        """
        setMaxContractionVelocity(Muscle self, double maxContractionVelocity)

        Parameters:
            maxContractionVelocity: double

        """
        return _opensim.Muscle_setMaxContractionVelocity(self, maxContractionVelocity)


    def getIgnoreTendonCompliance(self, s):
        """
        getIgnoreTendonCompliance(Muscle self, State s) -> bool

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getIgnoreTendonCompliance(self, s)


    def setIgnoreTendonCompliance(self, s, ignore):
        """
        setIgnoreTendonCompliance(Muscle self, State s, bool ignore)

        Parameters:
            s: SimTK::State &
            ignore: bool

        """
        return _opensim.Muscle_setIgnoreTendonCompliance(self, s, ignore)


    def getIgnoreActivationDynamics(self, s):
        """
        getIgnoreActivationDynamics(Muscle self, State s) -> bool

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getIgnoreActivationDynamics(self, s)


    def setIgnoreActivationDynamics(self, s, ignore):
        """
        setIgnoreActivationDynamics(Muscle self, State s, bool ignore)

        Parameters:
            s: SimTK::State &
            ignore: bool

        """
        return _opensim.Muscle_setIgnoreActivationDynamics(self, s, ignore)


    def getActivation(self, s):
        """
        getActivation(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getActivation(self, s)


    def getFiberLength(self, s):
        """
        getFiberLength(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getFiberLength(self, s)


    def getPennationAngle(self, s):
        """
        getPennationAngle(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getPennationAngle(self, s)


    def getCosPennationAngle(self, s):
        """
        getCosPennationAngle(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getCosPennationAngle(self, s)


    def getTendonLength(self, s):
        """
        getTendonLength(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getTendonLength(self, s)


    def getNormalizedFiberLength(self, s):
        """
        getNormalizedFiberLength(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getNormalizedFiberLength(self, s)


    def getFiberLengthAlongTendon(self, s):
        """
        getFiberLengthAlongTendon(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getFiberLengthAlongTendon(self, s)


    def getTendonStrain(self, s):
        """
        getTendonStrain(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getTendonStrain(self, s)


    def getFiberPotentialEnergy(self, s):
        """
        getFiberPotentialEnergy(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getFiberPotentialEnergy(self, s)


    def getTendonPotentialEnergy(self, s):
        """
        getTendonPotentialEnergy(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getTendonPotentialEnergy(self, s)


    def getMusclePotentialEnergy(self, s):
        """
        getMusclePotentialEnergy(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getMusclePotentialEnergy(self, s)


    def getPassiveForceMultiplier(self, s):
        """
        getPassiveForceMultiplier(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getPassiveForceMultiplier(self, s)


    def getActiveForceLengthMultiplier(self, s):
        """
        getActiveForceLengthMultiplier(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getActiveForceLengthMultiplier(self, s)


    def getFiberVelocity(self, s):
        """
        getFiberVelocity(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getFiberVelocity(self, s)


    def getNormalizedFiberVelocity(self, s):
        """
        getNormalizedFiberVelocity(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getNormalizedFiberVelocity(self, s)


    def getFiberVelocityAlongTendon(self, s):
        """
        getFiberVelocityAlongTendon(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getFiberVelocityAlongTendon(self, s)


    def getPennationAngularVelocity(self, s):
        """
        getPennationAngularVelocity(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getPennationAngularVelocity(self, s)


    def getTendonVelocity(self, s):
        """
        getTendonVelocity(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getTendonVelocity(self, s)


    def getForceVelocityMultiplier(self, s):
        """
        getForceVelocityMultiplier(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getForceVelocityMultiplier(self, s)


    def getFiberForce(self, s):
        """
        getFiberForce(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getFiberForce(self, s)


    def getFiberForceAlongTendon(self, s):
        """
        getFiberForceAlongTendon(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getFiberForceAlongTendon(self, s)


    def getActiveFiberForce(self, s):
        """
        getActiveFiberForce(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getActiveFiberForce(self, s)


    def getPassiveFiberForce(self, s):
        """
        getPassiveFiberForce(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getPassiveFiberForce(self, s)


    def getActiveFiberForceAlongTendon(self, s):
        """
        getActiveFiberForceAlongTendon(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getActiveFiberForceAlongTendon(self, s)


    def getPassiveFiberForceAlongTendon(self, s):
        """
        getPassiveFiberForceAlongTendon(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getPassiveFiberForceAlongTendon(self, s)


    def getTendonForce(self, s):
        """
        getTendonForce(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getTendonForce(self, s)


    def getFiberStiffness(self, s):
        """
        getFiberStiffness(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getFiberStiffness(self, s)


    def getFiberStiffnessAlongTendon(self, s):
        """
        getFiberStiffnessAlongTendon(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getFiberStiffnessAlongTendon(self, s)


    def getTendonStiffness(self, s):
        """
        getTendonStiffness(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getTendonStiffness(self, s)


    def getMuscleStiffness(self, s):
        """
        getMuscleStiffness(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getMuscleStiffness(self, s)


    def getFiberActivePower(self, s):
        """
        getFiberActivePower(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getFiberActivePower(self, s)


    def getFiberPassivePower(self, s):
        """
        getFiberPassivePower(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getFiberPassivePower(self, s)


    def getTendonPower(self, s):
        """
        getTendonPower(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getTendonPower(self, s)


    def getMusclePower(self, s):
        """
        getMusclePower(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getMusclePower(self, s)


    def getStress(self, s):
        """
        getStress(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getStress(self, s)


    def setExcitation(self, s, excitation):
        """
        setExcitation(Muscle self, State s, double excitation)

        Parameters:
            s: SimTK::State &
            excitation: double

        """
        return _opensim.Muscle_setExcitation(self, s, excitation)


    def getExcitation(self, s):
        """
        getExcitation(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_getExcitation(self, s)


    def setActivation(self, s, activation):
        """
        setActivation(Muscle self, State s, double activation)

        Parameters:
            s: SimTK::State &
            activation: double

        """
        return _opensim.Muscle_setActivation(self, s, activation)


    def computeActuation(self, s):
        """
        computeActuation(Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Muscle_computeActuation(self, s)


    def equilibrate(self, s):
        """
        equilibrate(Muscle self, State s)

        Parameters:
            s: SimTK::State &

        """
        return _opensim.Muscle_equilibrate(self, s)


    def calcInextensibleTendonActiveFiberForce(self, s, aActivation):
        """
        calcInextensibleTendonActiveFiberForce(Muscle self, State s, double aActivation) -> double

        Parameters:
            s: SimTK::State &
            aActivation: double

        """
        return _opensim.Muscle_calcInextensibleTendonActiveFiberForce(self, s, aActivation)

    __swig_destroy__ = _opensim.delete_Muscle
    __del__ = lambda self: None
Muscle_swigregister = _opensim.Muscle_swigregister
Muscle_swigregister(Muscle)

def Muscle_safeDownCast(obj):
    """
    Muscle_safeDownCast(OpenSimObject obj) -> Muscle

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Muscle_safeDownCast(obj)

def Muscle_getClassName():
    """Muscle_getClassName() -> std::string const &"""
    return _opensim.Muscle_getClassName()

class ActivationFiberLengthMuscle(Muscle):
    """Proxy of C++ OpenSim::ActivationFiberLengthMuscle class"""
    __swig_setmethods__ = {}
    for _s in [Muscle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActivationFiberLengthMuscle, name, value)
    __swig_getmethods__ = {}
    for _s in [Muscle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ActivationFiberLengthMuscle, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ActivationFiberLengthMuscle

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ActivationFiberLengthMuscle_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ActivationFiberLengthMuscle self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ActivationFiberLengthMuscle_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ActivationFiberLengthMuscle_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ActivationFiberLengthMuscle self) -> ActivationFiberLengthMuscle

        Parameters:
            self: OpenSim::ActivationFiberLengthMuscle const *

        """
        return _opensim.ActivationFiberLengthMuscle_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ActivationFiberLengthMuscle self) -> std::string const &

        Parameters:
            self: OpenSim::ActivationFiberLengthMuscle const *

        """
        return _opensim.ActivationFiberLengthMuscle_getConcreteClassName(self)


    def copyProperty_default_activation(self, source):
        """
        copyProperty_default_activation(ActivationFiberLengthMuscle self, ActivationFiberLengthMuscle source)

        Parameters:
            source: OpenSim::ActivationFiberLengthMuscle::Self const &

        """
        return _opensim.ActivationFiberLengthMuscle_copyProperty_default_activation(self, source)


    def append_default_activation(self, value):
        """
        append_default_activation(ActivationFiberLengthMuscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ActivationFiberLengthMuscle_append_default_activation(self, value)


    def constructProperty_default_activation(self, initValue):
        """
        constructProperty_default_activation(ActivationFiberLengthMuscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ActivationFiberLengthMuscle_constructProperty_default_activation(self, initValue)


    def get_default_activation(self, *args):
        """
        get_default_activation(ActivationFiberLengthMuscle self, int i) -> double const

        Parameters:
            i: int

        get_default_activation(ActivationFiberLengthMuscle self) -> double const &

        Parameters:
            self: OpenSim::ActivationFiberLengthMuscle const *

        """
        return _opensim.ActivationFiberLengthMuscle_get_default_activation(self, *args)


    def upd_default_activation(self, *args):
        """
        upd_default_activation(ActivationFiberLengthMuscle self, int i) -> double

        Parameters:
            i: int

        upd_default_activation(ActivationFiberLengthMuscle self) -> double &

        Parameters:
            self: OpenSim::ActivationFiberLengthMuscle *

        """
        return _opensim.ActivationFiberLengthMuscle_upd_default_activation(self, *args)


    def set_default_activation(self, *args):
        """
        set_default_activation(ActivationFiberLengthMuscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_default_activation(ActivationFiberLengthMuscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ActivationFiberLengthMuscle_set_default_activation(self, *args)


    def copyProperty_default_fiber_length(self, source):
        """
        copyProperty_default_fiber_length(ActivationFiberLengthMuscle self, ActivationFiberLengthMuscle source)

        Parameters:
            source: OpenSim::ActivationFiberLengthMuscle::Self const &

        """
        return _opensim.ActivationFiberLengthMuscle_copyProperty_default_fiber_length(self, source)


    def append_default_fiber_length(self, value):
        """
        append_default_fiber_length(ActivationFiberLengthMuscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ActivationFiberLengthMuscle_append_default_fiber_length(self, value)


    def constructProperty_default_fiber_length(self, initValue):
        """
        constructProperty_default_fiber_length(ActivationFiberLengthMuscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ActivationFiberLengthMuscle_constructProperty_default_fiber_length(self, initValue)


    def get_default_fiber_length(self, *args):
        """
        get_default_fiber_length(ActivationFiberLengthMuscle self, int i) -> double const

        Parameters:
            i: int

        get_default_fiber_length(ActivationFiberLengthMuscle self) -> double const &

        Parameters:
            self: OpenSim::ActivationFiberLengthMuscle const *

        """
        return _opensim.ActivationFiberLengthMuscle_get_default_fiber_length(self, *args)


    def upd_default_fiber_length(self, *args):
        """
        upd_default_fiber_length(ActivationFiberLengthMuscle self, int i) -> double

        Parameters:
            i: int

        upd_default_fiber_length(ActivationFiberLengthMuscle self) -> double &

        Parameters:
            self: OpenSim::ActivationFiberLengthMuscle *

        """
        return _opensim.ActivationFiberLengthMuscle_upd_default_fiber_length(self, *args)


    def set_default_fiber_length(self, *args):
        """
        set_default_fiber_length(ActivationFiberLengthMuscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_default_fiber_length(ActivationFiberLengthMuscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ActivationFiberLengthMuscle_set_default_fiber_length(self, *args)


    def getDefaultActivation(self):
        """
        getDefaultActivation(ActivationFiberLengthMuscle self) -> double

        Parameters:
            self: OpenSim::ActivationFiberLengthMuscle const *

        """
        return _opensim.ActivationFiberLengthMuscle_getDefaultActivation(self)


    def setDefaultActivation(self, activation):
        """
        setDefaultActivation(ActivationFiberLengthMuscle self, double activation)

        Parameters:
            activation: double

        """
        return _opensim.ActivationFiberLengthMuscle_setDefaultActivation(self, activation)


    def getDefaultFiberLength(self):
        """
        getDefaultFiberLength(ActivationFiberLengthMuscle self) -> double

        Parameters:
            self: OpenSim::ActivationFiberLengthMuscle const *

        """
        return _opensim.ActivationFiberLengthMuscle_getDefaultFiberLength(self)


    def setDefaultFiberLength(self, length):
        """
        setDefaultFiberLength(ActivationFiberLengthMuscle self, double length)

        Parameters:
            length: double

        """
        return _opensim.ActivationFiberLengthMuscle_setDefaultFiberLength(self, length)


    def setActivation(self, s, activation):
        """
        setActivation(ActivationFiberLengthMuscle self, State s, double activation)

        Parameters:
            s: SimTK::State &
            activation: double

        """
        return _opensim.ActivationFiberLengthMuscle_setActivation(self, s, activation)


    def setFiberLength(self, s, fiberLength):
        """
        setFiberLength(ActivationFiberLengthMuscle self, State s, double fiberLength)

        Parameters:
            s: SimTK::State &
            fiberLength: double

        """
        return _opensim.ActivationFiberLengthMuscle_setFiberLength(self, s, fiberLength)


    def getStateVariableNames(self):
        """
        getStateVariableNames(ActivationFiberLengthMuscle self) -> ArrayStr

        Parameters:
            self: OpenSim::ActivationFiberLengthMuscle const *

        """
        return _opensim.ActivationFiberLengthMuscle_getStateVariableNames(self)


    def getStateVariableSystemIndex(self, stateVariableName):
        """
        getStateVariableSystemIndex(ActivationFiberLengthMuscle self, std::string const & stateVariableName) -> SimTK::SystemYIndex

        Parameters:
            stateVariableName: std::string const &

        """
        return _opensim.ActivationFiberLengthMuscle_getStateVariableSystemIndex(self, stateVariableName)


    def getActivationRate(self, s):
        """
        getActivationRate(ActivationFiberLengthMuscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.ActivationFiberLengthMuscle_getActivationRate(self, s)

    __swig_destroy__ = _opensim.delete_ActivationFiberLengthMuscle
    __del__ = lambda self: None
ActivationFiberLengthMuscle_swigregister = _opensim.ActivationFiberLengthMuscle_swigregister
ActivationFiberLengthMuscle_swigregister(ActivationFiberLengthMuscle)

def ActivationFiberLengthMuscle_safeDownCast(obj):
    """
    ActivationFiberLengthMuscle_safeDownCast(OpenSimObject obj) -> ActivationFiberLengthMuscle

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ActivationFiberLengthMuscle_safeDownCast(obj)

def ActivationFiberLengthMuscle_getClassName():
    """ActivationFiberLengthMuscle_getClassName() -> std::string const &"""
    return _opensim.ActivationFiberLengthMuscle_getClassName()

class PointToPointSpring(Force):
    """Proxy of C++ OpenSim::PointToPointSpring class"""
    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointToPointSpring, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointToPointSpring, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PointToPointSpring

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.PointToPointSpring_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(PointToPointSpring self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.PointToPointSpring_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.PointToPointSpring_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(PointToPointSpring self) -> PointToPointSpring

        Parameters:
            self: OpenSim::PointToPointSpring const *

        """
        return _opensim.PointToPointSpring_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PointToPointSpring self) -> std::string const &

        Parameters:
            self: OpenSim::PointToPointSpring const *

        """
        return _opensim.PointToPointSpring_getConcreteClassName(self)


    def copyProperty_body1(self, source):
        """
        copyProperty_body1(PointToPointSpring self, PointToPointSpring source)

        Parameters:
            source: OpenSim::PointToPointSpring::Self const &

        """
        return _opensim.PointToPointSpring_copyProperty_body1(self, source)


    def append_body1(self, value):
        """
        append_body1(PointToPointSpring self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.PointToPointSpring_append_body1(self, value)


    def constructProperty_body1(self, *args):
        """
        constructProperty_body1(PointToPointSpring self)
        constructProperty_body1(PointToPointSpring self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.PointToPointSpring_constructProperty_body1(self, *args)


    def get_body1(self, *args):
        """
        get_body1(PointToPointSpring self, int i) -> std::string const

        Parameters:
            i: int

        get_body1(PointToPointSpring self) -> std::string const &

        Parameters:
            self: OpenSim::PointToPointSpring const *

        """
        return _opensim.PointToPointSpring_get_body1(self, *args)


    def upd_body1(self, *args):
        """
        upd_body1(PointToPointSpring self, int i) -> std::string

        Parameters:
            i: int

        upd_body1(PointToPointSpring self) -> std::string &

        Parameters:
            self: OpenSim::PointToPointSpring *

        """
        return _opensim.PointToPointSpring_upd_body1(self, *args)


    def set_body1(self, *args):
        """
        set_body1(PointToPointSpring self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_body1(PointToPointSpring self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.PointToPointSpring_set_body1(self, *args)


    def copyProperty_body2(self, source):
        """
        copyProperty_body2(PointToPointSpring self, PointToPointSpring source)

        Parameters:
            source: OpenSim::PointToPointSpring::Self const &

        """
        return _opensim.PointToPointSpring_copyProperty_body2(self, source)


    def append_body2(self, value):
        """
        append_body2(PointToPointSpring self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.PointToPointSpring_append_body2(self, value)


    def constructProperty_body2(self, *args):
        """
        constructProperty_body2(PointToPointSpring self)
        constructProperty_body2(PointToPointSpring self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.PointToPointSpring_constructProperty_body2(self, *args)


    def get_body2(self, *args):
        """
        get_body2(PointToPointSpring self, int i) -> std::string const

        Parameters:
            i: int

        get_body2(PointToPointSpring self) -> std::string const &

        Parameters:
            self: OpenSim::PointToPointSpring const *

        """
        return _opensim.PointToPointSpring_get_body2(self, *args)


    def upd_body2(self, *args):
        """
        upd_body2(PointToPointSpring self, int i) -> std::string

        Parameters:
            i: int

        upd_body2(PointToPointSpring self) -> std::string &

        Parameters:
            self: OpenSim::PointToPointSpring *

        """
        return _opensim.PointToPointSpring_upd_body2(self, *args)


    def set_body2(self, *args):
        """
        set_body2(PointToPointSpring self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_body2(PointToPointSpring self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.PointToPointSpring_set_body2(self, *args)


    def copyProperty_point1(self, source):
        """
        copyProperty_point1(PointToPointSpring self, PointToPointSpring source)

        Parameters:
            source: OpenSim::PointToPointSpring::Self const &

        """
        return _opensim.PointToPointSpring_copyProperty_point1(self, source)


    def append_point1(self, value):
        """
        append_point1(PointToPointSpring self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.PointToPointSpring_append_point1(self, value)


    def constructProperty_point1(self, initValue):
        """
        constructProperty_point1(PointToPointSpring self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.PointToPointSpring_constructProperty_point1(self, initValue)


    def get_point1(self, *args):
        """
        get_point1(PointToPointSpring self, int i) -> Vec3

        Parameters:
            i: int

        get_point1(PointToPointSpring self) -> Vec3

        Parameters:
            self: OpenSim::PointToPointSpring const *

        """
        return _opensim.PointToPointSpring_get_point1(self, *args)


    def upd_point1(self, *args):
        """
        upd_point1(PointToPointSpring self, int i) -> Vec3

        Parameters:
            i: int

        upd_point1(PointToPointSpring self) -> Vec3

        Parameters:
            self: OpenSim::PointToPointSpring *

        """
        return _opensim.PointToPointSpring_upd_point1(self, *args)


    def set_point1(self, *args):
        """
        set_point1(PointToPointSpring self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_point1(PointToPointSpring self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.PointToPointSpring_set_point1(self, *args)


    def copyProperty_point2(self, source):
        """
        copyProperty_point2(PointToPointSpring self, PointToPointSpring source)

        Parameters:
            source: OpenSim::PointToPointSpring::Self const &

        """
        return _opensim.PointToPointSpring_copyProperty_point2(self, source)


    def append_point2(self, value):
        """
        append_point2(PointToPointSpring self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.PointToPointSpring_append_point2(self, value)


    def constructProperty_point2(self, initValue):
        """
        constructProperty_point2(PointToPointSpring self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.PointToPointSpring_constructProperty_point2(self, initValue)


    def get_point2(self, *args):
        """
        get_point2(PointToPointSpring self, int i) -> Vec3

        Parameters:
            i: int

        get_point2(PointToPointSpring self) -> Vec3

        Parameters:
            self: OpenSim::PointToPointSpring const *

        """
        return _opensim.PointToPointSpring_get_point2(self, *args)


    def upd_point2(self, *args):
        """
        upd_point2(PointToPointSpring self, int i) -> Vec3

        Parameters:
            i: int

        upd_point2(PointToPointSpring self) -> Vec3

        Parameters:
            self: OpenSim::PointToPointSpring *

        """
        return _opensim.PointToPointSpring_upd_point2(self, *args)


    def set_point2(self, *args):
        """
        set_point2(PointToPointSpring self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_point2(PointToPointSpring self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.PointToPointSpring_set_point2(self, *args)


    def copyProperty_stiffness(self, source):
        """
        copyProperty_stiffness(PointToPointSpring self, PointToPointSpring source)

        Parameters:
            source: OpenSim::PointToPointSpring::Self const &

        """
        return _opensim.PointToPointSpring_copyProperty_stiffness(self, source)


    def append_stiffness(self, value):
        """
        append_stiffness(PointToPointSpring self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.PointToPointSpring_append_stiffness(self, value)


    def constructProperty_stiffness(self, initValue):
        """
        constructProperty_stiffness(PointToPointSpring self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.PointToPointSpring_constructProperty_stiffness(self, initValue)


    def get_stiffness(self, *args):
        """
        get_stiffness(PointToPointSpring self, int i) -> double const

        Parameters:
            i: int

        get_stiffness(PointToPointSpring self) -> double const &

        Parameters:
            self: OpenSim::PointToPointSpring const *

        """
        return _opensim.PointToPointSpring_get_stiffness(self, *args)


    def upd_stiffness(self, *args):
        """
        upd_stiffness(PointToPointSpring self, int i) -> double

        Parameters:
            i: int

        upd_stiffness(PointToPointSpring self) -> double &

        Parameters:
            self: OpenSim::PointToPointSpring *

        """
        return _opensim.PointToPointSpring_upd_stiffness(self, *args)


    def set_stiffness(self, *args):
        """
        set_stiffness(PointToPointSpring self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_stiffness(PointToPointSpring self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.PointToPointSpring_set_stiffness(self, *args)


    def copyProperty_rest_length(self, source):
        """
        copyProperty_rest_length(PointToPointSpring self, PointToPointSpring source)

        Parameters:
            source: OpenSim::PointToPointSpring::Self const &

        """
        return _opensim.PointToPointSpring_copyProperty_rest_length(self, source)


    def append_rest_length(self, value):
        """
        append_rest_length(PointToPointSpring self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.PointToPointSpring_append_rest_length(self, value)


    def constructProperty_rest_length(self, initValue):
        """
        constructProperty_rest_length(PointToPointSpring self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.PointToPointSpring_constructProperty_rest_length(self, initValue)


    def get_rest_length(self, *args):
        """
        get_rest_length(PointToPointSpring self, int i) -> double const

        Parameters:
            i: int

        get_rest_length(PointToPointSpring self) -> double const &

        Parameters:
            self: OpenSim::PointToPointSpring const *

        """
        return _opensim.PointToPointSpring_get_rest_length(self, *args)


    def upd_rest_length(self, *args):
        """
        upd_rest_length(PointToPointSpring self, int i) -> double

        Parameters:
            i: int

        upd_rest_length(PointToPointSpring self) -> double &

        Parameters:
            self: OpenSim::PointToPointSpring *

        """
        return _opensim.PointToPointSpring_upd_rest_length(self, *args)


    def set_rest_length(self, *args):
        """
        set_rest_length(PointToPointSpring self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_rest_length(PointToPointSpring self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.PointToPointSpring_set_rest_length(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::PointToPointSpring self) -> PointToPointSpring
        __init__(OpenSim::PointToPointSpring self, std::string body1Name, Vec3 point1, std::string body2Name, Vec3 point2, double stiffness, double restlength) -> PointToPointSpring

        Parameters:
            body1Name: std::string
            point1: SimTK::Vec3
            body2Name: std::string
            point2: SimTK::Vec3
            stiffness: double
            restlength: double

        """
        this = _opensim.new_PointToPointSpring(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getDisplayer(self):
        """
        getDisplayer(PointToPointSpring self) -> VisibleObject

        Parameters:
            self: OpenSim::PointToPointSpring const *

        """
        return _opensim.PointToPointSpring_getDisplayer(self)


    def updateDisplayer(self, s):
        """
        updateDisplayer(PointToPointSpring self, State s)

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.PointToPointSpring_updateDisplayer(self, s)


    def updateGeometry(self, s):
        """
        updateGeometry(PointToPointSpring self, State s)

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.PointToPointSpring_updateGeometry(self, s)


    def setBody1Name(self, body1Name):
        """
        setBody1Name(PointToPointSpring self, std::string const & body1Name)

        Parameters:
            body1Name: std::string const &

        """
        return _opensim.PointToPointSpring_setBody1Name(self, body1Name)


    def setBody2Name(self, body2Name):
        """
        setBody2Name(PointToPointSpring self, std::string const & body2Name)

        Parameters:
            body2Name: std::string const &

        """
        return _opensim.PointToPointSpring_setBody2Name(self, body2Name)


    def getBody1Name(self):
        """
        getBody1Name(PointToPointSpring self) -> std::string const &

        Parameters:
            self: OpenSim::PointToPointSpring const *

        """
        return _opensim.PointToPointSpring_getBody1Name(self)


    def getBody2Name(self):
        """
        getBody2Name(PointToPointSpring self) -> std::string const &

        Parameters:
            self: OpenSim::PointToPointSpring const *

        """
        return _opensim.PointToPointSpring_getBody2Name(self)


    def setPoint1(self, aPosition):
        """
        setPoint1(PointToPointSpring self, Vec3 aPosition)

        Parameters:
            aPosition: SimTK::Vec3

        """
        return _opensim.PointToPointSpring_setPoint1(self, aPosition)


    def getPoint1(self):
        """
        getPoint1(PointToPointSpring self) -> Vec3

        Parameters:
            self: OpenSim::PointToPointSpring const *

        """
        return _opensim.PointToPointSpring_getPoint1(self)


    def setPoint2(self, aPosition):
        """
        setPoint2(PointToPointSpring self, Vec3 aPosition)

        Parameters:
            aPosition: SimTK::Vec3

        """
        return _opensim.PointToPointSpring_setPoint2(self, aPosition)


    def getPoint2(self):
        """
        getPoint2(PointToPointSpring self) -> Vec3

        Parameters:
            self: OpenSim::PointToPointSpring const *

        """
        return _opensim.PointToPointSpring_getPoint2(self)


    def setStiffness(self, stiffness):
        """
        setStiffness(PointToPointSpring self, double stiffness)

        Parameters:
            stiffness: double

        """
        return _opensim.PointToPointSpring_setStiffness(self, stiffness)


    def getStiffness(self):
        """
        getStiffness(PointToPointSpring self) -> double

        Parameters:
            self: OpenSim::PointToPointSpring const *

        """
        return _opensim.PointToPointSpring_getStiffness(self)


    def setRestlength(self, restLength):
        """
        setRestlength(PointToPointSpring self, double restLength)

        Parameters:
            restLength: double

        """
        return _opensim.PointToPointSpring_setRestlength(self, restLength)


    def getRestlength(self):
        """
        getRestlength(PointToPointSpring self) -> double

        Parameters:
            self: OpenSim::PointToPointSpring const *

        """
        return _opensim.PointToPointSpring_getRestlength(self)


    def connectToModel(self, model):
        """
        connectToModel(PointToPointSpring self, Model model)

        Parameters:
            model: OpenSim::Model &

        """
        return _opensim.PointToPointSpring_connectToModel(self, model)


    def addToSystem(self, system):
        """
        addToSystem(PointToPointSpring self, SimTK::MultibodySystem & system)

        Parameters:
            system: SimTK::MultibodySystem &

        """
        return _opensim.PointToPointSpring_addToSystem(self, system)


    def getRecordLabels(self):
        """
        getRecordLabels(PointToPointSpring self) -> ArrayStr

        Parameters:
            self: OpenSim::PointToPointSpring const *

        """
        return _opensim.PointToPointSpring_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(PointToPointSpring self, State state) -> ArrayDouble

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.PointToPointSpring_getRecordValues(self, state)

    __swig_destroy__ = _opensim.delete_PointToPointSpring
    __del__ = lambda self: None
PointToPointSpring_swigregister = _opensim.PointToPointSpring_swigregister
PointToPointSpring_swigregister(PointToPointSpring)

def PointToPointSpring_safeDownCast(obj):
    """
    PointToPointSpring_safeDownCast(OpenSimObject obj) -> PointToPointSpring

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.PointToPointSpring_safeDownCast(obj)

def PointToPointSpring_getClassName():
    """PointToPointSpring_getClassName() -> std::string const &"""
    return _opensim.PointToPointSpring_getClassName()

class ExpressionBasedPointToPointForce(Force):
    """Proxy of C++ OpenSim::ExpressionBasedPointToPointForce class"""
    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpressionBasedPointToPointForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExpressionBasedPointToPointForce, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ExpressionBasedPointToPointForce

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ExpressionBasedPointToPointForce_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ExpressionBasedPointToPointForce self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ExpressionBasedPointToPointForce_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ExpressionBasedPointToPointForce_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ExpressionBasedPointToPointForce self) -> ExpressionBasedPointToPointForce

        Parameters:
            self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _opensim.ExpressionBasedPointToPointForce_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ExpressionBasedPointToPointForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _opensim.ExpressionBasedPointToPointForce_getConcreteClassName(self)


    def copyProperty_body1(self, source):
        """
        copyProperty_body1(ExpressionBasedPointToPointForce self, ExpressionBasedPointToPointForce source)

        Parameters:
            source: OpenSim::ExpressionBasedPointToPointForce::Self const &

        """
        return _opensim.ExpressionBasedPointToPointForce_copyProperty_body1(self, source)


    def append_body1(self, value):
        """
        append_body1(ExpressionBasedPointToPointForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedPointToPointForce_append_body1(self, value)


    def constructProperty_body1(self, *args):
        """
        constructProperty_body1(ExpressionBasedPointToPointForce self)
        constructProperty_body1(ExpressionBasedPointToPointForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.ExpressionBasedPointToPointForce_constructProperty_body1(self, *args)


    def get_body1(self, *args):
        """
        get_body1(ExpressionBasedPointToPointForce self, int i) -> std::string const

        Parameters:
            i: int

        get_body1(ExpressionBasedPointToPointForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _opensim.ExpressionBasedPointToPointForce_get_body1(self, *args)


    def upd_body1(self, *args):
        """
        upd_body1(ExpressionBasedPointToPointForce self, int i) -> std::string

        Parameters:
            i: int

        upd_body1(ExpressionBasedPointToPointForce self) -> std::string &

        Parameters:
            self: OpenSim::ExpressionBasedPointToPointForce *

        """
        return _opensim.ExpressionBasedPointToPointForce_upd_body1(self, *args)


    def set_body1(self, *args):
        """
        set_body1(ExpressionBasedPointToPointForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_body1(ExpressionBasedPointToPointForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedPointToPointForce_set_body1(self, *args)


    def copyProperty_body2(self, source):
        """
        copyProperty_body2(ExpressionBasedPointToPointForce self, ExpressionBasedPointToPointForce source)

        Parameters:
            source: OpenSim::ExpressionBasedPointToPointForce::Self const &

        """
        return _opensim.ExpressionBasedPointToPointForce_copyProperty_body2(self, source)


    def append_body2(self, value):
        """
        append_body2(ExpressionBasedPointToPointForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedPointToPointForce_append_body2(self, value)


    def constructProperty_body2(self, *args):
        """
        constructProperty_body2(ExpressionBasedPointToPointForce self)
        constructProperty_body2(ExpressionBasedPointToPointForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.ExpressionBasedPointToPointForce_constructProperty_body2(self, *args)


    def get_body2(self, *args):
        """
        get_body2(ExpressionBasedPointToPointForce self, int i) -> std::string const

        Parameters:
            i: int

        get_body2(ExpressionBasedPointToPointForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _opensim.ExpressionBasedPointToPointForce_get_body2(self, *args)


    def upd_body2(self, *args):
        """
        upd_body2(ExpressionBasedPointToPointForce self, int i) -> std::string

        Parameters:
            i: int

        upd_body2(ExpressionBasedPointToPointForce self) -> std::string &

        Parameters:
            self: OpenSim::ExpressionBasedPointToPointForce *

        """
        return _opensim.ExpressionBasedPointToPointForce_upd_body2(self, *args)


    def set_body2(self, *args):
        """
        set_body2(ExpressionBasedPointToPointForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_body2(ExpressionBasedPointToPointForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedPointToPointForce_set_body2(self, *args)


    def copyProperty_point1(self, source):
        """
        copyProperty_point1(ExpressionBasedPointToPointForce self, ExpressionBasedPointToPointForce source)

        Parameters:
            source: OpenSim::ExpressionBasedPointToPointForce::Self const &

        """
        return _opensim.ExpressionBasedPointToPointForce_copyProperty_point1(self, source)


    def append_point1(self, value):
        """
        append_point1(ExpressionBasedPointToPointForce self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedPointToPointForce_append_point1(self, value)


    def constructProperty_point1(self, initValue):
        """
        constructProperty_point1(ExpressionBasedPointToPointForce self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedPointToPointForce_constructProperty_point1(self, initValue)


    def get_point1(self, *args):
        """
        get_point1(ExpressionBasedPointToPointForce self, int i) -> Vec3

        Parameters:
            i: int

        get_point1(ExpressionBasedPointToPointForce self) -> Vec3

        Parameters:
            self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _opensim.ExpressionBasedPointToPointForce_get_point1(self, *args)


    def upd_point1(self, *args):
        """
        upd_point1(ExpressionBasedPointToPointForce self, int i) -> Vec3

        Parameters:
            i: int

        upd_point1(ExpressionBasedPointToPointForce self) -> Vec3

        Parameters:
            self: OpenSim::ExpressionBasedPointToPointForce *

        """
        return _opensim.ExpressionBasedPointToPointForce_upd_point1(self, *args)


    def set_point1(self, *args):
        """
        set_point1(ExpressionBasedPointToPointForce self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_point1(ExpressionBasedPointToPointForce self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedPointToPointForce_set_point1(self, *args)


    def copyProperty_point2(self, source):
        """
        copyProperty_point2(ExpressionBasedPointToPointForce self, ExpressionBasedPointToPointForce source)

        Parameters:
            source: OpenSim::ExpressionBasedPointToPointForce::Self const &

        """
        return _opensim.ExpressionBasedPointToPointForce_copyProperty_point2(self, source)


    def append_point2(self, value):
        """
        append_point2(ExpressionBasedPointToPointForce self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedPointToPointForce_append_point2(self, value)


    def constructProperty_point2(self, initValue):
        """
        constructProperty_point2(ExpressionBasedPointToPointForce self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedPointToPointForce_constructProperty_point2(self, initValue)


    def get_point2(self, *args):
        """
        get_point2(ExpressionBasedPointToPointForce self, int i) -> Vec3

        Parameters:
            i: int

        get_point2(ExpressionBasedPointToPointForce self) -> Vec3

        Parameters:
            self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _opensim.ExpressionBasedPointToPointForce_get_point2(self, *args)


    def upd_point2(self, *args):
        """
        upd_point2(ExpressionBasedPointToPointForce self, int i) -> Vec3

        Parameters:
            i: int

        upd_point2(ExpressionBasedPointToPointForce self) -> Vec3

        Parameters:
            self: OpenSim::ExpressionBasedPointToPointForce *

        """
        return _opensim.ExpressionBasedPointToPointForce_upd_point2(self, *args)


    def set_point2(self, *args):
        """
        set_point2(ExpressionBasedPointToPointForce self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_point2(ExpressionBasedPointToPointForce self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedPointToPointForce_set_point2(self, *args)


    def copyProperty_expression(self, source):
        """
        copyProperty_expression(ExpressionBasedPointToPointForce self, ExpressionBasedPointToPointForce source)

        Parameters:
            source: OpenSim::ExpressionBasedPointToPointForce::Self const &

        """
        return _opensim.ExpressionBasedPointToPointForce_copyProperty_expression(self, source)


    def append_expression(self, value):
        """
        append_expression(ExpressionBasedPointToPointForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedPointToPointForce_append_expression(self, value)


    def constructProperty_expression(self, initValue):
        """
        constructProperty_expression(ExpressionBasedPointToPointForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.ExpressionBasedPointToPointForce_constructProperty_expression(self, initValue)


    def get_expression(self, *args):
        """
        get_expression(ExpressionBasedPointToPointForce self, int i) -> std::string const

        Parameters:
            i: int

        get_expression(ExpressionBasedPointToPointForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _opensim.ExpressionBasedPointToPointForce_get_expression(self, *args)


    def upd_expression(self, *args):
        """
        upd_expression(ExpressionBasedPointToPointForce self, int i) -> std::string

        Parameters:
            i: int

        upd_expression(ExpressionBasedPointToPointForce self) -> std::string &

        Parameters:
            self: OpenSim::ExpressionBasedPointToPointForce *

        """
        return _opensim.ExpressionBasedPointToPointForce_upd_expression(self, *args)


    def set_expression(self, *args):
        """
        set_expression(ExpressionBasedPointToPointForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_expression(ExpressionBasedPointToPointForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedPointToPointForce_set_expression(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ExpressionBasedPointToPointForce self) -> ExpressionBasedPointToPointForce
        __init__(OpenSim::ExpressionBasedPointToPointForce self, std::string const & body1Name, Vec3 point1, std::string const & body2Name, Vec3 point2, std::string const & expression) -> ExpressionBasedPointToPointForce

        Parameters:
            body1Name: std::string const &
            point1: SimTK::Vec3 const &
            body2Name: std::string const &
            point2: SimTK::Vec3 const &
            expression: std::string const &

        """
        this = _opensim.new_ExpressionBasedPointToPointForce(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setBody1Name(self, body1Name):
        """
        setBody1Name(ExpressionBasedPointToPointForce self, std::string const & body1Name)

        Parameters:
            body1Name: std::string const &

        """
        return _opensim.ExpressionBasedPointToPointForce_setBody1Name(self, body1Name)


    def setBody2Name(self, body2Name):
        """
        setBody2Name(ExpressionBasedPointToPointForce self, std::string const & body2Name)

        Parameters:
            body2Name: std::string const &

        """
        return _opensim.ExpressionBasedPointToPointForce_setBody2Name(self, body2Name)


    def getBody1Name(self):
        """
        getBody1Name(ExpressionBasedPointToPointForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _opensim.ExpressionBasedPointToPointForce_getBody1Name(self)


    def getBody2Name(self):
        """
        getBody2Name(ExpressionBasedPointToPointForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _opensim.ExpressionBasedPointToPointForce_getBody2Name(self)


    def setPoint1(self, aPosition):
        """
        setPoint1(ExpressionBasedPointToPointForce self, Vec3 aPosition)

        Parameters:
            aPosition: SimTK::Vec3

        """
        return _opensim.ExpressionBasedPointToPointForce_setPoint1(self, aPosition)


    def getPoint1(self):
        """
        getPoint1(ExpressionBasedPointToPointForce self) -> Vec3

        Parameters:
            self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _opensim.ExpressionBasedPointToPointForce_getPoint1(self)


    def setPoint2(self, aPosition):
        """
        setPoint2(ExpressionBasedPointToPointForce self, Vec3 aPosition)

        Parameters:
            aPosition: SimTK::Vec3

        """
        return _opensim.ExpressionBasedPointToPointForce_setPoint2(self, aPosition)


    def getPoint2(self):
        """
        getPoint2(ExpressionBasedPointToPointForce self) -> Vec3

        Parameters:
            self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _opensim.ExpressionBasedPointToPointForce_getPoint2(self)


    def setExpression(self, expression):
        """
        setExpression(ExpressionBasedPointToPointForce self, std::string const & expression)

        Parameters:
            expression: std::string const &

        """
        return _opensim.ExpressionBasedPointToPointForce_setExpression(self, expression)


    def getForceMagnitude(self, state):
        """
        getForceMagnitude(ExpressionBasedPointToPointForce self, State state) -> double const &

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.ExpressionBasedPointToPointForce_getForceMagnitude(self, state)


    def computeForce(self, state, bodyForces, generalizedForces):
        """
        computeForce(ExpressionBasedPointToPointForce self, State state, VectorOfSpatialVec bodyForces, Vector generalizedForces)

        Parameters:
            state: SimTK::State const &
            bodyForces: SimTK::Vector_< SimTK::SpatialVec > &
            generalizedForces: SimTK::Vector &

        """
        return _opensim.ExpressionBasedPointToPointForce_computeForce(self, state, bodyForces, generalizedForces)


    def getRecordLabels(self):
        """
        getRecordLabels(ExpressionBasedPointToPointForce self) -> ArrayStr

        Parameters:
            self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _opensim.ExpressionBasedPointToPointForce_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(ExpressionBasedPointToPointForce self, State state) -> ArrayDouble

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.ExpressionBasedPointToPointForce_getRecordValues(self, state)


    def getDisplayer(self):
        """
        getDisplayer(ExpressionBasedPointToPointForce self) -> VisibleObject

        Parameters:
            self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _opensim.ExpressionBasedPointToPointForce_getDisplayer(self)


    def updateDisplayer(self, s):
        """
        updateDisplayer(ExpressionBasedPointToPointForce self, State s)

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.ExpressionBasedPointToPointForce_updateDisplayer(self, s)


    def updateGeometry(self, s):
        """
        updateGeometry(ExpressionBasedPointToPointForce self, State s)

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.ExpressionBasedPointToPointForce_updateGeometry(self, s)

    __swig_destroy__ = _opensim.delete_ExpressionBasedPointToPointForce
    __del__ = lambda self: None
ExpressionBasedPointToPointForce_swigregister = _opensim.ExpressionBasedPointToPointForce_swigregister
ExpressionBasedPointToPointForce_swigregister(ExpressionBasedPointToPointForce)

def ExpressionBasedPointToPointForce_safeDownCast(obj):
    """
    ExpressionBasedPointToPointForce_safeDownCast(OpenSimObject obj) -> ExpressionBasedPointToPointForce

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ExpressionBasedPointToPointForce_safeDownCast(obj)

def ExpressionBasedPointToPointForce_getClassName():
    """ExpressionBasedPointToPointForce_getClassName() -> std::string const &"""
    return _opensim.ExpressionBasedPointToPointForce_getClassName()

class ExpressionBasedCoordinateForce(Force):
    """Proxy of C++ OpenSim::ExpressionBasedCoordinateForce class"""
    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpressionBasedCoordinateForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExpressionBasedCoordinateForce, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ExpressionBasedCoordinateForce

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ExpressionBasedCoordinateForce_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ExpressionBasedCoordinateForce self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ExpressionBasedCoordinateForce_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ExpressionBasedCoordinateForce_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ExpressionBasedCoordinateForce self) -> ExpressionBasedCoordinateForce

        Parameters:
            self: OpenSim::ExpressionBasedCoordinateForce const *

        """
        return _opensim.ExpressionBasedCoordinateForce_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ExpressionBasedCoordinateForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExpressionBasedCoordinateForce const *

        """
        return _opensim.ExpressionBasedCoordinateForce_getConcreteClassName(self)


    def copyProperty_coordinate(self, source):
        """
        copyProperty_coordinate(ExpressionBasedCoordinateForce self, ExpressionBasedCoordinateForce source)

        Parameters:
            source: OpenSim::ExpressionBasedCoordinateForce::Self const &

        """
        return _opensim.ExpressionBasedCoordinateForce_copyProperty_coordinate(self, source)


    def append_coordinate(self, value):
        """
        append_coordinate(ExpressionBasedCoordinateForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedCoordinateForce_append_coordinate(self, value)


    def constructProperty_coordinate(self, initValue):
        """
        constructProperty_coordinate(ExpressionBasedCoordinateForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.ExpressionBasedCoordinateForce_constructProperty_coordinate(self, initValue)


    def get_coordinate(self, *args):
        """
        get_coordinate(ExpressionBasedCoordinateForce self, int i) -> std::string const

        Parameters:
            i: int

        get_coordinate(ExpressionBasedCoordinateForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExpressionBasedCoordinateForce const *

        """
        return _opensim.ExpressionBasedCoordinateForce_get_coordinate(self, *args)


    def upd_coordinate(self, *args):
        """
        upd_coordinate(ExpressionBasedCoordinateForce self, int i) -> std::string

        Parameters:
            i: int

        upd_coordinate(ExpressionBasedCoordinateForce self) -> std::string &

        Parameters:
            self: OpenSim::ExpressionBasedCoordinateForce *

        """
        return _opensim.ExpressionBasedCoordinateForce_upd_coordinate(self, *args)


    def set_coordinate(self, *args):
        """
        set_coordinate(ExpressionBasedCoordinateForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_coordinate(ExpressionBasedCoordinateForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedCoordinateForce_set_coordinate(self, *args)


    def copyProperty_expression(self, source):
        """
        copyProperty_expression(ExpressionBasedCoordinateForce self, ExpressionBasedCoordinateForce source)

        Parameters:
            source: OpenSim::ExpressionBasedCoordinateForce::Self const &

        """
        return _opensim.ExpressionBasedCoordinateForce_copyProperty_expression(self, source)


    def append_expression(self, value):
        """
        append_expression(ExpressionBasedCoordinateForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedCoordinateForce_append_expression(self, value)


    def constructProperty_expression(self, initValue):
        """
        constructProperty_expression(ExpressionBasedCoordinateForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.ExpressionBasedCoordinateForce_constructProperty_expression(self, initValue)


    def get_expression(self, *args):
        """
        get_expression(ExpressionBasedCoordinateForce self, int i) -> std::string const

        Parameters:
            i: int

        get_expression(ExpressionBasedCoordinateForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExpressionBasedCoordinateForce const *

        """
        return _opensim.ExpressionBasedCoordinateForce_get_expression(self, *args)


    def upd_expression(self, *args):
        """
        upd_expression(ExpressionBasedCoordinateForce self, int i) -> std::string

        Parameters:
            i: int

        upd_expression(ExpressionBasedCoordinateForce self) -> std::string &

        Parameters:
            self: OpenSim::ExpressionBasedCoordinateForce *

        """
        return _opensim.ExpressionBasedCoordinateForce_upd_expression(self, *args)


    def set_expression(self, *args):
        """
        set_expression(ExpressionBasedCoordinateForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_expression(ExpressionBasedCoordinateForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedCoordinateForce_set_expression(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ExpressionBasedCoordinateForce self) -> ExpressionBasedCoordinateForce
        __init__(OpenSim::ExpressionBasedCoordinateForce self, std::string const & coordinate, std::string const & expression) -> ExpressionBasedCoordinateForce

        Parameters:
            coordinate: std::string const &
            expression: std::string const &

        """
        this = _opensim.new_ExpressionBasedCoordinateForce(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setCoordinateName(self, coord):
        """
        setCoordinateName(ExpressionBasedCoordinateForce self, std::string const & coord)

        Parameters:
            coord: std::string const &

        """
        return _opensim.ExpressionBasedCoordinateForce_setCoordinateName(self, coord)


    def getCoordinateName(self):
        """
        getCoordinateName(ExpressionBasedCoordinateForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExpressionBasedCoordinateForce const *

        """
        return _opensim.ExpressionBasedCoordinateForce_getCoordinateName(self)


    def setExpression(self, expression):
        """
        setExpression(ExpressionBasedCoordinateForce self, std::string const & expression)

        Parameters:
            expression: std::string const &

        """
        return _opensim.ExpressionBasedCoordinateForce_setExpression(self, expression)


    def getForceMagnitude(self, state):
        """
        getForceMagnitude(ExpressionBasedCoordinateForce self, State state) -> double const &

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.ExpressionBasedCoordinateForce_getForceMagnitude(self, state)


    def computeForce(self, state, bodyForces, generalizedForces):
        """
        computeForce(ExpressionBasedCoordinateForce self, State state, VectorOfSpatialVec bodyForces, Vector generalizedForces)

        Parameters:
            state: SimTK::State const &
            bodyForces: SimTK::Vector_< SimTK::SpatialVec > &
            generalizedForces: SimTK::Vector &

        """
        return _opensim.ExpressionBasedCoordinateForce_computeForce(self, state, bodyForces, generalizedForces)


    def calcExpressionForce(self, s):
        """
        calcExpressionForce(ExpressionBasedCoordinateForce self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.ExpressionBasedCoordinateForce_calcExpressionForce(self, s)


    def getRecordLabels(self):
        """
        getRecordLabels(ExpressionBasedCoordinateForce self) -> ArrayStr

        Parameters:
            self: OpenSim::ExpressionBasedCoordinateForce const *

        """
        return _opensim.ExpressionBasedCoordinateForce_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(ExpressionBasedCoordinateForce self, State state) -> ArrayDouble

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.ExpressionBasedCoordinateForce_getRecordValues(self, state)

    __swig_destroy__ = _opensim.delete_ExpressionBasedCoordinateForce
    __del__ = lambda self: None
ExpressionBasedCoordinateForce_swigregister = _opensim.ExpressionBasedCoordinateForce_swigregister
ExpressionBasedCoordinateForce_swigregister(ExpressionBasedCoordinateForce)

def ExpressionBasedCoordinateForce_safeDownCast(obj):
    """
    ExpressionBasedCoordinateForce_safeDownCast(OpenSimObject obj) -> ExpressionBasedCoordinateForce

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ExpressionBasedCoordinateForce_safeDownCast(obj)

def ExpressionBasedCoordinateForce_getClassName():
    """ExpressionBasedCoordinateForce_getClassName() -> std::string const &"""
    return _opensim.ExpressionBasedCoordinateForce_getClassName()

class PathSpring(Force):
    """Proxy of C++ OpenSim::PathSpring class"""
    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathSpring, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PathSpring, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PathSpring

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.PathSpring_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(PathSpring self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.PathSpring_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.PathSpring_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(PathSpring self) -> PathSpring

        Parameters:
            self: OpenSim::PathSpring const *

        """
        return _opensim.PathSpring_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PathSpring self) -> std::string const &

        Parameters:
            self: OpenSim::PathSpring const *

        """
        return _opensim.PathSpring_getConcreteClassName(self)


    def copyProperty_resting_length(self, source):
        """
        copyProperty_resting_length(PathSpring self, PathSpring source)

        Parameters:
            source: OpenSim::PathSpring::Self const &

        """
        return _opensim.PathSpring_copyProperty_resting_length(self, source)


    def append_resting_length(self, value):
        """
        append_resting_length(PathSpring self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.PathSpring_append_resting_length(self, value)


    def constructProperty_resting_length(self, initValue):
        """
        constructProperty_resting_length(PathSpring self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.PathSpring_constructProperty_resting_length(self, initValue)


    def get_resting_length(self, *args):
        """
        get_resting_length(PathSpring self, int i) -> double const

        Parameters:
            i: int

        get_resting_length(PathSpring self) -> double const &

        Parameters:
            self: OpenSim::PathSpring const *

        """
        return _opensim.PathSpring_get_resting_length(self, *args)


    def upd_resting_length(self, *args):
        """
        upd_resting_length(PathSpring self, int i) -> double

        Parameters:
            i: int

        upd_resting_length(PathSpring self) -> double &

        Parameters:
            self: OpenSim::PathSpring *

        """
        return _opensim.PathSpring_upd_resting_length(self, *args)


    def set_resting_length(self, *args):
        """
        set_resting_length(PathSpring self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_resting_length(PathSpring self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.PathSpring_set_resting_length(self, *args)


    def copyProperty_stiffness(self, source):
        """
        copyProperty_stiffness(PathSpring self, PathSpring source)

        Parameters:
            source: OpenSim::PathSpring::Self const &

        """
        return _opensim.PathSpring_copyProperty_stiffness(self, source)


    def append_stiffness(self, value):
        """
        append_stiffness(PathSpring self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.PathSpring_append_stiffness(self, value)


    def constructProperty_stiffness(self, initValue):
        """
        constructProperty_stiffness(PathSpring self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.PathSpring_constructProperty_stiffness(self, initValue)


    def get_stiffness(self, *args):
        """
        get_stiffness(PathSpring self, int i) -> double const

        Parameters:
            i: int

        get_stiffness(PathSpring self) -> double const &

        Parameters:
            self: OpenSim::PathSpring const *

        """
        return _opensim.PathSpring_get_stiffness(self, *args)


    def upd_stiffness(self, *args):
        """
        upd_stiffness(PathSpring self, int i) -> double

        Parameters:
            i: int

        upd_stiffness(PathSpring self) -> double &

        Parameters:
            self: OpenSim::PathSpring *

        """
        return _opensim.PathSpring_upd_stiffness(self, *args)


    def set_stiffness(self, *args):
        """
        set_stiffness(PathSpring self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_stiffness(PathSpring self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.PathSpring_set_stiffness(self, *args)


    def copyProperty_dissipation(self, source):
        """
        copyProperty_dissipation(PathSpring self, PathSpring source)

        Parameters:
            source: OpenSim::PathSpring::Self const &

        """
        return _opensim.PathSpring_copyProperty_dissipation(self, source)


    def append_dissipation(self, value):
        """
        append_dissipation(PathSpring self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.PathSpring_append_dissipation(self, value)


    def constructProperty_dissipation(self, initValue):
        """
        constructProperty_dissipation(PathSpring self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.PathSpring_constructProperty_dissipation(self, initValue)


    def get_dissipation(self, *args):
        """
        get_dissipation(PathSpring self, int i) -> double const

        Parameters:
            i: int

        get_dissipation(PathSpring self) -> double const &

        Parameters:
            self: OpenSim::PathSpring const *

        """
        return _opensim.PathSpring_get_dissipation(self, *args)


    def upd_dissipation(self, *args):
        """
        upd_dissipation(PathSpring self, int i) -> double

        Parameters:
            i: int

        upd_dissipation(PathSpring self) -> double &

        Parameters:
            self: OpenSim::PathSpring *

        """
        return _opensim.PathSpring_upd_dissipation(self, *args)


    def set_dissipation(self, *args):
        """
        set_dissipation(PathSpring self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_dissipation(PathSpring self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.PathSpring_set_dissipation(self, *args)


    def copyProperty_GeometryPath(self, source):
        """
        copyProperty_GeometryPath(PathSpring self, PathSpring source)

        Parameters:
            source: OpenSim::PathSpring::Self const &

        """
        return _opensim.PathSpring_copyProperty_GeometryPath(self, source)


    def append_GeometryPath(self, value):
        """
        append_GeometryPath(PathSpring self, GeometryPath value) -> int

        Parameters:
            value: OpenSim::GeometryPath const &

        """
        return _opensim.PathSpring_append_GeometryPath(self, value)


    def constructProperty_GeometryPath(self, initValue):
        """
        constructProperty_GeometryPath(PathSpring self, GeometryPath initValue)

        Parameters:
            initValue: OpenSim::GeometryPath const &

        """
        return _opensim.PathSpring_constructProperty_GeometryPath(self, initValue)


    def get_GeometryPath(self, *args):
        """
        get_GeometryPath(PathSpring self, int i) -> GeometryPath

        Parameters:
            i: int

        get_GeometryPath(PathSpring self) -> GeometryPath

        Parameters:
            self: OpenSim::PathSpring const *

        """
        return _opensim.PathSpring_get_GeometryPath(self, *args)


    def upd_GeometryPath(self, *args):
        """
        upd_GeometryPath(PathSpring self, int i) -> GeometryPath

        Parameters:
            i: int

        upd_GeometryPath(PathSpring self) -> GeometryPath

        Parameters:
            self: OpenSim::PathSpring *

        """
        return _opensim.PathSpring_upd_GeometryPath(self, *args)


    def set_GeometryPath(self, *args):
        """
        set_GeometryPath(PathSpring self, int i, GeometryPath value)

        Parameters:
            i: int
            value: OpenSim::GeometryPath const &

        set_GeometryPath(PathSpring self, GeometryPath value)

        Parameters:
            value: OpenSim::GeometryPath const &

        """
        return _opensim.PathSpring_set_GeometryPath(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::PathSpring self) -> PathSpring
        __init__(OpenSim::PathSpring self, std::string const & name, double restLength, double stiffness, double dissipation) -> PathSpring

        Parameters:
            name: std::string const &
            restLength: double
            stiffness: double
            dissipation: double

        """
        this = _opensim.new_PathSpring(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getRestingLength(self):
        """
        getRestingLength(PathSpring self) -> double

        Parameters:
            self: OpenSim::PathSpring const *

        """
        return _opensim.PathSpring_getRestingLength(self)


    def setRestingLength(self, restingLength):
        """
        setRestingLength(PathSpring self, double restingLength)

        Parameters:
            restingLength: double

        """
        return _opensim.PathSpring_setRestingLength(self, restingLength)


    def getStiffness(self):
        """
        getStiffness(PathSpring self) -> double

        Parameters:
            self: OpenSim::PathSpring const *

        """
        return _opensim.PathSpring_getStiffness(self)


    def setStiffness(self, stiffness):
        """
        setStiffness(PathSpring self, double stiffness)

        Parameters:
            stiffness: double

        """
        return _opensim.PathSpring_setStiffness(self, stiffness)


    def getDissipation(self):
        """
        getDissipation(PathSpring self) -> double

        Parameters:
            self: OpenSim::PathSpring const *

        """
        return _opensim.PathSpring_getDissipation(self)


    def setDissipation(self, dissipation):
        """
        setDissipation(PathSpring self, double dissipation)

        Parameters:
            dissipation: double

        """
        return _opensim.PathSpring_setDissipation(self, dissipation)


    def getGeometryPath(self):
        """
        getGeometryPath(PathSpring self) -> GeometryPath

        Parameters:
            self: OpenSim::PathSpring const *

        """
        return _opensim.PathSpring_getGeometryPath(self)


    def updGeometryPath(self):
        """
        updGeometryPath(PathSpring self) -> GeometryPath

        Parameters:
            self: OpenSim::PathSpring *

        """
        return _opensim.PathSpring_updGeometryPath(self)


    def getLength(self, s):
        """
        getLength(PathSpring self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.PathSpring_getLength(self, s)


    def getStretch(self, s):
        """
        getStretch(PathSpring self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.PathSpring_getStretch(self, s)


    def getLengtheningSpeed(self, s):
        """
        getLengtheningSpeed(PathSpring self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.PathSpring_getLengtheningSpeed(self, s)


    def getTension(self, s):
        """
        getTension(PathSpring self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.PathSpring_getTension(self, s)


    def computeMomentArm(self, s, aCoord):
        """
        computeMomentArm(PathSpring self, State s, Coordinate aCoord) -> double

        Parameters:
            s: SimTK::State const &
            aCoord: OpenSim::Coordinate &

        """
        return _opensim.PathSpring_computeMomentArm(self, s, aCoord)


    def preScale(self, s, scaleSet):
        """
        preScale(PathSpring self, State s, ScaleSet scaleSet)

        Parameters:
            s: SimTK::State const &
            scaleSet: OpenSim::ScaleSet const &

        """
        return _opensim.PathSpring_preScale(self, s, scaleSet)


    def scale(self, s, scaleSet):
        """
        scale(PathSpring self, State s, ScaleSet scaleSet)

        Parameters:
            s: SimTK::State const &
            scaleSet: OpenSim::ScaleSet const &

        """
        return _opensim.PathSpring_scale(self, s, scaleSet)


    def postScale(self, s, scaleSet):
        """
        postScale(PathSpring self, State s, ScaleSet scaleSet)

        Parameters:
            s: SimTK::State const &
            scaleSet: OpenSim::ScaleSet const &

        """
        return _opensim.PathSpring_postScale(self, s, scaleSet)

    __swig_destroy__ = _opensim.delete_PathSpring
    __del__ = lambda self: None
PathSpring_swigregister = _opensim.PathSpring_swigregister
PathSpring_swigregister(PathSpring)

def PathSpring_safeDownCast(obj):
    """
    PathSpring_safeDownCast(OpenSimObject obj) -> PathSpring

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.PathSpring_safeDownCast(obj)

def PathSpring_getClassName():
    """PathSpring_getClassName() -> std::string const &"""
    return _opensim.PathSpring_getClassName()

class BushingForce(Force):
    """Proxy of C++ OpenSim::BushingForce class"""
    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BushingForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BushingForce, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> BushingForce

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.BushingForce_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(BushingForce self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.BushingForce_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.BushingForce_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(BushingForce self) -> BushingForce

        Parameters:
            self: OpenSim::BushingForce const *

        """
        return _opensim.BushingForce_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(BushingForce self) -> std::string const &

        Parameters:
            self: OpenSim::BushingForce const *

        """
        return _opensim.BushingForce_getConcreteClassName(self)


    def copyProperty_body_1(self, source):
        """
        copyProperty_body_1(BushingForce self, BushingForce source)

        Parameters:
            source: OpenSim::BushingForce::Self const &

        """
        return _opensim.BushingForce_copyProperty_body_1(self, source)


    def append_body_1(self, value):
        """
        append_body_1(BushingForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.BushingForce_append_body_1(self, value)


    def constructProperty_body_1(self, *args):
        """
        constructProperty_body_1(BushingForce self)
        constructProperty_body_1(BushingForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.BushingForce_constructProperty_body_1(self, *args)


    def get_body_1(self, *args):
        """
        get_body_1(BushingForce self, int i) -> std::string const

        Parameters:
            i: int

        get_body_1(BushingForce self) -> std::string const &

        Parameters:
            self: OpenSim::BushingForce const *

        """
        return _opensim.BushingForce_get_body_1(self, *args)


    def upd_body_1(self, *args):
        """
        upd_body_1(BushingForce self, int i) -> std::string

        Parameters:
            i: int

        upd_body_1(BushingForce self) -> std::string &

        Parameters:
            self: OpenSim::BushingForce *

        """
        return _opensim.BushingForce_upd_body_1(self, *args)


    def set_body_1(self, *args):
        """
        set_body_1(BushingForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_body_1(BushingForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.BushingForce_set_body_1(self, *args)


    def copyProperty_body_2(self, source):
        """
        copyProperty_body_2(BushingForce self, BushingForce source)

        Parameters:
            source: OpenSim::BushingForce::Self const &

        """
        return _opensim.BushingForce_copyProperty_body_2(self, source)


    def append_body_2(self, value):
        """
        append_body_2(BushingForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.BushingForce_append_body_2(self, value)


    def constructProperty_body_2(self, *args):
        """
        constructProperty_body_2(BushingForce self)
        constructProperty_body_2(BushingForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.BushingForce_constructProperty_body_2(self, *args)


    def get_body_2(self, *args):
        """
        get_body_2(BushingForce self, int i) -> std::string const

        Parameters:
            i: int

        get_body_2(BushingForce self) -> std::string const &

        Parameters:
            self: OpenSim::BushingForce const *

        """
        return _opensim.BushingForce_get_body_2(self, *args)


    def upd_body_2(self, *args):
        """
        upd_body_2(BushingForce self, int i) -> std::string

        Parameters:
            i: int

        upd_body_2(BushingForce self) -> std::string &

        Parameters:
            self: OpenSim::BushingForce *

        """
        return _opensim.BushingForce_upd_body_2(self, *args)


    def set_body_2(self, *args):
        """
        set_body_2(BushingForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_body_2(BushingForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.BushingForce_set_body_2(self, *args)


    def copyProperty_location_body_1(self, source):
        """
        copyProperty_location_body_1(BushingForce self, BushingForce source)

        Parameters:
            source: OpenSim::BushingForce::Self const &

        """
        return _opensim.BushingForce_copyProperty_location_body_1(self, source)


    def append_location_body_1(self, value):
        """
        append_location_body_1(BushingForce self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_append_location_body_1(self, value)


    def constructProperty_location_body_1(self, initValue):
        """
        constructProperty_location_body_1(BushingForce self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_constructProperty_location_body_1(self, initValue)


    def get_location_body_1(self, *args):
        """
        get_location_body_1(BushingForce self, int i) -> Vec3

        Parameters:
            i: int

        get_location_body_1(BushingForce self) -> Vec3

        Parameters:
            self: OpenSim::BushingForce const *

        """
        return _opensim.BushingForce_get_location_body_1(self, *args)


    def upd_location_body_1(self, *args):
        """
        upd_location_body_1(BushingForce self, int i) -> Vec3

        Parameters:
            i: int

        upd_location_body_1(BushingForce self) -> Vec3

        Parameters:
            self: OpenSim::BushingForce *

        """
        return _opensim.BushingForce_upd_location_body_1(self, *args)


    def set_location_body_1(self, *args):
        """
        set_location_body_1(BushingForce self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_location_body_1(BushingForce self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_set_location_body_1(self, *args)


    def copyProperty_orientation_body_1(self, source):
        """
        copyProperty_orientation_body_1(BushingForce self, BushingForce source)

        Parameters:
            source: OpenSim::BushingForce::Self const &

        """
        return _opensim.BushingForce_copyProperty_orientation_body_1(self, source)


    def append_orientation_body_1(self, value):
        """
        append_orientation_body_1(BushingForce self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_append_orientation_body_1(self, value)


    def constructProperty_orientation_body_1(self, initValue):
        """
        constructProperty_orientation_body_1(BushingForce self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_constructProperty_orientation_body_1(self, initValue)


    def get_orientation_body_1(self, *args):
        """
        get_orientation_body_1(BushingForce self, int i) -> Vec3

        Parameters:
            i: int

        get_orientation_body_1(BushingForce self) -> Vec3

        Parameters:
            self: OpenSim::BushingForce const *

        """
        return _opensim.BushingForce_get_orientation_body_1(self, *args)


    def upd_orientation_body_1(self, *args):
        """
        upd_orientation_body_1(BushingForce self, int i) -> Vec3

        Parameters:
            i: int

        upd_orientation_body_1(BushingForce self) -> Vec3

        Parameters:
            self: OpenSim::BushingForce *

        """
        return _opensim.BushingForce_upd_orientation_body_1(self, *args)


    def set_orientation_body_1(self, *args):
        """
        set_orientation_body_1(BushingForce self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_orientation_body_1(BushingForce self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_set_orientation_body_1(self, *args)


    def copyProperty_location_body_2(self, source):
        """
        copyProperty_location_body_2(BushingForce self, BushingForce source)

        Parameters:
            source: OpenSim::BushingForce::Self const &

        """
        return _opensim.BushingForce_copyProperty_location_body_2(self, source)


    def append_location_body_2(self, value):
        """
        append_location_body_2(BushingForce self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_append_location_body_2(self, value)


    def constructProperty_location_body_2(self, initValue):
        """
        constructProperty_location_body_2(BushingForce self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_constructProperty_location_body_2(self, initValue)


    def get_location_body_2(self, *args):
        """
        get_location_body_2(BushingForce self, int i) -> Vec3

        Parameters:
            i: int

        get_location_body_2(BushingForce self) -> Vec3

        Parameters:
            self: OpenSim::BushingForce const *

        """
        return _opensim.BushingForce_get_location_body_2(self, *args)


    def upd_location_body_2(self, *args):
        """
        upd_location_body_2(BushingForce self, int i) -> Vec3

        Parameters:
            i: int

        upd_location_body_2(BushingForce self) -> Vec3

        Parameters:
            self: OpenSim::BushingForce *

        """
        return _opensim.BushingForce_upd_location_body_2(self, *args)


    def set_location_body_2(self, *args):
        """
        set_location_body_2(BushingForce self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_location_body_2(BushingForce self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_set_location_body_2(self, *args)


    def copyProperty_orientation_body_2(self, source):
        """
        copyProperty_orientation_body_2(BushingForce self, BushingForce source)

        Parameters:
            source: OpenSim::BushingForce::Self const &

        """
        return _opensim.BushingForce_copyProperty_orientation_body_2(self, source)


    def append_orientation_body_2(self, value):
        """
        append_orientation_body_2(BushingForce self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_append_orientation_body_2(self, value)


    def constructProperty_orientation_body_2(self, initValue):
        """
        constructProperty_orientation_body_2(BushingForce self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_constructProperty_orientation_body_2(self, initValue)


    def get_orientation_body_2(self, *args):
        """
        get_orientation_body_2(BushingForce self, int i) -> Vec3

        Parameters:
            i: int

        get_orientation_body_2(BushingForce self) -> Vec3

        Parameters:
            self: OpenSim::BushingForce const *

        """
        return _opensim.BushingForce_get_orientation_body_2(self, *args)


    def upd_orientation_body_2(self, *args):
        """
        upd_orientation_body_2(BushingForce self, int i) -> Vec3

        Parameters:
            i: int

        upd_orientation_body_2(BushingForce self) -> Vec3

        Parameters:
            self: OpenSim::BushingForce *

        """
        return _opensim.BushingForce_upd_orientation_body_2(self, *args)


    def set_orientation_body_2(self, *args):
        """
        set_orientation_body_2(BushingForce self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_orientation_body_2(BushingForce self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_set_orientation_body_2(self, *args)


    def copyProperty_rotational_stiffness(self, source):
        """
        copyProperty_rotational_stiffness(BushingForce self, BushingForce source)

        Parameters:
            source: OpenSim::BushingForce::Self const &

        """
        return _opensim.BushingForce_copyProperty_rotational_stiffness(self, source)


    def append_rotational_stiffness(self, value):
        """
        append_rotational_stiffness(BushingForce self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_append_rotational_stiffness(self, value)


    def constructProperty_rotational_stiffness(self, initValue):
        """
        constructProperty_rotational_stiffness(BushingForce self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_constructProperty_rotational_stiffness(self, initValue)


    def get_rotational_stiffness(self, *args):
        """
        get_rotational_stiffness(BushingForce self, int i) -> Vec3

        Parameters:
            i: int

        get_rotational_stiffness(BushingForce self) -> Vec3

        Parameters:
            self: OpenSim::BushingForce const *

        """
        return _opensim.BushingForce_get_rotational_stiffness(self, *args)


    def upd_rotational_stiffness(self, *args):
        """
        upd_rotational_stiffness(BushingForce self, int i) -> Vec3

        Parameters:
            i: int

        upd_rotational_stiffness(BushingForce self) -> Vec3

        Parameters:
            self: OpenSim::BushingForce *

        """
        return _opensim.BushingForce_upd_rotational_stiffness(self, *args)


    def set_rotational_stiffness(self, *args):
        """
        set_rotational_stiffness(BushingForce self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_rotational_stiffness(BushingForce self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_set_rotational_stiffness(self, *args)


    def copyProperty_translational_stiffness(self, source):
        """
        copyProperty_translational_stiffness(BushingForce self, BushingForce source)

        Parameters:
            source: OpenSim::BushingForce::Self const &

        """
        return _opensim.BushingForce_copyProperty_translational_stiffness(self, source)


    def append_translational_stiffness(self, value):
        """
        append_translational_stiffness(BushingForce self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_append_translational_stiffness(self, value)


    def constructProperty_translational_stiffness(self, initValue):
        """
        constructProperty_translational_stiffness(BushingForce self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_constructProperty_translational_stiffness(self, initValue)


    def get_translational_stiffness(self, *args):
        """
        get_translational_stiffness(BushingForce self, int i) -> Vec3

        Parameters:
            i: int

        get_translational_stiffness(BushingForce self) -> Vec3

        Parameters:
            self: OpenSim::BushingForce const *

        """
        return _opensim.BushingForce_get_translational_stiffness(self, *args)


    def upd_translational_stiffness(self, *args):
        """
        upd_translational_stiffness(BushingForce self, int i) -> Vec3

        Parameters:
            i: int

        upd_translational_stiffness(BushingForce self) -> Vec3

        Parameters:
            self: OpenSim::BushingForce *

        """
        return _opensim.BushingForce_upd_translational_stiffness(self, *args)


    def set_translational_stiffness(self, *args):
        """
        set_translational_stiffness(BushingForce self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_translational_stiffness(BushingForce self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_set_translational_stiffness(self, *args)


    def copyProperty_rotational_damping(self, source):
        """
        copyProperty_rotational_damping(BushingForce self, BushingForce source)

        Parameters:
            source: OpenSim::BushingForce::Self const &

        """
        return _opensim.BushingForce_copyProperty_rotational_damping(self, source)


    def append_rotational_damping(self, value):
        """
        append_rotational_damping(BushingForce self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_append_rotational_damping(self, value)


    def constructProperty_rotational_damping(self, initValue):
        """
        constructProperty_rotational_damping(BushingForce self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_constructProperty_rotational_damping(self, initValue)


    def get_rotational_damping(self, *args):
        """
        get_rotational_damping(BushingForce self, int i) -> Vec3

        Parameters:
            i: int

        get_rotational_damping(BushingForce self) -> Vec3

        Parameters:
            self: OpenSim::BushingForce const *

        """
        return _opensim.BushingForce_get_rotational_damping(self, *args)


    def upd_rotational_damping(self, *args):
        """
        upd_rotational_damping(BushingForce self, int i) -> Vec3

        Parameters:
            i: int

        upd_rotational_damping(BushingForce self) -> Vec3

        Parameters:
            self: OpenSim::BushingForce *

        """
        return _opensim.BushingForce_upd_rotational_damping(self, *args)


    def set_rotational_damping(self, *args):
        """
        set_rotational_damping(BushingForce self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_rotational_damping(BushingForce self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_set_rotational_damping(self, *args)


    def copyProperty_translational_damping(self, source):
        """
        copyProperty_translational_damping(BushingForce self, BushingForce source)

        Parameters:
            source: OpenSim::BushingForce::Self const &

        """
        return _opensim.BushingForce_copyProperty_translational_damping(self, source)


    def append_translational_damping(self, value):
        """
        append_translational_damping(BushingForce self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_append_translational_damping(self, value)


    def constructProperty_translational_damping(self, initValue):
        """
        constructProperty_translational_damping(BushingForce self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_constructProperty_translational_damping(self, initValue)


    def get_translational_damping(self, *args):
        """
        get_translational_damping(BushingForce self, int i) -> Vec3

        Parameters:
            i: int

        get_translational_damping(BushingForce self) -> Vec3

        Parameters:
            self: OpenSim::BushingForce const *

        """
        return _opensim.BushingForce_get_translational_damping(self, *args)


    def upd_translational_damping(self, *args):
        """
        upd_translational_damping(BushingForce self, int i) -> Vec3

        Parameters:
            i: int

        upd_translational_damping(BushingForce self) -> Vec3

        Parameters:
            self: OpenSim::BushingForce *

        """
        return _opensim.BushingForce_upd_translational_damping(self, *args)


    def set_translational_damping(self, *args):
        """
        set_translational_damping(BushingForce self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_translational_damping(BushingForce self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_set_translational_damping(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::BushingForce self) -> BushingForce
        __init__(OpenSim::BushingForce self, std::string const & body1Name, Vec3 point1, Vec3 orientation1, std::string const & body2Name, Vec3 point2, Vec3 orientation2, Vec3 transStiffness, Vec3 rotStiffness, Vec3 transDamping, Vec3 rotDamping) -> BushingForce

        Parameters:
            body1Name: std::string const &
            point1: SimTK::Vec3 const &
            orientation1: SimTK::Vec3 const &
            body2Name: std::string const &
            point2: SimTK::Vec3 const &
            orientation2: SimTK::Vec3 const &
            transStiffness: SimTK::Vec3 const &
            rotStiffness: SimTK::Vec3 const &
            transDamping: SimTK::Vec3 const &
            rotDamping: SimTK::Vec3 const &

        """
        this = _opensim.new_BushingForce(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setBody1ByName(self, aBodyName):
        """
        setBody1ByName(BushingForce self, std::string const & aBodyName)

        Parameters:
            aBodyName: std::string const &

        """
        return _opensim.BushingForce_setBody1ByName(self, aBodyName)


    def setBody1BushingLocation(self, *args):
        """
        setBody1BushingLocation(BushingForce self, Vec3 location, Vec3 orientation)

        Parameters:
            location: SimTK::Vec3 const &
            orientation: SimTK::Vec3 const &

        setBody1BushingLocation(BushingForce self, Vec3 location)

        Parameters:
            location: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_setBody1BushingLocation(self, *args)


    def setBody2ByName(self, aBodyName):
        """
        setBody2ByName(BushingForce self, std::string const & aBodyName)

        Parameters:
            aBodyName: std::string const &

        """
        return _opensim.BushingForce_setBody2ByName(self, aBodyName)


    def setBody2BushingLocation(self, *args):
        """
        setBody2BushingLocation(BushingForce self, Vec3 location, Vec3 orientation)

        Parameters:
            location: SimTK::Vec3 const &
            orientation: SimTK::Vec3 const &

        setBody2BushingLocation(BushingForce self, Vec3 location)

        Parameters:
            location: SimTK::Vec3 const &

        """
        return _opensim.BushingForce_setBody2BushingLocation(self, *args)


    def computePotentialEnergy(self, s):
        """
        computePotentialEnergy(BushingForce self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.BushingForce_computePotentialEnergy(self, s)


    def getRecordLabels(self):
        """
        getRecordLabels(BushingForce self) -> ArrayStr

        Parameters:
            self: OpenSim::BushingForce const *

        """
        return _opensim.BushingForce_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(BushingForce self, State state) -> ArrayDouble

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.BushingForce_getRecordValues(self, state)

    __swig_destroy__ = _opensim.delete_BushingForce
    __del__ = lambda self: None
BushingForce_swigregister = _opensim.BushingForce_swigregister
BushingForce_swigregister(BushingForce)

def BushingForce_safeDownCast(obj):
    """
    BushingForce_safeDownCast(OpenSimObject obj) -> BushingForce

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.BushingForce_safeDownCast(obj)

def BushingForce_getClassName():
    """BushingForce_getClassName() -> std::string const &"""
    return _opensim.BushingForce_getClassName()

class FunctionBasedBushingForce(Force):
    """Proxy of C++ OpenSim::FunctionBasedBushingForce class"""
    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionBasedBushingForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionBasedBushingForce, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> FunctionBasedBushingForce

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.FunctionBasedBushingForce_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(FunctionBasedBushingForce self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.FunctionBasedBushingForce_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.FunctionBasedBushingForce_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(FunctionBasedBushingForce self) -> FunctionBasedBushingForce

        Parameters:
            self: OpenSim::FunctionBasedBushingForce const *

        """
        return _opensim.FunctionBasedBushingForce_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(FunctionBasedBushingForce self) -> std::string const &

        Parameters:
            self: OpenSim::FunctionBasedBushingForce const *

        """
        return _opensim.FunctionBasedBushingForce_getConcreteClassName(self)


    def copyProperty_body_1(self, source):
        """
        copyProperty_body_1(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters:
            source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _opensim.FunctionBasedBushingForce_copyProperty_body_1(self, source)


    def append_body_1(self, value):
        """
        append_body_1(FunctionBasedBushingForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.FunctionBasedBushingForce_append_body_1(self, value)


    def constructProperty_body_1(self, *args):
        """
        constructProperty_body_1(FunctionBasedBushingForce self)
        constructProperty_body_1(FunctionBasedBushingForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.FunctionBasedBushingForce_constructProperty_body_1(self, *args)


    def get_body_1(self, *args):
        """
        get_body_1(FunctionBasedBushingForce self, int i) -> std::string const

        Parameters:
            i: int

        get_body_1(FunctionBasedBushingForce self) -> std::string const &

        Parameters:
            self: OpenSim::FunctionBasedBushingForce const *

        """
        return _opensim.FunctionBasedBushingForce_get_body_1(self, *args)


    def upd_body_1(self, *args):
        """
        upd_body_1(FunctionBasedBushingForce self, int i) -> std::string

        Parameters:
            i: int

        upd_body_1(FunctionBasedBushingForce self) -> std::string &

        Parameters:
            self: OpenSim::FunctionBasedBushingForce *

        """
        return _opensim.FunctionBasedBushingForce_upd_body_1(self, *args)


    def set_body_1(self, *args):
        """
        set_body_1(FunctionBasedBushingForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_body_1(FunctionBasedBushingForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.FunctionBasedBushingForce_set_body_1(self, *args)


    def copyProperty_body_2(self, source):
        """
        copyProperty_body_2(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters:
            source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _opensim.FunctionBasedBushingForce_copyProperty_body_2(self, source)


    def append_body_2(self, value):
        """
        append_body_2(FunctionBasedBushingForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.FunctionBasedBushingForce_append_body_2(self, value)


    def constructProperty_body_2(self, *args):
        """
        constructProperty_body_2(FunctionBasedBushingForce self)
        constructProperty_body_2(FunctionBasedBushingForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.FunctionBasedBushingForce_constructProperty_body_2(self, *args)


    def get_body_2(self, *args):
        """
        get_body_2(FunctionBasedBushingForce self, int i) -> std::string const

        Parameters:
            i: int

        get_body_2(FunctionBasedBushingForce self) -> std::string const &

        Parameters:
            self: OpenSim::FunctionBasedBushingForce const *

        """
        return _opensim.FunctionBasedBushingForce_get_body_2(self, *args)


    def upd_body_2(self, *args):
        """
        upd_body_2(FunctionBasedBushingForce self, int i) -> std::string

        Parameters:
            i: int

        upd_body_2(FunctionBasedBushingForce self) -> std::string &

        Parameters:
            self: OpenSim::FunctionBasedBushingForce *

        """
        return _opensim.FunctionBasedBushingForce_upd_body_2(self, *args)


    def set_body_2(self, *args):
        """
        set_body_2(FunctionBasedBushingForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_body_2(FunctionBasedBushingForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.FunctionBasedBushingForce_set_body_2(self, *args)


    def copyProperty_location_body_1(self, source):
        """
        copyProperty_location_body_1(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters:
            source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _opensim.FunctionBasedBushingForce_copyProperty_location_body_1(self, source)


    def append_location_body_1(self, value):
        """
        append_location_body_1(FunctionBasedBushingForce self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.FunctionBasedBushingForce_append_location_body_1(self, value)


    def constructProperty_location_body_1(self, initValue):
        """
        constructProperty_location_body_1(FunctionBasedBushingForce self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.FunctionBasedBushingForce_constructProperty_location_body_1(self, initValue)


    def get_location_body_1(self, *args):
        """
        get_location_body_1(FunctionBasedBushingForce self, int i) -> Vec3

        Parameters:
            i: int

        get_location_body_1(FunctionBasedBushingForce self) -> Vec3

        Parameters:
            self: OpenSim::FunctionBasedBushingForce const *

        """
        return _opensim.FunctionBasedBushingForce_get_location_body_1(self, *args)


    def upd_location_body_1(self, *args):
        """
        upd_location_body_1(FunctionBasedBushingForce self, int i) -> Vec3

        Parameters:
            i: int

        upd_location_body_1(FunctionBasedBushingForce self) -> Vec3

        Parameters:
            self: OpenSim::FunctionBasedBushingForce *

        """
        return _opensim.FunctionBasedBushingForce_upd_location_body_1(self, *args)


    def set_location_body_1(self, *args):
        """
        set_location_body_1(FunctionBasedBushingForce self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_location_body_1(FunctionBasedBushingForce self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.FunctionBasedBushingForce_set_location_body_1(self, *args)


    def copyProperty_orientation_body_1(self, source):
        """
        copyProperty_orientation_body_1(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters:
            source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _opensim.FunctionBasedBushingForce_copyProperty_orientation_body_1(self, source)


    def append_orientation_body_1(self, value):
        """
        append_orientation_body_1(FunctionBasedBushingForce self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.FunctionBasedBushingForce_append_orientation_body_1(self, value)


    def constructProperty_orientation_body_1(self, initValue):
        """
        constructProperty_orientation_body_1(FunctionBasedBushingForce self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.FunctionBasedBushingForce_constructProperty_orientation_body_1(self, initValue)


    def get_orientation_body_1(self, *args):
        """
        get_orientation_body_1(FunctionBasedBushingForce self, int i) -> Vec3

        Parameters:
            i: int

        get_orientation_body_1(FunctionBasedBushingForce self) -> Vec3

        Parameters:
            self: OpenSim::FunctionBasedBushingForce const *

        """
        return _opensim.FunctionBasedBushingForce_get_orientation_body_1(self, *args)


    def upd_orientation_body_1(self, *args):
        """
        upd_orientation_body_1(FunctionBasedBushingForce self, int i) -> Vec3

        Parameters:
            i: int

        upd_orientation_body_1(FunctionBasedBushingForce self) -> Vec3

        Parameters:
            self: OpenSim::FunctionBasedBushingForce *

        """
        return _opensim.FunctionBasedBushingForce_upd_orientation_body_1(self, *args)


    def set_orientation_body_1(self, *args):
        """
        set_orientation_body_1(FunctionBasedBushingForce self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_orientation_body_1(FunctionBasedBushingForce self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.FunctionBasedBushingForce_set_orientation_body_1(self, *args)


    def copyProperty_location_body_2(self, source):
        """
        copyProperty_location_body_2(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters:
            source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _opensim.FunctionBasedBushingForce_copyProperty_location_body_2(self, source)


    def append_location_body_2(self, value):
        """
        append_location_body_2(FunctionBasedBushingForce self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.FunctionBasedBushingForce_append_location_body_2(self, value)


    def constructProperty_location_body_2(self, initValue):
        """
        constructProperty_location_body_2(FunctionBasedBushingForce self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.FunctionBasedBushingForce_constructProperty_location_body_2(self, initValue)


    def get_location_body_2(self, *args):
        """
        get_location_body_2(FunctionBasedBushingForce self, int i) -> Vec3

        Parameters:
            i: int

        get_location_body_2(FunctionBasedBushingForce self) -> Vec3

        Parameters:
            self: OpenSim::FunctionBasedBushingForce const *

        """
        return _opensim.FunctionBasedBushingForce_get_location_body_2(self, *args)


    def upd_location_body_2(self, *args):
        """
        upd_location_body_2(FunctionBasedBushingForce self, int i) -> Vec3

        Parameters:
            i: int

        upd_location_body_2(FunctionBasedBushingForce self) -> Vec3

        Parameters:
            self: OpenSim::FunctionBasedBushingForce *

        """
        return _opensim.FunctionBasedBushingForce_upd_location_body_2(self, *args)


    def set_location_body_2(self, *args):
        """
        set_location_body_2(FunctionBasedBushingForce self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_location_body_2(FunctionBasedBushingForce self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.FunctionBasedBushingForce_set_location_body_2(self, *args)


    def copyProperty_orientation_body_2(self, source):
        """
        copyProperty_orientation_body_2(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters:
            source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _opensim.FunctionBasedBushingForce_copyProperty_orientation_body_2(self, source)


    def append_orientation_body_2(self, value):
        """
        append_orientation_body_2(FunctionBasedBushingForce self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.FunctionBasedBushingForce_append_orientation_body_2(self, value)


    def constructProperty_orientation_body_2(self, initValue):
        """
        constructProperty_orientation_body_2(FunctionBasedBushingForce self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.FunctionBasedBushingForce_constructProperty_orientation_body_2(self, initValue)


    def get_orientation_body_2(self, *args):
        """
        get_orientation_body_2(FunctionBasedBushingForce self, int i) -> Vec3

        Parameters:
            i: int

        get_orientation_body_2(FunctionBasedBushingForce self) -> Vec3

        Parameters:
            self: OpenSim::FunctionBasedBushingForce const *

        """
        return _opensim.FunctionBasedBushingForce_get_orientation_body_2(self, *args)


    def upd_orientation_body_2(self, *args):
        """
        upd_orientation_body_2(FunctionBasedBushingForce self, int i) -> Vec3

        Parameters:
            i: int

        upd_orientation_body_2(FunctionBasedBushingForce self) -> Vec3

        Parameters:
            self: OpenSim::FunctionBasedBushingForce *

        """
        return _opensim.FunctionBasedBushingForce_upd_orientation_body_2(self, *args)


    def set_orientation_body_2(self, *args):
        """
        set_orientation_body_2(FunctionBasedBushingForce self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_orientation_body_2(FunctionBasedBushingForce self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.FunctionBasedBushingForce_set_orientation_body_2(self, *args)


    def copyProperty_m_x_theta_x_function(self, source):
        """
        copyProperty_m_x_theta_x_function(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters:
            source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _opensim.FunctionBasedBushingForce_copyProperty_m_x_theta_x_function(self, source)


    def append_m_x_theta_x_function(self, value):
        """
        append_m_x_theta_x_function(FunctionBasedBushingForce self, Function value) -> int

        Parameters:
            value: OpenSim::Function const &

        """
        return _opensim.FunctionBasedBushingForce_append_m_x_theta_x_function(self, value)


    def constructProperty_m_x_theta_x_function(self, *args):
        """
        constructProperty_m_x_theta_x_function(FunctionBasedBushingForce self)
        constructProperty_m_x_theta_x_function(FunctionBasedBushingForce self, Function initValue)

        Parameters:
            initValue: OpenSim::Function const &

        """
        return _opensim.FunctionBasedBushingForce_constructProperty_m_x_theta_x_function(self, *args)


    def get_m_x_theta_x_function(self, *args):
        """
        get_m_x_theta_x_function(FunctionBasedBushingForce self, int i) -> Function

        Parameters:
            i: int

        get_m_x_theta_x_function(FunctionBasedBushingForce self) -> Function

        Parameters:
            self: OpenSim::FunctionBasedBushingForce const *

        """
        return _opensim.FunctionBasedBushingForce_get_m_x_theta_x_function(self, *args)


    def upd_m_x_theta_x_function(self, *args):
        """
        upd_m_x_theta_x_function(FunctionBasedBushingForce self, int i) -> Function

        Parameters:
            i: int

        upd_m_x_theta_x_function(FunctionBasedBushingForce self) -> Function

        Parameters:
            self: OpenSim::FunctionBasedBushingForce *

        """
        return _opensim.FunctionBasedBushingForce_upd_m_x_theta_x_function(self, *args)


    def set_m_x_theta_x_function(self, *args):
        """
        set_m_x_theta_x_function(FunctionBasedBushingForce self, int i, Function value)

        Parameters:
            i: int
            value: OpenSim::Function const &

        set_m_x_theta_x_function(FunctionBasedBushingForce self, Function value)

        Parameters:
            value: OpenSim::Function const &

        """
        return _opensim.FunctionBasedBushingForce_set_m_x_theta_x_function(self, *args)


    def copyProperty_m_y_theta_y_function(self, source):
        """
        copyProperty_m_y_theta_y_function(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters:
            source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _opensim.FunctionBasedBushingForce_copyProperty_m_y_theta_y_function(self, source)


    def append_m_y_theta_y_function(self, value):
        """
        append_m_y_theta_y_function(FunctionBasedBushingForce self, Function value) -> int

        Parameters:
            value: OpenSim::Function const &

        """
        return _opensim.FunctionBasedBushingForce_append_m_y_theta_y_function(self, value)


    def constructProperty_m_y_theta_y_function(self, *args):
        """
        constructProperty_m_y_theta_y_function(FunctionBasedBushingForce self)
        constructProperty_m_y_theta_y_function(FunctionBasedBushingForce self, Function initValue)

        Parameters:
            initValue: OpenSim::Function const &

        """
        return _opensim.FunctionBasedBushingForce_constructProperty_m_y_theta_y_function(self, *args)


    def get_m_y_theta_y_function(self, *args):
        """
        get_m_y_theta_y_function(FunctionBasedBushingForce self, int i) -> Function

        Parameters:
            i: int

        get_m_y_theta_y_function(FunctionBasedBushingForce self) -> Function

        Parameters:
            self: OpenSim::FunctionBasedBushingForce const *

        """
        return _opensim.FunctionBasedBushingForce_get_m_y_theta_y_function(self, *args)


    def upd_m_y_theta_y_function(self, *args):
        """
        upd_m_y_theta_y_function(FunctionBasedBushingForce self, int i) -> Function

        Parameters:
            i: int

        upd_m_y_theta_y_function(FunctionBasedBushingForce self) -> Function

        Parameters:
            self: OpenSim::FunctionBasedBushingForce *

        """
        return _opensim.FunctionBasedBushingForce_upd_m_y_theta_y_function(self, *args)


    def set_m_y_theta_y_function(self, *args):
        """
        set_m_y_theta_y_function(FunctionBasedBushingForce self, int i, Function value)

        Parameters:
            i: int
            value: OpenSim::Function const &

        set_m_y_theta_y_function(FunctionBasedBushingForce self, Function value)

        Parameters:
            value: OpenSim::Function const &

        """
        return _opensim.FunctionBasedBushingForce_set_m_y_theta_y_function(self, *args)


    def copyProperty_m_z_theta_z_function(self, source):
        """
        copyProperty_m_z_theta_z_function(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters:
            source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _opensim.FunctionBasedBushingForce_copyProperty_m_z_theta_z_function(self, source)


    def append_m_z_theta_z_function(self, value):
        """
        append_m_z_theta_z_function(FunctionBasedBushingForce self, Function value) -> int

        Parameters:
            value: OpenSim::Function const &

        """
        return _opensim.FunctionBasedBushingForce_append_m_z_theta_z_function(self, value)


    def constructProperty_m_z_theta_z_function(self, *args):
        """
        constructProperty_m_z_theta_z_function(FunctionBasedBushingForce self)
        constructProperty_m_z_theta_z_function(FunctionBasedBushingForce self, Function initValue)

        Parameters:
            initValue: OpenSim::Function const &

        """
        return _opensim.FunctionBasedBushingForce_constructProperty_m_z_theta_z_function(self, *args)


    def get_m_z_theta_z_function(self, *args):
        """
        get_m_z_theta_z_function(FunctionBasedBushingForce self, int i) -> Function

        Parameters:
            i: int

        get_m_z_theta_z_function(FunctionBasedBushingForce self) -> Function

        Parameters:
            self: OpenSim::FunctionBasedBushingForce const *

        """
        return _opensim.FunctionBasedBushingForce_get_m_z_theta_z_function(self, *args)


    def upd_m_z_theta_z_function(self, *args):
        """
        upd_m_z_theta_z_function(FunctionBasedBushingForce self, int i) -> Function

        Parameters:
            i: int

        upd_m_z_theta_z_function(FunctionBasedBushingForce self) -> Function

        Parameters:
            self: OpenSim::FunctionBasedBushingForce *

        """
        return _opensim.FunctionBasedBushingForce_upd_m_z_theta_z_function(self, *args)


    def set_m_z_theta_z_function(self, *args):
        """
        set_m_z_theta_z_function(FunctionBasedBushingForce self, int i, Function value)

        Parameters:
            i: int
            value: OpenSim::Function const &

        set_m_z_theta_z_function(FunctionBasedBushingForce self, Function value)

        Parameters:
            value: OpenSim::Function const &

        """
        return _opensim.FunctionBasedBushingForce_set_m_z_theta_z_function(self, *args)


    def copyProperty_f_x_delta_x_function(self, source):
        """
        copyProperty_f_x_delta_x_function(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters:
            source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _opensim.FunctionBasedBushingForce_copyProperty_f_x_delta_x_function(self, source)


    def append_f_x_delta_x_function(self, value):
        """
        append_f_x_delta_x_function(FunctionBasedBushingForce self, Function value) -> int

        Parameters:
            value: OpenSim::Function const &

        """
        return _opensim.FunctionBasedBushingForce_append_f_x_delta_x_function(self, value)


    def constructProperty_f_x_delta_x_function(self, *args):
        """
        constructProperty_f_x_delta_x_function(FunctionBasedBushingForce self)
        constructProperty_f_x_delta_x_function(FunctionBasedBushingForce self, Function initValue)

        Parameters:
            initValue: OpenSim::Function const &

        """
        return _opensim.FunctionBasedBushingForce_constructProperty_f_x_delta_x_function(self, *args)


    def get_f_x_delta_x_function(self, *args):
        """
        get_f_x_delta_x_function(FunctionBasedBushingForce self, int i) -> Function

        Parameters:
            i: int

        get_f_x_delta_x_function(FunctionBasedBushingForce self) -> Function

        Parameters:
            self: OpenSim::FunctionBasedBushingForce const *

        """
        return _opensim.FunctionBasedBushingForce_get_f_x_delta_x_function(self, *args)


    def upd_f_x_delta_x_function(self, *args):
        """
        upd_f_x_delta_x_function(FunctionBasedBushingForce self, int i) -> Function

        Parameters:
            i: int

        upd_f_x_delta_x_function(FunctionBasedBushingForce self) -> Function

        Parameters:
            self: OpenSim::FunctionBasedBushingForce *

        """
        return _opensim.FunctionBasedBushingForce_upd_f_x_delta_x_function(self, *args)


    def set_f_x_delta_x_function(self, *args):
        """
        set_f_x_delta_x_function(FunctionBasedBushingForce self, int i, Function value)

        Parameters:
            i: int
            value: OpenSim::Function const &

        set_f_x_delta_x_function(FunctionBasedBushingForce self, Function value)

        Parameters:
            value: OpenSim::Function const &

        """
        return _opensim.FunctionBasedBushingForce_set_f_x_delta_x_function(self, *args)


    def copyProperty_f_y_delta_y_function(self, source):
        """
        copyProperty_f_y_delta_y_function(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters:
            source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _opensim.FunctionBasedBushingForce_copyProperty_f_y_delta_y_function(self, source)


    def append_f_y_delta_y_function(self, value):
        """
        append_f_y_delta_y_function(FunctionBasedBushingForce self, Function value) -> int

        Parameters:
            value: OpenSim::Function const &

        """
        return _opensim.FunctionBasedBushingForce_append_f_y_delta_y_function(self, value)


    def constructProperty_f_y_delta_y_function(self, *args):
        """
        constructProperty_f_y_delta_y_function(FunctionBasedBushingForce self)
        constructProperty_f_y_delta_y_function(FunctionBasedBushingForce self, Function initValue)

        Parameters:
            initValue: OpenSim::Function const &

        """
        return _opensim.FunctionBasedBushingForce_constructProperty_f_y_delta_y_function(self, *args)


    def get_f_y_delta_y_function(self, *args):
        """
        get_f_y_delta_y_function(FunctionBasedBushingForce self, int i) -> Function

        Parameters:
            i: int

        get_f_y_delta_y_function(FunctionBasedBushingForce self) -> Function

        Parameters:
            self: OpenSim::FunctionBasedBushingForce const *

        """
        return _opensim.FunctionBasedBushingForce_get_f_y_delta_y_function(self, *args)


    def upd_f_y_delta_y_function(self, *args):
        """
        upd_f_y_delta_y_function(FunctionBasedBushingForce self, int i) -> Function

        Parameters:
            i: int

        upd_f_y_delta_y_function(FunctionBasedBushingForce self) -> Function

        Parameters:
            self: OpenSim::FunctionBasedBushingForce *

        """
        return _opensim.FunctionBasedBushingForce_upd_f_y_delta_y_function(self, *args)


    def set_f_y_delta_y_function(self, *args):
        """
        set_f_y_delta_y_function(FunctionBasedBushingForce self, int i, Function value)

        Parameters:
            i: int
            value: OpenSim::Function const &

        set_f_y_delta_y_function(FunctionBasedBushingForce self, Function value)

        Parameters:
            value: OpenSim::Function const &

        """
        return _opensim.FunctionBasedBushingForce_set_f_y_delta_y_function(self, *args)


    def copyProperty_f_z_delta_z_function(self, source):
        """
        copyProperty_f_z_delta_z_function(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters:
            source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _opensim.FunctionBasedBushingForce_copyProperty_f_z_delta_z_function(self, source)


    def append_f_z_delta_z_function(self, value):
        """
        append_f_z_delta_z_function(FunctionBasedBushingForce self, Function value) -> int

        Parameters:
            value: OpenSim::Function const &

        """
        return _opensim.FunctionBasedBushingForce_append_f_z_delta_z_function(self, value)


    def constructProperty_f_z_delta_z_function(self, *args):
        """
        constructProperty_f_z_delta_z_function(FunctionBasedBushingForce self)
        constructProperty_f_z_delta_z_function(FunctionBasedBushingForce self, Function initValue)

        Parameters:
            initValue: OpenSim::Function const &

        """
        return _opensim.FunctionBasedBushingForce_constructProperty_f_z_delta_z_function(self, *args)


    def get_f_z_delta_z_function(self, *args):
        """
        get_f_z_delta_z_function(FunctionBasedBushingForce self, int i) -> Function

        Parameters:
            i: int

        get_f_z_delta_z_function(FunctionBasedBushingForce self) -> Function

        Parameters:
            self: OpenSim::FunctionBasedBushingForce const *

        """
        return _opensim.FunctionBasedBushingForce_get_f_z_delta_z_function(self, *args)


    def upd_f_z_delta_z_function(self, *args):
        """
        upd_f_z_delta_z_function(FunctionBasedBushingForce self, int i) -> Function

        Parameters:
            i: int

        upd_f_z_delta_z_function(FunctionBasedBushingForce self) -> Function

        Parameters:
            self: OpenSim::FunctionBasedBushingForce *

        """
        return _opensim.FunctionBasedBushingForce_upd_f_z_delta_z_function(self, *args)


    def set_f_z_delta_z_function(self, *args):
        """
        set_f_z_delta_z_function(FunctionBasedBushingForce self, int i, Function value)

        Parameters:
            i: int
            value: OpenSim::Function const &

        set_f_z_delta_z_function(FunctionBasedBushingForce self, Function value)

        Parameters:
            value: OpenSim::Function const &

        """
        return _opensim.FunctionBasedBushingForce_set_f_z_delta_z_function(self, *args)


    def copyProperty_visual_aspect_ratio(self, source):
        """
        copyProperty_visual_aspect_ratio(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters:
            source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _opensim.FunctionBasedBushingForce_copyProperty_visual_aspect_ratio(self, source)


    def append_visual_aspect_ratio(self, value):
        """
        append_visual_aspect_ratio(FunctionBasedBushingForce self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.FunctionBasedBushingForce_append_visual_aspect_ratio(self, value)


    def constructProperty_visual_aspect_ratio(self, *args):
        """
        constructProperty_visual_aspect_ratio(FunctionBasedBushingForce self)
        constructProperty_visual_aspect_ratio(FunctionBasedBushingForce self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.FunctionBasedBushingForce_constructProperty_visual_aspect_ratio(self, *args)


    def get_visual_aspect_ratio(self, *args):
        """
        get_visual_aspect_ratio(FunctionBasedBushingForce self, int i) -> double const

        Parameters:
            i: int

        get_visual_aspect_ratio(FunctionBasedBushingForce self) -> double const &

        Parameters:
            self: OpenSim::FunctionBasedBushingForce const *

        """
        return _opensim.FunctionBasedBushingForce_get_visual_aspect_ratio(self, *args)


    def upd_visual_aspect_ratio(self, *args):
        """
        upd_visual_aspect_ratio(FunctionBasedBushingForce self, int i) -> double

        Parameters:
            i: int

        upd_visual_aspect_ratio(FunctionBasedBushingForce self) -> double &

        Parameters:
            self: OpenSim::FunctionBasedBushingForce *

        """
        return _opensim.FunctionBasedBushingForce_upd_visual_aspect_ratio(self, *args)


    def set_visual_aspect_ratio(self, *args):
        """
        set_visual_aspect_ratio(FunctionBasedBushingForce self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_visual_aspect_ratio(FunctionBasedBushingForce self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.FunctionBasedBushingForce_set_visual_aspect_ratio(self, *args)


    def copyProperty_moment_visual_scale(self, source):
        """
        copyProperty_moment_visual_scale(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters:
            source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _opensim.FunctionBasedBushingForce_copyProperty_moment_visual_scale(self, source)


    def append_moment_visual_scale(self, value):
        """
        append_moment_visual_scale(FunctionBasedBushingForce self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.FunctionBasedBushingForce_append_moment_visual_scale(self, value)


    def constructProperty_moment_visual_scale(self, *args):
        """
        constructProperty_moment_visual_scale(FunctionBasedBushingForce self)
        constructProperty_moment_visual_scale(FunctionBasedBushingForce self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.FunctionBasedBushingForce_constructProperty_moment_visual_scale(self, *args)


    def get_moment_visual_scale(self, *args):
        """
        get_moment_visual_scale(FunctionBasedBushingForce self, int i) -> double const

        Parameters:
            i: int

        get_moment_visual_scale(FunctionBasedBushingForce self) -> double const &

        Parameters:
            self: OpenSim::FunctionBasedBushingForce const *

        """
        return _opensim.FunctionBasedBushingForce_get_moment_visual_scale(self, *args)


    def upd_moment_visual_scale(self, *args):
        """
        upd_moment_visual_scale(FunctionBasedBushingForce self, int i) -> double

        Parameters:
            i: int

        upd_moment_visual_scale(FunctionBasedBushingForce self) -> double &

        Parameters:
            self: OpenSim::FunctionBasedBushingForce *

        """
        return _opensim.FunctionBasedBushingForce_upd_moment_visual_scale(self, *args)


    def set_moment_visual_scale(self, *args):
        """
        set_moment_visual_scale(FunctionBasedBushingForce self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_moment_visual_scale(FunctionBasedBushingForce self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.FunctionBasedBushingForce_set_moment_visual_scale(self, *args)


    def copyProperty_force_visual_scale(self, source):
        """
        copyProperty_force_visual_scale(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters:
            source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _opensim.FunctionBasedBushingForce_copyProperty_force_visual_scale(self, source)


    def append_force_visual_scale(self, value):
        """
        append_force_visual_scale(FunctionBasedBushingForce self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.FunctionBasedBushingForce_append_force_visual_scale(self, value)


    def constructProperty_force_visual_scale(self, *args):
        """
        constructProperty_force_visual_scale(FunctionBasedBushingForce self)
        constructProperty_force_visual_scale(FunctionBasedBushingForce self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.FunctionBasedBushingForce_constructProperty_force_visual_scale(self, *args)


    def get_force_visual_scale(self, *args):
        """
        get_force_visual_scale(FunctionBasedBushingForce self, int i) -> double const

        Parameters:
            i: int

        get_force_visual_scale(FunctionBasedBushingForce self) -> double const &

        Parameters:
            self: OpenSim::FunctionBasedBushingForce const *

        """
        return _opensim.FunctionBasedBushingForce_get_force_visual_scale(self, *args)


    def upd_force_visual_scale(self, *args):
        """
        upd_force_visual_scale(FunctionBasedBushingForce self, int i) -> double

        Parameters:
            i: int

        upd_force_visual_scale(FunctionBasedBushingForce self) -> double &

        Parameters:
            self: OpenSim::FunctionBasedBushingForce *

        """
        return _opensim.FunctionBasedBushingForce_upd_force_visual_scale(self, *args)


    def set_force_visual_scale(self, *args):
        """
        set_force_visual_scale(FunctionBasedBushingForce self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_force_visual_scale(FunctionBasedBushingForce self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.FunctionBasedBushingForce_set_force_visual_scale(self, *args)


    def copyProperty_rotational_damping(self, source):
        """
        copyProperty_rotational_damping(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters:
            source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _opensim.FunctionBasedBushingForce_copyProperty_rotational_damping(self, source)


    def append_rotational_damping(self, value):
        """
        append_rotational_damping(FunctionBasedBushingForce self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.FunctionBasedBushingForce_append_rotational_damping(self, value)


    def constructProperty_rotational_damping(self, initValue):
        """
        constructProperty_rotational_damping(FunctionBasedBushingForce self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.FunctionBasedBushingForce_constructProperty_rotational_damping(self, initValue)


    def get_rotational_damping(self, *args):
        """
        get_rotational_damping(FunctionBasedBushingForce self, int i) -> Vec3

        Parameters:
            i: int

        get_rotational_damping(FunctionBasedBushingForce self) -> Vec3

        Parameters:
            self: OpenSim::FunctionBasedBushingForce const *

        """
        return _opensim.FunctionBasedBushingForce_get_rotational_damping(self, *args)


    def upd_rotational_damping(self, *args):
        """
        upd_rotational_damping(FunctionBasedBushingForce self, int i) -> Vec3

        Parameters:
            i: int

        upd_rotational_damping(FunctionBasedBushingForce self) -> Vec3

        Parameters:
            self: OpenSim::FunctionBasedBushingForce *

        """
        return _opensim.FunctionBasedBushingForce_upd_rotational_damping(self, *args)


    def set_rotational_damping(self, *args):
        """
        set_rotational_damping(FunctionBasedBushingForce self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_rotational_damping(FunctionBasedBushingForce self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.FunctionBasedBushingForce_set_rotational_damping(self, *args)


    def copyProperty_translational_damping(self, source):
        """
        copyProperty_translational_damping(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters:
            source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _opensim.FunctionBasedBushingForce_copyProperty_translational_damping(self, source)


    def append_translational_damping(self, value):
        """
        append_translational_damping(FunctionBasedBushingForce self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.FunctionBasedBushingForce_append_translational_damping(self, value)


    def constructProperty_translational_damping(self, initValue):
        """
        constructProperty_translational_damping(FunctionBasedBushingForce self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.FunctionBasedBushingForce_constructProperty_translational_damping(self, initValue)


    def get_translational_damping(self, *args):
        """
        get_translational_damping(FunctionBasedBushingForce self, int i) -> Vec3

        Parameters:
            i: int

        get_translational_damping(FunctionBasedBushingForce self) -> Vec3

        Parameters:
            self: OpenSim::FunctionBasedBushingForce const *

        """
        return _opensim.FunctionBasedBushingForce_get_translational_damping(self, *args)


    def upd_translational_damping(self, *args):
        """
        upd_translational_damping(FunctionBasedBushingForce self, int i) -> Vec3

        Parameters:
            i: int

        upd_translational_damping(FunctionBasedBushingForce self) -> Vec3

        Parameters:
            self: OpenSim::FunctionBasedBushingForce *

        """
        return _opensim.FunctionBasedBushingForce_upd_translational_damping(self, *args)


    def set_translational_damping(self, *args):
        """
        set_translational_damping(FunctionBasedBushingForce self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_translational_damping(FunctionBasedBushingForce self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.FunctionBasedBushingForce_set_translational_damping(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::FunctionBasedBushingForce self) -> FunctionBasedBushingForce
        __init__(OpenSim::FunctionBasedBushingForce self, std::string const & body1Name, Vec3 point1, Vec3 orientation1, std::string const & body2Name, Vec3 point2, Vec3 orientation2) -> FunctionBasedBushingForce

        Parameters:
            body1Name: std::string const &
            point1: SimTK::Vec3 const &
            orientation1: SimTK::Vec3 const &
            body2Name: std::string const &
            point2: SimTK::Vec3 const &
            orientation2: SimTK::Vec3 const &

        __init__(OpenSim::FunctionBasedBushingForce self, std::string const & body1Name, Vec3 point1, Vec3 orientation1, std::string const & body2Name, Vec3 point2, Vec3 orientation2, Vec3 transStiffness, Vec3 rotStiffness, Vec3 transDamping, Vec3 rotDamping) -> FunctionBasedBushingForce

        Parameters:
            body1Name: std::string const &
            point1: SimTK::Vec3 const &
            orientation1: SimTK::Vec3 const &
            body2Name: std::string const &
            point2: SimTK::Vec3 const &
            orientation2: SimTK::Vec3 const &
            transStiffness: SimTK::Vec3 const &
            rotStiffness: SimTK::Vec3 const &
            transDamping: SimTK::Vec3 const &
            rotDamping: SimTK::Vec3 const &

        """
        this = _opensim.new_FunctionBasedBushingForce(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setBody1ByName(self, aBodyName):
        """
        setBody1ByName(FunctionBasedBushingForce self, std::string const & aBodyName)

        Parameters:
            aBodyName: std::string const &

        """
        return _opensim.FunctionBasedBushingForce_setBody1ByName(self, aBodyName)


    def setBody1BushingLocation(self, *args):
        """
        setBody1BushingLocation(FunctionBasedBushingForce self, Vec3 location, Vec3 orientation)

        Parameters:
            location: SimTK::Vec3 const &
            orientation: SimTK::Vec3 const &

        setBody1BushingLocation(FunctionBasedBushingForce self, Vec3 location)

        Parameters:
            location: SimTK::Vec3 const &

        """
        return _opensim.FunctionBasedBushingForce_setBody1BushingLocation(self, *args)


    def setBody2ByName(self, aBodyName):
        """
        setBody2ByName(FunctionBasedBushingForce self, std::string const & aBodyName)

        Parameters:
            aBodyName: std::string const &

        """
        return _opensim.FunctionBasedBushingForce_setBody2ByName(self, aBodyName)


    def setBody2BushingLocation(self, *args):
        """
        setBody2BushingLocation(FunctionBasedBushingForce self, Vec3 location, Vec3 orientation)

        Parameters:
            location: SimTK::Vec3 const &
            orientation: SimTK::Vec3 const &

        setBody2BushingLocation(FunctionBasedBushingForce self, Vec3 location)

        Parameters:
            location: SimTK::Vec3 const &

        """
        return _opensim.FunctionBasedBushingForce_setBody2BushingLocation(self, *args)


    def setMomentVisualScale(self, scale):
        """
        setMomentVisualScale(FunctionBasedBushingForce self, double scale)

        Parameters:
            scale: double

        """
        return _opensim.FunctionBasedBushingForce_setMomentVisualScale(self, scale)


    def setForceVisualScale(self, scale):
        """
        setForceVisualScale(FunctionBasedBushingForce self, double scale)

        Parameters:
            scale: double

        """
        return _opensim.FunctionBasedBushingForce_setForceVisualScale(self, scale)


    def setVisualAspectRatio(self, ratio):
        """
        setVisualAspectRatio(FunctionBasedBushingForce self, double ratio)

        Parameters:
            ratio: double

        """
        return _opensim.FunctionBasedBushingForce_setVisualAspectRatio(self, ratio)


    def computeDeflection(self, s):
        """
        computeDeflection(FunctionBasedBushingForce self, State s) -> Vec6

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.FunctionBasedBushingForce_computeDeflection(self, s)


    def computeForce(self, s, bodyForces, generalizedForces):
        """
        computeForce(FunctionBasedBushingForce self, State s, VectorOfSpatialVec bodyForces, Vector generalizedForces)

        Parameters:
            s: SimTK::State const &
            bodyForces: SimTK::Vector_< SimTK::SpatialVec > &
            generalizedForces: SimTK::Vector &

        """
        return _opensim.FunctionBasedBushingForce_computeForce(self, s, bodyForces, generalizedForces)


    def computePotentialEnergy(self, s):
        """
        computePotentialEnergy(FunctionBasedBushingForce self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.FunctionBasedBushingForce_computePotentialEnergy(self, s)


    def getRecordLabels(self):
        """
        getRecordLabels(FunctionBasedBushingForce self) -> ArrayStr

        Parameters:
            self: OpenSim::FunctionBasedBushingForce const *

        """
        return _opensim.FunctionBasedBushingForce_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(FunctionBasedBushingForce self, State state) -> ArrayDouble

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.FunctionBasedBushingForce_getRecordValues(self, state)

    __swig_destroy__ = _opensim.delete_FunctionBasedBushingForce
    __del__ = lambda self: None
FunctionBasedBushingForce_swigregister = _opensim.FunctionBasedBushingForce_swigregister
FunctionBasedBushingForce_swigregister(FunctionBasedBushingForce)

def FunctionBasedBushingForce_safeDownCast(obj):
    """
    FunctionBasedBushingForce_safeDownCast(OpenSimObject obj) -> FunctionBasedBushingForce

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.FunctionBasedBushingForce_safeDownCast(obj)

def FunctionBasedBushingForce_getClassName():
    """FunctionBasedBushingForce_getClassName() -> std::string const &"""
    return _opensim.FunctionBasedBushingForce_getClassName()

class ExpressionBasedBushingForce(Force):
    """Proxy of C++ OpenSim::ExpressionBasedBushingForce class"""
    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpressionBasedBushingForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExpressionBasedBushingForce, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ExpressionBasedBushingForce

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ExpressionBasedBushingForce_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ExpressionBasedBushingForce self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ExpressionBasedBushingForce_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ExpressionBasedBushingForce_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ExpressionBasedBushingForce self) -> ExpressionBasedBushingForce

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _opensim.ExpressionBasedBushingForce_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ExpressionBasedBushingForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _opensim.ExpressionBasedBushingForce_getConcreteClassName(self)


    def copyProperty_body_1(self, source):
        """
        copyProperty_body_1(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters:
            source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _opensim.ExpressionBasedBushingForce_copyProperty_body_1(self, source)


    def append_body_1(self, value):
        """
        append_body_1(ExpressionBasedBushingForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_append_body_1(self, value)


    def constructProperty_body_1(self, *args):
        """
        constructProperty_body_1(ExpressionBasedBushingForce self)
        constructProperty_body_1(ExpressionBasedBushingForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_constructProperty_body_1(self, *args)


    def get_body_1(self, *args):
        """
        get_body_1(ExpressionBasedBushingForce self, int i) -> std::string const

        Parameters:
            i: int

        get_body_1(ExpressionBasedBushingForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _opensim.ExpressionBasedBushingForce_get_body_1(self, *args)


    def upd_body_1(self, *args):
        """
        upd_body_1(ExpressionBasedBushingForce self, int i) -> std::string

        Parameters:
            i: int

        upd_body_1(ExpressionBasedBushingForce self) -> std::string &

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce *

        """
        return _opensim.ExpressionBasedBushingForce_upd_body_1(self, *args)


    def set_body_1(self, *args):
        """
        set_body_1(ExpressionBasedBushingForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_body_1(ExpressionBasedBushingForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_set_body_1(self, *args)


    def copyProperty_body_2(self, source):
        """
        copyProperty_body_2(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters:
            source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _opensim.ExpressionBasedBushingForce_copyProperty_body_2(self, source)


    def append_body_2(self, value):
        """
        append_body_2(ExpressionBasedBushingForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_append_body_2(self, value)


    def constructProperty_body_2(self, *args):
        """
        constructProperty_body_2(ExpressionBasedBushingForce self)
        constructProperty_body_2(ExpressionBasedBushingForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_constructProperty_body_2(self, *args)


    def get_body_2(self, *args):
        """
        get_body_2(ExpressionBasedBushingForce self, int i) -> std::string const

        Parameters:
            i: int

        get_body_2(ExpressionBasedBushingForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _opensim.ExpressionBasedBushingForce_get_body_2(self, *args)


    def upd_body_2(self, *args):
        """
        upd_body_2(ExpressionBasedBushingForce self, int i) -> std::string

        Parameters:
            i: int

        upd_body_2(ExpressionBasedBushingForce self) -> std::string &

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce *

        """
        return _opensim.ExpressionBasedBushingForce_upd_body_2(self, *args)


    def set_body_2(self, *args):
        """
        set_body_2(ExpressionBasedBushingForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_body_2(ExpressionBasedBushingForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_set_body_2(self, *args)


    def copyProperty_location_body_1(self, source):
        """
        copyProperty_location_body_1(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters:
            source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _opensim.ExpressionBasedBushingForce_copyProperty_location_body_1(self, source)


    def append_location_body_1(self, value):
        """
        append_location_body_1(ExpressionBasedBushingForce self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedBushingForce_append_location_body_1(self, value)


    def constructProperty_location_body_1(self, initValue):
        """
        constructProperty_location_body_1(ExpressionBasedBushingForce self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedBushingForce_constructProperty_location_body_1(self, initValue)


    def get_location_body_1(self, *args):
        """
        get_location_body_1(ExpressionBasedBushingForce self, int i) -> Vec3

        Parameters:
            i: int

        get_location_body_1(ExpressionBasedBushingForce self) -> Vec3

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _opensim.ExpressionBasedBushingForce_get_location_body_1(self, *args)


    def upd_location_body_1(self, *args):
        """
        upd_location_body_1(ExpressionBasedBushingForce self, int i) -> Vec3

        Parameters:
            i: int

        upd_location_body_1(ExpressionBasedBushingForce self) -> Vec3

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce *

        """
        return _opensim.ExpressionBasedBushingForce_upd_location_body_1(self, *args)


    def set_location_body_1(self, *args):
        """
        set_location_body_1(ExpressionBasedBushingForce self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_location_body_1(ExpressionBasedBushingForce self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedBushingForce_set_location_body_1(self, *args)


    def copyProperty_orientation_body_1(self, source):
        """
        copyProperty_orientation_body_1(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters:
            source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _opensim.ExpressionBasedBushingForce_copyProperty_orientation_body_1(self, source)


    def append_orientation_body_1(self, value):
        """
        append_orientation_body_1(ExpressionBasedBushingForce self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedBushingForce_append_orientation_body_1(self, value)


    def constructProperty_orientation_body_1(self, initValue):
        """
        constructProperty_orientation_body_1(ExpressionBasedBushingForce self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedBushingForce_constructProperty_orientation_body_1(self, initValue)


    def get_orientation_body_1(self, *args):
        """
        get_orientation_body_1(ExpressionBasedBushingForce self, int i) -> Vec3

        Parameters:
            i: int

        get_orientation_body_1(ExpressionBasedBushingForce self) -> Vec3

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _opensim.ExpressionBasedBushingForce_get_orientation_body_1(self, *args)


    def upd_orientation_body_1(self, *args):
        """
        upd_orientation_body_1(ExpressionBasedBushingForce self, int i) -> Vec3

        Parameters:
            i: int

        upd_orientation_body_1(ExpressionBasedBushingForce self) -> Vec3

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce *

        """
        return _opensim.ExpressionBasedBushingForce_upd_orientation_body_1(self, *args)


    def set_orientation_body_1(self, *args):
        """
        set_orientation_body_1(ExpressionBasedBushingForce self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_orientation_body_1(ExpressionBasedBushingForce self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedBushingForce_set_orientation_body_1(self, *args)


    def copyProperty_location_body_2(self, source):
        """
        copyProperty_location_body_2(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters:
            source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _opensim.ExpressionBasedBushingForce_copyProperty_location_body_2(self, source)


    def append_location_body_2(self, value):
        """
        append_location_body_2(ExpressionBasedBushingForce self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedBushingForce_append_location_body_2(self, value)


    def constructProperty_location_body_2(self, initValue):
        """
        constructProperty_location_body_2(ExpressionBasedBushingForce self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedBushingForce_constructProperty_location_body_2(self, initValue)


    def get_location_body_2(self, *args):
        """
        get_location_body_2(ExpressionBasedBushingForce self, int i) -> Vec3

        Parameters:
            i: int

        get_location_body_2(ExpressionBasedBushingForce self) -> Vec3

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _opensim.ExpressionBasedBushingForce_get_location_body_2(self, *args)


    def upd_location_body_2(self, *args):
        """
        upd_location_body_2(ExpressionBasedBushingForce self, int i) -> Vec3

        Parameters:
            i: int

        upd_location_body_2(ExpressionBasedBushingForce self) -> Vec3

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce *

        """
        return _opensim.ExpressionBasedBushingForce_upd_location_body_2(self, *args)


    def set_location_body_2(self, *args):
        """
        set_location_body_2(ExpressionBasedBushingForce self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_location_body_2(ExpressionBasedBushingForce self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedBushingForce_set_location_body_2(self, *args)


    def copyProperty_orientation_body_2(self, source):
        """
        copyProperty_orientation_body_2(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters:
            source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _opensim.ExpressionBasedBushingForce_copyProperty_orientation_body_2(self, source)


    def append_orientation_body_2(self, value):
        """
        append_orientation_body_2(ExpressionBasedBushingForce self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedBushingForce_append_orientation_body_2(self, value)


    def constructProperty_orientation_body_2(self, initValue):
        """
        constructProperty_orientation_body_2(ExpressionBasedBushingForce self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedBushingForce_constructProperty_orientation_body_2(self, initValue)


    def get_orientation_body_2(self, *args):
        """
        get_orientation_body_2(ExpressionBasedBushingForce self, int i) -> Vec3

        Parameters:
            i: int

        get_orientation_body_2(ExpressionBasedBushingForce self) -> Vec3

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _opensim.ExpressionBasedBushingForce_get_orientation_body_2(self, *args)


    def upd_orientation_body_2(self, *args):
        """
        upd_orientation_body_2(ExpressionBasedBushingForce self, int i) -> Vec3

        Parameters:
            i: int

        upd_orientation_body_2(ExpressionBasedBushingForce self) -> Vec3

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce *

        """
        return _opensim.ExpressionBasedBushingForce_upd_orientation_body_2(self, *args)


    def set_orientation_body_2(self, *args):
        """
        set_orientation_body_2(ExpressionBasedBushingForce self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_orientation_body_2(ExpressionBasedBushingForce self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedBushingForce_set_orientation_body_2(self, *args)


    def copyProperty_Mx_expression(self, source):
        """
        copyProperty_Mx_expression(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters:
            source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _opensim.ExpressionBasedBushingForce_copyProperty_Mx_expression(self, source)


    def append_Mx_expression(self, value):
        """
        append_Mx_expression(ExpressionBasedBushingForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_append_Mx_expression(self, value)


    def constructProperty_Mx_expression(self, initValue):
        """
        constructProperty_Mx_expression(ExpressionBasedBushingForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_constructProperty_Mx_expression(self, initValue)


    def get_Mx_expression(self, *args):
        """
        get_Mx_expression(ExpressionBasedBushingForce self, int i) -> std::string const

        Parameters:
            i: int

        get_Mx_expression(ExpressionBasedBushingForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _opensim.ExpressionBasedBushingForce_get_Mx_expression(self, *args)


    def upd_Mx_expression(self, *args):
        """
        upd_Mx_expression(ExpressionBasedBushingForce self, int i) -> std::string

        Parameters:
            i: int

        upd_Mx_expression(ExpressionBasedBushingForce self) -> std::string &

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce *

        """
        return _opensim.ExpressionBasedBushingForce_upd_Mx_expression(self, *args)


    def set_Mx_expression(self, *args):
        """
        set_Mx_expression(ExpressionBasedBushingForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_Mx_expression(ExpressionBasedBushingForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_set_Mx_expression(self, *args)


    def copyProperty_My_expression(self, source):
        """
        copyProperty_My_expression(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters:
            source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _opensim.ExpressionBasedBushingForce_copyProperty_My_expression(self, source)


    def append_My_expression(self, value):
        """
        append_My_expression(ExpressionBasedBushingForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_append_My_expression(self, value)


    def constructProperty_My_expression(self, initValue):
        """
        constructProperty_My_expression(ExpressionBasedBushingForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_constructProperty_My_expression(self, initValue)


    def get_My_expression(self, *args):
        """
        get_My_expression(ExpressionBasedBushingForce self, int i) -> std::string const

        Parameters:
            i: int

        get_My_expression(ExpressionBasedBushingForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _opensim.ExpressionBasedBushingForce_get_My_expression(self, *args)


    def upd_My_expression(self, *args):
        """
        upd_My_expression(ExpressionBasedBushingForce self, int i) -> std::string

        Parameters:
            i: int

        upd_My_expression(ExpressionBasedBushingForce self) -> std::string &

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce *

        """
        return _opensim.ExpressionBasedBushingForce_upd_My_expression(self, *args)


    def set_My_expression(self, *args):
        """
        set_My_expression(ExpressionBasedBushingForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_My_expression(ExpressionBasedBushingForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_set_My_expression(self, *args)


    def copyProperty_Mz_expression(self, source):
        """
        copyProperty_Mz_expression(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters:
            source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _opensim.ExpressionBasedBushingForce_copyProperty_Mz_expression(self, source)


    def append_Mz_expression(self, value):
        """
        append_Mz_expression(ExpressionBasedBushingForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_append_Mz_expression(self, value)


    def constructProperty_Mz_expression(self, initValue):
        """
        constructProperty_Mz_expression(ExpressionBasedBushingForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_constructProperty_Mz_expression(self, initValue)


    def get_Mz_expression(self, *args):
        """
        get_Mz_expression(ExpressionBasedBushingForce self, int i) -> std::string const

        Parameters:
            i: int

        get_Mz_expression(ExpressionBasedBushingForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _opensim.ExpressionBasedBushingForce_get_Mz_expression(self, *args)


    def upd_Mz_expression(self, *args):
        """
        upd_Mz_expression(ExpressionBasedBushingForce self, int i) -> std::string

        Parameters:
            i: int

        upd_Mz_expression(ExpressionBasedBushingForce self) -> std::string &

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce *

        """
        return _opensim.ExpressionBasedBushingForce_upd_Mz_expression(self, *args)


    def set_Mz_expression(self, *args):
        """
        set_Mz_expression(ExpressionBasedBushingForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_Mz_expression(ExpressionBasedBushingForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_set_Mz_expression(self, *args)


    def copyProperty_Fx_expression(self, source):
        """
        copyProperty_Fx_expression(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters:
            source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _opensim.ExpressionBasedBushingForce_copyProperty_Fx_expression(self, source)


    def append_Fx_expression(self, value):
        """
        append_Fx_expression(ExpressionBasedBushingForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_append_Fx_expression(self, value)


    def constructProperty_Fx_expression(self, initValue):
        """
        constructProperty_Fx_expression(ExpressionBasedBushingForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_constructProperty_Fx_expression(self, initValue)


    def get_Fx_expression(self, *args):
        """
        get_Fx_expression(ExpressionBasedBushingForce self, int i) -> std::string const

        Parameters:
            i: int

        get_Fx_expression(ExpressionBasedBushingForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _opensim.ExpressionBasedBushingForce_get_Fx_expression(self, *args)


    def upd_Fx_expression(self, *args):
        """
        upd_Fx_expression(ExpressionBasedBushingForce self, int i) -> std::string

        Parameters:
            i: int

        upd_Fx_expression(ExpressionBasedBushingForce self) -> std::string &

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce *

        """
        return _opensim.ExpressionBasedBushingForce_upd_Fx_expression(self, *args)


    def set_Fx_expression(self, *args):
        """
        set_Fx_expression(ExpressionBasedBushingForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_Fx_expression(ExpressionBasedBushingForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_set_Fx_expression(self, *args)


    def copyProperty_Fy_expression(self, source):
        """
        copyProperty_Fy_expression(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters:
            source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _opensim.ExpressionBasedBushingForce_copyProperty_Fy_expression(self, source)


    def append_Fy_expression(self, value):
        """
        append_Fy_expression(ExpressionBasedBushingForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_append_Fy_expression(self, value)


    def constructProperty_Fy_expression(self, initValue):
        """
        constructProperty_Fy_expression(ExpressionBasedBushingForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_constructProperty_Fy_expression(self, initValue)


    def get_Fy_expression(self, *args):
        """
        get_Fy_expression(ExpressionBasedBushingForce self, int i) -> std::string const

        Parameters:
            i: int

        get_Fy_expression(ExpressionBasedBushingForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _opensim.ExpressionBasedBushingForce_get_Fy_expression(self, *args)


    def upd_Fy_expression(self, *args):
        """
        upd_Fy_expression(ExpressionBasedBushingForce self, int i) -> std::string

        Parameters:
            i: int

        upd_Fy_expression(ExpressionBasedBushingForce self) -> std::string &

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce *

        """
        return _opensim.ExpressionBasedBushingForce_upd_Fy_expression(self, *args)


    def set_Fy_expression(self, *args):
        """
        set_Fy_expression(ExpressionBasedBushingForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_Fy_expression(ExpressionBasedBushingForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_set_Fy_expression(self, *args)


    def copyProperty_Fz_expression(self, source):
        """
        copyProperty_Fz_expression(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters:
            source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _opensim.ExpressionBasedBushingForce_copyProperty_Fz_expression(self, source)


    def append_Fz_expression(self, value):
        """
        append_Fz_expression(ExpressionBasedBushingForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_append_Fz_expression(self, value)


    def constructProperty_Fz_expression(self, initValue):
        """
        constructProperty_Fz_expression(ExpressionBasedBushingForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_constructProperty_Fz_expression(self, initValue)


    def get_Fz_expression(self, *args):
        """
        get_Fz_expression(ExpressionBasedBushingForce self, int i) -> std::string const

        Parameters:
            i: int

        get_Fz_expression(ExpressionBasedBushingForce self) -> std::string const &

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _opensim.ExpressionBasedBushingForce_get_Fz_expression(self, *args)


    def upd_Fz_expression(self, *args):
        """
        upd_Fz_expression(ExpressionBasedBushingForce self, int i) -> std::string

        Parameters:
            i: int

        upd_Fz_expression(ExpressionBasedBushingForce self) -> std::string &

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce *

        """
        return _opensim.ExpressionBasedBushingForce_upd_Fz_expression(self, *args)


    def set_Fz_expression(self, *args):
        """
        set_Fz_expression(ExpressionBasedBushingForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_Fz_expression(ExpressionBasedBushingForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_set_Fz_expression(self, *args)


    def copyProperty_visual_aspect_ratio(self, source):
        """
        copyProperty_visual_aspect_ratio(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters:
            source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _opensim.ExpressionBasedBushingForce_copyProperty_visual_aspect_ratio(self, source)


    def append_visual_aspect_ratio(self, value):
        """
        append_visual_aspect_ratio(ExpressionBasedBushingForce self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ExpressionBasedBushingForce_append_visual_aspect_ratio(self, value)


    def constructProperty_visual_aspect_ratio(self, *args):
        """
        constructProperty_visual_aspect_ratio(ExpressionBasedBushingForce self)
        constructProperty_visual_aspect_ratio(ExpressionBasedBushingForce self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ExpressionBasedBushingForce_constructProperty_visual_aspect_ratio(self, *args)


    def get_visual_aspect_ratio(self, *args):
        """
        get_visual_aspect_ratio(ExpressionBasedBushingForce self, int i) -> double const

        Parameters:
            i: int

        get_visual_aspect_ratio(ExpressionBasedBushingForce self) -> double const &

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _opensim.ExpressionBasedBushingForce_get_visual_aspect_ratio(self, *args)


    def upd_visual_aspect_ratio(self, *args):
        """
        upd_visual_aspect_ratio(ExpressionBasedBushingForce self, int i) -> double

        Parameters:
            i: int

        upd_visual_aspect_ratio(ExpressionBasedBushingForce self) -> double &

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce *

        """
        return _opensim.ExpressionBasedBushingForce_upd_visual_aspect_ratio(self, *args)


    def set_visual_aspect_ratio(self, *args):
        """
        set_visual_aspect_ratio(ExpressionBasedBushingForce self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_visual_aspect_ratio(ExpressionBasedBushingForce self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ExpressionBasedBushingForce_set_visual_aspect_ratio(self, *args)


    def copyProperty_moment_visual_scale(self, source):
        """
        copyProperty_moment_visual_scale(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters:
            source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _opensim.ExpressionBasedBushingForce_copyProperty_moment_visual_scale(self, source)


    def append_moment_visual_scale(self, value):
        """
        append_moment_visual_scale(ExpressionBasedBushingForce self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ExpressionBasedBushingForce_append_moment_visual_scale(self, value)


    def constructProperty_moment_visual_scale(self, *args):
        """
        constructProperty_moment_visual_scale(ExpressionBasedBushingForce self)
        constructProperty_moment_visual_scale(ExpressionBasedBushingForce self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ExpressionBasedBushingForce_constructProperty_moment_visual_scale(self, *args)


    def get_moment_visual_scale(self, *args):
        """
        get_moment_visual_scale(ExpressionBasedBushingForce self, int i) -> double const

        Parameters:
            i: int

        get_moment_visual_scale(ExpressionBasedBushingForce self) -> double const &

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _opensim.ExpressionBasedBushingForce_get_moment_visual_scale(self, *args)


    def upd_moment_visual_scale(self, *args):
        """
        upd_moment_visual_scale(ExpressionBasedBushingForce self, int i) -> double

        Parameters:
            i: int

        upd_moment_visual_scale(ExpressionBasedBushingForce self) -> double &

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce *

        """
        return _opensim.ExpressionBasedBushingForce_upd_moment_visual_scale(self, *args)


    def set_moment_visual_scale(self, *args):
        """
        set_moment_visual_scale(ExpressionBasedBushingForce self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_moment_visual_scale(ExpressionBasedBushingForce self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ExpressionBasedBushingForce_set_moment_visual_scale(self, *args)


    def copyProperty_force_visual_scale(self, source):
        """
        copyProperty_force_visual_scale(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters:
            source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _opensim.ExpressionBasedBushingForce_copyProperty_force_visual_scale(self, source)


    def append_force_visual_scale(self, value):
        """
        append_force_visual_scale(ExpressionBasedBushingForce self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ExpressionBasedBushingForce_append_force_visual_scale(self, value)


    def constructProperty_force_visual_scale(self, *args):
        """
        constructProperty_force_visual_scale(ExpressionBasedBushingForce self)
        constructProperty_force_visual_scale(ExpressionBasedBushingForce self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ExpressionBasedBushingForce_constructProperty_force_visual_scale(self, *args)


    def get_force_visual_scale(self, *args):
        """
        get_force_visual_scale(ExpressionBasedBushingForce self, int i) -> double const

        Parameters:
            i: int

        get_force_visual_scale(ExpressionBasedBushingForce self) -> double const &

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _opensim.ExpressionBasedBushingForce_get_force_visual_scale(self, *args)


    def upd_force_visual_scale(self, *args):
        """
        upd_force_visual_scale(ExpressionBasedBushingForce self, int i) -> double

        Parameters:
            i: int

        upd_force_visual_scale(ExpressionBasedBushingForce self) -> double &

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce *

        """
        return _opensim.ExpressionBasedBushingForce_upd_force_visual_scale(self, *args)


    def set_force_visual_scale(self, *args):
        """
        set_force_visual_scale(ExpressionBasedBushingForce self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_force_visual_scale(ExpressionBasedBushingForce self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ExpressionBasedBushingForce_set_force_visual_scale(self, *args)


    def copyProperty_rotational_damping(self, source):
        """
        copyProperty_rotational_damping(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters:
            source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _opensim.ExpressionBasedBushingForce_copyProperty_rotational_damping(self, source)


    def append_rotational_damping(self, value):
        """
        append_rotational_damping(ExpressionBasedBushingForce self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedBushingForce_append_rotational_damping(self, value)


    def constructProperty_rotational_damping(self, initValue):
        """
        constructProperty_rotational_damping(ExpressionBasedBushingForce self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedBushingForce_constructProperty_rotational_damping(self, initValue)


    def get_rotational_damping(self, *args):
        """
        get_rotational_damping(ExpressionBasedBushingForce self, int i) -> Vec3

        Parameters:
            i: int

        get_rotational_damping(ExpressionBasedBushingForce self) -> Vec3

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _opensim.ExpressionBasedBushingForce_get_rotational_damping(self, *args)


    def upd_rotational_damping(self, *args):
        """
        upd_rotational_damping(ExpressionBasedBushingForce self, int i) -> Vec3

        Parameters:
            i: int

        upd_rotational_damping(ExpressionBasedBushingForce self) -> Vec3

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce *

        """
        return _opensim.ExpressionBasedBushingForce_upd_rotational_damping(self, *args)


    def set_rotational_damping(self, *args):
        """
        set_rotational_damping(ExpressionBasedBushingForce self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_rotational_damping(ExpressionBasedBushingForce self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedBushingForce_set_rotational_damping(self, *args)


    def copyProperty_translational_damping(self, source):
        """
        copyProperty_translational_damping(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters:
            source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _opensim.ExpressionBasedBushingForce_copyProperty_translational_damping(self, source)


    def append_translational_damping(self, value):
        """
        append_translational_damping(ExpressionBasedBushingForce self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedBushingForce_append_translational_damping(self, value)


    def constructProperty_translational_damping(self, initValue):
        """
        constructProperty_translational_damping(ExpressionBasedBushingForce self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedBushingForce_constructProperty_translational_damping(self, initValue)


    def get_translational_damping(self, *args):
        """
        get_translational_damping(ExpressionBasedBushingForce self, int i) -> Vec3

        Parameters:
            i: int

        get_translational_damping(ExpressionBasedBushingForce self) -> Vec3

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _opensim.ExpressionBasedBushingForce_get_translational_damping(self, *args)


    def upd_translational_damping(self, *args):
        """
        upd_translational_damping(ExpressionBasedBushingForce self, int i) -> Vec3

        Parameters:
            i: int

        upd_translational_damping(ExpressionBasedBushingForce self) -> Vec3

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce *

        """
        return _opensim.ExpressionBasedBushingForce_upd_translational_damping(self, *args)


    def set_translational_damping(self, *args):
        """
        set_translational_damping(ExpressionBasedBushingForce self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_translational_damping(ExpressionBasedBushingForce self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedBushingForce_set_translational_damping(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ExpressionBasedBushingForce self) -> ExpressionBasedBushingForce
        __init__(OpenSim::ExpressionBasedBushingForce self, std::string const & body1Name, Vec3 point1, Vec3 orientation1, std::string const & body2Name, Vec3 point2, Vec3 orientation2) -> ExpressionBasedBushingForce

        Parameters:
            body1Name: std::string const &
            point1: SimTK::Vec3 const &
            orientation1: SimTK::Vec3 const &
            body2Name: std::string const &
            point2: SimTK::Vec3 const &
            orientation2: SimTK::Vec3 const &

        __init__(OpenSim::ExpressionBasedBushingForce self, std::string const & body1Name, Vec3 point1, Vec3 orientation1, std::string const & body2Name, Vec3 point2, Vec3 orientation2, Vec3 transStiffness, Vec3 rotStiffness, Vec3 transDamping, Vec3 rotDamping) -> ExpressionBasedBushingForce

        Parameters:
            body1Name: std::string const &
            point1: SimTK::Vec3 const &
            orientation1: SimTK::Vec3 const &
            body2Name: std::string const &
            point2: SimTK::Vec3 const &
            orientation2: SimTK::Vec3 const &
            transStiffness: SimTK::Vec3 const &
            rotStiffness: SimTK::Vec3 const &
            transDamping: SimTK::Vec3 const &
            rotDamping: SimTK::Vec3 const &

        """
        this = _opensim.new_ExpressionBasedBushingForce(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setBody1ByName(self, aBodyName):
        """
        setBody1ByName(ExpressionBasedBushingForce self, std::string const & aBodyName)

        Parameters:
            aBodyName: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_setBody1ByName(self, aBodyName)


    def setBody1BushingLocation(self, *args):
        """
        setBody1BushingLocation(ExpressionBasedBushingForce self, Vec3 location, Vec3 orientation)

        Parameters:
            location: SimTK::Vec3 const &
            orientation: SimTK::Vec3 const &

        setBody1BushingLocation(ExpressionBasedBushingForce self, Vec3 location)

        Parameters:
            location: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedBushingForce_setBody1BushingLocation(self, *args)


    def setBody2ByName(self, aBodyName):
        """
        setBody2ByName(ExpressionBasedBushingForce self, std::string const & aBodyName)

        Parameters:
            aBodyName: std::string const &

        """
        return _opensim.ExpressionBasedBushingForce_setBody2ByName(self, aBodyName)


    def setBody2BushingLocation(self, *args):
        """
        setBody2BushingLocation(ExpressionBasedBushingForce self, Vec3 location, Vec3 orientation)

        Parameters:
            location: SimTK::Vec3 const &
            orientation: SimTK::Vec3 const &

        setBody2BushingLocation(ExpressionBasedBushingForce self, Vec3 location)

        Parameters:
            location: SimTK::Vec3 const &

        """
        return _opensim.ExpressionBasedBushingForce_setBody2BushingLocation(self, *args)


    def setMomentVisualScale(self, scale):
        """
        setMomentVisualScale(ExpressionBasedBushingForce self, double scale)

        Parameters:
            scale: double

        """
        return _opensim.ExpressionBasedBushingForce_setMomentVisualScale(self, scale)


    def setForceVisualScale(self, scale):
        """
        setForceVisualScale(ExpressionBasedBushingForce self, double scale)

        Parameters:
            scale: double

        """
        return _opensim.ExpressionBasedBushingForce_setForceVisualScale(self, scale)


    def setVisualAspectRatio(self, ratio):
        """
        setVisualAspectRatio(ExpressionBasedBushingForce self, double ratio)

        Parameters:
            ratio: double

        """
        return _opensim.ExpressionBasedBushingForce_setVisualAspectRatio(self, ratio)


    def setMxExpression(self, expression):
        """
        setMxExpression(ExpressionBasedBushingForce self, std::string expression)

        Parameters:
            expression: std::string

        """
        return _opensim.ExpressionBasedBushingForce_setMxExpression(self, expression)


    def setMyExpression(self, expression):
        """
        setMyExpression(ExpressionBasedBushingForce self, std::string expression)

        Parameters:
            expression: std::string

        """
        return _opensim.ExpressionBasedBushingForce_setMyExpression(self, expression)


    def setMzExpression(self, expression):
        """
        setMzExpression(ExpressionBasedBushingForce self, std::string expression)

        Parameters:
            expression: std::string

        """
        return _opensim.ExpressionBasedBushingForce_setMzExpression(self, expression)


    def setFxExpression(self, expression):
        """
        setFxExpression(ExpressionBasedBushingForce self, std::string expression)

        Parameters:
            expression: std::string

        """
        return _opensim.ExpressionBasedBushingForce_setFxExpression(self, expression)


    def setFyExpression(self, expression):
        """
        setFyExpression(ExpressionBasedBushingForce self, std::string expression)

        Parameters:
            expression: std::string

        """
        return _opensim.ExpressionBasedBushingForce_setFyExpression(self, expression)


    def setFzExpression(self, expression):
        """
        setFzExpression(ExpressionBasedBushingForce self, std::string expression)

        Parameters:
            expression: std::string

        """
        return _opensim.ExpressionBasedBushingForce_setFzExpression(self, expression)


    def getMxExpression(self):
        """
        getMxExpression(ExpressionBasedBushingForce self) -> std::string

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce *

        """
        return _opensim.ExpressionBasedBushingForce_getMxExpression(self)


    def getMyExpression(self):
        """
        getMyExpression(ExpressionBasedBushingForce self) -> std::string

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce *

        """
        return _opensim.ExpressionBasedBushingForce_getMyExpression(self)


    def getMzExpression(self):
        """
        getMzExpression(ExpressionBasedBushingForce self) -> std::string

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce *

        """
        return _opensim.ExpressionBasedBushingForce_getMzExpression(self)


    def getFxExpression(self):
        """
        getFxExpression(ExpressionBasedBushingForce self) -> std::string

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce *

        """
        return _opensim.ExpressionBasedBushingForce_getFxExpression(self)


    def getFyExpression(self):
        """
        getFyExpression(ExpressionBasedBushingForce self) -> std::string

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce *

        """
        return _opensim.ExpressionBasedBushingForce_getFyExpression(self)


    def getFzExpression(self):
        """
        getFzExpression(ExpressionBasedBushingForce self) -> std::string

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce *

        """
        return _opensim.ExpressionBasedBushingForce_getFzExpression(self)


    def computeDeflection(self, s):
        """
        computeDeflection(ExpressionBasedBushingForce self, State s) -> Vec6

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.ExpressionBasedBushingForce_computeDeflection(self, s)


    def computeForce(self, s, bodyForces, generalizedForces):
        """
        computeForce(ExpressionBasedBushingForce self, State s, VectorOfSpatialVec bodyForces, Vector generalizedForces)

        Parameters:
            s: SimTK::State const &
            bodyForces: SimTK::Vector_< SimTK::SpatialVec > &
            generalizedForces: SimTK::Vector &

        """
        return _opensim.ExpressionBasedBushingForce_computeForce(self, s, bodyForces, generalizedForces)


    def getRecordLabels(self):
        """
        getRecordLabels(ExpressionBasedBushingForce self) -> ArrayStr

        Parameters:
            self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _opensim.ExpressionBasedBushingForce_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(ExpressionBasedBushingForce self, State state) -> ArrayDouble

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.ExpressionBasedBushingForce_getRecordValues(self, state)

    __swig_destroy__ = _opensim.delete_ExpressionBasedBushingForce
    __del__ = lambda self: None
ExpressionBasedBushingForce_swigregister = _opensim.ExpressionBasedBushingForce_swigregister
ExpressionBasedBushingForce_swigregister(ExpressionBasedBushingForce)

def ExpressionBasedBushingForce_safeDownCast(obj):
    """
    ExpressionBasedBushingForce_safeDownCast(OpenSimObject obj) -> ExpressionBasedBushingForce

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ExpressionBasedBushingForce_safeDownCast(obj)

def ExpressionBasedBushingForce_getClassName():
    """ExpressionBasedBushingForce_getClassName() -> std::string const &"""
    return _opensim.ExpressionBasedBushingForce_getClassName()

class Kinematics(Analysis):
    """Proxy of C++ OpenSim::Kinematics class"""
    __swig_setmethods__ = {}
    for _s in [Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Kinematics, name, value)
    __swig_getmethods__ = {}
    for _s in [Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Kinematics, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Kinematics

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Kinematics_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Kinematics self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Kinematics_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Kinematics_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Kinematics self) -> Kinematics

        Parameters:
            self: OpenSim::Kinematics const *

        """
        return _opensim.Kinematics_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Kinematics self) -> std::string const &

        Parameters:
            self: OpenSim::Kinematics const *

        """
        return _opensim.Kinematics_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::Kinematics self, Model aModel=None) -> Kinematics

        Parameters:
            aModel: OpenSim::Model *

        __init__(OpenSim::Kinematics self) -> Kinematics
        __init__(OpenSim::Kinematics self, std::string const & aFileName) -> Kinematics

        Parameters:
            aFileName: std::string const &

        """
        this = _opensim.new_Kinematics(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_Kinematics
    __del__ = lambda self: None

    def setStorageCapacityIncrements(self, aIncrement):
        """
        setStorageCapacityIncrements(Kinematics self, int aIncrement)

        Parameters:
            aIncrement: int

        """
        return _opensim.Kinematics_setStorageCapacityIncrements(self, aIncrement)


    def getAccelerationStorage(self):
        """
        getAccelerationStorage(Kinematics self) -> Storage

        Parameters:
            self: OpenSim::Kinematics *

        """
        return _opensim.Kinematics_getAccelerationStorage(self)


    def getVelocityStorage(self):
        """
        getVelocityStorage(Kinematics self) -> Storage

        Parameters:
            self: OpenSim::Kinematics *

        """
        return _opensim.Kinematics_getVelocityStorage(self)


    def getPositionStorage(self):
        """
        getPositionStorage(Kinematics self) -> Storage

        Parameters:
            self: OpenSim::Kinematics *

        """
        return _opensim.Kinematics_getPositionStorage(self)


    def setModel(self, aModel):
        """
        setModel(Kinematics self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.Kinematics_setModel(self, aModel)


    def setRecordAccelerations(self, aRecordAccelerations):
        """
        setRecordAccelerations(Kinematics self, bool aRecordAccelerations)

        Parameters:
            aRecordAccelerations: bool

        """
        return _opensim.Kinematics_setRecordAccelerations(self, aRecordAccelerations)


    def begin(self, s):
        """
        begin(Kinematics self, State s) -> int

        Parameters:
            s: SimTK::State &

        """
        return _opensim.Kinematics_begin(self, s)


    def step(self, s, setNumber):
        """
        step(Kinematics self, State s, int setNumber) -> int

        Parameters:
            s: SimTK::State const &
            setNumber: int

        """
        return _opensim.Kinematics_step(self, s, setNumber)


    def end(self, s):
        """
        end(Kinematics self, State s) -> int

        Parameters:
            s: SimTK::State &

        """
        return _opensim.Kinematics_end(self, s)


    def printResults(self, *args):
        """
        printResults(Kinematics self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double
            aExtension: std::string const &

        printResults(Kinematics self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double

        printResults(Kinematics self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &

        printResults(Kinematics self, std::string const & aBaseName) -> int

        Parameters:
            aBaseName: std::string const &

        """
        return _opensim.Kinematics_printResults(self, *args)

Kinematics_swigregister = _opensim.Kinematics_swigregister
Kinematics_swigregister(Kinematics)

def Kinematics_safeDownCast(obj):
    """
    Kinematics_safeDownCast(OpenSimObject obj) -> Kinematics

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Kinematics_safeDownCast(obj)

def Kinematics_getClassName():
    """Kinematics_getClassName() -> std::string const &"""
    return _opensim.Kinematics_getClassName()

class Actuation(Analysis):
    """Proxy of C++ OpenSim::Actuation class"""
    __swig_setmethods__ = {}
    for _s in [Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Actuation, name, value)
    __swig_getmethods__ = {}
    for _s in [Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Actuation, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Actuation

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Actuation_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Actuation self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Actuation_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Actuation_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Actuation self) -> Actuation

        Parameters:
            self: OpenSim::Actuation const *

        """
        return _opensim.Actuation_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Actuation self) -> std::string const &

        Parameters:
            self: OpenSim::Actuation const *

        """
        return _opensim.Actuation_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::Actuation self, Model aModel=None) -> Actuation

        Parameters:
            aModel: OpenSim::Model *

        __init__(OpenSim::Actuation self) -> Actuation
        __init__(OpenSim::Actuation self, std::string const & aFileName) -> Actuation

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Actuation self, Actuation aObject) -> Actuation

        Parameters:
            aObject: OpenSim::Actuation const &

        """
        this = _opensim.new_Actuation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_Actuation
    __del__ = lambda self: None

    def setStorageCapacityIncrements(self, aIncrement):
        """
        setStorageCapacityIncrements(Actuation self, int aIncrement)

        Parameters:
            aIncrement: int

        """
        return _opensim.Actuation_setStorageCapacityIncrements(self, aIncrement)


    def getForceStorage(self):
        """
        getForceStorage(Actuation self) -> Storage

        Parameters:
            self: OpenSim::Actuation const *

        """
        return _opensim.Actuation_getForceStorage(self)


    def getSpeedStorage(self):
        """
        getSpeedStorage(Actuation self) -> Storage

        Parameters:
            self: OpenSim::Actuation const *

        """
        return _opensim.Actuation_getSpeedStorage(self)


    def getPowerStorage(self):
        """
        getPowerStorage(Actuation self) -> Storage

        Parameters:
            self: OpenSim::Actuation const *

        """
        return _opensim.Actuation_getPowerStorage(self)


    def setModel(self, aModel):
        """
        setModel(Actuation self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.Actuation_setModel(self, aModel)


    def begin(self, s):
        """
        begin(Actuation self, State s) -> int

        Parameters:
            s: SimTK::State &

        """
        return _opensim.Actuation_begin(self, s)


    def step(self, s, setNumber):
        """
        step(Actuation self, State s, int setNumber) -> int

        Parameters:
            s: SimTK::State const &
            setNumber: int

        """
        return _opensim.Actuation_step(self, s, setNumber)


    def end(self, s):
        """
        end(Actuation self, State s) -> int

        Parameters:
            s: SimTK::State &

        """
        return _opensim.Actuation_end(self, s)


    def printResults(self, *args):
        """
        printResults(Actuation self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double
            aExtension: std::string const &

        printResults(Actuation self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double

        printResults(Actuation self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &

        printResults(Actuation self, std::string const & aBaseName) -> int

        Parameters:
            aBaseName: std::string const &

        """
        return _opensim.Actuation_printResults(self, *args)

Actuation_swigregister = _opensim.Actuation_swigregister
Actuation_swigregister(Actuation)

def Actuation_safeDownCast(obj):
    """
    Actuation_safeDownCast(OpenSimObject obj) -> Actuation

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Actuation_safeDownCast(obj)

def Actuation_getClassName():
    """Actuation_getClassName() -> std::string const &"""
    return _opensim.Actuation_getClassName()

class MuscleAnalysis(Analysis):
    """Proxy of C++ OpenSim::MuscleAnalysis class"""
    __swig_setmethods__ = {}
    for _s in [Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MuscleAnalysis, name, value)
    __swig_getmethods__ = {}
    for _s in [Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MuscleAnalysis, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MuscleAnalysis

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.MuscleAnalysis_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(MuscleAnalysis self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.MuscleAnalysis_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.MuscleAnalysis_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(MuscleAnalysis self) -> MuscleAnalysis

        Parameters:
            self: OpenSim::MuscleAnalysis const *

        """
        return _opensim.MuscleAnalysis_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MuscleAnalysis self) -> std::string const &

        Parameters:
            self: OpenSim::MuscleAnalysis const *

        """
        return _opensim.MuscleAnalysis_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::MuscleAnalysis self, Model aModel=None) -> MuscleAnalysis

        Parameters:
            aModel: OpenSim::Model *

        __init__(OpenSim::MuscleAnalysis self) -> MuscleAnalysis
        __init__(OpenSim::MuscleAnalysis self, std::string const & aFileName) -> MuscleAnalysis

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::MuscleAnalysis self, MuscleAnalysis aObject) -> MuscleAnalysis

        Parameters:
            aObject: OpenSim::MuscleAnalysis const &

        """
        this = _opensim.new_MuscleAnalysis(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_MuscleAnalysis
    __del__ = lambda self: None

    def setModel(self, aModel):
        """
        setModel(MuscleAnalysis self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.MuscleAnalysis_setModel(self, aModel)


    def setStorageCapacityIncrements(self, aIncrement):
        """
        setStorageCapacityIncrements(MuscleAnalysis self, int aIncrement)

        Parameters:
            aIncrement: int

        """
        return _opensim.MuscleAnalysis_setStorageCapacityIncrements(self, aIncrement)


    def getPennationAngleStorage(self):
        """
        getPennationAngleStorage(MuscleAnalysis self) -> Storage

        Parameters:
            self: OpenSim::MuscleAnalysis const *

        """
        return _opensim.MuscleAnalysis_getPennationAngleStorage(self)


    def getMuscleTendonLengthStorage(self):
        """
        getMuscleTendonLengthStorage(MuscleAnalysis self) -> Storage

        Parameters:
            self: OpenSim::MuscleAnalysis const *

        """
        return _opensim.MuscleAnalysis_getMuscleTendonLengthStorage(self)


    def getFiberLengthStorage(self):
        """
        getFiberLengthStorage(MuscleAnalysis self) -> Storage

        Parameters:
            self: OpenSim::MuscleAnalysis const *

        """
        return _opensim.MuscleAnalysis_getFiberLengthStorage(self)


    def getNormalizedFiberLengthStorage(self):
        """
        getNormalizedFiberLengthStorage(MuscleAnalysis self) -> Storage

        Parameters:
            self: OpenSim::MuscleAnalysis const *

        """
        return _opensim.MuscleAnalysis_getNormalizedFiberLengthStorage(self)


    def getTendonLengthStorage(self):
        """
        getTendonLengthStorage(MuscleAnalysis self) -> Storage

        Parameters:
            self: OpenSim::MuscleAnalysis const *

        """
        return _opensim.MuscleAnalysis_getTendonLengthStorage(self)


    def getFiberVelocityStorage(self):
        """
        getFiberVelocityStorage(MuscleAnalysis self) -> Storage

        Parameters:
            self: OpenSim::MuscleAnalysis const *

        """
        return _opensim.MuscleAnalysis_getFiberVelocityStorage(self)


    def getNormalizedFiberVelocityStorage(self):
        """
        getNormalizedFiberVelocityStorage(MuscleAnalysis self) -> Storage

        Parameters:
            self: OpenSim::MuscleAnalysis const *

        """
        return _opensim.MuscleAnalysis_getNormalizedFiberVelocityStorage(self)


    def getPennationAngularVelocityStorage(self):
        """
        getPennationAngularVelocityStorage(MuscleAnalysis self) -> Storage

        Parameters:
            self: OpenSim::MuscleAnalysis const *

        """
        return _opensim.MuscleAnalysis_getPennationAngularVelocityStorage(self)


    def getForceStorage(self):
        """
        getForceStorage(MuscleAnalysis self) -> Storage

        Parameters:
            self: OpenSim::MuscleAnalysis const *

        """
        return _opensim.MuscleAnalysis_getForceStorage(self)


    def getFiberForceStorage(self):
        """
        getFiberForceStorage(MuscleAnalysis self) -> Storage

        Parameters:
            self: OpenSim::MuscleAnalysis const *

        """
        return _opensim.MuscleAnalysis_getFiberForceStorage(self)


    def getActiveFiberForceStorage(self):
        """
        getActiveFiberForceStorage(MuscleAnalysis self) -> Storage

        Parameters:
            self: OpenSim::MuscleAnalysis const *

        """
        return _opensim.MuscleAnalysis_getActiveFiberForceStorage(self)


    def getPassiveFiberForceStorage(self):
        """
        getPassiveFiberForceStorage(MuscleAnalysis self) -> Storage

        Parameters:
            self: OpenSim::MuscleAnalysis const *

        """
        return _opensim.MuscleAnalysis_getPassiveFiberForceStorage(self)


    def getActiveFiberForceAlongTendonStorage(self):
        """
        getActiveFiberForceAlongTendonStorage(MuscleAnalysis self) -> Storage

        Parameters:
            self: OpenSim::MuscleAnalysis const *

        """
        return _opensim.MuscleAnalysis_getActiveFiberForceAlongTendonStorage(self)


    def getPassiveFiberForceAlongTendonStorage(self):
        """
        getPassiveFiberForceAlongTendonStorage(MuscleAnalysis self) -> Storage

        Parameters:
            self: OpenSim::MuscleAnalysis const *

        """
        return _opensim.MuscleAnalysis_getPassiveFiberForceAlongTendonStorage(self)


    def getFiberActivePowerStorage(self):
        """
        getFiberActivePowerStorage(MuscleAnalysis self) -> Storage

        Parameters:
            self: OpenSim::MuscleAnalysis const *

        """
        return _opensim.MuscleAnalysis_getFiberActivePowerStorage(self)


    def getFiberPassivePowerStorage(self):
        """
        getFiberPassivePowerStorage(MuscleAnalysis self) -> Storage

        Parameters:
            self: OpenSim::MuscleAnalysis const *

        """
        return _opensim.MuscleAnalysis_getFiberPassivePowerStorage(self)


    def getTendonPowerStorage(self):
        """
        getTendonPowerStorage(MuscleAnalysis self) -> Storage

        Parameters:
            self: OpenSim::MuscleAnalysis const *

        """
        return _opensim.MuscleAnalysis_getTendonPowerStorage(self)


    def getMusclePowerStorage(self):
        """
        getMusclePowerStorage(MuscleAnalysis self) -> Storage

        Parameters:
            self: OpenSim::MuscleAnalysis const *

        """
        return _opensim.MuscleAnalysis_getMusclePowerStorage(self)


    def setMuscles(self, aMuscles):
        """
        setMuscles(MuscleAnalysis self, ArrayStr aMuscles)

        Parameters:
            aMuscles: OpenSim::Array< std::string > &

        """
        return _opensim.MuscleAnalysis_setMuscles(self, aMuscles)


    def setCoordinates(self, aCoordinates):
        """
        setCoordinates(MuscleAnalysis self, ArrayStr aCoordinates)

        Parameters:
            aCoordinates: OpenSim::Array< std::string > &

        """
        return _opensim.MuscleAnalysis_setCoordinates(self, aCoordinates)


    def setComputeMoments(self, aTrueFalse):
        """
        setComputeMoments(MuscleAnalysis self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.MuscleAnalysis_setComputeMoments(self, aTrueFalse)


    def getComputeMoments(self):
        """
        getComputeMoments(MuscleAnalysis self) -> bool

        Parameters:
            self: OpenSim::MuscleAnalysis const *

        """
        return _opensim.MuscleAnalysis_getComputeMoments(self)


    def begin(self, s):
        """
        begin(MuscleAnalysis self, State s) -> int

        Parameters:
            s: SimTK::State &

        """
        return _opensim.MuscleAnalysis_begin(self, s)


    def step(self, s, setNumber):
        """
        step(MuscleAnalysis self, State s, int setNumber) -> int

        Parameters:
            s: SimTK::State const &
            setNumber: int

        """
        return _opensim.MuscleAnalysis_step(self, s, setNumber)


    def end(self, s):
        """
        end(MuscleAnalysis self, State s) -> int

        Parameters:
            s: SimTK::State &

        """
        return _opensim.MuscleAnalysis_end(self, s)


    def printResults(self, *args):
        """
        printResults(MuscleAnalysis self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double
            aExtension: std::string const &

        printResults(MuscleAnalysis self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double

        printResults(MuscleAnalysis self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &

        printResults(MuscleAnalysis self, std::string const & aBaseName) -> int

        Parameters:
            aBaseName: std::string const &

        """
        return _opensim.MuscleAnalysis_printResults(self, *args)


    def allocateStorageObjects(self):
        """
        allocateStorageObjects(MuscleAnalysis self)

        Parameters:
            self: OpenSim::MuscleAnalysis *

        """
        return _opensim.MuscleAnalysis_allocateStorageObjects(self)

MuscleAnalysis_swigregister = _opensim.MuscleAnalysis_swigregister
MuscleAnalysis_swigregister(MuscleAnalysis)

def MuscleAnalysis_safeDownCast(obj):
    """
    MuscleAnalysis_safeDownCast(OpenSimObject obj) -> MuscleAnalysis

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.MuscleAnalysis_safeDownCast(obj)

def MuscleAnalysis_getClassName():
    """MuscleAnalysis_getClassName() -> std::string const &"""
    return _opensim.MuscleAnalysis_getClassName()

class InverseDynamics(Analysis):
    """Proxy of C++ OpenSim::InverseDynamics class"""
    __swig_setmethods__ = {}
    for _s in [Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseDynamics, name, value)
    __swig_getmethods__ = {}
    for _s in [Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InverseDynamics, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> InverseDynamics

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.InverseDynamics_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(InverseDynamics self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.InverseDynamics_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.InverseDynamics_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(InverseDynamics self) -> InverseDynamics

        Parameters:
            self: OpenSim::InverseDynamics const *

        """
        return _opensim.InverseDynamics_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(InverseDynamics self) -> std::string const &

        Parameters:
            self: OpenSim::InverseDynamics const *

        """
        return _opensim.InverseDynamics_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::InverseDynamics self, Model aModel=None) -> InverseDynamics

        Parameters:
            aModel: OpenSim::Model *

        __init__(OpenSim::InverseDynamics self) -> InverseDynamics
        __init__(OpenSim::InverseDynamics self, InverseDynamics aObject) -> InverseDynamics

        Parameters:
            aObject: OpenSim::InverseDynamics const &

        """
        this = _opensim.new_InverseDynamics(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_InverseDynamics
    __del__ = lambda self: None

    def setStorageCapacityIncrements(self, aIncrement):
        """
        setStorageCapacityIncrements(InverseDynamics self, int aIncrement)

        Parameters:
            aIncrement: int

        """
        return _opensim.InverseDynamics_setStorageCapacityIncrements(self, aIncrement)


    def getStorage(self):
        """
        getStorage(InverseDynamics self) -> Storage

        Parameters:
            self: OpenSim::InverseDynamics *

        """
        return _opensim.InverseDynamics_getStorage(self)


    def getUseModelForceSet(self):
        """
        getUseModelForceSet(InverseDynamics self) -> bool

        Parameters:
            self: OpenSim::InverseDynamics *

        """
        return _opensim.InverseDynamics_getUseModelForceSet(self)


    def setUseModelForceSet(self, aUseModelForceSet):
        """
        setUseModelForceSet(InverseDynamics self, bool aUseModelForceSet)

        Parameters:
            aUseModelForceSet: bool

        """
        return _opensim.InverseDynamics_setUseModelForceSet(self, aUseModelForceSet)


    def setModel(self, aModel):
        """
        setModel(InverseDynamics self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.InverseDynamics_setModel(self, aModel)


    def printResults(self, *args):
        """
        printResults(InverseDynamics self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double
            aExtension: std::string const &

        printResults(InverseDynamics self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double

        printResults(InverseDynamics self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &

        printResults(InverseDynamics self, std::string const & aBaseName) -> int

        Parameters:
            aBaseName: std::string const &

        """
        return _opensim.InverseDynamics_printResults(self, *args)

InverseDynamics_swigregister = _opensim.InverseDynamics_swigregister
InverseDynamics_swigregister(InverseDynamics)

def InverseDynamics_safeDownCast(obj):
    """
    InverseDynamics_safeDownCast(OpenSimObject obj) -> InverseDynamics

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.InverseDynamics_safeDownCast(obj)

def InverseDynamics_getClassName():
    """InverseDynamics_getClassName() -> std::string const &"""
    return _opensim.InverseDynamics_getClassName()

class StaticOptimization(Analysis):
    """Proxy of C++ OpenSim::StaticOptimization class"""
    __swig_setmethods__ = {}
    for _s in [Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StaticOptimization, name, value)
    __swig_getmethods__ = {}
    for _s in [Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StaticOptimization, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> StaticOptimization

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.StaticOptimization_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(StaticOptimization self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.StaticOptimization_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.StaticOptimization_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(StaticOptimization self) -> StaticOptimization

        Parameters:
            self: OpenSim::StaticOptimization const *

        """
        return _opensim.StaticOptimization_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(StaticOptimization self) -> std::string const &

        Parameters:
            self: OpenSim::StaticOptimization const *

        """
        return _opensim.StaticOptimization_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::StaticOptimization self, Model aModel=None) -> StaticOptimization

        Parameters:
            aModel: OpenSim::Model *

        __init__(OpenSim::StaticOptimization self) -> StaticOptimization
        __init__(OpenSim::StaticOptimization self, StaticOptimization aObject) -> StaticOptimization

        Parameters:
            aObject: OpenSim::StaticOptimization const &

        """
        this = _opensim.new_StaticOptimization(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_StaticOptimization
    __del__ = lambda self: None

    def setStorageCapacityIncrements(self, aIncrement):
        """
        setStorageCapacityIncrements(StaticOptimization self, int aIncrement)

        Parameters:
            aIncrement: int

        """
        return _opensim.StaticOptimization_setStorageCapacityIncrements(self, aIncrement)


    def getActivationStorage(self):
        """
        getActivationStorage(StaticOptimization self) -> Storage

        Parameters:
            self: OpenSim::StaticOptimization *

        """
        return _opensim.StaticOptimization_getActivationStorage(self)


    def getForceStorage(self):
        """
        getForceStorage(StaticOptimization self) -> Storage

        Parameters:
            self: OpenSim::StaticOptimization *

        """
        return _opensim.StaticOptimization_getForceStorage(self)


    def getUseModelForceSet(self):
        """
        getUseModelForceSet(StaticOptimization self) -> bool

        Parameters:
            self: OpenSim::StaticOptimization *

        """
        return _opensim.StaticOptimization_getUseModelForceSet(self)


    def setUseModelForceSet(self, aUseModelActuatorSet):
        """
        setUseModelForceSet(StaticOptimization self, bool aUseModelActuatorSet)

        Parameters:
            aUseModelActuatorSet: bool

        """
        return _opensim.StaticOptimization_setUseModelForceSet(self, aUseModelActuatorSet)


    def setModel(self, aModel):
        """
        setModel(StaticOptimization self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.StaticOptimization_setModel(self, aModel)


    def setActivationExponent(self, aExponent):
        """
        setActivationExponent(StaticOptimization self, double const aExponent)

        Parameters:
            aExponent: double const

        """
        return _opensim.StaticOptimization_setActivationExponent(self, aExponent)


    def getActivationExponent(self):
        """
        getActivationExponent(StaticOptimization self) -> double

        Parameters:
            self: OpenSim::StaticOptimization const *

        """
        return _opensim.StaticOptimization_getActivationExponent(self)


    def setUseMusclePhysiology(self, useIt):
        """
        setUseMusclePhysiology(StaticOptimization self, bool const useIt)

        Parameters:
            useIt: bool const

        """
        return _opensim.StaticOptimization_setUseMusclePhysiology(self, useIt)


    def getUseMusclePhysiology(self):
        """
        getUseMusclePhysiology(StaticOptimization self) -> bool

        Parameters:
            self: OpenSim::StaticOptimization const *

        """
        return _opensim.StaticOptimization_getUseMusclePhysiology(self)


    def setConvergenceCriterion(self, tolerance):
        """
        setConvergenceCriterion(StaticOptimization self, double const tolerance)

        Parameters:
            tolerance: double const

        """
        return _opensim.StaticOptimization_setConvergenceCriterion(self, tolerance)


    def getConvergenceCriterion(self):
        """
        getConvergenceCriterion(StaticOptimization self) -> double

        Parameters:
            self: OpenSim::StaticOptimization *

        """
        return _opensim.StaticOptimization_getConvergenceCriterion(self)


    def setMaxIterations(self, maxIt):
        """
        setMaxIterations(StaticOptimization self, int const maxIt)

        Parameters:
            maxIt: int const

        """
        return _opensim.StaticOptimization_setMaxIterations(self, maxIt)


    def getMaxIterations(self):
        """
        getMaxIterations(StaticOptimization self) -> int

        Parameters:
            self: OpenSim::StaticOptimization *

        """
        return _opensim.StaticOptimization_getMaxIterations(self)


    def begin(self, s):
        """
        begin(StaticOptimization self, State s) -> int

        Parameters:
            s: SimTK::State &

        """
        return _opensim.StaticOptimization_begin(self, s)


    def step(self, s, setNumber):
        """
        step(StaticOptimization self, State s, int setNumber) -> int

        Parameters:
            s: SimTK::State const &
            setNumber: int

        """
        return _opensim.StaticOptimization_step(self, s, setNumber)


    def end(self, s):
        """
        end(StaticOptimization self, State s) -> int

        Parameters:
            s: SimTK::State &

        """
        return _opensim.StaticOptimization_end(self, s)


    def printResults(self, *args):
        """
        printResults(StaticOptimization self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double
            aExtension: std::string const &

        printResults(StaticOptimization self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double

        printResults(StaticOptimization self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &

        printResults(StaticOptimization self, std::string const & aBaseName) -> int

        Parameters:
            aBaseName: std::string const &

        """
        return _opensim.StaticOptimization_printResults(self, *args)

StaticOptimization_swigregister = _opensim.StaticOptimization_swigregister
StaticOptimization_swigregister(StaticOptimization)

def StaticOptimization_safeDownCast(obj):
    """
    StaticOptimization_safeDownCast(OpenSimObject obj) -> StaticOptimization

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.StaticOptimization_safeDownCast(obj)

def StaticOptimization_getClassName():
    """StaticOptimization_getClassName() -> std::string const &"""
    return _opensim.StaticOptimization_getClassName()

class ForceReporter(Analysis):
    """Proxy of C++ OpenSim::ForceReporter class"""
    __swig_setmethods__ = {}
    for _s in [Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForceReporter, name, value)
    __swig_getmethods__ = {}
    for _s in [Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForceReporter, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ForceReporter

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ForceReporter_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ForceReporter self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ForceReporter_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ForceReporter_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ForceReporter self) -> ForceReporter

        Parameters:
            self: OpenSim::ForceReporter const *

        """
        return _opensim.ForceReporter_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ForceReporter self) -> std::string const &

        Parameters:
            self: OpenSim::ForceReporter const *

        """
        return _opensim.ForceReporter_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ForceReporter self, Model aModel=None) -> ForceReporter

        Parameters:
            aModel: OpenSim::Model *

        __init__(OpenSim::ForceReporter self) -> ForceReporter
        __init__(OpenSim::ForceReporter self, std::string const & aFileName) -> ForceReporter

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::ForceReporter self, ForceReporter aObject) -> ForceReporter

        Parameters:
            aObject: OpenSim::ForceReporter const &

        """
        this = _opensim.new_ForceReporter(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_ForceReporter
    __del__ = lambda self: None

    def getForceStorage(self):
        """
        getForceStorage(ForceReporter self) -> Storage

        Parameters:
            self: OpenSim::ForceReporter const *

        """
        return _opensim.ForceReporter_getForceStorage(self)


    def updForceStorage(self):
        """
        updForceStorage(ForceReporter self) -> Storage

        Parameters:
            self: OpenSim::ForceReporter *

        """
        return _opensim.ForceReporter_updForceStorage(self)


    def setModel(self, aModel):
        """
        setModel(ForceReporter self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.ForceReporter_setModel(self, aModel)


    def includeConstraintForces(self, flag):
        """
        includeConstraintForces(ForceReporter self, bool flag)

        Parameters:
            flag: bool

        """
        return _opensim.ForceReporter_includeConstraintForces(self, flag)


    def begin(self, s):
        """
        begin(ForceReporter self, State s) -> int

        Parameters:
            s: SimTK::State &

        """
        return _opensim.ForceReporter_begin(self, s)


    def step(self, s, setNumber):
        """
        step(ForceReporter self, State s, int setNumber) -> int

        Parameters:
            s: SimTK::State const &
            setNumber: int

        """
        return _opensim.ForceReporter_step(self, s, setNumber)


    def end(self, s):
        """
        end(ForceReporter self, State s) -> int

        Parameters:
            s: SimTK::State &

        """
        return _opensim.ForceReporter_end(self, s)


    def printResults(self, *args):
        """
        printResults(ForceReporter self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double
            aExtension: std::string const &

        printResults(ForceReporter self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double

        printResults(ForceReporter self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &

        printResults(ForceReporter self, std::string const & aBaseName) -> int

        Parameters:
            aBaseName: std::string const &

        """
        return _opensim.ForceReporter_printResults(self, *args)

ForceReporter_swigregister = _opensim.ForceReporter_swigregister
ForceReporter_swigregister(ForceReporter)

def ForceReporter_safeDownCast(obj):
    """
    ForceReporter_safeDownCast(OpenSimObject obj) -> ForceReporter

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ForceReporter_safeDownCast(obj)

def ForceReporter_getClassName():
    """ForceReporter_getClassName() -> std::string const &"""
    return _opensim.ForceReporter_getClassName()

class PointKinematics(Analysis):
    """Proxy of C++ OpenSim::PointKinematics class"""
    __swig_setmethods__ = {}
    for _s in [Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointKinematics, name, value)
    __swig_getmethods__ = {}
    for _s in [Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointKinematics, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PointKinematics

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.PointKinematics_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(PointKinematics self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.PointKinematics_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.PointKinematics_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(PointKinematics self) -> PointKinematics

        Parameters:
            self: OpenSim::PointKinematics const *

        """
        return _opensim.PointKinematics_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PointKinematics self) -> std::string const &

        Parameters:
            self: OpenSim::PointKinematics const *

        """
        return _opensim.PointKinematics_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::PointKinematics self, Model aModel=None) -> PointKinematics

        Parameters:
            aModel: OpenSim::Model *

        __init__(OpenSim::PointKinematics self) -> PointKinematics
        __init__(OpenSim::PointKinematics self, std::string const & aFileName) -> PointKinematics

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::PointKinematics self, PointKinematics aObject) -> PointKinematics

        Parameters:
            aObject: OpenSim::PointKinematics const &

        """
        this = _opensim.new_PointKinematics(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_PointKinematics
    __del__ = lambda self: None

    def setBodyPoint(self, aBody, aPoint):
        """
        setBodyPoint(PointKinematics self, std::string const & aBody, Vec3 aPoint)

        Parameters:
            aBody: std::string const &
            aPoint: SimTK::Vec3 const &

        """
        return _opensim.PointKinematics_setBodyPoint(self, aBody, aPoint)


    def setBody(self, aBody):
        """
        setBody(PointKinematics self, Body aBody)

        Parameters:
            aBody: OpenSim::Body *

        """
        return _opensim.PointKinematics_setBody(self, aBody)


    def setRelativeToBody(self, aBody):
        """
        setRelativeToBody(PointKinematics self, Body aBody)

        Parameters:
            aBody: OpenSim::Body *

        """
        return _opensim.PointKinematics_setRelativeToBody(self, aBody)


    def getBody(self):
        """
        getBody(PointKinematics self) -> Body

        Parameters:
            self: OpenSim::PointKinematics *

        """
        return _opensim.PointKinematics_getBody(self)


    def getRelativeToBody(self):
        """
        getRelativeToBody(PointKinematics self) -> Body

        Parameters:
            self: OpenSim::PointKinematics *

        """
        return _opensim.PointKinematics_getRelativeToBody(self)


    def setPoint(self, aPoint):
        """
        setPoint(PointKinematics self, Vec3 aPoint)

        Parameters:
            aPoint: SimTK::Vec3 const &

        """
        return _opensim.PointKinematics_setPoint(self, aPoint)


    def getPoint(self, rPoint):
        """
        getPoint(PointKinematics self, Vec3 rPoint)

        Parameters:
            rPoint: SimTK::Vec3 &

        """
        return _opensim.PointKinematics_getPoint(self, rPoint)


    def setPointName(self, aName):
        """
        setPointName(PointKinematics self, std::string const & aName)

        Parameters:
            aName: std::string const &

        """
        return _opensim.PointKinematics_setPointName(self, aName)


    def getPointName(self):
        """
        getPointName(PointKinematics self) -> std::string const &

        Parameters:
            self: OpenSim::PointKinematics *

        """
        return _opensim.PointKinematics_getPointName(self)


    def setModel(self, aModel):
        """
        setModel(PointKinematics self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.PointKinematics_setModel(self, aModel)


    def setStorageCapacityIncrements(self, aIncrement):
        """
        setStorageCapacityIncrements(PointKinematics self, int aIncrement)

        Parameters:
            aIncrement: int

        """
        return _opensim.PointKinematics_setStorageCapacityIncrements(self, aIncrement)


    def getAccelerationStorage(self):
        """
        getAccelerationStorage(PointKinematics self) -> Storage

        Parameters:
            self: OpenSim::PointKinematics *

        """
        return _opensim.PointKinematics_getAccelerationStorage(self)


    def getVelocityStorage(self):
        """
        getVelocityStorage(PointKinematics self) -> Storage

        Parameters:
            self: OpenSim::PointKinematics *

        """
        return _opensim.PointKinematics_getVelocityStorage(self)


    def getPositionStorage(self):
        """
        getPositionStorage(PointKinematics self) -> Storage

        Parameters:
            self: OpenSim::PointKinematics *

        """
        return _opensim.PointKinematics_getPositionStorage(self)


    def begin(self, s):
        """
        begin(PointKinematics self, State s) -> int

        Parameters:
            s: SimTK::State &

        """
        return _opensim.PointKinematics_begin(self, s)


    def step(self, s, setNumber):
        """
        step(PointKinematics self, State s, int setNumber) -> int

        Parameters:
            s: SimTK::State const &
            setNumber: int

        """
        return _opensim.PointKinematics_step(self, s, setNumber)


    def end(self, s):
        """
        end(PointKinematics self, State s) -> int

        Parameters:
            s: SimTK::State &

        """
        return _opensim.PointKinematics_end(self, s)


    def printResults(self, *args):
        """
        printResults(PointKinematics self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double
            aExtension: std::string const &

        printResults(PointKinematics self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double

        printResults(PointKinematics self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &

        printResults(PointKinematics self, std::string const & aBaseName) -> int

        Parameters:
            aBaseName: std::string const &

        """
        return _opensim.PointKinematics_printResults(self, *args)

PointKinematics_swigregister = _opensim.PointKinematics_swigregister
PointKinematics_swigregister(PointKinematics)
PointKinematicsNAME_LENGTH = cvar.PointKinematicsNAME_LENGTH
PointKinematicsBUFFER_LENGTH = cvar.PointKinematicsBUFFER_LENGTH

def PointKinematics_safeDownCast(obj):
    """
    PointKinematics_safeDownCast(OpenSimObject obj) -> PointKinematics

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.PointKinematics_safeDownCast(obj)

def PointKinematics_getClassName():
    """PointKinematics_getClassName() -> std::string const &"""
    return _opensim.PointKinematics_getClassName()
PointKinematics.NAME_LENGTH = _opensim.cvar.PointKinematics_NAME_LENGTH
PointKinematics.BUFFER_LENGTH = _opensim.cvar.PointKinematics_BUFFER_LENGTH

class BodyKinematics(Analysis):
    """Proxy of C++ OpenSim::BodyKinematics class"""
    __swig_setmethods__ = {}
    for _s in [Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BodyKinematics, name, value)
    __swig_getmethods__ = {}
    for _s in [Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BodyKinematics, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> BodyKinematics

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.BodyKinematics_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(BodyKinematics self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.BodyKinematics_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.BodyKinematics_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(BodyKinematics self) -> BodyKinematics

        Parameters:
            self: OpenSim::BodyKinematics const *

        """
        return _opensim.BodyKinematics_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(BodyKinematics self) -> std::string const &

        Parameters:
            self: OpenSim::BodyKinematics const *

        """
        return _opensim.BodyKinematics_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::BodyKinematics self, Model aModel=None, bool aInDegrees=True) -> BodyKinematics

        Parameters:
            aModel: OpenSim::Model *
            aInDegrees: bool

        __init__(OpenSim::BodyKinematics self, Model aModel=None) -> BodyKinematics

        Parameters:
            aModel: OpenSim::Model *

        __init__(OpenSim::BodyKinematics self) -> BodyKinematics
        __init__(OpenSim::BodyKinematics self, std::string const & aFileName) -> BodyKinematics

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::BodyKinematics self, BodyKinematics aObject) -> BodyKinematics

        Parameters:
            aObject: OpenSim::BodyKinematics const &

        """
        this = _opensim.new_BodyKinematics(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_BodyKinematics
    __del__ = lambda self: None

    def setStorageCapacityIncrements(self, aIncrement):
        """
        setStorageCapacityIncrements(BodyKinematics self, int aIncrement)

        Parameters:
            aIncrement: int

        """
        return _opensim.BodyKinematics_setStorageCapacityIncrements(self, aIncrement)


    def getAccelerationStorage(self):
        """
        getAccelerationStorage(BodyKinematics self) -> Storage

        Parameters:
            self: OpenSim::BodyKinematics *

        """
        return _opensim.BodyKinematics_getAccelerationStorage(self)


    def getVelocityStorage(self):
        """
        getVelocityStorage(BodyKinematics self) -> Storage

        Parameters:
            self: OpenSim::BodyKinematics *

        """
        return _opensim.BodyKinematics_getVelocityStorage(self)


    def getPositionStorage(self):
        """
        getPositionStorage(BodyKinematics self) -> Storage

        Parameters:
            self: OpenSim::BodyKinematics *

        """
        return _opensim.BodyKinematics_getPositionStorage(self)


    def setExpressResultsInLocalFrame(self, aTrueFalse):
        """
        setExpressResultsInLocalFrame(BodyKinematics self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.BodyKinematics_setExpressResultsInLocalFrame(self, aTrueFalse)


    def getExpressResultsInLocalFrame(self):
        """
        getExpressResultsInLocalFrame(BodyKinematics self) -> bool

        Parameters:
            self: OpenSim::BodyKinematics *

        """
        return _opensim.BodyKinematics_getExpressResultsInLocalFrame(self)


    def setRecordCenterOfMass(self, aTrueFalse):
        """
        setRecordCenterOfMass(BodyKinematics self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.BodyKinematics_setRecordCenterOfMass(self, aTrueFalse)


    def setBodiesToRecord(self, listOfBodies):
        """
        setBodiesToRecord(BodyKinematics self, ArrayStr listOfBodies)

        Parameters:
            listOfBodies: OpenSim::Array< std::string > &

        """
        return _opensim.BodyKinematics_setBodiesToRecord(self, listOfBodies)


    def setModel(self, aModel):
        """
        setModel(BodyKinematics self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.BodyKinematics_setModel(self, aModel)


    def begin(self, s):
        """
        begin(BodyKinematics self, State s) -> int

        Parameters:
            s: SimTK::State &

        """
        return _opensim.BodyKinematics_begin(self, s)


    def step(self, s, setNumber):
        """
        step(BodyKinematics self, State s, int setNumber) -> int

        Parameters:
            s: SimTK::State const &
            setNumber: int

        """
        return _opensim.BodyKinematics_step(self, s, setNumber)


    def end(self, s):
        """
        end(BodyKinematics self, State s) -> int

        Parameters:
            s: SimTK::State &

        """
        return _opensim.BodyKinematics_end(self, s)


    def printResults(self, *args):
        """
        printResults(BodyKinematics self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double
            aExtension: std::string const &

        printResults(BodyKinematics self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double

        printResults(BodyKinematics self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &

        printResults(BodyKinematics self, std::string const & aBaseName) -> int

        Parameters:
            aBaseName: std::string const &

        """
        return _opensim.BodyKinematics_printResults(self, *args)

BodyKinematics_swigregister = _opensim.BodyKinematics_swigregister
BodyKinematics_swigregister(BodyKinematics)

def BodyKinematics_safeDownCast(obj):
    """
    BodyKinematics_safeDownCast(OpenSimObject obj) -> BodyKinematics

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.BodyKinematics_safeDownCast(obj)

def BodyKinematics_getClassName():
    """BodyKinematics_getClassName() -> std::string const &"""
    return _opensim.BodyKinematics_getClassName()

class JointReaction(Analysis):
    """Proxy of C++ OpenSim::JointReaction class"""
    __swig_setmethods__ = {}
    for _s in [Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointReaction, name, value)
    __swig_getmethods__ = {}
    for _s in [Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JointReaction, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> JointReaction

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.JointReaction_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(JointReaction self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.JointReaction_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.JointReaction_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(JointReaction self) -> JointReaction

        Parameters:
            self: OpenSim::JointReaction const *

        """
        return _opensim.JointReaction_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(JointReaction self) -> std::string const &

        Parameters:
            self: OpenSim::JointReaction const *

        """
        return _opensim.JointReaction_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::JointReaction self, Model aModel=None) -> JointReaction

        Parameters:
            aModel: OpenSim::Model *

        __init__(OpenSim::JointReaction self) -> JointReaction
        __init__(OpenSim::JointReaction self, std::string const & aFileName) -> JointReaction

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::JointReaction self, JointReaction aObject) -> JointReaction

        Parameters:
            aObject: OpenSim::JointReaction const &

        """
        this = _opensim.new_JointReaction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_JointReaction
    __del__ = lambda self: None

    def setModel(self, aModel):
        """
        setModel(JointReaction self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.JointReaction_setModel(self, aModel)


    def getForcesFileName(self):
        """
        getForcesFileName(JointReaction self) -> std::string const &

        Parameters:
            self: OpenSim::JointReaction *

        """
        return _opensim.JointReaction_getForcesFileName(self)


    def setForcesFileName(self, newForcesFile):
        """
        setForcesFileName(JointReaction self, std::string const newForcesFile)

        Parameters:
            newForcesFile: std::string const

        """
        return _opensim.JointReaction_setForcesFileName(self, newForcesFile)


    def getJointNames(self):
        """
        getJointNames(JointReaction self) -> ArrayStr

        Parameters:
            self: OpenSim::JointReaction const *

        """
        return _opensim.JointReaction_getJointNames(self)


    def setJointNames(self, jointNames):
        """
        setJointNames(JointReaction self, ArrayStr jointNames)

        Parameters:
            jointNames: OpenSim::Array< std::string > &

        """
        return _opensim.JointReaction_setJointNames(self, jointNames)


    def getOnBody(self):
        """
        getOnBody(JointReaction self) -> ArrayStr

        Parameters:
            self: OpenSim::JointReaction const *

        """
        return _opensim.JointReaction_getOnBody(self)


    def setOnBody(self, onBody):
        """
        setOnBody(JointReaction self, ArrayStr onBody)

        Parameters:
            onBody: OpenSim::Array< std::string > &

        """
        return _opensim.JointReaction_setOnBody(self, onBody)


    def getInFrame(self):
        """
        getInFrame(JointReaction self) -> ArrayStr

        Parameters:
            self: OpenSim::JointReaction const *

        """
        return _opensim.JointReaction_getInFrame(self)


    def setInFrame(self, inFrame):
        """
        setInFrame(JointReaction self, ArrayStr inFrame)

        Parameters:
            inFrame: OpenSim::Array< std::string > &

        """
        return _opensim.JointReaction_setInFrame(self, inFrame)


    def begin(self, s):
        """
        begin(JointReaction self, State s) -> int

        Parameters:
            s: SimTK::State &

        """
        return _opensim.JointReaction_begin(self, s)


    def step(self, s, setNumber):
        """
        step(JointReaction self, State s, int setNumber) -> int

        Parameters:
            s: SimTK::State const &
            setNumber: int

        """
        return _opensim.JointReaction_step(self, s, setNumber)


    def end(self, s):
        """
        end(JointReaction self, State s) -> int

        Parameters:
            s: SimTK::State &

        """
        return _opensim.JointReaction_end(self, s)


    def printResults(self, *args):
        """
        printResults(JointReaction self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double
            aExtension: std::string const &

        printResults(JointReaction self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double

        printResults(JointReaction self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &

        printResults(JointReaction self, std::string const & aBaseName) -> int

        Parameters:
            aBaseName: std::string const &

        """
        return _opensim.JointReaction_printResults(self, *args)

JointReaction_swigregister = _opensim.JointReaction_swigregister
JointReaction_swigregister(JointReaction)

def JointReaction_safeDownCast(obj):
    """
    JointReaction_safeDownCast(OpenSimObject obj) -> JointReaction

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.JointReaction_safeDownCast(obj)

def JointReaction_getClassName():
    """JointReaction_getClassName() -> std::string const &"""
    return _opensim.JointReaction_getClassName()

class StatesReporter(Analysis):
    """Proxy of C++ OpenSim::StatesReporter class"""
    __swig_setmethods__ = {}
    for _s in [Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StatesReporter, name, value)
    __swig_getmethods__ = {}
    for _s in [Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StatesReporter, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> StatesReporter

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.StatesReporter_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(StatesReporter self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.StatesReporter_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.StatesReporter_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(StatesReporter self) -> StatesReporter

        Parameters:
            self: OpenSim::StatesReporter const *

        """
        return _opensim.StatesReporter_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(StatesReporter self) -> std::string const &

        Parameters:
            self: OpenSim::StatesReporter const *

        """
        return _opensim.StatesReporter_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::StatesReporter self, Model aModel=None) -> StatesReporter

        Parameters:
            aModel: OpenSim::Model *

        __init__(OpenSim::StatesReporter self) -> StatesReporter
        __init__(OpenSim::StatesReporter self, std::string const & aFileName) -> StatesReporter

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::StatesReporter self, StatesReporter aObject) -> StatesReporter

        Parameters:
            aObject: OpenSim::StatesReporter const &

        """
        this = _opensim.new_StatesReporter(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_StatesReporter
    __del__ = lambda self: None

    def getStatesStorage(self):
        """
        getStatesStorage(StatesReporter self) -> Storage

        Parameters:
            self: OpenSim::StatesReporter const *

        """
        return _opensim.StatesReporter_getStatesStorage(self)


    def updStatesStorage(self):
        """
        updStatesStorage(StatesReporter self) -> Storage

        Parameters:
            self: OpenSim::StatesReporter *

        """
        return _opensim.StatesReporter_updStatesStorage(self)


    def begin(self, s):
        """
        begin(StatesReporter self, State s) -> int

        Parameters:
            s: SimTK::State &

        """
        return _opensim.StatesReporter_begin(self, s)


    def step(self, s, setNumber):
        """
        step(StatesReporter self, State s, int setNumber) -> int

        Parameters:
            s: SimTK::State const &
            setNumber: int

        """
        return _opensim.StatesReporter_step(self, s, setNumber)


    def end(self, s):
        """
        end(StatesReporter self, State s) -> int

        Parameters:
            s: SimTK::State &

        """
        return _opensim.StatesReporter_end(self, s)


    def printResults(self, *args):
        """
        printResults(StatesReporter self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double
            aExtension: std::string const &

        printResults(StatesReporter self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double

        printResults(StatesReporter self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &

        printResults(StatesReporter self, std::string const & aBaseName) -> int

        Parameters:
            aBaseName: std::string const &

        """
        return _opensim.StatesReporter_printResults(self, *args)

StatesReporter_swigregister = _opensim.StatesReporter_swigregister
StatesReporter_swigregister(StatesReporter)

def StatesReporter_safeDownCast(obj):
    """
    StatesReporter_safeDownCast(OpenSimObject obj) -> StatesReporter

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.StatesReporter_safeDownCast(obj)

def StatesReporter_getClassName():
    """StatesReporter_getClassName() -> std::string const &"""
    return _opensim.StatesReporter_getClassName()

class InducedAccelerations(Analysis):
    """Proxy of C++ OpenSim::InducedAccelerations class"""
    __swig_setmethods__ = {}
    for _s in [Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InducedAccelerations, name, value)
    __swig_getmethods__ = {}
    for _s in [Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InducedAccelerations, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> InducedAccelerations

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.InducedAccelerations_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(InducedAccelerations self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.InducedAccelerations_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.InducedAccelerations_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(InducedAccelerations self) -> InducedAccelerations

        Parameters:
            self: OpenSim::InducedAccelerations const *

        """
        return _opensim.InducedAccelerations_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(InducedAccelerations self) -> std::string const &

        Parameters:
            self: OpenSim::InducedAccelerations const *

        """
        return _opensim.InducedAccelerations_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::InducedAccelerations self, Model aModel=None) -> InducedAccelerations

        Parameters:
            aModel: OpenSim::Model *

        __init__(OpenSim::InducedAccelerations self) -> InducedAccelerations
        __init__(OpenSim::InducedAccelerations self, std::string const & aFileName) -> InducedAccelerations

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::InducedAccelerations self, InducedAccelerations aObject) -> InducedAccelerations

        Parameters:
            aObject: OpenSim::InducedAccelerations const &

        """
        this = _opensim.new_InducedAccelerations(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_InducedAccelerations
    __del__ = lambda self: None

    def setModel(self, aModel):
        """
        setModel(InducedAccelerations self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.InducedAccelerations_setModel(self, aModel)


    def initialize(self, s):
        """
        initialize(InducedAccelerations self, State s)

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.InducedAccelerations_initialize(self, s)


    def begin(self, s):
        """
        begin(InducedAccelerations self, State s) -> int

        Parameters:
            s: SimTK::State &

        """
        return _opensim.InducedAccelerations_begin(self, s)


    def step(self, s, stepNumber):
        """
        step(InducedAccelerations self, State s, int stepNumber) -> int

        Parameters:
            s: SimTK::State const &
            stepNumber: int

        """
        return _opensim.InducedAccelerations_step(self, s, stepNumber)


    def end(self, s):
        """
        end(InducedAccelerations self, State s) -> int

        Parameters:
            s: SimTK::State &

        """
        return _opensim.InducedAccelerations_end(self, s)


    def printResults(self, *args):
        """
        printResults(InducedAccelerations self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double
            aExtension: std::string const &

        printResults(InducedAccelerations self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double

        printResults(InducedAccelerations self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &

        printResults(InducedAccelerations self, std::string const & aBaseName) -> int

        Parameters:
            aBaseName: std::string const &

        """
        return _opensim.InducedAccelerations_printResults(self, *args)


    def addContactConstraintFromExternalForce(self, externalForce):
        """
        addContactConstraintFromExternalForce(InducedAccelerations self, ExternalForce externalForce)

        Parameters:
            externalForce: OpenSim::ExternalForce *

        """
        return _opensim.InducedAccelerations_addContactConstraintFromExternalForce(self, externalForce)


    def applyContactConstraintAccordingToExternalForces(self, s):
        """
        applyContactConstraintAccordingToExternalForces(InducedAccelerations self, State s) -> ArrayBool

        Parameters:
            s: SimTK::State &

        """
        return _opensim.InducedAccelerations_applyContactConstraintAccordingToExternalForces(self, s)

InducedAccelerations_swigregister = _opensim.InducedAccelerations_swigregister
InducedAccelerations_swigregister(InducedAccelerations)

def InducedAccelerations_safeDownCast(obj):
    """
    InducedAccelerations_safeDownCast(OpenSimObject obj) -> InducedAccelerations

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.InducedAccelerations_safeDownCast(obj)

def InducedAccelerations_getClassName():
    """InducedAccelerations_getClassName() -> std::string const &"""
    return _opensim.InducedAccelerations_getClassName()

class ProbeReporter(Analysis):
    """Proxy of C++ OpenSim::ProbeReporter class"""
    __swig_setmethods__ = {}
    for _s in [Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProbeReporter, name, value)
    __swig_getmethods__ = {}
    for _s in [Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProbeReporter, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ProbeReporter

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ProbeReporter_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ProbeReporter self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ProbeReporter_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ProbeReporter_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ProbeReporter self) -> ProbeReporter

        Parameters:
            self: OpenSim::ProbeReporter const *

        """
        return _opensim.ProbeReporter_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ProbeReporter self) -> std::string const &

        Parameters:
            self: OpenSim::ProbeReporter const *

        """
        return _opensim.ProbeReporter_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ProbeReporter self, Model aModel=None) -> ProbeReporter

        Parameters:
            aModel: OpenSim::Model *

        __init__(OpenSim::ProbeReporter self) -> ProbeReporter
        __init__(OpenSim::ProbeReporter self, std::string const & aFileName) -> ProbeReporter

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::ProbeReporter self, ProbeReporter aObject) -> ProbeReporter

        Parameters:
            aObject: OpenSim::ProbeReporter const &

        """
        this = _opensim.new_ProbeReporter(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_ProbeReporter
    __del__ = lambda self: None

    def getProbeStorage(self):
        """
        getProbeStorage(ProbeReporter self) -> Storage

        Parameters:
            self: OpenSim::ProbeReporter const *

        """
        return _opensim.ProbeReporter_getProbeStorage(self)


    def updProbeStorage(self):
        """
        updProbeStorage(ProbeReporter self) -> Storage

        Parameters:
            self: OpenSim::ProbeReporter *

        """
        return _opensim.ProbeReporter_updProbeStorage(self)


    def setModel(self, aModel):
        """
        setModel(ProbeReporter self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.ProbeReporter_setModel(self, aModel)


    def begin(self, s):
        """
        begin(ProbeReporter self, State s) -> int

        Parameters:
            s: SimTK::State &

        """
        return _opensim.ProbeReporter_begin(self, s)


    def step(self, s, setNumber):
        """
        step(ProbeReporter self, State s, int setNumber) -> int

        Parameters:
            s: SimTK::State const &
            setNumber: int

        """
        return _opensim.ProbeReporter_step(self, s, setNumber)


    def end(self, s):
        """
        end(ProbeReporter self, State s) -> int

        Parameters:
            s: SimTK::State &

        """
        return _opensim.ProbeReporter_end(self, s)


    def disableIntegrationOnlyProbes(self):
        """
        disableIntegrationOnlyProbes(ProbeReporter self)

        Parameters:
            self: OpenSim::ProbeReporter *

        """
        return _opensim.ProbeReporter_disableIntegrationOnlyProbes(self)


    def printResults(self, *args):
        """
        printResults(ProbeReporter self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double
            aExtension: std::string const &

        printResults(ProbeReporter self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &
            aDT: double

        printResults(ProbeReporter self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters:
            aBaseName: std::string const &
            aDir: std::string const &

        printResults(ProbeReporter self, std::string const & aBaseName) -> int

        Parameters:
            aBaseName: std::string const &

        """
        return _opensim.ProbeReporter_printResults(self, *args)

ProbeReporter_swigregister = _opensim.ProbeReporter_swigregister
ProbeReporter_swigregister(ProbeReporter)

def ProbeReporter_safeDownCast(obj):
    """
    ProbeReporter_safeDownCast(OpenSimObject obj) -> ProbeReporter

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ProbeReporter_safeDownCast(obj)

def ProbeReporter_getClassName():
    """ProbeReporter_getClassName() -> std::string const &"""
    return _opensim.ProbeReporter_getClassName()

class CoordinateActuator(Actuator):
    """Proxy of C++ OpenSim::CoordinateActuator class"""
    __swig_setmethods__ = {}
    for _s in [Actuator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoordinateActuator, name, value)
    __swig_getmethods__ = {}
    for _s in [Actuator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoordinateActuator, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> CoordinateActuator

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.CoordinateActuator_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(CoordinateActuator self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.CoordinateActuator_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.CoordinateActuator_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(CoordinateActuator self) -> CoordinateActuator

        Parameters:
            self: OpenSim::CoordinateActuator const *

        """
        return _opensim.CoordinateActuator_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(CoordinateActuator self) -> std::string const &

        Parameters:
            self: OpenSim::CoordinateActuator const *

        """
        return _opensim.CoordinateActuator_getConcreteClassName(self)


    def copyProperty_coordinate(self, source):
        """
        copyProperty_coordinate(CoordinateActuator self, CoordinateActuator source)

        Parameters:
            source: OpenSim::CoordinateActuator::Self const &

        """
        return _opensim.CoordinateActuator_copyProperty_coordinate(self, source)


    def append_coordinate(self, value):
        """
        append_coordinate(CoordinateActuator self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.CoordinateActuator_append_coordinate(self, value)


    def constructProperty_coordinate(self, *args):
        """
        constructProperty_coordinate(CoordinateActuator self)
        constructProperty_coordinate(CoordinateActuator self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.CoordinateActuator_constructProperty_coordinate(self, *args)


    def get_coordinate(self, *args):
        """
        get_coordinate(CoordinateActuator self, int i) -> std::string const

        Parameters:
            i: int

        get_coordinate(CoordinateActuator self) -> std::string const &

        Parameters:
            self: OpenSim::CoordinateActuator const *

        """
        return _opensim.CoordinateActuator_get_coordinate(self, *args)


    def upd_coordinate(self, *args):
        """
        upd_coordinate(CoordinateActuator self, int i) -> std::string

        Parameters:
            i: int

        upd_coordinate(CoordinateActuator self) -> std::string &

        Parameters:
            self: OpenSim::CoordinateActuator *

        """
        return _opensim.CoordinateActuator_upd_coordinate(self, *args)


    def set_coordinate(self, *args):
        """
        set_coordinate(CoordinateActuator self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_coordinate(CoordinateActuator self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.CoordinateActuator_set_coordinate(self, *args)


    def copyProperty_optimal_force(self, source):
        """
        copyProperty_optimal_force(CoordinateActuator self, CoordinateActuator source)

        Parameters:
            source: OpenSim::CoordinateActuator::Self const &

        """
        return _opensim.CoordinateActuator_copyProperty_optimal_force(self, source)


    def append_optimal_force(self, value):
        """
        append_optimal_force(CoordinateActuator self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.CoordinateActuator_append_optimal_force(self, value)


    def constructProperty_optimal_force(self, initValue):
        """
        constructProperty_optimal_force(CoordinateActuator self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.CoordinateActuator_constructProperty_optimal_force(self, initValue)


    def get_optimal_force(self, *args):
        """
        get_optimal_force(CoordinateActuator self, int i) -> double const

        Parameters:
            i: int

        get_optimal_force(CoordinateActuator self) -> double const &

        Parameters:
            self: OpenSim::CoordinateActuator const *

        """
        return _opensim.CoordinateActuator_get_optimal_force(self, *args)


    def upd_optimal_force(self, *args):
        """
        upd_optimal_force(CoordinateActuator self, int i) -> double

        Parameters:
            i: int

        upd_optimal_force(CoordinateActuator self) -> double &

        Parameters:
            self: OpenSim::CoordinateActuator *

        """
        return _opensim.CoordinateActuator_upd_optimal_force(self, *args)


    def set_optimal_force(self, *args):
        """
        set_optimal_force(CoordinateActuator self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_optimal_force(CoordinateActuator self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.CoordinateActuator_set_optimal_force(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::CoordinateActuator self, std::string const & coordinateName) -> CoordinateActuator

        Parameters:
            coordinateName: std::string const &

        __init__(OpenSim::CoordinateActuator self) -> CoordinateActuator
        """
        this = _opensim.new_CoordinateActuator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setOptimalForce(self, optimalForce):
        """
        setOptimalForce(CoordinateActuator self, double optimalForce)

        Parameters:
            optimalForce: double

        """
        return _opensim.CoordinateActuator_setOptimalForce(self, optimalForce)


    def getOptimalForce(self):
        """
        getOptimalForce(CoordinateActuator self) -> double

        Parameters:
            self: OpenSim::CoordinateActuator const *

        """
        return _opensim.CoordinateActuator_getOptimalForce(self)


    def CreateForceSetOfCoordinateActuatorsForModel(s, aModel, aOptimalForce=1, aIncludeLockedAndConstrainedCoordinates=True):
        """
        CreateForceSetOfCoordinateActuatorsForModel(State s, Model aModel, double aOptimalForce=1, bool aIncludeLockedAndConstrainedCoordinates=True) -> ForceSet

        Parameters:
            s: SimTK::State const &
            aModel: OpenSim::Model &
            aOptimalForce: double
            aIncludeLockedAndConstrainedCoordinates: bool

        CreateForceSetOfCoordinateActuatorsForModel(State s, Model aModel, double aOptimalForce=1) -> ForceSet

        Parameters:
            s: SimTK::State const &
            aModel: OpenSim::Model &
            aOptimalForce: double

        CreateForceSetOfCoordinateActuatorsForModel(State s, Model aModel) -> ForceSet

        Parameters:
            s: SimTK::State const &
            aModel: OpenSim::Model &

        """
        return _opensim.CoordinateActuator_CreateForceSetOfCoordinateActuatorsForModel(s, aModel, aOptimalForce, aIncludeLockedAndConstrainedCoordinates)

    if _newclass:
        CreateForceSetOfCoordinateActuatorsForModel = staticmethod(CreateForceSetOfCoordinateActuatorsForModel)
    __swig_getmethods__["CreateForceSetOfCoordinateActuatorsForModel"] = lambda x: CreateForceSetOfCoordinateActuatorsForModel

    def isCoordinateValid(self):
        """
        isCoordinateValid(CoordinateActuator self) -> bool

        Parameters:
            self: OpenSim::CoordinateActuator const *

        """
        return _opensim.CoordinateActuator_isCoordinateValid(self)


    def getSpeed(self, s):
        """
        getSpeed(CoordinateActuator self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.CoordinateActuator_getSpeed(self, s)


    def setCoordinate(self, aCoordinate):
        """
        setCoordinate(CoordinateActuator self, Coordinate aCoordinate)

        Parameters:
            aCoordinate: OpenSim::Coordinate *

        """
        return _opensim.CoordinateActuator_setCoordinate(self, aCoordinate)


    def getCoordinate(self):
        """
        getCoordinate(CoordinateActuator self) -> Coordinate

        Parameters:
            self: OpenSim::CoordinateActuator const *

        """
        return _opensim.CoordinateActuator_getCoordinate(self)

    __swig_destroy__ = _opensim.delete_CoordinateActuator
    __del__ = lambda self: None
CoordinateActuator_swigregister = _opensim.CoordinateActuator_swigregister
CoordinateActuator_swigregister(CoordinateActuator)

def CoordinateActuator_safeDownCast(obj):
    """
    CoordinateActuator_safeDownCast(OpenSimObject obj) -> CoordinateActuator

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.CoordinateActuator_safeDownCast(obj)

def CoordinateActuator_getClassName():
    """CoordinateActuator_getClassName() -> std::string const &"""
    return _opensim.CoordinateActuator_getClassName()

def CoordinateActuator_CreateForceSetOfCoordinateActuatorsForModel(s, aModel, aOptimalForce=1, aIncludeLockedAndConstrainedCoordinates=True):
    """
    CreateForceSetOfCoordinateActuatorsForModel(State s, Model aModel, double aOptimalForce=1, bool aIncludeLockedAndConstrainedCoordinates=True) -> ForceSet

    Parameters:
        s: SimTK::State const &
        aModel: OpenSim::Model &
        aOptimalForce: double
        aIncludeLockedAndConstrainedCoordinates: bool

    CreateForceSetOfCoordinateActuatorsForModel(State s, Model aModel, double aOptimalForce=1) -> ForceSet

    Parameters:
        s: SimTK::State const &
        aModel: OpenSim::Model &
        aOptimalForce: double

    CoordinateActuator_CreateForceSetOfCoordinateActuatorsForModel(State s, Model aModel) -> ForceSet

    Parameters:
        s: SimTK::State const &
        aModel: OpenSim::Model &

    """
    return _opensim.CoordinateActuator_CreateForceSetOfCoordinateActuatorsForModel(s, aModel, aOptimalForce, aIncludeLockedAndConstrainedCoordinates)

class PointActuator(Actuator):
    """Proxy of C++ OpenSim::PointActuator class"""
    __swig_setmethods__ = {}
    for _s in [Actuator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointActuator, name, value)
    __swig_getmethods__ = {}
    for _s in [Actuator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointActuator, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PointActuator

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.PointActuator_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(PointActuator self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.PointActuator_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.PointActuator_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(PointActuator self) -> PointActuator

        Parameters:
            self: OpenSim::PointActuator const *

        """
        return _opensim.PointActuator_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PointActuator self) -> std::string const &

        Parameters:
            self: OpenSim::PointActuator const *

        """
        return _opensim.PointActuator_getConcreteClassName(self)


    def copyProperty_body(self, source):
        """
        copyProperty_body(PointActuator self, PointActuator source)

        Parameters:
            source: OpenSim::PointActuator::Self const &

        """
        return _opensim.PointActuator_copyProperty_body(self, source)


    def append_body(self, value):
        """
        append_body(PointActuator self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.PointActuator_append_body(self, value)


    def constructProperty_body(self, *args):
        """
        constructProperty_body(PointActuator self)
        constructProperty_body(PointActuator self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.PointActuator_constructProperty_body(self, *args)


    def get_body(self, *args):
        """
        get_body(PointActuator self, int i) -> std::string const

        Parameters:
            i: int

        get_body(PointActuator self) -> std::string const &

        Parameters:
            self: OpenSim::PointActuator const *

        """
        return _opensim.PointActuator_get_body(self, *args)


    def upd_body(self, *args):
        """
        upd_body(PointActuator self, int i) -> std::string

        Parameters:
            i: int

        upd_body(PointActuator self) -> std::string &

        Parameters:
            self: OpenSim::PointActuator *

        """
        return _opensim.PointActuator_upd_body(self, *args)


    def set_body(self, *args):
        """
        set_body(PointActuator self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_body(PointActuator self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.PointActuator_set_body(self, *args)


    def copyProperty_point(self, source):
        """
        copyProperty_point(PointActuator self, PointActuator source)

        Parameters:
            source: OpenSim::PointActuator::Self const &

        """
        return _opensim.PointActuator_copyProperty_point(self, source)


    def append_point(self, value):
        """
        append_point(PointActuator self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.PointActuator_append_point(self, value)


    def constructProperty_point(self, initValue):
        """
        constructProperty_point(PointActuator self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.PointActuator_constructProperty_point(self, initValue)


    def get_point(self, *args):
        """
        get_point(PointActuator self, int i) -> Vec3

        Parameters:
            i: int

        get_point(PointActuator self) -> Vec3

        Parameters:
            self: OpenSim::PointActuator const *

        """
        return _opensim.PointActuator_get_point(self, *args)


    def upd_point(self, *args):
        """
        upd_point(PointActuator self, int i) -> Vec3

        Parameters:
            i: int

        upd_point(PointActuator self) -> Vec3

        Parameters:
            self: OpenSim::PointActuator *

        """
        return _opensim.PointActuator_upd_point(self, *args)


    def set_point(self, *args):
        """
        set_point(PointActuator self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_point(PointActuator self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.PointActuator_set_point(self, *args)


    def copyProperty_point_is_global(self, source):
        """
        copyProperty_point_is_global(PointActuator self, PointActuator source)

        Parameters:
            source: OpenSim::PointActuator::Self const &

        """
        return _opensim.PointActuator_copyProperty_point_is_global(self, source)


    def append_point_is_global(self, value):
        """
        append_point_is_global(PointActuator self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.PointActuator_append_point_is_global(self, value)


    def constructProperty_point_is_global(self, initValue):
        """
        constructProperty_point_is_global(PointActuator self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.PointActuator_constructProperty_point_is_global(self, initValue)


    def get_point_is_global(self, *args):
        """
        get_point_is_global(PointActuator self, int i) -> bool const

        Parameters:
            i: int

        get_point_is_global(PointActuator self) -> bool const &

        Parameters:
            self: OpenSim::PointActuator const *

        """
        return _opensim.PointActuator_get_point_is_global(self, *args)


    def upd_point_is_global(self, *args):
        """
        upd_point_is_global(PointActuator self, int i) -> bool

        Parameters:
            i: int

        upd_point_is_global(PointActuator self) -> bool &

        Parameters:
            self: OpenSim::PointActuator *

        """
        return _opensim.PointActuator_upd_point_is_global(self, *args)


    def set_point_is_global(self, *args):
        """
        set_point_is_global(PointActuator self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_point_is_global(PointActuator self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.PointActuator_set_point_is_global(self, *args)


    def copyProperty_direction(self, source):
        """
        copyProperty_direction(PointActuator self, PointActuator source)

        Parameters:
            source: OpenSim::PointActuator::Self const &

        """
        return _opensim.PointActuator_copyProperty_direction(self, source)


    def append_direction(self, value):
        """
        append_direction(PointActuator self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.PointActuator_append_direction(self, value)


    def constructProperty_direction(self, initValue):
        """
        constructProperty_direction(PointActuator self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.PointActuator_constructProperty_direction(self, initValue)


    def get_direction(self, *args):
        """
        get_direction(PointActuator self, int i) -> Vec3

        Parameters:
            i: int

        get_direction(PointActuator self) -> Vec3

        Parameters:
            self: OpenSim::PointActuator const *

        """
        return _opensim.PointActuator_get_direction(self, *args)


    def upd_direction(self, *args):
        """
        upd_direction(PointActuator self, int i) -> Vec3

        Parameters:
            i: int

        upd_direction(PointActuator self) -> Vec3

        Parameters:
            self: OpenSim::PointActuator *

        """
        return _opensim.PointActuator_upd_direction(self, *args)


    def set_direction(self, *args):
        """
        set_direction(PointActuator self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_direction(PointActuator self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.PointActuator_set_direction(self, *args)


    def copyProperty_force_is_global(self, source):
        """
        copyProperty_force_is_global(PointActuator self, PointActuator source)

        Parameters:
            source: OpenSim::PointActuator::Self const &

        """
        return _opensim.PointActuator_copyProperty_force_is_global(self, source)


    def append_force_is_global(self, value):
        """
        append_force_is_global(PointActuator self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.PointActuator_append_force_is_global(self, value)


    def constructProperty_force_is_global(self, initValue):
        """
        constructProperty_force_is_global(PointActuator self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.PointActuator_constructProperty_force_is_global(self, initValue)


    def get_force_is_global(self, *args):
        """
        get_force_is_global(PointActuator self, int i) -> bool const

        Parameters:
            i: int

        get_force_is_global(PointActuator self) -> bool const &

        Parameters:
            self: OpenSim::PointActuator const *

        """
        return _opensim.PointActuator_get_force_is_global(self, *args)


    def upd_force_is_global(self, *args):
        """
        upd_force_is_global(PointActuator self, int i) -> bool

        Parameters:
            i: int

        upd_force_is_global(PointActuator self) -> bool &

        Parameters:
            self: OpenSim::PointActuator *

        """
        return _opensim.PointActuator_upd_force_is_global(self, *args)


    def set_force_is_global(self, *args):
        """
        set_force_is_global(PointActuator self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_force_is_global(PointActuator self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.PointActuator_set_force_is_global(self, *args)


    def copyProperty_optimal_force(self, source):
        """
        copyProperty_optimal_force(PointActuator self, PointActuator source)

        Parameters:
            source: OpenSim::PointActuator::Self const &

        """
        return _opensim.PointActuator_copyProperty_optimal_force(self, source)


    def append_optimal_force(self, value):
        """
        append_optimal_force(PointActuator self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.PointActuator_append_optimal_force(self, value)


    def constructProperty_optimal_force(self, initValue):
        """
        constructProperty_optimal_force(PointActuator self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.PointActuator_constructProperty_optimal_force(self, initValue)


    def get_optimal_force(self, *args):
        """
        get_optimal_force(PointActuator self, int i) -> double const

        Parameters:
            i: int

        get_optimal_force(PointActuator self) -> double const &

        Parameters:
            self: OpenSim::PointActuator const *

        """
        return _opensim.PointActuator_get_optimal_force(self, *args)


    def upd_optimal_force(self, *args):
        """
        upd_optimal_force(PointActuator self, int i) -> double

        Parameters:
            i: int

        upd_optimal_force(PointActuator self) -> double &

        Parameters:
            self: OpenSim::PointActuator *

        """
        return _opensim.PointActuator_upd_optimal_force(self, *args)


    def set_optimal_force(self, *args):
        """
        set_optimal_force(PointActuator self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_optimal_force(PointActuator self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.PointActuator_set_optimal_force(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::PointActuator self, std::string const & bodyName) -> PointActuator

        Parameters:
            bodyName: std::string const &

        __init__(OpenSim::PointActuator self) -> PointActuator
        """
        this = _opensim.new_PointActuator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setOptimalForce(self, aOptimalForce):
        """
        setOptimalForce(PointActuator self, double aOptimalForce)

        Parameters:
            aOptimalForce: double

        """
        return _opensim.PointActuator_setOptimalForce(self, aOptimalForce)


    def getOptimalForce(self):
        """
        getOptimalForce(PointActuator self) -> double

        Parameters:
            self: OpenSim::PointActuator const *

        """
        return _opensim.PointActuator_getOptimalForce(self)

    __swig_destroy__ = _opensim.delete_PointActuator
    __del__ = lambda self: None
PointActuator_swigregister = _opensim.PointActuator_swigregister
PointActuator_swigregister(PointActuator)

def PointActuator_safeDownCast(obj):
    """
    PointActuator_safeDownCast(OpenSimObject obj) -> PointActuator

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.PointActuator_safeDownCast(obj)

def PointActuator_getClassName():
    """PointActuator_getClassName() -> std::string const &"""
    return _opensim.PointActuator_getClassName()

class TorqueActuator(Actuator):
    """Proxy of C++ OpenSim::TorqueActuator class"""
    __swig_setmethods__ = {}
    for _s in [Actuator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TorqueActuator, name, value)
    __swig_getmethods__ = {}
    for _s in [Actuator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TorqueActuator, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> TorqueActuator

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.TorqueActuator_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(TorqueActuator self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.TorqueActuator_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.TorqueActuator_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(TorqueActuator self) -> TorqueActuator

        Parameters:
            self: OpenSim::TorqueActuator const *

        """
        return _opensim.TorqueActuator_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(TorqueActuator self) -> std::string const &

        Parameters:
            self: OpenSim::TorqueActuator const *

        """
        return _opensim.TorqueActuator_getConcreteClassName(self)


    def copyProperty_bodyA(self, source):
        """
        copyProperty_bodyA(TorqueActuator self, TorqueActuator source)

        Parameters:
            source: OpenSim::TorqueActuator::Self const &

        """
        return _opensim.TorqueActuator_copyProperty_bodyA(self, source)


    def append_bodyA(self, value):
        """
        append_bodyA(TorqueActuator self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.TorqueActuator_append_bodyA(self, value)


    def constructProperty_bodyA(self, *args):
        """
        constructProperty_bodyA(TorqueActuator self)
        constructProperty_bodyA(TorqueActuator self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.TorqueActuator_constructProperty_bodyA(self, *args)


    def get_bodyA(self, *args):
        """
        get_bodyA(TorqueActuator self, int i) -> std::string const

        Parameters:
            i: int

        get_bodyA(TorqueActuator self) -> std::string const &

        Parameters:
            self: OpenSim::TorqueActuator const *

        """
        return _opensim.TorqueActuator_get_bodyA(self, *args)


    def upd_bodyA(self, *args):
        """
        upd_bodyA(TorqueActuator self, int i) -> std::string

        Parameters:
            i: int

        upd_bodyA(TorqueActuator self) -> std::string &

        Parameters:
            self: OpenSim::TorqueActuator *

        """
        return _opensim.TorqueActuator_upd_bodyA(self, *args)


    def set_bodyA(self, *args):
        """
        set_bodyA(TorqueActuator self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_bodyA(TorqueActuator self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.TorqueActuator_set_bodyA(self, *args)


    def copyProperty_bodyB(self, source):
        """
        copyProperty_bodyB(TorqueActuator self, TorqueActuator source)

        Parameters:
            source: OpenSim::TorqueActuator::Self const &

        """
        return _opensim.TorqueActuator_copyProperty_bodyB(self, source)


    def append_bodyB(self, value):
        """
        append_bodyB(TorqueActuator self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.TorqueActuator_append_bodyB(self, value)


    def constructProperty_bodyB(self, *args):
        """
        constructProperty_bodyB(TorqueActuator self)
        constructProperty_bodyB(TorqueActuator self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.TorqueActuator_constructProperty_bodyB(self, *args)


    def get_bodyB(self, *args):
        """
        get_bodyB(TorqueActuator self, int i) -> std::string const

        Parameters:
            i: int

        get_bodyB(TorqueActuator self) -> std::string const &

        Parameters:
            self: OpenSim::TorqueActuator const *

        """
        return _opensim.TorqueActuator_get_bodyB(self, *args)


    def upd_bodyB(self, *args):
        """
        upd_bodyB(TorqueActuator self, int i) -> std::string

        Parameters:
            i: int

        upd_bodyB(TorqueActuator self) -> std::string &

        Parameters:
            self: OpenSim::TorqueActuator *

        """
        return _opensim.TorqueActuator_upd_bodyB(self, *args)


    def set_bodyB(self, *args):
        """
        set_bodyB(TorqueActuator self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_bodyB(TorqueActuator self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.TorqueActuator_set_bodyB(self, *args)


    def copyProperty_torque_is_global(self, source):
        """
        copyProperty_torque_is_global(TorqueActuator self, TorqueActuator source)

        Parameters:
            source: OpenSim::TorqueActuator::Self const &

        """
        return _opensim.TorqueActuator_copyProperty_torque_is_global(self, source)


    def append_torque_is_global(self, value):
        """
        append_torque_is_global(TorqueActuator self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.TorqueActuator_append_torque_is_global(self, value)


    def constructProperty_torque_is_global(self, initValue):
        """
        constructProperty_torque_is_global(TorqueActuator self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.TorqueActuator_constructProperty_torque_is_global(self, initValue)


    def get_torque_is_global(self, *args):
        """
        get_torque_is_global(TorqueActuator self, int i) -> bool const

        Parameters:
            i: int

        get_torque_is_global(TorqueActuator self) -> bool const &

        Parameters:
            self: OpenSim::TorqueActuator const *

        """
        return _opensim.TorqueActuator_get_torque_is_global(self, *args)


    def upd_torque_is_global(self, *args):
        """
        upd_torque_is_global(TorqueActuator self, int i) -> bool

        Parameters:
            i: int

        upd_torque_is_global(TorqueActuator self) -> bool &

        Parameters:
            self: OpenSim::TorqueActuator *

        """
        return _opensim.TorqueActuator_upd_torque_is_global(self, *args)


    def set_torque_is_global(self, *args):
        """
        set_torque_is_global(TorqueActuator self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_torque_is_global(TorqueActuator self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.TorqueActuator_set_torque_is_global(self, *args)


    def copyProperty_axis(self, source):
        """
        copyProperty_axis(TorqueActuator self, TorqueActuator source)

        Parameters:
            source: OpenSim::TorqueActuator::Self const &

        """
        return _opensim.TorqueActuator_copyProperty_axis(self, source)


    def append_axis(self, value):
        """
        append_axis(TorqueActuator self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.TorqueActuator_append_axis(self, value)


    def constructProperty_axis(self, initValue):
        """
        constructProperty_axis(TorqueActuator self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.TorqueActuator_constructProperty_axis(self, initValue)


    def get_axis(self, *args):
        """
        get_axis(TorqueActuator self, int i) -> Vec3

        Parameters:
            i: int

        get_axis(TorqueActuator self) -> Vec3

        Parameters:
            self: OpenSim::TorqueActuator const *

        """
        return _opensim.TorqueActuator_get_axis(self, *args)


    def upd_axis(self, *args):
        """
        upd_axis(TorqueActuator self, int i) -> Vec3

        Parameters:
            i: int

        upd_axis(TorqueActuator self) -> Vec3

        Parameters:
            self: OpenSim::TorqueActuator *

        """
        return _opensim.TorqueActuator_upd_axis(self, *args)


    def set_axis(self, *args):
        """
        set_axis(TorqueActuator self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_axis(TorqueActuator self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.TorqueActuator_set_axis(self, *args)


    def copyProperty_optimal_force(self, source):
        """
        copyProperty_optimal_force(TorqueActuator self, TorqueActuator source)

        Parameters:
            source: OpenSim::TorqueActuator::Self const &

        """
        return _opensim.TorqueActuator_copyProperty_optimal_force(self, source)


    def append_optimal_force(self, value):
        """
        append_optimal_force(TorqueActuator self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.TorqueActuator_append_optimal_force(self, value)


    def constructProperty_optimal_force(self, initValue):
        """
        constructProperty_optimal_force(TorqueActuator self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.TorqueActuator_constructProperty_optimal_force(self, initValue)


    def get_optimal_force(self, *args):
        """
        get_optimal_force(TorqueActuator self, int i) -> double const

        Parameters:
            i: int

        get_optimal_force(TorqueActuator self) -> double const &

        Parameters:
            self: OpenSim::TorqueActuator const *

        """
        return _opensim.TorqueActuator_get_optimal_force(self, *args)


    def upd_optimal_force(self, *args):
        """
        upd_optimal_force(TorqueActuator self, int i) -> double

        Parameters:
            i: int

        upd_optimal_force(TorqueActuator self) -> double &

        Parameters:
            self: OpenSim::TorqueActuator *

        """
        return _opensim.TorqueActuator_upd_optimal_force(self, *args)


    def set_optimal_force(self, *args):
        """
        set_optimal_force(TorqueActuator self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_optimal_force(TorqueActuator self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.TorqueActuator_set_optimal_force(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::TorqueActuator self) -> TorqueActuator
        __init__(OpenSim::TorqueActuator self, Body bodyA, Body bodyB, Vec3 axis, bool axisInGround=True) -> TorqueActuator

        Parameters:
            bodyA: OpenSim::Body const &
            bodyB: OpenSim::Body const &
            axis: SimTK::Vec3 const &
            axisInGround: bool

        __init__(OpenSim::TorqueActuator self, Body bodyA, Body bodyB, Vec3 axis) -> TorqueActuator

        Parameters:
            bodyA: OpenSim::Body const &
            bodyB: OpenSim::Body const &
            axis: SimTK::Vec3 const &

        """
        this = _opensim.new_TorqueActuator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setAxis(self, axis):
        """
        setAxis(TorqueActuator self, Vec3 axis)

        Parameters:
            axis: SimTK::Vec3 const &

        """
        return _opensim.TorqueActuator_setAxis(self, axis)


    def getAxis(self):
        """
        getAxis(TorqueActuator self) -> Vec3

        Parameters:
            self: OpenSim::TorqueActuator const *

        """
        return _opensim.TorqueActuator_getAxis(self)


    def setTorqueIsGlobal(self, isGlobal):
        """
        setTorqueIsGlobal(TorqueActuator self, bool isGlobal)

        Parameters:
            isGlobal: bool

        """
        return _opensim.TorqueActuator_setTorqueIsGlobal(self, isGlobal)


    def getTorqueIsGlobal(self):
        """
        getTorqueIsGlobal(TorqueActuator self) -> bool

        Parameters:
            self: OpenSim::TorqueActuator const *

        """
        return _opensim.TorqueActuator_getTorqueIsGlobal(self)


    def setOptimalForce(self, optimalForce):
        """
        setOptimalForce(TorqueActuator self, double optimalForce)

        Parameters:
            optimalForce: double

        """
        return _opensim.TorqueActuator_setOptimalForce(self, optimalForce)


    def getOptimalForce(self):
        """
        getOptimalForce(TorqueActuator self) -> double

        Parameters:
            self: OpenSim::TorqueActuator const *

        """
        return _opensim.TorqueActuator_getOptimalForce(self)


    def setBodyA(self, body):
        """
        setBodyA(TorqueActuator self, Body body)

        Parameters:
            body: OpenSim::Body const &

        """
        return _opensim.TorqueActuator_setBodyA(self, body)


    def setBodyB(self, body):
        """
        setBodyB(TorqueActuator self, Body body)

        Parameters:
            body: OpenSim::Body const &

        """
        return _opensim.TorqueActuator_setBodyB(self, body)


    def getBodyA(self):
        """
        getBodyA(TorqueActuator self) -> Body

        Parameters:
            self: OpenSim::TorqueActuator const *

        """
        return _opensim.TorqueActuator_getBodyA(self)


    def getBodyB(self):
        """
        getBodyB(TorqueActuator self) -> Body

        Parameters:
            self: OpenSim::TorqueActuator const *

        """
        return _opensim.TorqueActuator_getBodyB(self)

    __swig_destroy__ = _opensim.delete_TorqueActuator
    __del__ = lambda self: None
TorqueActuator_swigregister = _opensim.TorqueActuator_swigregister
TorqueActuator_swigregister(TorqueActuator)

def TorqueActuator_safeDownCast(obj):
    """
    TorqueActuator_safeDownCast(OpenSimObject obj) -> TorqueActuator

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.TorqueActuator_safeDownCast(obj)

def TorqueActuator_getClassName():
    """TorqueActuator_getClassName() -> std::string const &"""
    return _opensim.TorqueActuator_getClassName()

class PointToPointActuator(Actuator):
    """Proxy of C++ OpenSim::PointToPointActuator class"""
    __swig_setmethods__ = {}
    for _s in [Actuator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointToPointActuator, name, value)
    __swig_getmethods__ = {}
    for _s in [Actuator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointToPointActuator, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PointToPointActuator

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.PointToPointActuator_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(PointToPointActuator self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.PointToPointActuator_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.PointToPointActuator_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(PointToPointActuator self) -> PointToPointActuator

        Parameters:
            self: OpenSim::PointToPointActuator const *

        """
        return _opensim.PointToPointActuator_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PointToPointActuator self) -> std::string const &

        Parameters:
            self: OpenSim::PointToPointActuator const *

        """
        return _opensim.PointToPointActuator_getConcreteClassName(self)


    def copyProperty_bodyA(self, source):
        """
        copyProperty_bodyA(PointToPointActuator self, PointToPointActuator source)

        Parameters:
            source: OpenSim::PointToPointActuator::Self const &

        """
        return _opensim.PointToPointActuator_copyProperty_bodyA(self, source)


    def append_bodyA(self, value):
        """
        append_bodyA(PointToPointActuator self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.PointToPointActuator_append_bodyA(self, value)


    def constructProperty_bodyA(self, *args):
        """
        constructProperty_bodyA(PointToPointActuator self)
        constructProperty_bodyA(PointToPointActuator self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.PointToPointActuator_constructProperty_bodyA(self, *args)


    def get_bodyA(self, *args):
        """
        get_bodyA(PointToPointActuator self, int i) -> std::string const

        Parameters:
            i: int

        get_bodyA(PointToPointActuator self) -> std::string const &

        Parameters:
            self: OpenSim::PointToPointActuator const *

        """
        return _opensim.PointToPointActuator_get_bodyA(self, *args)


    def upd_bodyA(self, *args):
        """
        upd_bodyA(PointToPointActuator self, int i) -> std::string

        Parameters:
            i: int

        upd_bodyA(PointToPointActuator self) -> std::string &

        Parameters:
            self: OpenSim::PointToPointActuator *

        """
        return _opensim.PointToPointActuator_upd_bodyA(self, *args)


    def set_bodyA(self, *args):
        """
        set_bodyA(PointToPointActuator self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_bodyA(PointToPointActuator self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.PointToPointActuator_set_bodyA(self, *args)


    def copyProperty_bodyB(self, source):
        """
        copyProperty_bodyB(PointToPointActuator self, PointToPointActuator source)

        Parameters:
            source: OpenSim::PointToPointActuator::Self const &

        """
        return _opensim.PointToPointActuator_copyProperty_bodyB(self, source)


    def append_bodyB(self, value):
        """
        append_bodyB(PointToPointActuator self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.PointToPointActuator_append_bodyB(self, value)


    def constructProperty_bodyB(self, *args):
        """
        constructProperty_bodyB(PointToPointActuator self)
        constructProperty_bodyB(PointToPointActuator self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.PointToPointActuator_constructProperty_bodyB(self, *args)


    def get_bodyB(self, *args):
        """
        get_bodyB(PointToPointActuator self, int i) -> std::string const

        Parameters:
            i: int

        get_bodyB(PointToPointActuator self) -> std::string const &

        Parameters:
            self: OpenSim::PointToPointActuator const *

        """
        return _opensim.PointToPointActuator_get_bodyB(self, *args)


    def upd_bodyB(self, *args):
        """
        upd_bodyB(PointToPointActuator self, int i) -> std::string

        Parameters:
            i: int

        upd_bodyB(PointToPointActuator self) -> std::string &

        Parameters:
            self: OpenSim::PointToPointActuator *

        """
        return _opensim.PointToPointActuator_upd_bodyB(self, *args)


    def set_bodyB(self, *args):
        """
        set_bodyB(PointToPointActuator self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_bodyB(PointToPointActuator self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.PointToPointActuator_set_bodyB(self, *args)


    def copyProperty_points_are_global(self, source):
        """
        copyProperty_points_are_global(PointToPointActuator self, PointToPointActuator source)

        Parameters:
            source: OpenSim::PointToPointActuator::Self const &

        """
        return _opensim.PointToPointActuator_copyProperty_points_are_global(self, source)


    def append_points_are_global(self, value):
        """
        append_points_are_global(PointToPointActuator self, bool const & value) -> int

        Parameters:
            value: bool const &

        """
        return _opensim.PointToPointActuator_append_points_are_global(self, value)


    def constructProperty_points_are_global(self, initValue):
        """
        constructProperty_points_are_global(PointToPointActuator self, bool const & initValue)

        Parameters:
            initValue: bool const &

        """
        return _opensim.PointToPointActuator_constructProperty_points_are_global(self, initValue)


    def get_points_are_global(self, *args):
        """
        get_points_are_global(PointToPointActuator self, int i) -> bool const

        Parameters:
            i: int

        get_points_are_global(PointToPointActuator self) -> bool const &

        Parameters:
            self: OpenSim::PointToPointActuator const *

        """
        return _opensim.PointToPointActuator_get_points_are_global(self, *args)


    def upd_points_are_global(self, *args):
        """
        upd_points_are_global(PointToPointActuator self, int i) -> bool

        Parameters:
            i: int

        upd_points_are_global(PointToPointActuator self) -> bool &

        Parameters:
            self: OpenSim::PointToPointActuator *

        """
        return _opensim.PointToPointActuator_upd_points_are_global(self, *args)


    def set_points_are_global(self, *args):
        """
        set_points_are_global(PointToPointActuator self, int i, bool const & value)

        Parameters:
            i: int
            value: bool const &

        set_points_are_global(PointToPointActuator self, bool const & value)

        Parameters:
            value: bool const &

        """
        return _opensim.PointToPointActuator_set_points_are_global(self, *args)


    def copyProperty_pointA(self, source):
        """
        copyProperty_pointA(PointToPointActuator self, PointToPointActuator source)

        Parameters:
            source: OpenSim::PointToPointActuator::Self const &

        """
        return _opensim.PointToPointActuator_copyProperty_pointA(self, source)


    def append_pointA(self, value):
        """
        append_pointA(PointToPointActuator self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.PointToPointActuator_append_pointA(self, value)


    def constructProperty_pointA(self, initValue):
        """
        constructProperty_pointA(PointToPointActuator self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.PointToPointActuator_constructProperty_pointA(self, initValue)


    def get_pointA(self, *args):
        """
        get_pointA(PointToPointActuator self, int i) -> Vec3

        Parameters:
            i: int

        get_pointA(PointToPointActuator self) -> Vec3

        Parameters:
            self: OpenSim::PointToPointActuator const *

        """
        return _opensim.PointToPointActuator_get_pointA(self, *args)


    def upd_pointA(self, *args):
        """
        upd_pointA(PointToPointActuator self, int i) -> Vec3

        Parameters:
            i: int

        upd_pointA(PointToPointActuator self) -> Vec3

        Parameters:
            self: OpenSim::PointToPointActuator *

        """
        return _opensim.PointToPointActuator_upd_pointA(self, *args)


    def set_pointA(self, *args):
        """
        set_pointA(PointToPointActuator self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_pointA(PointToPointActuator self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.PointToPointActuator_set_pointA(self, *args)


    def copyProperty_pointB(self, source):
        """
        copyProperty_pointB(PointToPointActuator self, PointToPointActuator source)

        Parameters:
            source: OpenSim::PointToPointActuator::Self const &

        """
        return _opensim.PointToPointActuator_copyProperty_pointB(self, source)


    def append_pointB(self, value):
        """
        append_pointB(PointToPointActuator self, Vec3 value) -> int

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.PointToPointActuator_append_pointB(self, value)


    def constructProperty_pointB(self, initValue):
        """
        constructProperty_pointB(PointToPointActuator self, Vec3 initValue)

        Parameters:
            initValue: SimTK::Vec3 const &

        """
        return _opensim.PointToPointActuator_constructProperty_pointB(self, initValue)


    def get_pointB(self, *args):
        """
        get_pointB(PointToPointActuator self, int i) -> Vec3

        Parameters:
            i: int

        get_pointB(PointToPointActuator self) -> Vec3

        Parameters:
            self: OpenSim::PointToPointActuator const *

        """
        return _opensim.PointToPointActuator_get_pointB(self, *args)


    def upd_pointB(self, *args):
        """
        upd_pointB(PointToPointActuator self, int i) -> Vec3

        Parameters:
            i: int

        upd_pointB(PointToPointActuator self) -> Vec3

        Parameters:
            self: OpenSim::PointToPointActuator *

        """
        return _opensim.PointToPointActuator_upd_pointB(self, *args)


    def set_pointB(self, *args):
        """
        set_pointB(PointToPointActuator self, int i, Vec3 value)

        Parameters:
            i: int
            value: SimTK::Vec3 const &

        set_pointB(PointToPointActuator self, Vec3 value)

        Parameters:
            value: SimTK::Vec3 const &

        """
        return _opensim.PointToPointActuator_set_pointB(self, *args)


    def copyProperty_optimal_force(self, source):
        """
        copyProperty_optimal_force(PointToPointActuator self, PointToPointActuator source)

        Parameters:
            source: OpenSim::PointToPointActuator::Self const &

        """
        return _opensim.PointToPointActuator_copyProperty_optimal_force(self, source)


    def append_optimal_force(self, value):
        """
        append_optimal_force(PointToPointActuator self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.PointToPointActuator_append_optimal_force(self, value)


    def constructProperty_optimal_force(self, initValue):
        """
        constructProperty_optimal_force(PointToPointActuator self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.PointToPointActuator_constructProperty_optimal_force(self, initValue)


    def get_optimal_force(self, *args):
        """
        get_optimal_force(PointToPointActuator self, int i) -> double const

        Parameters:
            i: int

        get_optimal_force(PointToPointActuator self) -> double const &

        Parameters:
            self: OpenSim::PointToPointActuator const *

        """
        return _opensim.PointToPointActuator_get_optimal_force(self, *args)


    def upd_optimal_force(self, *args):
        """
        upd_optimal_force(PointToPointActuator self, int i) -> double

        Parameters:
            i: int

        upd_optimal_force(PointToPointActuator self) -> double &

        Parameters:
            self: OpenSim::PointToPointActuator *

        """
        return _opensim.PointToPointActuator_upd_optimal_force(self, *args)


    def set_optimal_force(self, *args):
        """
        set_optimal_force(PointToPointActuator self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_optimal_force(PointToPointActuator self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.PointToPointActuator_set_optimal_force(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::PointToPointActuator self) -> PointToPointActuator
        __init__(OpenSim::PointToPointActuator self, std::string const & bodyNameA, std::string const & bodyNameB) -> PointToPointActuator

        Parameters:
            bodyNameA: std::string const &
            bodyNameB: std::string const &

        """
        this = _opensim.new_PointToPointActuator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setPointA(self, pointAPos):
        """
        setPointA(PointToPointActuator self, Vec3 pointAPos)

        Parameters:
            pointAPos: SimTK::Vec3 const &

        """
        return _opensim.PointToPointActuator_setPointA(self, pointAPos)


    def getPointA(self):
        """
        getPointA(PointToPointActuator self) -> Vec3

        Parameters:
            self: OpenSim::PointToPointActuator const *

        """
        return _opensim.PointToPointActuator_getPointA(self)


    def setPointB(self, pointBPos):
        """
        setPointB(PointToPointActuator self, Vec3 pointBPos)

        Parameters:
            pointBPos: SimTK::Vec3 const &

        """
        return _opensim.PointToPointActuator_setPointB(self, pointBPos)


    def getPointB(self):
        """
        getPointB(PointToPointActuator self) -> Vec3

        Parameters:
            self: OpenSim::PointToPointActuator const *

        """
        return _opensim.PointToPointActuator_getPointB(self)


    def setPointsAreGlobal(self, isGlobal):
        """
        setPointsAreGlobal(PointToPointActuator self, bool isGlobal)

        Parameters:
            isGlobal: bool

        """
        return _opensim.PointToPointActuator_setPointsAreGlobal(self, isGlobal)


    def getPointsAreGlobal(self):
        """
        getPointsAreGlobal(PointToPointActuator self) -> bool

        Parameters:
            self: OpenSim::PointToPointActuator const *

        """
        return _opensim.PointToPointActuator_getPointsAreGlobal(self)


    def setOptimalForce(self, optimalForce):
        """
        setOptimalForce(PointToPointActuator self, double optimalForce)

        Parameters:
            optimalForce: double

        """
        return _opensim.PointToPointActuator_setOptimalForce(self, optimalForce)


    def getOptimalForce(self):
        """
        getOptimalForce(PointToPointActuator self) -> double

        Parameters:
            self: OpenSim::PointToPointActuator const *

        """
        return _opensim.PointToPointActuator_getOptimalForce(self)

    __swig_destroy__ = _opensim.delete_PointToPointActuator
    __del__ = lambda self: None
PointToPointActuator_swigregister = _opensim.PointToPointActuator_swigregister
PointToPointActuator_swigregister(PointToPointActuator)

def PointToPointActuator_safeDownCast(obj):
    """
    PointToPointActuator_safeDownCast(OpenSimObject obj) -> PointToPointActuator

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.PointToPointActuator_safeDownCast(obj)

def PointToPointActuator_getClassName():
    """PointToPointActuator_getClassName() -> std::string const &"""
    return _opensim.PointToPointActuator_getClassName()

class ClutchedPathSpring(PathActuator):
    """Proxy of C++ OpenSim::ClutchedPathSpring class"""
    __swig_setmethods__ = {}
    for _s in [PathActuator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClutchedPathSpring, name, value)
    __swig_getmethods__ = {}
    for _s in [PathActuator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClutchedPathSpring, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ClutchedPathSpring

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ClutchedPathSpring_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ClutchedPathSpring self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ClutchedPathSpring_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ClutchedPathSpring_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ClutchedPathSpring self) -> ClutchedPathSpring

        Parameters:
            self: OpenSim::ClutchedPathSpring const *

        """
        return _opensim.ClutchedPathSpring_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ClutchedPathSpring self) -> std::string const &

        Parameters:
            self: OpenSim::ClutchedPathSpring const *

        """
        return _opensim.ClutchedPathSpring_getConcreteClassName(self)


    def copyProperty_stiffness(self, source):
        """
        copyProperty_stiffness(ClutchedPathSpring self, ClutchedPathSpring source)

        Parameters:
            source: OpenSim::ClutchedPathSpring::Self const &

        """
        return _opensim.ClutchedPathSpring_copyProperty_stiffness(self, source)


    def append_stiffness(self, value):
        """
        append_stiffness(ClutchedPathSpring self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ClutchedPathSpring_append_stiffness(self, value)


    def constructProperty_stiffness(self, initValue):
        """
        constructProperty_stiffness(ClutchedPathSpring self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ClutchedPathSpring_constructProperty_stiffness(self, initValue)


    def get_stiffness(self, *args):
        """
        get_stiffness(ClutchedPathSpring self, int i) -> double const

        Parameters:
            i: int

        get_stiffness(ClutchedPathSpring self) -> double const &

        Parameters:
            self: OpenSim::ClutchedPathSpring const *

        """
        return _opensim.ClutchedPathSpring_get_stiffness(self, *args)


    def upd_stiffness(self, *args):
        """
        upd_stiffness(ClutchedPathSpring self, int i) -> double

        Parameters:
            i: int

        upd_stiffness(ClutchedPathSpring self) -> double &

        Parameters:
            self: OpenSim::ClutchedPathSpring *

        """
        return _opensim.ClutchedPathSpring_upd_stiffness(self, *args)


    def set_stiffness(self, *args):
        """
        set_stiffness(ClutchedPathSpring self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_stiffness(ClutchedPathSpring self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ClutchedPathSpring_set_stiffness(self, *args)


    def copyProperty_dissipation(self, source):
        """
        copyProperty_dissipation(ClutchedPathSpring self, ClutchedPathSpring source)

        Parameters:
            source: OpenSim::ClutchedPathSpring::Self const &

        """
        return _opensim.ClutchedPathSpring_copyProperty_dissipation(self, source)


    def append_dissipation(self, value):
        """
        append_dissipation(ClutchedPathSpring self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ClutchedPathSpring_append_dissipation(self, value)


    def constructProperty_dissipation(self, initValue):
        """
        constructProperty_dissipation(ClutchedPathSpring self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ClutchedPathSpring_constructProperty_dissipation(self, initValue)


    def get_dissipation(self, *args):
        """
        get_dissipation(ClutchedPathSpring self, int i) -> double const

        Parameters:
            i: int

        get_dissipation(ClutchedPathSpring self) -> double const &

        Parameters:
            self: OpenSim::ClutchedPathSpring const *

        """
        return _opensim.ClutchedPathSpring_get_dissipation(self, *args)


    def upd_dissipation(self, *args):
        """
        upd_dissipation(ClutchedPathSpring self, int i) -> double

        Parameters:
            i: int

        upd_dissipation(ClutchedPathSpring self) -> double &

        Parameters:
            self: OpenSim::ClutchedPathSpring *

        """
        return _opensim.ClutchedPathSpring_upd_dissipation(self, *args)


    def set_dissipation(self, *args):
        """
        set_dissipation(ClutchedPathSpring self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_dissipation(ClutchedPathSpring self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ClutchedPathSpring_set_dissipation(self, *args)


    def copyProperty_relaxation_time_constant(self, source):
        """
        copyProperty_relaxation_time_constant(ClutchedPathSpring self, ClutchedPathSpring source)

        Parameters:
            source: OpenSim::ClutchedPathSpring::Self const &

        """
        return _opensim.ClutchedPathSpring_copyProperty_relaxation_time_constant(self, source)


    def append_relaxation_time_constant(self, value):
        """
        append_relaxation_time_constant(ClutchedPathSpring self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ClutchedPathSpring_append_relaxation_time_constant(self, value)


    def constructProperty_relaxation_time_constant(self, initValue):
        """
        constructProperty_relaxation_time_constant(ClutchedPathSpring self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ClutchedPathSpring_constructProperty_relaxation_time_constant(self, initValue)


    def get_relaxation_time_constant(self, *args):
        """
        get_relaxation_time_constant(ClutchedPathSpring self, int i) -> double const

        Parameters:
            i: int

        get_relaxation_time_constant(ClutchedPathSpring self) -> double const &

        Parameters:
            self: OpenSim::ClutchedPathSpring const *

        """
        return _opensim.ClutchedPathSpring_get_relaxation_time_constant(self, *args)


    def upd_relaxation_time_constant(self, *args):
        """
        upd_relaxation_time_constant(ClutchedPathSpring self, int i) -> double

        Parameters:
            i: int

        upd_relaxation_time_constant(ClutchedPathSpring self) -> double &

        Parameters:
            self: OpenSim::ClutchedPathSpring *

        """
        return _opensim.ClutchedPathSpring_upd_relaxation_time_constant(self, *args)


    def set_relaxation_time_constant(self, *args):
        """
        set_relaxation_time_constant(ClutchedPathSpring self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_relaxation_time_constant(ClutchedPathSpring self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ClutchedPathSpring_set_relaxation_time_constant(self, *args)


    def copyProperty_initial_stretch(self, source):
        """
        copyProperty_initial_stretch(ClutchedPathSpring self, ClutchedPathSpring source)

        Parameters:
            source: OpenSim::ClutchedPathSpring::Self const &

        """
        return _opensim.ClutchedPathSpring_copyProperty_initial_stretch(self, source)


    def append_initial_stretch(self, value):
        """
        append_initial_stretch(ClutchedPathSpring self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ClutchedPathSpring_append_initial_stretch(self, value)


    def constructProperty_initial_stretch(self, initValue):
        """
        constructProperty_initial_stretch(ClutchedPathSpring self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ClutchedPathSpring_constructProperty_initial_stretch(self, initValue)


    def get_initial_stretch(self, *args):
        """
        get_initial_stretch(ClutchedPathSpring self, int i) -> double const

        Parameters:
            i: int

        get_initial_stretch(ClutchedPathSpring self) -> double const &

        Parameters:
            self: OpenSim::ClutchedPathSpring const *

        """
        return _opensim.ClutchedPathSpring_get_initial_stretch(self, *args)


    def upd_initial_stretch(self, *args):
        """
        upd_initial_stretch(ClutchedPathSpring self, int i) -> double

        Parameters:
            i: int

        upd_initial_stretch(ClutchedPathSpring self) -> double &

        Parameters:
            self: OpenSim::ClutchedPathSpring *

        """
        return _opensim.ClutchedPathSpring_upd_initial_stretch(self, *args)


    def set_initial_stretch(self, *args):
        """
        set_initial_stretch(ClutchedPathSpring self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_initial_stretch(ClutchedPathSpring self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ClutchedPathSpring_set_initial_stretch(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ClutchedPathSpring self) -> ClutchedPathSpring
        __init__(OpenSim::ClutchedPathSpring self, std::string const & name, double stiffness, double dissipation, double relaxationTau, double stretch0=0.0) -> ClutchedPathSpring

        Parameters:
            name: std::string const &
            stiffness: double
            dissipation: double
            relaxationTau: double
            stretch0: double

        __init__(OpenSim::ClutchedPathSpring self, std::string const & name, double stiffness, double dissipation, double relaxationTau) -> ClutchedPathSpring

        Parameters:
            name: std::string const &
            stiffness: double
            dissipation: double
            relaxationTau: double

        """
        this = _opensim.new_ClutchedPathSpring(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getStiffness(self):
        """
        getStiffness(ClutchedPathSpring self) -> double

        Parameters:
            self: OpenSim::ClutchedPathSpring const *

        """
        return _opensim.ClutchedPathSpring_getStiffness(self)


    def setStiffness(self, stiffness):
        """
        setStiffness(ClutchedPathSpring self, double stiffness)

        Parameters:
            stiffness: double

        """
        return _opensim.ClutchedPathSpring_setStiffness(self, stiffness)


    def getDissipation(self):
        """
        getDissipation(ClutchedPathSpring self) -> double

        Parameters:
            self: OpenSim::ClutchedPathSpring const *

        """
        return _opensim.ClutchedPathSpring_getDissipation(self)


    def setDissipation(self, dissipation):
        """
        setDissipation(ClutchedPathSpring self, double dissipation)

        Parameters:
            dissipation: double

        """
        return _opensim.ClutchedPathSpring_setDissipation(self, dissipation)


    def getInitialStretch(self):
        """
        getInitialStretch(ClutchedPathSpring self) -> double

        Parameters:
            self: OpenSim::ClutchedPathSpring *

        """
        return _opensim.ClutchedPathSpring_getInitialStretch(self)


    def setInitialStretch(self, stretch0):
        """
        setInitialStretch(ClutchedPathSpring self, double stretch0)

        Parameters:
            stretch0: double

        """
        return _opensim.ClutchedPathSpring_setInitialStretch(self, stretch0)


    def getStretch(self, s):
        """
        getStretch(ClutchedPathSpring self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.ClutchedPathSpring_getStretch(self, s)


    def getTension(self, s):
        """
        getTension(ClutchedPathSpring self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.ClutchedPathSpring_getTension(self, s)

    __swig_destroy__ = _opensim.delete_ClutchedPathSpring
    __del__ = lambda self: None
ClutchedPathSpring_swigregister = _opensim.ClutchedPathSpring_swigregister
ClutchedPathSpring_swigregister(ClutchedPathSpring)

def ClutchedPathSpring_safeDownCast(obj):
    """
    ClutchedPathSpring_safeDownCast(OpenSimObject obj) -> ClutchedPathSpring

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ClutchedPathSpring_safeDownCast(obj)

def ClutchedPathSpring_getClassName():
    """ClutchedPathSpring_getClassName() -> std::string const &"""
    return _opensim.ClutchedPathSpring_getClassName()

class SpringGeneralizedForce(Force):
    """Proxy of C++ OpenSim::SpringGeneralizedForce class"""
    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpringGeneralizedForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpringGeneralizedForce, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SpringGeneralizedForce

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SpringGeneralizedForce_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SpringGeneralizedForce self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SpringGeneralizedForce_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SpringGeneralizedForce_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SpringGeneralizedForce self) -> SpringGeneralizedForce

        Parameters:
            self: OpenSim::SpringGeneralizedForce const *

        """
        return _opensim.SpringGeneralizedForce_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SpringGeneralizedForce self) -> std::string const &

        Parameters:
            self: OpenSim::SpringGeneralizedForce const *

        """
        return _opensim.SpringGeneralizedForce_getConcreteClassName(self)


    def copyProperty_coordinate(self, source):
        """
        copyProperty_coordinate(SpringGeneralizedForce self, SpringGeneralizedForce source)

        Parameters:
            source: OpenSim::SpringGeneralizedForce::Self const &

        """
        return _opensim.SpringGeneralizedForce_copyProperty_coordinate(self, source)


    def append_coordinate(self, value):
        """
        append_coordinate(SpringGeneralizedForce self, std::string const & value) -> int

        Parameters:
            value: std::string const &

        """
        return _opensim.SpringGeneralizedForce_append_coordinate(self, value)


    def constructProperty_coordinate(self, *args):
        """
        constructProperty_coordinate(SpringGeneralizedForce self)
        constructProperty_coordinate(SpringGeneralizedForce self, std::string const & initValue)

        Parameters:
            initValue: std::string const &

        """
        return _opensim.SpringGeneralizedForce_constructProperty_coordinate(self, *args)


    def get_coordinate(self, *args):
        """
        get_coordinate(SpringGeneralizedForce self, int i) -> std::string const

        Parameters:
            i: int

        get_coordinate(SpringGeneralizedForce self) -> std::string const &

        Parameters:
            self: OpenSim::SpringGeneralizedForce const *

        """
        return _opensim.SpringGeneralizedForce_get_coordinate(self, *args)


    def upd_coordinate(self, *args):
        """
        upd_coordinate(SpringGeneralizedForce self, int i) -> std::string

        Parameters:
            i: int

        upd_coordinate(SpringGeneralizedForce self) -> std::string &

        Parameters:
            self: OpenSim::SpringGeneralizedForce *

        """
        return _opensim.SpringGeneralizedForce_upd_coordinate(self, *args)


    def set_coordinate(self, *args):
        """
        set_coordinate(SpringGeneralizedForce self, int i, std::string const & value)

        Parameters:
            i: int
            value: std::string const &

        set_coordinate(SpringGeneralizedForce self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _opensim.SpringGeneralizedForce_set_coordinate(self, *args)


    def copyProperty_stiffness(self, source):
        """
        copyProperty_stiffness(SpringGeneralizedForce self, SpringGeneralizedForce source)

        Parameters:
            source: OpenSim::SpringGeneralizedForce::Self const &

        """
        return _opensim.SpringGeneralizedForce_copyProperty_stiffness(self, source)


    def append_stiffness(self, value):
        """
        append_stiffness(SpringGeneralizedForce self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.SpringGeneralizedForce_append_stiffness(self, value)


    def constructProperty_stiffness(self, initValue):
        """
        constructProperty_stiffness(SpringGeneralizedForce self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.SpringGeneralizedForce_constructProperty_stiffness(self, initValue)


    def get_stiffness(self, *args):
        """
        get_stiffness(SpringGeneralizedForce self, int i) -> double const

        Parameters:
            i: int

        get_stiffness(SpringGeneralizedForce self) -> double const &

        Parameters:
            self: OpenSim::SpringGeneralizedForce const *

        """
        return _opensim.SpringGeneralizedForce_get_stiffness(self, *args)


    def upd_stiffness(self, *args):
        """
        upd_stiffness(SpringGeneralizedForce self, int i) -> double

        Parameters:
            i: int

        upd_stiffness(SpringGeneralizedForce self) -> double &

        Parameters:
            self: OpenSim::SpringGeneralizedForce *

        """
        return _opensim.SpringGeneralizedForce_upd_stiffness(self, *args)


    def set_stiffness(self, *args):
        """
        set_stiffness(SpringGeneralizedForce self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_stiffness(SpringGeneralizedForce self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.SpringGeneralizedForce_set_stiffness(self, *args)


    def copyProperty_rest_length(self, source):
        """
        copyProperty_rest_length(SpringGeneralizedForce self, SpringGeneralizedForce source)

        Parameters:
            source: OpenSim::SpringGeneralizedForce::Self const &

        """
        return _opensim.SpringGeneralizedForce_copyProperty_rest_length(self, source)


    def append_rest_length(self, value):
        """
        append_rest_length(SpringGeneralizedForce self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.SpringGeneralizedForce_append_rest_length(self, value)


    def constructProperty_rest_length(self, initValue):
        """
        constructProperty_rest_length(SpringGeneralizedForce self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.SpringGeneralizedForce_constructProperty_rest_length(self, initValue)


    def get_rest_length(self, *args):
        """
        get_rest_length(SpringGeneralizedForce self, int i) -> double const

        Parameters:
            i: int

        get_rest_length(SpringGeneralizedForce self) -> double const &

        Parameters:
            self: OpenSim::SpringGeneralizedForce const *

        """
        return _opensim.SpringGeneralizedForce_get_rest_length(self, *args)


    def upd_rest_length(self, *args):
        """
        upd_rest_length(SpringGeneralizedForce self, int i) -> double

        Parameters:
            i: int

        upd_rest_length(SpringGeneralizedForce self) -> double &

        Parameters:
            self: OpenSim::SpringGeneralizedForce *

        """
        return _opensim.SpringGeneralizedForce_upd_rest_length(self, *args)


    def set_rest_length(self, *args):
        """
        set_rest_length(SpringGeneralizedForce self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_rest_length(SpringGeneralizedForce self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.SpringGeneralizedForce_set_rest_length(self, *args)


    def copyProperty_viscosity(self, source):
        """
        copyProperty_viscosity(SpringGeneralizedForce self, SpringGeneralizedForce source)

        Parameters:
            source: OpenSim::SpringGeneralizedForce::Self const &

        """
        return _opensim.SpringGeneralizedForce_copyProperty_viscosity(self, source)


    def append_viscosity(self, value):
        """
        append_viscosity(SpringGeneralizedForce self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.SpringGeneralizedForce_append_viscosity(self, value)


    def constructProperty_viscosity(self, initValue):
        """
        constructProperty_viscosity(SpringGeneralizedForce self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.SpringGeneralizedForce_constructProperty_viscosity(self, initValue)


    def get_viscosity(self, *args):
        """
        get_viscosity(SpringGeneralizedForce self, int i) -> double const

        Parameters:
            i: int

        get_viscosity(SpringGeneralizedForce self) -> double const &

        Parameters:
            self: OpenSim::SpringGeneralizedForce const *

        """
        return _opensim.SpringGeneralizedForce_get_viscosity(self, *args)


    def upd_viscosity(self, *args):
        """
        upd_viscosity(SpringGeneralizedForce self, int i) -> double

        Parameters:
            i: int

        upd_viscosity(SpringGeneralizedForce self) -> double &

        Parameters:
            self: OpenSim::SpringGeneralizedForce *

        """
        return _opensim.SpringGeneralizedForce_upd_viscosity(self, *args)


    def set_viscosity(self, *args):
        """
        set_viscosity(SpringGeneralizedForce self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_viscosity(SpringGeneralizedForce self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.SpringGeneralizedForce_set_viscosity(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::SpringGeneralizedForce self, std::string const & coordinateName) -> SpringGeneralizedForce

        Parameters:
            coordinateName: std::string const &

        __init__(OpenSim::SpringGeneralizedForce self) -> SpringGeneralizedForce
        """
        this = _opensim.new_SpringGeneralizedForce(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setStiffness(self, aStiffness):
        """
        setStiffness(SpringGeneralizedForce self, double aStiffness)

        Parameters:
            aStiffness: double

        """
        return _opensim.SpringGeneralizedForce_setStiffness(self, aStiffness)


    def getStiffness(self):
        """
        getStiffness(SpringGeneralizedForce self) -> double

        Parameters:
            self: OpenSim::SpringGeneralizedForce const *

        """
        return _opensim.SpringGeneralizedForce_getStiffness(self)


    def setRestLength(self, aRestLength):
        """
        setRestLength(SpringGeneralizedForce self, double aRestLength)

        Parameters:
            aRestLength: double

        """
        return _opensim.SpringGeneralizedForce_setRestLength(self, aRestLength)


    def getRestLength(self):
        """
        getRestLength(SpringGeneralizedForce self) -> double

        Parameters:
            self: OpenSim::SpringGeneralizedForce const *

        """
        return _opensim.SpringGeneralizedForce_getRestLength(self)


    def setViscosity(self, aViscosity):
        """
        setViscosity(SpringGeneralizedForce self, double aViscosity)

        Parameters:
            aViscosity: double

        """
        return _opensim.SpringGeneralizedForce_setViscosity(self, aViscosity)


    def getViscosity(self):
        """
        getViscosity(SpringGeneralizedForce self) -> double

        Parameters:
            self: OpenSim::SpringGeneralizedForce const *

        """
        return _opensim.SpringGeneralizedForce_getViscosity(self)


    def getRecordLabels(self):
        """
        getRecordLabels(SpringGeneralizedForce self) -> ArrayStr

        Parameters:
            self: OpenSim::SpringGeneralizedForce const *

        """
        return _opensim.SpringGeneralizedForce_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(SpringGeneralizedForce self, State state) -> ArrayDouble

        Parameters:
            state: SimTK::State const &

        """
        return _opensim.SpringGeneralizedForce_getRecordValues(self, state)

    __swig_destroy__ = _opensim.delete_SpringGeneralizedForce
    __del__ = lambda self: None
SpringGeneralizedForce_swigregister = _opensim.SpringGeneralizedForce_swigregister
SpringGeneralizedForce_swigregister(SpringGeneralizedForce)

def SpringGeneralizedForce_safeDownCast(obj):
    """
    SpringGeneralizedForce_safeDownCast(OpenSimObject obj) -> SpringGeneralizedForce

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SpringGeneralizedForce_safeDownCast(obj)

def SpringGeneralizedForce_getClassName():
    """SpringGeneralizedForce_getClassName() -> std::string const &"""
    return _opensim.SpringGeneralizedForce_getClassName()

class Thelen2003Muscle(ActivationFiberLengthMuscle):
    """Proxy of C++ OpenSim::Thelen2003Muscle class"""
    __swig_setmethods__ = {}
    for _s in [ActivationFiberLengthMuscle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Thelen2003Muscle, name, value)
    __swig_getmethods__ = {}
    for _s in [ActivationFiberLengthMuscle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Thelen2003Muscle, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Thelen2003Muscle

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Thelen2003Muscle_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Thelen2003Muscle self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Thelen2003Muscle_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Thelen2003Muscle_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Thelen2003Muscle self) -> Thelen2003Muscle

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Thelen2003Muscle self) -> std::string const &

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_getConcreteClassName(self)


    def copyProperty_activation_time_constant(self, source):
        """
        copyProperty_activation_time_constant(Thelen2003Muscle self, Thelen2003Muscle source)

        Parameters:
            source: OpenSim::Thelen2003Muscle::Self const &

        """
        return _opensim.Thelen2003Muscle_copyProperty_activation_time_constant(self, source)


    def append_activation_time_constant(self, value):
        """
        append_activation_time_constant(Thelen2003Muscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Thelen2003Muscle_append_activation_time_constant(self, value)


    def constructProperty_activation_time_constant(self, initValue):
        """
        constructProperty_activation_time_constant(Thelen2003Muscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Thelen2003Muscle_constructProperty_activation_time_constant(self, initValue)


    def get_activation_time_constant(self, *args):
        """
        get_activation_time_constant(Thelen2003Muscle self, int i) -> double const

        Parameters:
            i: int

        get_activation_time_constant(Thelen2003Muscle self) -> double const &

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_get_activation_time_constant(self, *args)


    def upd_activation_time_constant(self, *args):
        """
        upd_activation_time_constant(Thelen2003Muscle self, int i) -> double

        Parameters:
            i: int

        upd_activation_time_constant(Thelen2003Muscle self) -> double &

        Parameters:
            self: OpenSim::Thelen2003Muscle *

        """
        return _opensim.Thelen2003Muscle_upd_activation_time_constant(self, *args)


    def set_activation_time_constant(self, *args):
        """
        set_activation_time_constant(Thelen2003Muscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_activation_time_constant(Thelen2003Muscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Thelen2003Muscle_set_activation_time_constant(self, *args)


    def copyProperty_deactivation_time_constant(self, source):
        """
        copyProperty_deactivation_time_constant(Thelen2003Muscle self, Thelen2003Muscle source)

        Parameters:
            source: OpenSim::Thelen2003Muscle::Self const &

        """
        return _opensim.Thelen2003Muscle_copyProperty_deactivation_time_constant(self, source)


    def append_deactivation_time_constant(self, value):
        """
        append_deactivation_time_constant(Thelen2003Muscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Thelen2003Muscle_append_deactivation_time_constant(self, value)


    def constructProperty_deactivation_time_constant(self, initValue):
        """
        constructProperty_deactivation_time_constant(Thelen2003Muscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Thelen2003Muscle_constructProperty_deactivation_time_constant(self, initValue)


    def get_deactivation_time_constant(self, *args):
        """
        get_deactivation_time_constant(Thelen2003Muscle self, int i) -> double const

        Parameters:
            i: int

        get_deactivation_time_constant(Thelen2003Muscle self) -> double const &

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_get_deactivation_time_constant(self, *args)


    def upd_deactivation_time_constant(self, *args):
        """
        upd_deactivation_time_constant(Thelen2003Muscle self, int i) -> double

        Parameters:
            i: int

        upd_deactivation_time_constant(Thelen2003Muscle self) -> double &

        Parameters:
            self: OpenSim::Thelen2003Muscle *

        """
        return _opensim.Thelen2003Muscle_upd_deactivation_time_constant(self, *args)


    def set_deactivation_time_constant(self, *args):
        """
        set_deactivation_time_constant(Thelen2003Muscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_deactivation_time_constant(Thelen2003Muscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Thelen2003Muscle_set_deactivation_time_constant(self, *args)


    def copyProperty_FmaxTendonStrain(self, source):
        """
        copyProperty_FmaxTendonStrain(Thelen2003Muscle self, Thelen2003Muscle source)

        Parameters:
            source: OpenSim::Thelen2003Muscle::Self const &

        """
        return _opensim.Thelen2003Muscle_copyProperty_FmaxTendonStrain(self, source)


    def append_FmaxTendonStrain(self, value):
        """
        append_FmaxTendonStrain(Thelen2003Muscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Thelen2003Muscle_append_FmaxTendonStrain(self, value)


    def constructProperty_FmaxTendonStrain(self, initValue):
        """
        constructProperty_FmaxTendonStrain(Thelen2003Muscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Thelen2003Muscle_constructProperty_FmaxTendonStrain(self, initValue)


    def get_FmaxTendonStrain(self, *args):
        """
        get_FmaxTendonStrain(Thelen2003Muscle self, int i) -> double const

        Parameters:
            i: int

        get_FmaxTendonStrain(Thelen2003Muscle self) -> double const &

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_get_FmaxTendonStrain(self, *args)


    def upd_FmaxTendonStrain(self, *args):
        """
        upd_FmaxTendonStrain(Thelen2003Muscle self, int i) -> double

        Parameters:
            i: int

        upd_FmaxTendonStrain(Thelen2003Muscle self) -> double &

        Parameters:
            self: OpenSim::Thelen2003Muscle *

        """
        return _opensim.Thelen2003Muscle_upd_FmaxTendonStrain(self, *args)


    def set_FmaxTendonStrain(self, *args):
        """
        set_FmaxTendonStrain(Thelen2003Muscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_FmaxTendonStrain(Thelen2003Muscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Thelen2003Muscle_set_FmaxTendonStrain(self, *args)


    def copyProperty_FmaxMuscleStrain(self, source):
        """
        copyProperty_FmaxMuscleStrain(Thelen2003Muscle self, Thelen2003Muscle source)

        Parameters:
            source: OpenSim::Thelen2003Muscle::Self const &

        """
        return _opensim.Thelen2003Muscle_copyProperty_FmaxMuscleStrain(self, source)


    def append_FmaxMuscleStrain(self, value):
        """
        append_FmaxMuscleStrain(Thelen2003Muscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Thelen2003Muscle_append_FmaxMuscleStrain(self, value)


    def constructProperty_FmaxMuscleStrain(self, initValue):
        """
        constructProperty_FmaxMuscleStrain(Thelen2003Muscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Thelen2003Muscle_constructProperty_FmaxMuscleStrain(self, initValue)


    def get_FmaxMuscleStrain(self, *args):
        """
        get_FmaxMuscleStrain(Thelen2003Muscle self, int i) -> double const

        Parameters:
            i: int

        get_FmaxMuscleStrain(Thelen2003Muscle self) -> double const &

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_get_FmaxMuscleStrain(self, *args)


    def upd_FmaxMuscleStrain(self, *args):
        """
        upd_FmaxMuscleStrain(Thelen2003Muscle self, int i) -> double

        Parameters:
            i: int

        upd_FmaxMuscleStrain(Thelen2003Muscle self) -> double &

        Parameters:
            self: OpenSim::Thelen2003Muscle *

        """
        return _opensim.Thelen2003Muscle_upd_FmaxMuscleStrain(self, *args)


    def set_FmaxMuscleStrain(self, *args):
        """
        set_FmaxMuscleStrain(Thelen2003Muscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_FmaxMuscleStrain(Thelen2003Muscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Thelen2003Muscle_set_FmaxMuscleStrain(self, *args)


    def copyProperty_KshapeActive(self, source):
        """
        copyProperty_KshapeActive(Thelen2003Muscle self, Thelen2003Muscle source)

        Parameters:
            source: OpenSim::Thelen2003Muscle::Self const &

        """
        return _opensim.Thelen2003Muscle_copyProperty_KshapeActive(self, source)


    def append_KshapeActive(self, value):
        """
        append_KshapeActive(Thelen2003Muscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Thelen2003Muscle_append_KshapeActive(self, value)


    def constructProperty_KshapeActive(self, initValue):
        """
        constructProperty_KshapeActive(Thelen2003Muscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Thelen2003Muscle_constructProperty_KshapeActive(self, initValue)


    def get_KshapeActive(self, *args):
        """
        get_KshapeActive(Thelen2003Muscle self, int i) -> double const

        Parameters:
            i: int

        get_KshapeActive(Thelen2003Muscle self) -> double const &

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_get_KshapeActive(self, *args)


    def upd_KshapeActive(self, *args):
        """
        upd_KshapeActive(Thelen2003Muscle self, int i) -> double

        Parameters:
            i: int

        upd_KshapeActive(Thelen2003Muscle self) -> double &

        Parameters:
            self: OpenSim::Thelen2003Muscle *

        """
        return _opensim.Thelen2003Muscle_upd_KshapeActive(self, *args)


    def set_KshapeActive(self, *args):
        """
        set_KshapeActive(Thelen2003Muscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_KshapeActive(Thelen2003Muscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Thelen2003Muscle_set_KshapeActive(self, *args)


    def copyProperty_KshapePassive(self, source):
        """
        copyProperty_KshapePassive(Thelen2003Muscle self, Thelen2003Muscle source)

        Parameters:
            source: OpenSim::Thelen2003Muscle::Self const &

        """
        return _opensim.Thelen2003Muscle_copyProperty_KshapePassive(self, source)


    def append_KshapePassive(self, value):
        """
        append_KshapePassive(Thelen2003Muscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Thelen2003Muscle_append_KshapePassive(self, value)


    def constructProperty_KshapePassive(self, initValue):
        """
        constructProperty_KshapePassive(Thelen2003Muscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Thelen2003Muscle_constructProperty_KshapePassive(self, initValue)


    def get_KshapePassive(self, *args):
        """
        get_KshapePassive(Thelen2003Muscle self, int i) -> double const

        Parameters:
            i: int

        get_KshapePassive(Thelen2003Muscle self) -> double const &

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_get_KshapePassive(self, *args)


    def upd_KshapePassive(self, *args):
        """
        upd_KshapePassive(Thelen2003Muscle self, int i) -> double

        Parameters:
            i: int

        upd_KshapePassive(Thelen2003Muscle self) -> double &

        Parameters:
            self: OpenSim::Thelen2003Muscle *

        """
        return _opensim.Thelen2003Muscle_upd_KshapePassive(self, *args)


    def set_KshapePassive(self, *args):
        """
        set_KshapePassive(Thelen2003Muscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_KshapePassive(Thelen2003Muscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Thelen2003Muscle_set_KshapePassive(self, *args)


    def copyProperty_Af(self, source):
        """
        copyProperty_Af(Thelen2003Muscle self, Thelen2003Muscle source)

        Parameters:
            source: OpenSim::Thelen2003Muscle::Self const &

        """
        return _opensim.Thelen2003Muscle_copyProperty_Af(self, source)


    def append_Af(self, value):
        """
        append_Af(Thelen2003Muscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Thelen2003Muscle_append_Af(self, value)


    def constructProperty_Af(self, initValue):
        """
        constructProperty_Af(Thelen2003Muscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Thelen2003Muscle_constructProperty_Af(self, initValue)


    def get_Af(self, *args):
        """
        get_Af(Thelen2003Muscle self, int i) -> double const

        Parameters:
            i: int

        get_Af(Thelen2003Muscle self) -> double const &

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_get_Af(self, *args)


    def upd_Af(self, *args):
        """
        upd_Af(Thelen2003Muscle self, int i) -> double

        Parameters:
            i: int

        upd_Af(Thelen2003Muscle self) -> double &

        Parameters:
            self: OpenSim::Thelen2003Muscle *

        """
        return _opensim.Thelen2003Muscle_upd_Af(self, *args)


    def set_Af(self, *args):
        """
        set_Af(Thelen2003Muscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_Af(Thelen2003Muscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Thelen2003Muscle_set_Af(self, *args)


    def copyProperty_Flen(self, source):
        """
        copyProperty_Flen(Thelen2003Muscle self, Thelen2003Muscle source)

        Parameters:
            source: OpenSim::Thelen2003Muscle::Self const &

        """
        return _opensim.Thelen2003Muscle_copyProperty_Flen(self, source)


    def append_Flen(self, value):
        """
        append_Flen(Thelen2003Muscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Thelen2003Muscle_append_Flen(self, value)


    def constructProperty_Flen(self, initValue):
        """
        constructProperty_Flen(Thelen2003Muscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Thelen2003Muscle_constructProperty_Flen(self, initValue)


    def get_Flen(self, *args):
        """
        get_Flen(Thelen2003Muscle self, int i) -> double const

        Parameters:
            i: int

        get_Flen(Thelen2003Muscle self) -> double const &

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_get_Flen(self, *args)


    def upd_Flen(self, *args):
        """
        upd_Flen(Thelen2003Muscle self, int i) -> double

        Parameters:
            i: int

        upd_Flen(Thelen2003Muscle self) -> double &

        Parameters:
            self: OpenSim::Thelen2003Muscle *

        """
        return _opensim.Thelen2003Muscle_upd_Flen(self, *args)


    def set_Flen(self, *args):
        """
        set_Flen(Thelen2003Muscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_Flen(Thelen2003Muscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Thelen2003Muscle_set_Flen(self, *args)


    def copyProperty_fv_linear_extrap_threshold(self, source):
        """
        copyProperty_fv_linear_extrap_threshold(Thelen2003Muscle self, Thelen2003Muscle source)

        Parameters:
            source: OpenSim::Thelen2003Muscle::Self const &

        """
        return _opensim.Thelen2003Muscle_copyProperty_fv_linear_extrap_threshold(self, source)


    def append_fv_linear_extrap_threshold(self, value):
        """
        append_fv_linear_extrap_threshold(Thelen2003Muscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Thelen2003Muscle_append_fv_linear_extrap_threshold(self, value)


    def constructProperty_fv_linear_extrap_threshold(self, initValue):
        """
        constructProperty_fv_linear_extrap_threshold(Thelen2003Muscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Thelen2003Muscle_constructProperty_fv_linear_extrap_threshold(self, initValue)


    def get_fv_linear_extrap_threshold(self, *args):
        """
        get_fv_linear_extrap_threshold(Thelen2003Muscle self, int i) -> double const

        Parameters:
            i: int

        get_fv_linear_extrap_threshold(Thelen2003Muscle self) -> double const &

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_get_fv_linear_extrap_threshold(self, *args)


    def upd_fv_linear_extrap_threshold(self, *args):
        """
        upd_fv_linear_extrap_threshold(Thelen2003Muscle self, int i) -> double

        Parameters:
            i: int

        upd_fv_linear_extrap_threshold(Thelen2003Muscle self) -> double &

        Parameters:
            self: OpenSim::Thelen2003Muscle *

        """
        return _opensim.Thelen2003Muscle_upd_fv_linear_extrap_threshold(self, *args)


    def set_fv_linear_extrap_threshold(self, *args):
        """
        set_fv_linear_extrap_threshold(Thelen2003Muscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_fv_linear_extrap_threshold(Thelen2003Muscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Thelen2003Muscle_set_fv_linear_extrap_threshold(self, *args)

    FiberActiveForceLength = _opensim.Thelen2003Muscle_FiberActiveForceLength
    FiberPassiveForceLength = _opensim.Thelen2003Muscle_FiberPassiveForceLength
    FiberForceVelocity = _opensim.Thelen2003Muscle_FiberForceVelocity
    TendonForceLength = _opensim.Thelen2003Muscle_TendonForceLength

    def __init__(self, *args):
        """
        __init__(OpenSim::Thelen2003Muscle self) -> Thelen2003Muscle
        __init__(OpenSim::Thelen2003Muscle self, std::string const & aName, double aMaxIsometricForce, double aOptimalFiberLength, double aTendonSlackLength, double aPennationAngle) -> Thelen2003Muscle

        Parameters:
            aName: std::string const &
            aMaxIsometricForce: double
            aOptimalFiberLength: double
            aTendonSlackLength: double
            aPennationAngle: double

        """
        this = _opensim.new_Thelen2003Muscle(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getActivationTimeConstant(self):
        """
        getActivationTimeConstant(Thelen2003Muscle self) -> double

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_getActivationTimeConstant(self)


    def getMinimumActivation(self):
        """
        getMinimumActivation(Thelen2003Muscle self) -> double

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_getMinimumActivation(self)


    def getDeactivationTimeConstant(self):
        """
        getDeactivationTimeConstant(Thelen2003Muscle self) -> double

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_getDeactivationTimeConstant(self)


    def getFmaxTendonStrain(self):
        """
        getFmaxTendonStrain(Thelen2003Muscle self) -> double

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_getFmaxTendonStrain(self)


    def getFmaxMuscleStrain(self):
        """
        getFmaxMuscleStrain(Thelen2003Muscle self) -> double

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_getFmaxMuscleStrain(self)


    def getKshapeActive(self):
        """
        getKshapeActive(Thelen2003Muscle self) -> double

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_getKshapeActive(self)


    def getKshapePassive(self):
        """
        getKshapePassive(Thelen2003Muscle self) -> double

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_getKshapePassive(self)


    def getAf(self):
        """
        getAf(Thelen2003Muscle self) -> double

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_getAf(self)


    def getFlen(self):
        """
        getFlen(Thelen2003Muscle self) -> double

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_getFlen(self)


    def getForceVelocityExtrapolationThreshold(self):
        """
        getForceVelocityExtrapolationThreshold(Thelen2003Muscle self) -> double

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_getForceVelocityExtrapolationThreshold(self)


    def getMinimumFiberLength(self):
        """
        getMinimumFiberLength(Thelen2003Muscle self) -> double

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_getMinimumFiberLength(self)


    def getMaximumPennationAngle(self):
        """
        getMaximumPennationAngle(Thelen2003Muscle self) -> double

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_getMaximumPennationAngle(self)


    def setActivationTimeConstant(self, aActivationTimeConstant):
        """
        setActivationTimeConstant(Thelen2003Muscle self, double aActivationTimeConstant) -> bool

        Parameters:
            aActivationTimeConstant: double

        """
        return _opensim.Thelen2003Muscle_setActivationTimeConstant(self, aActivationTimeConstant)


    def setDeactivationTimeConstant(self, aDeactivationTimeConstant):
        """
        setDeactivationTimeConstant(Thelen2003Muscle self, double aDeactivationTimeConstant) -> bool

        Parameters:
            aDeactivationTimeConstant: double

        """
        return _opensim.Thelen2003Muscle_setDeactivationTimeConstant(self, aDeactivationTimeConstant)


    def setMinimumActivation(self, aActivationMinValue):
        """
        setMinimumActivation(Thelen2003Muscle self, double aActivationMinValue) -> bool

        Parameters:
            aActivationMinValue: double

        """
        return _opensim.Thelen2003Muscle_setMinimumActivation(self, aActivationMinValue)


    def setFmaxTendonStrain(self, aFmaxTendonStrain):
        """
        setFmaxTendonStrain(Thelen2003Muscle self, double aFmaxTendonStrain) -> bool

        Parameters:
            aFmaxTendonStrain: double

        """
        return _opensim.Thelen2003Muscle_setFmaxTendonStrain(self, aFmaxTendonStrain)


    def setFmaxFiberStrain(self, aFmaxMuscleStrain):
        """
        setFmaxFiberStrain(Thelen2003Muscle self, double aFmaxMuscleStrain) -> bool

        Parameters:
            aFmaxMuscleStrain: double

        """
        return _opensim.Thelen2003Muscle_setFmaxFiberStrain(self, aFmaxMuscleStrain)


    def setKshapeActive(self, aKShapeActive):
        """
        setKshapeActive(Thelen2003Muscle self, double aKShapeActive) -> bool

        Parameters:
            aKShapeActive: double

        """
        return _opensim.Thelen2003Muscle_setKshapeActive(self, aKShapeActive)


    def setKshapePassive(self, aKshapePassive):
        """
        setKshapePassive(Thelen2003Muscle self, double aKshapePassive) -> bool

        Parameters:
            aKshapePassive: double

        """
        return _opensim.Thelen2003Muscle_setKshapePassive(self, aKshapePassive)


    def setAf(self, aAf):
        """
        setAf(Thelen2003Muscle self, double aAf) -> bool

        Parameters:
            aAf: double

        """
        return _opensim.Thelen2003Muscle_setAf(self, aAf)


    def setFlen(self, aFlen):
        """
        setFlen(Thelen2003Muscle self, double aFlen) -> bool

        Parameters:
            aFlen: double

        """
        return _opensim.Thelen2003Muscle_setFlen(self, aFlen)


    def setForceVelocityExtrapolationThreshold(self, aFvThresh):
        """
        setForceVelocityExtrapolationThreshold(Thelen2003Muscle self, double aFvThresh) -> bool

        Parameters:
            aFvThresh: double

        """
        return _opensim.Thelen2003Muscle_setForceVelocityExtrapolationThreshold(self, aFvThresh)


    def getActivationModel(self):
        """
        getActivationModel(Thelen2003Muscle self) -> MuscleFirstOrderActivationDynamicModel const &

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_getActivationModel(self)


    def getPennationModel(self):
        """
        getPennationModel(Thelen2003Muscle self) -> MuscleFixedWidthPennationModel const &

        Parameters:
            self: OpenSim::Thelen2003Muscle const *

        """
        return _opensim.Thelen2003Muscle_getPennationModel(self)


    def printCurveToCSVFile(self, ctype, path):
        """
        printCurveToCSVFile(Thelen2003Muscle self, OpenSim::Thelen2003Muscle::CurveType const ctype, std::string const & path)

        Parameters:
            ctype: enum OpenSim::Thelen2003Muscle::CurveType const
            path: std::string const &

        """
        return _opensim.Thelen2003Muscle_printCurveToCSVFile(self, ctype, path)


    def computeActuation(self, s):
        """
        computeActuation(Thelen2003Muscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Thelen2003Muscle_computeActuation(self, s)


    def computeInitialFiberEquilibrium(self, s):
        """
        computeInitialFiberEquilibrium(Thelen2003Muscle self, State s)

        Parameters:
            s: SimTK::State &

        """
        return _opensim.Thelen2003Muscle_computeInitialFiberEquilibrium(self, s)


    def calcActiveFiberForceAlongTendon(self, activation, fiberLength, fiberVelocity):
        """
        calcActiveFiberForceAlongTendon(Thelen2003Muscle self, double activation, double fiberLength, double fiberVelocity) -> double

        Parameters:
            activation: double
            fiberLength: double
            fiberVelocity: double

        """
        return _opensim.Thelen2003Muscle_calcActiveFiberForceAlongTendon(self, activation, fiberLength, fiberVelocity)


    def calcInextensibleTendonActiveFiberForce(self, s, aActivation):
        """
        calcInextensibleTendonActiveFiberForce(Thelen2003Muscle self, State s, double aActivation) -> double

        Parameters:
            s: SimTK::State &
            aActivation: double

        """
        return _opensim.Thelen2003Muscle_calcInextensibleTendonActiveFiberForce(self, s, aActivation)

    __swig_destroy__ = _opensim.delete_Thelen2003Muscle
    __del__ = lambda self: None
Thelen2003Muscle_swigregister = _opensim.Thelen2003Muscle_swigregister
Thelen2003Muscle_swigregister(Thelen2003Muscle)

def Thelen2003Muscle_safeDownCast(obj):
    """
    Thelen2003Muscle_safeDownCast(OpenSimObject obj) -> Thelen2003Muscle

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Thelen2003Muscle_safeDownCast(obj)

def Thelen2003Muscle_getClassName():
    """Thelen2003Muscle_getClassName() -> std::string const &"""
    return _opensim.Thelen2003Muscle_getClassName()

class RigidTendonMuscle(Muscle):
    """Proxy of C++ OpenSim::RigidTendonMuscle class"""
    __swig_setmethods__ = {}
    for _s in [Muscle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RigidTendonMuscle, name, value)
    __swig_getmethods__ = {}
    for _s in [Muscle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RigidTendonMuscle, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> RigidTendonMuscle

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.RigidTendonMuscle_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(RigidTendonMuscle self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.RigidTendonMuscle_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.RigidTendonMuscle_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(RigidTendonMuscle self) -> RigidTendonMuscle

        Parameters:
            self: OpenSim::RigidTendonMuscle const *

        """
        return _opensim.RigidTendonMuscle_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(RigidTendonMuscle self) -> std::string const &

        Parameters:
            self: OpenSim::RigidTendonMuscle const *

        """
        return _opensim.RigidTendonMuscle_getConcreteClassName(self)


    def copyProperty_active_force_length_curve(self, source):
        """
        copyProperty_active_force_length_curve(RigidTendonMuscle self, RigidTendonMuscle source)

        Parameters:
            source: OpenSim::RigidTendonMuscle::Self const &

        """
        return _opensim.RigidTendonMuscle_copyProperty_active_force_length_curve(self, source)


    def append_active_force_length_curve(self, value):
        """
        append_active_force_length_curve(RigidTendonMuscle self, Function value) -> int

        Parameters:
            value: OpenSim::Function const &

        """
        return _opensim.RigidTendonMuscle_append_active_force_length_curve(self, value)


    def constructProperty_active_force_length_curve(self, initValue):
        """
        constructProperty_active_force_length_curve(RigidTendonMuscle self, Function initValue)

        Parameters:
            initValue: OpenSim::Function const &

        """
        return _opensim.RigidTendonMuscle_constructProperty_active_force_length_curve(self, initValue)


    def get_active_force_length_curve(self, *args):
        """
        get_active_force_length_curve(RigidTendonMuscle self, int i) -> Function

        Parameters:
            i: int

        get_active_force_length_curve(RigidTendonMuscle self) -> Function

        Parameters:
            self: OpenSim::RigidTendonMuscle const *

        """
        return _opensim.RigidTendonMuscle_get_active_force_length_curve(self, *args)


    def upd_active_force_length_curve(self, *args):
        """
        upd_active_force_length_curve(RigidTendonMuscle self, int i) -> Function

        Parameters:
            i: int

        upd_active_force_length_curve(RigidTendonMuscle self) -> Function

        Parameters:
            self: OpenSim::RigidTendonMuscle *

        """
        return _opensim.RigidTendonMuscle_upd_active_force_length_curve(self, *args)


    def set_active_force_length_curve(self, *args):
        """
        set_active_force_length_curve(RigidTendonMuscle self, int i, Function value)

        Parameters:
            i: int
            value: OpenSim::Function const &

        set_active_force_length_curve(RigidTendonMuscle self, Function value)

        Parameters:
            value: OpenSim::Function const &

        """
        return _opensim.RigidTendonMuscle_set_active_force_length_curve(self, *args)


    def copyProperty_passive_force_length_curve(self, source):
        """
        copyProperty_passive_force_length_curve(RigidTendonMuscle self, RigidTendonMuscle source)

        Parameters:
            source: OpenSim::RigidTendonMuscle::Self const &

        """
        return _opensim.RigidTendonMuscle_copyProperty_passive_force_length_curve(self, source)


    def append_passive_force_length_curve(self, value):
        """
        append_passive_force_length_curve(RigidTendonMuscle self, Function value) -> int

        Parameters:
            value: OpenSim::Function const &

        """
        return _opensim.RigidTendonMuscle_append_passive_force_length_curve(self, value)


    def constructProperty_passive_force_length_curve(self, initValue):
        """
        constructProperty_passive_force_length_curve(RigidTendonMuscle self, Function initValue)

        Parameters:
            initValue: OpenSim::Function const &

        """
        return _opensim.RigidTendonMuscle_constructProperty_passive_force_length_curve(self, initValue)


    def get_passive_force_length_curve(self, *args):
        """
        get_passive_force_length_curve(RigidTendonMuscle self, int i) -> Function

        Parameters:
            i: int

        get_passive_force_length_curve(RigidTendonMuscle self) -> Function

        Parameters:
            self: OpenSim::RigidTendonMuscle const *

        """
        return _opensim.RigidTendonMuscle_get_passive_force_length_curve(self, *args)


    def upd_passive_force_length_curve(self, *args):
        """
        upd_passive_force_length_curve(RigidTendonMuscle self, int i) -> Function

        Parameters:
            i: int

        upd_passive_force_length_curve(RigidTendonMuscle self) -> Function

        Parameters:
            self: OpenSim::RigidTendonMuscle *

        """
        return _opensim.RigidTendonMuscle_upd_passive_force_length_curve(self, *args)


    def set_passive_force_length_curve(self, *args):
        """
        set_passive_force_length_curve(RigidTendonMuscle self, int i, Function value)

        Parameters:
            i: int
            value: OpenSim::Function const &

        set_passive_force_length_curve(RigidTendonMuscle self, Function value)

        Parameters:
            value: OpenSim::Function const &

        """
        return _opensim.RigidTendonMuscle_set_passive_force_length_curve(self, *args)


    def copyProperty_force_velocity_curve(self, source):
        """
        copyProperty_force_velocity_curve(RigidTendonMuscle self, RigidTendonMuscle source)

        Parameters:
            source: OpenSim::RigidTendonMuscle::Self const &

        """
        return _opensim.RigidTendonMuscle_copyProperty_force_velocity_curve(self, source)


    def append_force_velocity_curve(self, value):
        """
        append_force_velocity_curve(RigidTendonMuscle self, Function value) -> int

        Parameters:
            value: OpenSim::Function const &

        """
        return _opensim.RigidTendonMuscle_append_force_velocity_curve(self, value)


    def constructProperty_force_velocity_curve(self, initValue):
        """
        constructProperty_force_velocity_curve(RigidTendonMuscle self, Function initValue)

        Parameters:
            initValue: OpenSim::Function const &

        """
        return _opensim.RigidTendonMuscle_constructProperty_force_velocity_curve(self, initValue)


    def get_force_velocity_curve(self, *args):
        """
        get_force_velocity_curve(RigidTendonMuscle self, int i) -> Function

        Parameters:
            i: int

        get_force_velocity_curve(RigidTendonMuscle self) -> Function

        Parameters:
            self: OpenSim::RigidTendonMuscle const *

        """
        return _opensim.RigidTendonMuscle_get_force_velocity_curve(self, *args)


    def upd_force_velocity_curve(self, *args):
        """
        upd_force_velocity_curve(RigidTendonMuscle self, int i) -> Function

        Parameters:
            i: int

        upd_force_velocity_curve(RigidTendonMuscle self) -> Function

        Parameters:
            self: OpenSim::RigidTendonMuscle *

        """
        return _opensim.RigidTendonMuscle_upd_force_velocity_curve(self, *args)


    def set_force_velocity_curve(self, *args):
        """
        set_force_velocity_curve(RigidTendonMuscle self, int i, Function value)

        Parameters:
            i: int
            value: OpenSim::Function const &

        set_force_velocity_curve(RigidTendonMuscle self, Function value)

        Parameters:
            value: OpenSim::Function const &

        """
        return _opensim.RigidTendonMuscle_set_force_velocity_curve(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::RigidTendonMuscle self) -> RigidTendonMuscle
        __init__(OpenSim::RigidTendonMuscle self, std::string const & name, double maxIsometricForce, double optimalFiberLength, double tendonSlackLength, double pennationAngle) -> RigidTendonMuscle

        Parameters:
            name: std::string const &
            maxIsometricForce: double
            optimalFiberLength: double
            tendonSlackLength: double
            pennationAngle: double

        """
        this = _opensim.new_RigidTendonMuscle(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setActivation(self, s, activation):
        """
        setActivation(RigidTendonMuscle self, State s, double activation)

        Parameters:
            s: SimTK::State &
            activation: double

        """
        return _opensim.RigidTendonMuscle_setActivation(self, s, activation)

    __swig_destroy__ = _opensim.delete_RigidTendonMuscle
    __del__ = lambda self: None
RigidTendonMuscle_swigregister = _opensim.RigidTendonMuscle_swigregister
RigidTendonMuscle_swigregister(RigidTendonMuscle)

def RigidTendonMuscle_safeDownCast(obj):
    """
    RigidTendonMuscle_safeDownCast(OpenSimObject obj) -> RigidTendonMuscle

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.RigidTendonMuscle_safeDownCast(obj)

def RigidTendonMuscle_getClassName():
    """RigidTendonMuscle_getClassName() -> std::string const &"""
    return _opensim.RigidTendonMuscle_getClassName()

class ActiveForceLengthCurve(Function):
    """Proxy of C++ OpenSim::ActiveForceLengthCurve class"""
    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActiveForceLengthCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ActiveForceLengthCurve, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ActiveForceLengthCurve

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ActiveForceLengthCurve_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ActiveForceLengthCurve self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ActiveForceLengthCurve_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ActiveForceLengthCurve_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ActiveForceLengthCurve self) -> ActiveForceLengthCurve

        Parameters:
            self: OpenSim::ActiveForceLengthCurve const *

        """
        return _opensim.ActiveForceLengthCurve_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ActiveForceLengthCurve self) -> std::string const &

        Parameters:
            self: OpenSim::ActiveForceLengthCurve const *

        """
        return _opensim.ActiveForceLengthCurve_getConcreteClassName(self)


    def copyProperty_min_norm_active_fiber_length(self, source):
        """
        copyProperty_min_norm_active_fiber_length(ActiveForceLengthCurve self, ActiveForceLengthCurve source)

        Parameters:
            source: OpenSim::ActiveForceLengthCurve::Self const &

        """
        return _opensim.ActiveForceLengthCurve_copyProperty_min_norm_active_fiber_length(self, source)


    def append_min_norm_active_fiber_length(self, value):
        """
        append_min_norm_active_fiber_length(ActiveForceLengthCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ActiveForceLengthCurve_append_min_norm_active_fiber_length(self, value)


    def constructProperty_min_norm_active_fiber_length(self, initValue):
        """
        constructProperty_min_norm_active_fiber_length(ActiveForceLengthCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ActiveForceLengthCurve_constructProperty_min_norm_active_fiber_length(self, initValue)


    def get_min_norm_active_fiber_length(self, *args):
        """
        get_min_norm_active_fiber_length(ActiveForceLengthCurve self, int i) -> double const

        Parameters:
            i: int

        get_min_norm_active_fiber_length(ActiveForceLengthCurve self) -> double const &

        Parameters:
            self: OpenSim::ActiveForceLengthCurve const *

        """
        return _opensim.ActiveForceLengthCurve_get_min_norm_active_fiber_length(self, *args)


    def upd_min_norm_active_fiber_length(self, *args):
        """
        upd_min_norm_active_fiber_length(ActiveForceLengthCurve self, int i) -> double

        Parameters:
            i: int

        upd_min_norm_active_fiber_length(ActiveForceLengthCurve self) -> double &

        Parameters:
            self: OpenSim::ActiveForceLengthCurve *

        """
        return _opensim.ActiveForceLengthCurve_upd_min_norm_active_fiber_length(self, *args)


    def set_min_norm_active_fiber_length(self, *args):
        """
        set_min_norm_active_fiber_length(ActiveForceLengthCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_min_norm_active_fiber_length(ActiveForceLengthCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ActiveForceLengthCurve_set_min_norm_active_fiber_length(self, *args)


    def copyProperty_transition_norm_fiber_length(self, source):
        """
        copyProperty_transition_norm_fiber_length(ActiveForceLengthCurve self, ActiveForceLengthCurve source)

        Parameters:
            source: OpenSim::ActiveForceLengthCurve::Self const &

        """
        return _opensim.ActiveForceLengthCurve_copyProperty_transition_norm_fiber_length(self, source)


    def append_transition_norm_fiber_length(self, value):
        """
        append_transition_norm_fiber_length(ActiveForceLengthCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ActiveForceLengthCurve_append_transition_norm_fiber_length(self, value)


    def constructProperty_transition_norm_fiber_length(self, initValue):
        """
        constructProperty_transition_norm_fiber_length(ActiveForceLengthCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ActiveForceLengthCurve_constructProperty_transition_norm_fiber_length(self, initValue)


    def get_transition_norm_fiber_length(self, *args):
        """
        get_transition_norm_fiber_length(ActiveForceLengthCurve self, int i) -> double const

        Parameters:
            i: int

        get_transition_norm_fiber_length(ActiveForceLengthCurve self) -> double const &

        Parameters:
            self: OpenSim::ActiveForceLengthCurve const *

        """
        return _opensim.ActiveForceLengthCurve_get_transition_norm_fiber_length(self, *args)


    def upd_transition_norm_fiber_length(self, *args):
        """
        upd_transition_norm_fiber_length(ActiveForceLengthCurve self, int i) -> double

        Parameters:
            i: int

        upd_transition_norm_fiber_length(ActiveForceLengthCurve self) -> double &

        Parameters:
            self: OpenSim::ActiveForceLengthCurve *

        """
        return _opensim.ActiveForceLengthCurve_upd_transition_norm_fiber_length(self, *args)


    def set_transition_norm_fiber_length(self, *args):
        """
        set_transition_norm_fiber_length(ActiveForceLengthCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_transition_norm_fiber_length(ActiveForceLengthCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ActiveForceLengthCurve_set_transition_norm_fiber_length(self, *args)


    def copyProperty_max_norm_active_fiber_length(self, source):
        """
        copyProperty_max_norm_active_fiber_length(ActiveForceLengthCurve self, ActiveForceLengthCurve source)

        Parameters:
            source: OpenSim::ActiveForceLengthCurve::Self const &

        """
        return _opensim.ActiveForceLengthCurve_copyProperty_max_norm_active_fiber_length(self, source)


    def append_max_norm_active_fiber_length(self, value):
        """
        append_max_norm_active_fiber_length(ActiveForceLengthCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ActiveForceLengthCurve_append_max_norm_active_fiber_length(self, value)


    def constructProperty_max_norm_active_fiber_length(self, initValue):
        """
        constructProperty_max_norm_active_fiber_length(ActiveForceLengthCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ActiveForceLengthCurve_constructProperty_max_norm_active_fiber_length(self, initValue)


    def get_max_norm_active_fiber_length(self, *args):
        """
        get_max_norm_active_fiber_length(ActiveForceLengthCurve self, int i) -> double const

        Parameters:
            i: int

        get_max_norm_active_fiber_length(ActiveForceLengthCurve self) -> double const &

        Parameters:
            self: OpenSim::ActiveForceLengthCurve const *

        """
        return _opensim.ActiveForceLengthCurve_get_max_norm_active_fiber_length(self, *args)


    def upd_max_norm_active_fiber_length(self, *args):
        """
        upd_max_norm_active_fiber_length(ActiveForceLengthCurve self, int i) -> double

        Parameters:
            i: int

        upd_max_norm_active_fiber_length(ActiveForceLengthCurve self) -> double &

        Parameters:
            self: OpenSim::ActiveForceLengthCurve *

        """
        return _opensim.ActiveForceLengthCurve_upd_max_norm_active_fiber_length(self, *args)


    def set_max_norm_active_fiber_length(self, *args):
        """
        set_max_norm_active_fiber_length(ActiveForceLengthCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_max_norm_active_fiber_length(ActiveForceLengthCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ActiveForceLengthCurve_set_max_norm_active_fiber_length(self, *args)


    def copyProperty_shallow_ascending_slope(self, source):
        """
        copyProperty_shallow_ascending_slope(ActiveForceLengthCurve self, ActiveForceLengthCurve source)

        Parameters:
            source: OpenSim::ActiveForceLengthCurve::Self const &

        """
        return _opensim.ActiveForceLengthCurve_copyProperty_shallow_ascending_slope(self, source)


    def append_shallow_ascending_slope(self, value):
        """
        append_shallow_ascending_slope(ActiveForceLengthCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ActiveForceLengthCurve_append_shallow_ascending_slope(self, value)


    def constructProperty_shallow_ascending_slope(self, initValue):
        """
        constructProperty_shallow_ascending_slope(ActiveForceLengthCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ActiveForceLengthCurve_constructProperty_shallow_ascending_slope(self, initValue)


    def get_shallow_ascending_slope(self, *args):
        """
        get_shallow_ascending_slope(ActiveForceLengthCurve self, int i) -> double const

        Parameters:
            i: int

        get_shallow_ascending_slope(ActiveForceLengthCurve self) -> double const &

        Parameters:
            self: OpenSim::ActiveForceLengthCurve const *

        """
        return _opensim.ActiveForceLengthCurve_get_shallow_ascending_slope(self, *args)


    def upd_shallow_ascending_slope(self, *args):
        """
        upd_shallow_ascending_slope(ActiveForceLengthCurve self, int i) -> double

        Parameters:
            i: int

        upd_shallow_ascending_slope(ActiveForceLengthCurve self) -> double &

        Parameters:
            self: OpenSim::ActiveForceLengthCurve *

        """
        return _opensim.ActiveForceLengthCurve_upd_shallow_ascending_slope(self, *args)


    def set_shallow_ascending_slope(self, *args):
        """
        set_shallow_ascending_slope(ActiveForceLengthCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_shallow_ascending_slope(ActiveForceLengthCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ActiveForceLengthCurve_set_shallow_ascending_slope(self, *args)


    def copyProperty_minimum_value(self, source):
        """
        copyProperty_minimum_value(ActiveForceLengthCurve self, ActiveForceLengthCurve source)

        Parameters:
            source: OpenSim::ActiveForceLengthCurve::Self const &

        """
        return _opensim.ActiveForceLengthCurve_copyProperty_minimum_value(self, source)


    def append_minimum_value(self, value):
        """
        append_minimum_value(ActiveForceLengthCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ActiveForceLengthCurve_append_minimum_value(self, value)


    def constructProperty_minimum_value(self, initValue):
        """
        constructProperty_minimum_value(ActiveForceLengthCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ActiveForceLengthCurve_constructProperty_minimum_value(self, initValue)


    def get_minimum_value(self, *args):
        """
        get_minimum_value(ActiveForceLengthCurve self, int i) -> double const

        Parameters:
            i: int

        get_minimum_value(ActiveForceLengthCurve self) -> double const &

        Parameters:
            self: OpenSim::ActiveForceLengthCurve const *

        """
        return _opensim.ActiveForceLengthCurve_get_minimum_value(self, *args)


    def upd_minimum_value(self, *args):
        """
        upd_minimum_value(ActiveForceLengthCurve self, int i) -> double

        Parameters:
            i: int

        upd_minimum_value(ActiveForceLengthCurve self) -> double &

        Parameters:
            self: OpenSim::ActiveForceLengthCurve *

        """
        return _opensim.ActiveForceLengthCurve_upd_minimum_value(self, *args)


    def set_minimum_value(self, *args):
        """
        set_minimum_value(ActiveForceLengthCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_minimum_value(ActiveForceLengthCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ActiveForceLengthCurve_set_minimum_value(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ActiveForceLengthCurve self) -> ActiveForceLengthCurve
        __init__(OpenSim::ActiveForceLengthCurve self, double minActiveNormFiberLength, double transitionNormFiberLength, double maxActiveNormFiberLength, double shallowAscendingSlope, double minimumValue) -> ActiveForceLengthCurve

        Parameters:
            minActiveNormFiberLength: double
            transitionNormFiberLength: double
            maxActiveNormFiberLength: double
            shallowAscendingSlope: double
            minimumValue: double

        """
        this = _opensim.new_ActiveForceLengthCurve(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getMinActiveFiberLength(self):
        """
        getMinActiveFiberLength(ActiveForceLengthCurve self) -> double

        Parameters:
            self: OpenSim::ActiveForceLengthCurve const *

        """
        return _opensim.ActiveForceLengthCurve_getMinActiveFiberLength(self)


    def getTransitionFiberLength(self):
        """
        getTransitionFiberLength(ActiveForceLengthCurve self) -> double

        Parameters:
            self: OpenSim::ActiveForceLengthCurve const *

        """
        return _opensim.ActiveForceLengthCurve_getTransitionFiberLength(self)


    def getMaxActiveFiberLength(self):
        """
        getMaxActiveFiberLength(ActiveForceLengthCurve self) -> double

        Parameters:
            self: OpenSim::ActiveForceLengthCurve const *

        """
        return _opensim.ActiveForceLengthCurve_getMaxActiveFiberLength(self)


    def getShallowAscendingSlope(self):
        """
        getShallowAscendingSlope(ActiveForceLengthCurve self) -> double

        Parameters:
            self: OpenSim::ActiveForceLengthCurve const *

        """
        return _opensim.ActiveForceLengthCurve_getShallowAscendingSlope(self)


    def getMinValue(self):
        """
        getMinValue(ActiveForceLengthCurve self) -> double

        Parameters:
            self: OpenSim::ActiveForceLengthCurve const *

        """
        return _opensim.ActiveForceLengthCurve_getMinValue(self)


    def setActiveFiberLengths(self, minActiveNormFiberLength, transitionNormFiberLength, maxActiveNormFiberLength, shallowAscendingSlope):
        """
        setActiveFiberLengths(ActiveForceLengthCurve self, double minActiveNormFiberLength, double transitionNormFiberLength, double maxActiveNormFiberLength, double shallowAscendingSlope)

        Parameters:
            minActiveNormFiberLength: double
            transitionNormFiberLength: double
            maxActiveNormFiberLength: double
            shallowAscendingSlope: double

        """
        return _opensim.ActiveForceLengthCurve_setActiveFiberLengths(self, minActiveNormFiberLength, transitionNormFiberLength, maxActiveNormFiberLength, shallowAscendingSlope)


    def setMinValue(self, minimumValue):
        """
        setMinValue(ActiveForceLengthCurve self, double minimumValue)

        Parameters:
            minimumValue: double

        """
        return _opensim.ActiveForceLengthCurve_setMinValue(self, minimumValue)


    def calcValue(self, *args):
        """
        calcValue(ActiveForceLengthCurve self, Vector x) -> double

        Parameters:
            x: SimTK::Vector const &

        calcValue(ActiveForceLengthCurve self, double normFiberLength) -> double

        Parameters:
            normFiberLength: double

        """
        return _opensim.ActiveForceLengthCurve_calcValue(self, *args)


    def calcDerivative(self, normFiberLength, order):
        """
        calcDerivative(ActiveForceLengthCurve self, double normFiberLength, int order) -> double

        Parameters:
            normFiberLength: double
            order: int

        """
        return _opensim.ActiveForceLengthCurve_calcDerivative(self, normFiberLength, order)


    def getCurveDomain(self):
        """
        getCurveDomain(ActiveForceLengthCurve self) -> Vec2

        Parameters:
            self: OpenSim::ActiveForceLengthCurve const *

        """
        return _opensim.ActiveForceLengthCurve_getCurveDomain(self)


    def printMuscleCurveToCSVFile(self, path):
        """
        printMuscleCurveToCSVFile(ActiveForceLengthCurve self, std::string const & path)

        Parameters:
            path: std::string const &

        """
        return _opensim.ActiveForceLengthCurve_printMuscleCurveToCSVFile(self, path)


    def ensureCurveUpToDate(self):
        """
        ensureCurveUpToDate(ActiveForceLengthCurve self)

        Parameters:
            self: OpenSim::ActiveForceLengthCurve *

        """
        return _opensim.ActiveForceLengthCurve_ensureCurveUpToDate(self)

    __swig_destroy__ = _opensim.delete_ActiveForceLengthCurve
    __del__ = lambda self: None
ActiveForceLengthCurve_swigregister = _opensim.ActiveForceLengthCurve_swigregister
ActiveForceLengthCurve_swigregister(ActiveForceLengthCurve)

def ActiveForceLengthCurve_safeDownCast(obj):
    """
    ActiveForceLengthCurve_safeDownCast(OpenSimObject obj) -> ActiveForceLengthCurve

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ActiveForceLengthCurve_safeDownCast(obj)

def ActiveForceLengthCurve_getClassName():
    """ActiveForceLengthCurve_getClassName() -> std::string const &"""
    return _opensim.ActiveForceLengthCurve_getClassName()

class FiberCompressiveForceCosPennationCurve(Function):
    """Proxy of C++ OpenSim::FiberCompressiveForceCosPennationCurve class"""
    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FiberCompressiveForceCosPennationCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FiberCompressiveForceCosPennationCurve, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> FiberCompressiveForceCosPennationCurve

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(FiberCompressiveForceCosPennationCurve self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.FiberCompressiveForceCosPennationCurve_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(FiberCompressiveForceCosPennationCurve self) -> FiberCompressiveForceCosPennationCurve

        Parameters:
            self: OpenSim::FiberCompressiveForceCosPennationCurve const *

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(FiberCompressiveForceCosPennationCurve self) -> std::string const &

        Parameters:
            self: OpenSim::FiberCompressiveForceCosPennationCurve const *

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_getConcreteClassName(self)


    def copyProperty_engagement_angle_in_degrees(self, source):
        """
        copyProperty_engagement_angle_in_degrees(FiberCompressiveForceCosPennationCurve self, FiberCompressiveForceCosPennationCurve source)

        Parameters:
            source: OpenSim::FiberCompressiveForceCosPennationCurve::Self const &

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_copyProperty_engagement_angle_in_degrees(self, source)


    def append_engagement_angle_in_degrees(self, value):
        """
        append_engagement_angle_in_degrees(FiberCompressiveForceCosPennationCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_append_engagement_angle_in_degrees(self, value)


    def constructProperty_engagement_angle_in_degrees(self, initValue):
        """
        constructProperty_engagement_angle_in_degrees(FiberCompressiveForceCosPennationCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_constructProperty_engagement_angle_in_degrees(self, initValue)


    def get_engagement_angle_in_degrees(self, *args):
        """
        get_engagement_angle_in_degrees(FiberCompressiveForceCosPennationCurve self, int i) -> double const

        Parameters:
            i: int

        get_engagement_angle_in_degrees(FiberCompressiveForceCosPennationCurve self) -> double const &

        Parameters:
            self: OpenSim::FiberCompressiveForceCosPennationCurve const *

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_get_engagement_angle_in_degrees(self, *args)


    def upd_engagement_angle_in_degrees(self, *args):
        """
        upd_engagement_angle_in_degrees(FiberCompressiveForceCosPennationCurve self, int i) -> double

        Parameters:
            i: int

        upd_engagement_angle_in_degrees(FiberCompressiveForceCosPennationCurve self) -> double &

        Parameters:
            self: OpenSim::FiberCompressiveForceCosPennationCurve *

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_upd_engagement_angle_in_degrees(self, *args)


    def set_engagement_angle_in_degrees(self, *args):
        """
        set_engagement_angle_in_degrees(FiberCompressiveForceCosPennationCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_engagement_angle_in_degrees(FiberCompressiveForceCosPennationCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_set_engagement_angle_in_degrees(self, *args)


    def copyProperty_stiffness_at_perpendicular(self, source):
        """
        copyProperty_stiffness_at_perpendicular(FiberCompressiveForceCosPennationCurve self, FiberCompressiveForceCosPennationCurve source)

        Parameters:
            source: OpenSim::FiberCompressiveForceCosPennationCurve::Self const &

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_copyProperty_stiffness_at_perpendicular(self, source)


    def append_stiffness_at_perpendicular(self, value):
        """
        append_stiffness_at_perpendicular(FiberCompressiveForceCosPennationCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_append_stiffness_at_perpendicular(self, value)


    def constructProperty_stiffness_at_perpendicular(self, *args):
        """
        constructProperty_stiffness_at_perpendicular(FiberCompressiveForceCosPennationCurve self)
        constructProperty_stiffness_at_perpendicular(FiberCompressiveForceCosPennationCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_constructProperty_stiffness_at_perpendicular(self, *args)


    def get_stiffness_at_perpendicular(self, *args):
        """
        get_stiffness_at_perpendicular(FiberCompressiveForceCosPennationCurve self, int i) -> double const

        Parameters:
            i: int

        get_stiffness_at_perpendicular(FiberCompressiveForceCosPennationCurve self) -> double const &

        Parameters:
            self: OpenSim::FiberCompressiveForceCosPennationCurve const *

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_get_stiffness_at_perpendicular(self, *args)


    def upd_stiffness_at_perpendicular(self, *args):
        """
        upd_stiffness_at_perpendicular(FiberCompressiveForceCosPennationCurve self, int i) -> double

        Parameters:
            i: int

        upd_stiffness_at_perpendicular(FiberCompressiveForceCosPennationCurve self) -> double &

        Parameters:
            self: OpenSim::FiberCompressiveForceCosPennationCurve *

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_upd_stiffness_at_perpendicular(self, *args)


    def set_stiffness_at_perpendicular(self, *args):
        """
        set_stiffness_at_perpendicular(FiberCompressiveForceCosPennationCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_stiffness_at_perpendicular(FiberCompressiveForceCosPennationCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_set_stiffness_at_perpendicular(self, *args)


    def copyProperty_curviness(self, source):
        """
        copyProperty_curviness(FiberCompressiveForceCosPennationCurve self, FiberCompressiveForceCosPennationCurve source)

        Parameters:
            source: OpenSim::FiberCompressiveForceCosPennationCurve::Self const &

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_copyProperty_curviness(self, source)


    def append_curviness(self, value):
        """
        append_curviness(FiberCompressiveForceCosPennationCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_append_curviness(self, value)


    def constructProperty_curviness(self, *args):
        """
        constructProperty_curviness(FiberCompressiveForceCosPennationCurve self)
        constructProperty_curviness(FiberCompressiveForceCosPennationCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_constructProperty_curviness(self, *args)


    def get_curviness(self, *args):
        """
        get_curviness(FiberCompressiveForceCosPennationCurve self, int i) -> double const

        Parameters:
            i: int

        get_curviness(FiberCompressiveForceCosPennationCurve self) -> double const &

        Parameters:
            self: OpenSim::FiberCompressiveForceCosPennationCurve const *

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_get_curviness(self, *args)


    def upd_curviness(self, *args):
        """
        upd_curviness(FiberCompressiveForceCosPennationCurve self, int i) -> double

        Parameters:
            i: int

        upd_curviness(FiberCompressiveForceCosPennationCurve self) -> double &

        Parameters:
            self: OpenSim::FiberCompressiveForceCosPennationCurve *

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_upd_curviness(self, *args)


    def set_curviness(self, *args):
        """
        set_curviness(FiberCompressiveForceCosPennationCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_curviness(FiberCompressiveForceCosPennationCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_set_curviness(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::FiberCompressiveForceCosPennationCurve self) -> FiberCompressiveForceCosPennationCurve
        __init__(OpenSim::FiberCompressiveForceCosPennationCurve self, double engagementAngleInDegrees, double stiffnessAtPerpendicular, double curviness, std::string const & muscleName) -> FiberCompressiveForceCosPennationCurve

        Parameters:
            engagementAngleInDegrees: double
            stiffnessAtPerpendicular: double
            curviness: double
            muscleName: std::string const &

        __init__(OpenSim::FiberCompressiveForceCosPennationCurve self, double engagementAngleInDegrees, std::string const & muscleName) -> FiberCompressiveForceCosPennationCurve

        Parameters:
            engagementAngleInDegrees: double
            muscleName: std::string const &

        """
        this = _opensim.new_FiberCompressiveForceCosPennationCurve(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getEngagementAngleInDegrees(self):
        """
        getEngagementAngleInDegrees(FiberCompressiveForceCosPennationCurve self) -> double

        Parameters:
            self: OpenSim::FiberCompressiveForceCosPennationCurve const *

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_getEngagementAngleInDegrees(self)


    def getStiffnessAtPerpendicularInUse(self):
        """
        getStiffnessAtPerpendicularInUse(FiberCompressiveForceCosPennationCurve self) -> double

        Parameters:
            self: OpenSim::FiberCompressiveForceCosPennationCurve const *

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_getStiffnessAtPerpendicularInUse(self)


    def getCurvinessInUse(self):
        """
        getCurvinessInUse(FiberCompressiveForceCosPennationCurve self) -> double

        Parameters:
            self: OpenSim::FiberCompressiveForceCosPennationCurve const *

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_getCurvinessInUse(self)


    def isFittedCurveBeingUsed(self):
        """
        isFittedCurveBeingUsed(FiberCompressiveForceCosPennationCurve self) -> bool

        Parameters:
            self: OpenSim::FiberCompressiveForceCosPennationCurve const *

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_isFittedCurveBeingUsed(self)


    def setEngagementAngleInDegrees(self, aEngagementAngleInDegrees):
        """
        setEngagementAngleInDegrees(FiberCompressiveForceCosPennationCurve self, double aEngagementAngleInDegrees)

        Parameters:
            aEngagementAngleInDegrees: double

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_setEngagementAngleInDegrees(self, aEngagementAngleInDegrees)


    def setOptionalProperties(self, aStiffnessAtPerpendicular, aCurviness):
        """
        setOptionalProperties(FiberCompressiveForceCosPennationCurve self, double aStiffnessAtPerpendicular, double aCurviness)

        Parameters:
            aStiffnessAtPerpendicular: double
            aCurviness: double

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_setOptionalProperties(self, aStiffnessAtPerpendicular, aCurviness)


    def calcValue(self, *args):
        """
        calcValue(FiberCompressiveForceCosPennationCurve self, double cosPennationAngle) -> double

        Parameters:
            cosPennationAngle: double

        calcValue(FiberCompressiveForceCosPennationCurve self, Vector x) -> double

        Parameters:
            x: SimTK::Vector const &

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_calcValue(self, *args)


    def calcDerivative(self, cosPennationAngle, order):
        """
        calcDerivative(FiberCompressiveForceCosPennationCurve self, double cosPennationAngle, int order) -> double

        Parameters:
            cosPennationAngle: double
            order: int

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_calcDerivative(self, cosPennationAngle, order)


    def calcIntegral(self, cosPennationAngle):
        """
        calcIntegral(FiberCompressiveForceCosPennationCurve self, double cosPennationAngle) -> double

        Parameters:
            cosPennationAngle: double

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_calcIntegral(self, cosPennationAngle)


    def getCurveDomain(self):
        """
        getCurveDomain(FiberCompressiveForceCosPennationCurve self) -> Vec2

        Parameters:
            self: OpenSim::FiberCompressiveForceCosPennationCurve const *

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_getCurveDomain(self)


    def printMuscleCurveToCSVFile(self, path):
        """
        printMuscleCurveToCSVFile(FiberCompressiveForceCosPennationCurve self, std::string const & path)

        Parameters:
            path: std::string const &

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_printMuscleCurveToCSVFile(self, path)


    def ensureCurveUpToDate(self):
        """
        ensureCurveUpToDate(FiberCompressiveForceCosPennationCurve self)

        Parameters:
            self: OpenSim::FiberCompressiveForceCosPennationCurve *

        """
        return _opensim.FiberCompressiveForceCosPennationCurve_ensureCurveUpToDate(self)

    __swig_destroy__ = _opensim.delete_FiberCompressiveForceCosPennationCurve
    __del__ = lambda self: None
FiberCompressiveForceCosPennationCurve_swigregister = _opensim.FiberCompressiveForceCosPennationCurve_swigregister
FiberCompressiveForceCosPennationCurve_swigregister(FiberCompressiveForceCosPennationCurve)

def FiberCompressiveForceCosPennationCurve_safeDownCast(obj):
    """
    FiberCompressiveForceCosPennationCurve_safeDownCast(OpenSimObject obj) -> FiberCompressiveForceCosPennationCurve

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.FiberCompressiveForceCosPennationCurve_safeDownCast(obj)

def FiberCompressiveForceCosPennationCurve_getClassName():
    """FiberCompressiveForceCosPennationCurve_getClassName() -> std::string const &"""
    return _opensim.FiberCompressiveForceCosPennationCurve_getClassName()

class FiberCompressiveForceLengthCurve(Function):
    """Proxy of C++ OpenSim::FiberCompressiveForceLengthCurve class"""
    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FiberCompressiveForceLengthCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FiberCompressiveForceLengthCurve, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> FiberCompressiveForceLengthCurve

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.FiberCompressiveForceLengthCurve_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(FiberCompressiveForceLengthCurve self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.FiberCompressiveForceLengthCurve_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.FiberCompressiveForceLengthCurve_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(FiberCompressiveForceLengthCurve self) -> FiberCompressiveForceLengthCurve

        Parameters:
            self: OpenSim::FiberCompressiveForceLengthCurve const *

        """
        return _opensim.FiberCompressiveForceLengthCurve_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(FiberCompressiveForceLengthCurve self) -> std::string const &

        Parameters:
            self: OpenSim::FiberCompressiveForceLengthCurve const *

        """
        return _opensim.FiberCompressiveForceLengthCurve_getConcreteClassName(self)


    def copyProperty_norm_length_at_zero_force(self, source):
        """
        copyProperty_norm_length_at_zero_force(FiberCompressiveForceLengthCurve self, FiberCompressiveForceLengthCurve source)

        Parameters:
            source: OpenSim::FiberCompressiveForceLengthCurve::Self const &

        """
        return _opensim.FiberCompressiveForceLengthCurve_copyProperty_norm_length_at_zero_force(self, source)


    def append_norm_length_at_zero_force(self, value):
        """
        append_norm_length_at_zero_force(FiberCompressiveForceLengthCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.FiberCompressiveForceLengthCurve_append_norm_length_at_zero_force(self, value)


    def constructProperty_norm_length_at_zero_force(self, initValue):
        """
        constructProperty_norm_length_at_zero_force(FiberCompressiveForceLengthCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.FiberCompressiveForceLengthCurve_constructProperty_norm_length_at_zero_force(self, initValue)


    def get_norm_length_at_zero_force(self, *args):
        """
        get_norm_length_at_zero_force(FiberCompressiveForceLengthCurve self, int i) -> double const

        Parameters:
            i: int

        get_norm_length_at_zero_force(FiberCompressiveForceLengthCurve self) -> double const &

        Parameters:
            self: OpenSim::FiberCompressiveForceLengthCurve const *

        """
        return _opensim.FiberCompressiveForceLengthCurve_get_norm_length_at_zero_force(self, *args)


    def upd_norm_length_at_zero_force(self, *args):
        """
        upd_norm_length_at_zero_force(FiberCompressiveForceLengthCurve self, int i) -> double

        Parameters:
            i: int

        upd_norm_length_at_zero_force(FiberCompressiveForceLengthCurve self) -> double &

        Parameters:
            self: OpenSim::FiberCompressiveForceLengthCurve *

        """
        return _opensim.FiberCompressiveForceLengthCurve_upd_norm_length_at_zero_force(self, *args)


    def set_norm_length_at_zero_force(self, *args):
        """
        set_norm_length_at_zero_force(FiberCompressiveForceLengthCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_norm_length_at_zero_force(FiberCompressiveForceLengthCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.FiberCompressiveForceLengthCurve_set_norm_length_at_zero_force(self, *args)


    def copyProperty_stiffness_at_zero_length(self, source):
        """
        copyProperty_stiffness_at_zero_length(FiberCompressiveForceLengthCurve self, FiberCompressiveForceLengthCurve source)

        Parameters:
            source: OpenSim::FiberCompressiveForceLengthCurve::Self const &

        """
        return _opensim.FiberCompressiveForceLengthCurve_copyProperty_stiffness_at_zero_length(self, source)


    def append_stiffness_at_zero_length(self, value):
        """
        append_stiffness_at_zero_length(FiberCompressiveForceLengthCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.FiberCompressiveForceLengthCurve_append_stiffness_at_zero_length(self, value)


    def constructProperty_stiffness_at_zero_length(self, *args):
        """
        constructProperty_stiffness_at_zero_length(FiberCompressiveForceLengthCurve self)
        constructProperty_stiffness_at_zero_length(FiberCompressiveForceLengthCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.FiberCompressiveForceLengthCurve_constructProperty_stiffness_at_zero_length(self, *args)


    def get_stiffness_at_zero_length(self, *args):
        """
        get_stiffness_at_zero_length(FiberCompressiveForceLengthCurve self, int i) -> double const

        Parameters:
            i: int

        get_stiffness_at_zero_length(FiberCompressiveForceLengthCurve self) -> double const &

        Parameters:
            self: OpenSim::FiberCompressiveForceLengthCurve const *

        """
        return _opensim.FiberCompressiveForceLengthCurve_get_stiffness_at_zero_length(self, *args)


    def upd_stiffness_at_zero_length(self, *args):
        """
        upd_stiffness_at_zero_length(FiberCompressiveForceLengthCurve self, int i) -> double

        Parameters:
            i: int

        upd_stiffness_at_zero_length(FiberCompressiveForceLengthCurve self) -> double &

        Parameters:
            self: OpenSim::FiberCompressiveForceLengthCurve *

        """
        return _opensim.FiberCompressiveForceLengthCurve_upd_stiffness_at_zero_length(self, *args)


    def set_stiffness_at_zero_length(self, *args):
        """
        set_stiffness_at_zero_length(FiberCompressiveForceLengthCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_stiffness_at_zero_length(FiberCompressiveForceLengthCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.FiberCompressiveForceLengthCurve_set_stiffness_at_zero_length(self, *args)


    def copyProperty_curviness(self, source):
        """
        copyProperty_curviness(FiberCompressiveForceLengthCurve self, FiberCompressiveForceLengthCurve source)

        Parameters:
            source: OpenSim::FiberCompressiveForceLengthCurve::Self const &

        """
        return _opensim.FiberCompressiveForceLengthCurve_copyProperty_curviness(self, source)


    def append_curviness(self, value):
        """
        append_curviness(FiberCompressiveForceLengthCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.FiberCompressiveForceLengthCurve_append_curviness(self, value)


    def constructProperty_curviness(self, *args):
        """
        constructProperty_curviness(FiberCompressiveForceLengthCurve self)
        constructProperty_curviness(FiberCompressiveForceLengthCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.FiberCompressiveForceLengthCurve_constructProperty_curviness(self, *args)


    def get_curviness(self, *args):
        """
        get_curviness(FiberCompressiveForceLengthCurve self, int i) -> double const

        Parameters:
            i: int

        get_curviness(FiberCompressiveForceLengthCurve self) -> double const &

        Parameters:
            self: OpenSim::FiberCompressiveForceLengthCurve const *

        """
        return _opensim.FiberCompressiveForceLengthCurve_get_curviness(self, *args)


    def upd_curviness(self, *args):
        """
        upd_curviness(FiberCompressiveForceLengthCurve self, int i) -> double

        Parameters:
            i: int

        upd_curviness(FiberCompressiveForceLengthCurve self) -> double &

        Parameters:
            self: OpenSim::FiberCompressiveForceLengthCurve *

        """
        return _opensim.FiberCompressiveForceLengthCurve_upd_curviness(self, *args)


    def set_curviness(self, *args):
        """
        set_curviness(FiberCompressiveForceLengthCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_curviness(FiberCompressiveForceLengthCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.FiberCompressiveForceLengthCurve_set_curviness(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::FiberCompressiveForceLengthCurve self) -> FiberCompressiveForceLengthCurve
        __init__(OpenSim::FiberCompressiveForceLengthCurve self, double normLengthAtZeroForce, double stiffnessAtZeroLength, double curviness, std::string const & muscleName) -> FiberCompressiveForceLengthCurve

        Parameters:
            normLengthAtZeroForce: double
            stiffnessAtZeroLength: double
            curviness: double
            muscleName: std::string const &

        """
        this = _opensim.new_FiberCompressiveForceLengthCurve(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getNormLengthAtZeroForce(self):
        """
        getNormLengthAtZeroForce(FiberCompressiveForceLengthCurve self) -> double

        Parameters:
            self: OpenSim::FiberCompressiveForceLengthCurve const *

        """
        return _opensim.FiberCompressiveForceLengthCurve_getNormLengthAtZeroForce(self)


    def getStiffnessAtZeroLengthInUse(self):
        """
        getStiffnessAtZeroLengthInUse(FiberCompressiveForceLengthCurve self) -> double

        Parameters:
            self: OpenSim::FiberCompressiveForceLengthCurve const *

        """
        return _opensim.FiberCompressiveForceLengthCurve_getStiffnessAtZeroLengthInUse(self)


    def getCurvinessInUse(self):
        """
        getCurvinessInUse(FiberCompressiveForceLengthCurve self) -> double

        Parameters:
            self: OpenSim::FiberCompressiveForceLengthCurve const *

        """
        return _opensim.FiberCompressiveForceLengthCurve_getCurvinessInUse(self)


    def setNormLengthAtZeroForce(self, aNormLengthAtZeroForce):
        """
        setNormLengthAtZeroForce(FiberCompressiveForceLengthCurve self, double aNormLengthAtZeroForce)

        Parameters:
            aNormLengthAtZeroForce: double

        """
        return _opensim.FiberCompressiveForceLengthCurve_setNormLengthAtZeroForce(self, aNormLengthAtZeroForce)


    def setOptionalProperties(self, aStiffnessAtZeroLength, aCurviness):
        """
        setOptionalProperties(FiberCompressiveForceLengthCurve self, double aStiffnessAtZeroLength, double aCurviness)

        Parameters:
            aStiffnessAtZeroLength: double
            aCurviness: double

        """
        return _opensim.FiberCompressiveForceLengthCurve_setOptionalProperties(self, aStiffnessAtZeroLength, aCurviness)


    def isFittedCurveBeingUsed(self):
        """
        isFittedCurveBeingUsed(FiberCompressiveForceLengthCurve self) -> bool

        Parameters:
            self: OpenSim::FiberCompressiveForceLengthCurve const *

        """
        return _opensim.FiberCompressiveForceLengthCurve_isFittedCurveBeingUsed(self)


    def calcValue(self, *args):
        """
        calcValue(FiberCompressiveForceLengthCurve self, double aNormLength) -> double

        Parameters:
            aNormLength: double

        calcValue(FiberCompressiveForceLengthCurve self, Vector x) -> double

        Parameters:
            x: SimTK::Vector const &

        """
        return _opensim.FiberCompressiveForceLengthCurve_calcValue(self, *args)


    def calcDerivative(self, aNormLength, order):
        """
        calcDerivative(FiberCompressiveForceLengthCurve self, double aNormLength, int order) -> double

        Parameters:
            aNormLength: double
            order: int

        """
        return _opensim.FiberCompressiveForceLengthCurve_calcDerivative(self, aNormLength, order)


    def calcIntegral(self, aNormLength):
        """
        calcIntegral(FiberCompressiveForceLengthCurve self, double aNormLength) -> double

        Parameters:
            aNormLength: double

        """
        return _opensim.FiberCompressiveForceLengthCurve_calcIntegral(self, aNormLength)


    def getCurveDomain(self):
        """
        getCurveDomain(FiberCompressiveForceLengthCurve self) -> Vec2

        Parameters:
            self: OpenSim::FiberCompressiveForceLengthCurve const *

        """
        return _opensim.FiberCompressiveForceLengthCurve_getCurveDomain(self)


    def printMuscleCurveToCSVFile(self, path):
        """
        printMuscleCurveToCSVFile(FiberCompressiveForceLengthCurve self, std::string const & path)

        Parameters:
            path: std::string const &

        """
        return _opensim.FiberCompressiveForceLengthCurve_printMuscleCurveToCSVFile(self, path)


    def ensureCurveUpToDate(self):
        """
        ensureCurveUpToDate(FiberCompressiveForceLengthCurve self)

        Parameters:
            self: OpenSim::FiberCompressiveForceLengthCurve *

        """
        return _opensim.FiberCompressiveForceLengthCurve_ensureCurveUpToDate(self)

    __swig_destroy__ = _opensim.delete_FiberCompressiveForceLengthCurve
    __del__ = lambda self: None
FiberCompressiveForceLengthCurve_swigregister = _opensim.FiberCompressiveForceLengthCurve_swigregister
FiberCompressiveForceLengthCurve_swigregister(FiberCompressiveForceLengthCurve)

def FiberCompressiveForceLengthCurve_safeDownCast(obj):
    """
    FiberCompressiveForceLengthCurve_safeDownCast(OpenSimObject obj) -> FiberCompressiveForceLengthCurve

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.FiberCompressiveForceLengthCurve_safeDownCast(obj)

def FiberCompressiveForceLengthCurve_getClassName():
    """FiberCompressiveForceLengthCurve_getClassName() -> std::string const &"""
    return _opensim.FiberCompressiveForceLengthCurve_getClassName()

class FiberForceLengthCurve(Function):
    """Proxy of C++ OpenSim::FiberForceLengthCurve class"""
    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FiberForceLengthCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FiberForceLengthCurve, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> FiberForceLengthCurve

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.FiberForceLengthCurve_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(FiberForceLengthCurve self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.FiberForceLengthCurve_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.FiberForceLengthCurve_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(FiberForceLengthCurve self) -> FiberForceLengthCurve

        Parameters:
            self: OpenSim::FiberForceLengthCurve const *

        """
        return _opensim.FiberForceLengthCurve_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(FiberForceLengthCurve self) -> std::string const &

        Parameters:
            self: OpenSim::FiberForceLengthCurve const *

        """
        return _opensim.FiberForceLengthCurve_getConcreteClassName(self)


    def copyProperty_strain_at_zero_force(self, source):
        """
        copyProperty_strain_at_zero_force(FiberForceLengthCurve self, FiberForceLengthCurve source)

        Parameters:
            source: OpenSim::FiberForceLengthCurve::Self const &

        """
        return _opensim.FiberForceLengthCurve_copyProperty_strain_at_zero_force(self, source)


    def append_strain_at_zero_force(self, value):
        """
        append_strain_at_zero_force(FiberForceLengthCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.FiberForceLengthCurve_append_strain_at_zero_force(self, value)


    def constructProperty_strain_at_zero_force(self, initValue):
        """
        constructProperty_strain_at_zero_force(FiberForceLengthCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.FiberForceLengthCurve_constructProperty_strain_at_zero_force(self, initValue)


    def get_strain_at_zero_force(self, *args):
        """
        get_strain_at_zero_force(FiberForceLengthCurve self, int i) -> double const

        Parameters:
            i: int

        get_strain_at_zero_force(FiberForceLengthCurve self) -> double const &

        Parameters:
            self: OpenSim::FiberForceLengthCurve const *

        """
        return _opensim.FiberForceLengthCurve_get_strain_at_zero_force(self, *args)


    def upd_strain_at_zero_force(self, *args):
        """
        upd_strain_at_zero_force(FiberForceLengthCurve self, int i) -> double

        Parameters:
            i: int

        upd_strain_at_zero_force(FiberForceLengthCurve self) -> double &

        Parameters:
            self: OpenSim::FiberForceLengthCurve *

        """
        return _opensim.FiberForceLengthCurve_upd_strain_at_zero_force(self, *args)


    def set_strain_at_zero_force(self, *args):
        """
        set_strain_at_zero_force(FiberForceLengthCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_strain_at_zero_force(FiberForceLengthCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.FiberForceLengthCurve_set_strain_at_zero_force(self, *args)


    def copyProperty_strain_at_one_norm_force(self, source):
        """
        copyProperty_strain_at_one_norm_force(FiberForceLengthCurve self, FiberForceLengthCurve source)

        Parameters:
            source: OpenSim::FiberForceLengthCurve::Self const &

        """
        return _opensim.FiberForceLengthCurve_copyProperty_strain_at_one_norm_force(self, source)


    def append_strain_at_one_norm_force(self, value):
        """
        append_strain_at_one_norm_force(FiberForceLengthCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.FiberForceLengthCurve_append_strain_at_one_norm_force(self, value)


    def constructProperty_strain_at_one_norm_force(self, initValue):
        """
        constructProperty_strain_at_one_norm_force(FiberForceLengthCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.FiberForceLengthCurve_constructProperty_strain_at_one_norm_force(self, initValue)


    def get_strain_at_one_norm_force(self, *args):
        """
        get_strain_at_one_norm_force(FiberForceLengthCurve self, int i) -> double const

        Parameters:
            i: int

        get_strain_at_one_norm_force(FiberForceLengthCurve self) -> double const &

        Parameters:
            self: OpenSim::FiberForceLengthCurve const *

        """
        return _opensim.FiberForceLengthCurve_get_strain_at_one_norm_force(self, *args)


    def upd_strain_at_one_norm_force(self, *args):
        """
        upd_strain_at_one_norm_force(FiberForceLengthCurve self, int i) -> double

        Parameters:
            i: int

        upd_strain_at_one_norm_force(FiberForceLengthCurve self) -> double &

        Parameters:
            self: OpenSim::FiberForceLengthCurve *

        """
        return _opensim.FiberForceLengthCurve_upd_strain_at_one_norm_force(self, *args)


    def set_strain_at_one_norm_force(self, *args):
        """
        set_strain_at_one_norm_force(FiberForceLengthCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_strain_at_one_norm_force(FiberForceLengthCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.FiberForceLengthCurve_set_strain_at_one_norm_force(self, *args)


    def copyProperty_stiffness_at_low_force(self, source):
        """
        copyProperty_stiffness_at_low_force(FiberForceLengthCurve self, FiberForceLengthCurve source)

        Parameters:
            source: OpenSim::FiberForceLengthCurve::Self const &

        """
        return _opensim.FiberForceLengthCurve_copyProperty_stiffness_at_low_force(self, source)


    def append_stiffness_at_low_force(self, value):
        """
        append_stiffness_at_low_force(FiberForceLengthCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.FiberForceLengthCurve_append_stiffness_at_low_force(self, value)


    def constructProperty_stiffness_at_low_force(self, *args):
        """
        constructProperty_stiffness_at_low_force(FiberForceLengthCurve self)
        constructProperty_stiffness_at_low_force(FiberForceLengthCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.FiberForceLengthCurve_constructProperty_stiffness_at_low_force(self, *args)


    def get_stiffness_at_low_force(self, *args):
        """
        get_stiffness_at_low_force(FiberForceLengthCurve self, int i) -> double const

        Parameters:
            i: int

        get_stiffness_at_low_force(FiberForceLengthCurve self) -> double const &

        Parameters:
            self: OpenSim::FiberForceLengthCurve const *

        """
        return _opensim.FiberForceLengthCurve_get_stiffness_at_low_force(self, *args)


    def upd_stiffness_at_low_force(self, *args):
        """
        upd_stiffness_at_low_force(FiberForceLengthCurve self, int i) -> double

        Parameters:
            i: int

        upd_stiffness_at_low_force(FiberForceLengthCurve self) -> double &

        Parameters:
            self: OpenSim::FiberForceLengthCurve *

        """
        return _opensim.FiberForceLengthCurve_upd_stiffness_at_low_force(self, *args)


    def set_stiffness_at_low_force(self, *args):
        """
        set_stiffness_at_low_force(FiberForceLengthCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_stiffness_at_low_force(FiberForceLengthCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.FiberForceLengthCurve_set_stiffness_at_low_force(self, *args)


    def copyProperty_stiffness_at_one_norm_force(self, source):
        """
        copyProperty_stiffness_at_one_norm_force(FiberForceLengthCurve self, FiberForceLengthCurve source)

        Parameters:
            source: OpenSim::FiberForceLengthCurve::Self const &

        """
        return _opensim.FiberForceLengthCurve_copyProperty_stiffness_at_one_norm_force(self, source)


    def append_stiffness_at_one_norm_force(self, value):
        """
        append_stiffness_at_one_norm_force(FiberForceLengthCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.FiberForceLengthCurve_append_stiffness_at_one_norm_force(self, value)


    def constructProperty_stiffness_at_one_norm_force(self, *args):
        """
        constructProperty_stiffness_at_one_norm_force(FiberForceLengthCurve self)
        constructProperty_stiffness_at_one_norm_force(FiberForceLengthCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.FiberForceLengthCurve_constructProperty_stiffness_at_one_norm_force(self, *args)


    def get_stiffness_at_one_norm_force(self, *args):
        """
        get_stiffness_at_one_norm_force(FiberForceLengthCurve self, int i) -> double const

        Parameters:
            i: int

        get_stiffness_at_one_norm_force(FiberForceLengthCurve self) -> double const &

        Parameters:
            self: OpenSim::FiberForceLengthCurve const *

        """
        return _opensim.FiberForceLengthCurve_get_stiffness_at_one_norm_force(self, *args)


    def upd_stiffness_at_one_norm_force(self, *args):
        """
        upd_stiffness_at_one_norm_force(FiberForceLengthCurve self, int i) -> double

        Parameters:
            i: int

        upd_stiffness_at_one_norm_force(FiberForceLengthCurve self) -> double &

        Parameters:
            self: OpenSim::FiberForceLengthCurve *

        """
        return _opensim.FiberForceLengthCurve_upd_stiffness_at_one_norm_force(self, *args)


    def set_stiffness_at_one_norm_force(self, *args):
        """
        set_stiffness_at_one_norm_force(FiberForceLengthCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_stiffness_at_one_norm_force(FiberForceLengthCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.FiberForceLengthCurve_set_stiffness_at_one_norm_force(self, *args)


    def copyProperty_curviness(self, source):
        """
        copyProperty_curviness(FiberForceLengthCurve self, FiberForceLengthCurve source)

        Parameters:
            source: OpenSim::FiberForceLengthCurve::Self const &

        """
        return _opensim.FiberForceLengthCurve_copyProperty_curviness(self, source)


    def append_curviness(self, value):
        """
        append_curviness(FiberForceLengthCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.FiberForceLengthCurve_append_curviness(self, value)


    def constructProperty_curviness(self, *args):
        """
        constructProperty_curviness(FiberForceLengthCurve self)
        constructProperty_curviness(FiberForceLengthCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.FiberForceLengthCurve_constructProperty_curviness(self, *args)


    def get_curviness(self, *args):
        """
        get_curviness(FiberForceLengthCurve self, int i) -> double const

        Parameters:
            i: int

        get_curviness(FiberForceLengthCurve self) -> double const &

        Parameters:
            self: OpenSim::FiberForceLengthCurve const *

        """
        return _opensim.FiberForceLengthCurve_get_curviness(self, *args)


    def upd_curviness(self, *args):
        """
        upd_curviness(FiberForceLengthCurve self, int i) -> double

        Parameters:
            i: int

        upd_curviness(FiberForceLengthCurve self) -> double &

        Parameters:
            self: OpenSim::FiberForceLengthCurve *

        """
        return _opensim.FiberForceLengthCurve_upd_curviness(self, *args)


    def set_curviness(self, *args):
        """
        set_curviness(FiberForceLengthCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_curviness(FiberForceLengthCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.FiberForceLengthCurve_set_curviness(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::FiberForceLengthCurve self) -> FiberForceLengthCurve
        __init__(OpenSim::FiberForceLengthCurve self, double strainAtZeroForce, double strainAtOneNormForce, double stiffnessAtLowForce, double stiffnessAtOneNormForce, double curviness) -> FiberForceLengthCurve

        Parameters:
            strainAtZeroForce: double
            strainAtOneNormForce: double
            stiffnessAtLowForce: double
            stiffnessAtOneNormForce: double
            curviness: double

        """
        this = _opensim.new_FiberForceLengthCurve(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getStrainAtZeroForce(self):
        """
        getStrainAtZeroForce(FiberForceLengthCurve self) -> double

        Parameters:
            self: OpenSim::FiberForceLengthCurve const *

        """
        return _opensim.FiberForceLengthCurve_getStrainAtZeroForce(self)


    def getStrainAtOneNormForce(self):
        """
        getStrainAtOneNormForce(FiberForceLengthCurve self) -> double

        Parameters:
            self: OpenSim::FiberForceLengthCurve const *

        """
        return _opensim.FiberForceLengthCurve_getStrainAtOneNormForce(self)


    def getStiffnessAtLowForceInUse(self):
        """
        getStiffnessAtLowForceInUse(FiberForceLengthCurve self) -> double

        Parameters:
            self: OpenSim::FiberForceLengthCurve const *

        """
        return _opensim.FiberForceLengthCurve_getStiffnessAtLowForceInUse(self)


    def getStiffnessAtOneNormForceInUse(self):
        """
        getStiffnessAtOneNormForceInUse(FiberForceLengthCurve self) -> double

        Parameters:
            self: OpenSim::FiberForceLengthCurve const *

        """
        return _opensim.FiberForceLengthCurve_getStiffnessAtOneNormForceInUse(self)


    def getCurvinessInUse(self):
        """
        getCurvinessInUse(FiberForceLengthCurve self) -> double

        Parameters:
            self: OpenSim::FiberForceLengthCurve const *

        """
        return _opensim.FiberForceLengthCurve_getCurvinessInUse(self)


    def isFittedCurveBeingUsed(self):
        """
        isFittedCurveBeingUsed(FiberForceLengthCurve self) -> bool

        Parameters:
            self: OpenSim::FiberForceLengthCurve const *

        """
        return _opensim.FiberForceLengthCurve_isFittedCurveBeingUsed(self)


    def setCurveStrains(self, aStrainAtZeroForce, aStrainAtOneNormForce):
        """
        setCurveStrains(FiberForceLengthCurve self, double aStrainAtZeroForce, double aStrainAtOneNormForce)

        Parameters:
            aStrainAtZeroForce: double
            aStrainAtOneNormForce: double

        """
        return _opensim.FiberForceLengthCurve_setCurveStrains(self, aStrainAtZeroForce, aStrainAtOneNormForce)


    def setOptionalProperties(self, stiffnessAtLowForce, stiffnessAtOneNormForce, curviness):
        """
        setOptionalProperties(FiberForceLengthCurve self, double stiffnessAtLowForce, double stiffnessAtOneNormForce, double curviness)

        Parameters:
            stiffnessAtLowForce: double
            stiffnessAtOneNormForce: double
            curviness: double

        """
        return _opensim.FiberForceLengthCurve_setOptionalProperties(self, stiffnessAtLowForce, stiffnessAtOneNormForce, curviness)


    def calcValue(self, *args):
        """
        calcValue(FiberForceLengthCurve self, Vector x) -> double

        Parameters:
            x: SimTK::Vector const &

        calcValue(FiberForceLengthCurve self, double normFiberLength) -> double

        Parameters:
            normFiberLength: double

        """
        return _opensim.FiberForceLengthCurve_calcValue(self, *args)


    def calcDerivative(self, normFiberLength, order):
        """
        calcDerivative(FiberForceLengthCurve self, double normFiberLength, int order) -> double

        Parameters:
            normFiberLength: double
            order: int

        """
        return _opensim.FiberForceLengthCurve_calcDerivative(self, normFiberLength, order)


    def calcIntegral(self, normFiberLength):
        """
        calcIntegral(FiberForceLengthCurve self, double normFiberLength) -> double

        Parameters:
            normFiberLength: double

        """
        return _opensim.FiberForceLengthCurve_calcIntegral(self, normFiberLength)


    def getCurveDomain(self):
        """
        getCurveDomain(FiberForceLengthCurve self) -> Vec2

        Parameters:
            self: OpenSim::FiberForceLengthCurve const *

        """
        return _opensim.FiberForceLengthCurve_getCurveDomain(self)


    def printMuscleCurveToCSVFile(self, path):
        """
        printMuscleCurveToCSVFile(FiberForceLengthCurve self, std::string const & path)

        Parameters:
            path: std::string const &

        """
        return _opensim.FiberForceLengthCurve_printMuscleCurveToCSVFile(self, path)


    def ensureCurveUpToDate(self):
        """
        ensureCurveUpToDate(FiberForceLengthCurve self)

        Parameters:
            self: OpenSim::FiberForceLengthCurve *

        """
        return _opensim.FiberForceLengthCurve_ensureCurveUpToDate(self)

    __swig_destroy__ = _opensim.delete_FiberForceLengthCurve
    __del__ = lambda self: None
FiberForceLengthCurve_swigregister = _opensim.FiberForceLengthCurve_swigregister
FiberForceLengthCurve_swigregister(FiberForceLengthCurve)

def FiberForceLengthCurve_safeDownCast(obj):
    """
    FiberForceLengthCurve_safeDownCast(OpenSimObject obj) -> FiberForceLengthCurve

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.FiberForceLengthCurve_safeDownCast(obj)

def FiberForceLengthCurve_getClassName():
    """FiberForceLengthCurve_getClassName() -> std::string const &"""
    return _opensim.FiberForceLengthCurve_getClassName()

class ForceVelocityCurve(Function):
    """Proxy of C++ OpenSim::ForceVelocityCurve class"""
    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForceVelocityCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForceVelocityCurve, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ForceVelocityCurve

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ForceVelocityCurve_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ForceVelocityCurve self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ForceVelocityCurve_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ForceVelocityCurve_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ForceVelocityCurve self) -> ForceVelocityCurve

        Parameters:
            self: OpenSim::ForceVelocityCurve const *

        """
        return _opensim.ForceVelocityCurve_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ForceVelocityCurve self) -> std::string const &

        Parameters:
            self: OpenSim::ForceVelocityCurve const *

        """
        return _opensim.ForceVelocityCurve_getConcreteClassName(self)


    def copyProperty_concentric_slope_at_vmax(self, source):
        """
        copyProperty_concentric_slope_at_vmax(ForceVelocityCurve self, ForceVelocityCurve source)

        Parameters:
            source: OpenSim::ForceVelocityCurve::Self const &

        """
        return _opensim.ForceVelocityCurve_copyProperty_concentric_slope_at_vmax(self, source)


    def append_concentric_slope_at_vmax(self, value):
        """
        append_concentric_slope_at_vmax(ForceVelocityCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityCurve_append_concentric_slope_at_vmax(self, value)


    def constructProperty_concentric_slope_at_vmax(self, initValue):
        """
        constructProperty_concentric_slope_at_vmax(ForceVelocityCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ForceVelocityCurve_constructProperty_concentric_slope_at_vmax(self, initValue)


    def get_concentric_slope_at_vmax(self, *args):
        """
        get_concentric_slope_at_vmax(ForceVelocityCurve self, int i) -> double const

        Parameters:
            i: int

        get_concentric_slope_at_vmax(ForceVelocityCurve self) -> double const &

        Parameters:
            self: OpenSim::ForceVelocityCurve const *

        """
        return _opensim.ForceVelocityCurve_get_concentric_slope_at_vmax(self, *args)


    def upd_concentric_slope_at_vmax(self, *args):
        """
        upd_concentric_slope_at_vmax(ForceVelocityCurve self, int i) -> double

        Parameters:
            i: int

        upd_concentric_slope_at_vmax(ForceVelocityCurve self) -> double &

        Parameters:
            self: OpenSim::ForceVelocityCurve *

        """
        return _opensim.ForceVelocityCurve_upd_concentric_slope_at_vmax(self, *args)


    def set_concentric_slope_at_vmax(self, *args):
        """
        set_concentric_slope_at_vmax(ForceVelocityCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_concentric_slope_at_vmax(ForceVelocityCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityCurve_set_concentric_slope_at_vmax(self, *args)


    def copyProperty_concentric_slope_near_vmax(self, source):
        """
        copyProperty_concentric_slope_near_vmax(ForceVelocityCurve self, ForceVelocityCurve source)

        Parameters:
            source: OpenSim::ForceVelocityCurve::Self const &

        """
        return _opensim.ForceVelocityCurve_copyProperty_concentric_slope_near_vmax(self, source)


    def append_concentric_slope_near_vmax(self, value):
        """
        append_concentric_slope_near_vmax(ForceVelocityCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityCurve_append_concentric_slope_near_vmax(self, value)


    def constructProperty_concentric_slope_near_vmax(self, initValue):
        """
        constructProperty_concentric_slope_near_vmax(ForceVelocityCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ForceVelocityCurve_constructProperty_concentric_slope_near_vmax(self, initValue)


    def get_concentric_slope_near_vmax(self, *args):
        """
        get_concentric_slope_near_vmax(ForceVelocityCurve self, int i) -> double const

        Parameters:
            i: int

        get_concentric_slope_near_vmax(ForceVelocityCurve self) -> double const &

        Parameters:
            self: OpenSim::ForceVelocityCurve const *

        """
        return _opensim.ForceVelocityCurve_get_concentric_slope_near_vmax(self, *args)


    def upd_concentric_slope_near_vmax(self, *args):
        """
        upd_concentric_slope_near_vmax(ForceVelocityCurve self, int i) -> double

        Parameters:
            i: int

        upd_concentric_slope_near_vmax(ForceVelocityCurve self) -> double &

        Parameters:
            self: OpenSim::ForceVelocityCurve *

        """
        return _opensim.ForceVelocityCurve_upd_concentric_slope_near_vmax(self, *args)


    def set_concentric_slope_near_vmax(self, *args):
        """
        set_concentric_slope_near_vmax(ForceVelocityCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_concentric_slope_near_vmax(ForceVelocityCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityCurve_set_concentric_slope_near_vmax(self, *args)


    def copyProperty_isometric_slope(self, source):
        """
        copyProperty_isometric_slope(ForceVelocityCurve self, ForceVelocityCurve source)

        Parameters:
            source: OpenSim::ForceVelocityCurve::Self const &

        """
        return _opensim.ForceVelocityCurve_copyProperty_isometric_slope(self, source)


    def append_isometric_slope(self, value):
        """
        append_isometric_slope(ForceVelocityCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityCurve_append_isometric_slope(self, value)


    def constructProperty_isometric_slope(self, initValue):
        """
        constructProperty_isometric_slope(ForceVelocityCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ForceVelocityCurve_constructProperty_isometric_slope(self, initValue)


    def get_isometric_slope(self, *args):
        """
        get_isometric_slope(ForceVelocityCurve self, int i) -> double const

        Parameters:
            i: int

        get_isometric_slope(ForceVelocityCurve self) -> double const &

        Parameters:
            self: OpenSim::ForceVelocityCurve const *

        """
        return _opensim.ForceVelocityCurve_get_isometric_slope(self, *args)


    def upd_isometric_slope(self, *args):
        """
        upd_isometric_slope(ForceVelocityCurve self, int i) -> double

        Parameters:
            i: int

        upd_isometric_slope(ForceVelocityCurve self) -> double &

        Parameters:
            self: OpenSim::ForceVelocityCurve *

        """
        return _opensim.ForceVelocityCurve_upd_isometric_slope(self, *args)


    def set_isometric_slope(self, *args):
        """
        set_isometric_slope(ForceVelocityCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_isometric_slope(ForceVelocityCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityCurve_set_isometric_slope(self, *args)


    def copyProperty_eccentric_slope_at_vmax(self, source):
        """
        copyProperty_eccentric_slope_at_vmax(ForceVelocityCurve self, ForceVelocityCurve source)

        Parameters:
            source: OpenSim::ForceVelocityCurve::Self const &

        """
        return _opensim.ForceVelocityCurve_copyProperty_eccentric_slope_at_vmax(self, source)


    def append_eccentric_slope_at_vmax(self, value):
        """
        append_eccentric_slope_at_vmax(ForceVelocityCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityCurve_append_eccentric_slope_at_vmax(self, value)


    def constructProperty_eccentric_slope_at_vmax(self, initValue):
        """
        constructProperty_eccentric_slope_at_vmax(ForceVelocityCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ForceVelocityCurve_constructProperty_eccentric_slope_at_vmax(self, initValue)


    def get_eccentric_slope_at_vmax(self, *args):
        """
        get_eccentric_slope_at_vmax(ForceVelocityCurve self, int i) -> double const

        Parameters:
            i: int

        get_eccentric_slope_at_vmax(ForceVelocityCurve self) -> double const &

        Parameters:
            self: OpenSim::ForceVelocityCurve const *

        """
        return _opensim.ForceVelocityCurve_get_eccentric_slope_at_vmax(self, *args)


    def upd_eccentric_slope_at_vmax(self, *args):
        """
        upd_eccentric_slope_at_vmax(ForceVelocityCurve self, int i) -> double

        Parameters:
            i: int

        upd_eccentric_slope_at_vmax(ForceVelocityCurve self) -> double &

        Parameters:
            self: OpenSim::ForceVelocityCurve *

        """
        return _opensim.ForceVelocityCurve_upd_eccentric_slope_at_vmax(self, *args)


    def set_eccentric_slope_at_vmax(self, *args):
        """
        set_eccentric_slope_at_vmax(ForceVelocityCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_eccentric_slope_at_vmax(ForceVelocityCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityCurve_set_eccentric_slope_at_vmax(self, *args)


    def copyProperty_eccentric_slope_near_vmax(self, source):
        """
        copyProperty_eccentric_slope_near_vmax(ForceVelocityCurve self, ForceVelocityCurve source)

        Parameters:
            source: OpenSim::ForceVelocityCurve::Self const &

        """
        return _opensim.ForceVelocityCurve_copyProperty_eccentric_slope_near_vmax(self, source)


    def append_eccentric_slope_near_vmax(self, value):
        """
        append_eccentric_slope_near_vmax(ForceVelocityCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityCurve_append_eccentric_slope_near_vmax(self, value)


    def constructProperty_eccentric_slope_near_vmax(self, initValue):
        """
        constructProperty_eccentric_slope_near_vmax(ForceVelocityCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ForceVelocityCurve_constructProperty_eccentric_slope_near_vmax(self, initValue)


    def get_eccentric_slope_near_vmax(self, *args):
        """
        get_eccentric_slope_near_vmax(ForceVelocityCurve self, int i) -> double const

        Parameters:
            i: int

        get_eccentric_slope_near_vmax(ForceVelocityCurve self) -> double const &

        Parameters:
            self: OpenSim::ForceVelocityCurve const *

        """
        return _opensim.ForceVelocityCurve_get_eccentric_slope_near_vmax(self, *args)


    def upd_eccentric_slope_near_vmax(self, *args):
        """
        upd_eccentric_slope_near_vmax(ForceVelocityCurve self, int i) -> double

        Parameters:
            i: int

        upd_eccentric_slope_near_vmax(ForceVelocityCurve self) -> double &

        Parameters:
            self: OpenSim::ForceVelocityCurve *

        """
        return _opensim.ForceVelocityCurve_upd_eccentric_slope_near_vmax(self, *args)


    def set_eccentric_slope_near_vmax(self, *args):
        """
        set_eccentric_slope_near_vmax(ForceVelocityCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_eccentric_slope_near_vmax(ForceVelocityCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityCurve_set_eccentric_slope_near_vmax(self, *args)


    def copyProperty_max_eccentric_velocity_force_multiplier(self, source):
        """
        copyProperty_max_eccentric_velocity_force_multiplier(ForceVelocityCurve self, ForceVelocityCurve source)

        Parameters:
            source: OpenSim::ForceVelocityCurve::Self const &

        """
        return _opensim.ForceVelocityCurve_copyProperty_max_eccentric_velocity_force_multiplier(self, source)


    def append_max_eccentric_velocity_force_multiplier(self, value):
        """
        append_max_eccentric_velocity_force_multiplier(ForceVelocityCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityCurve_append_max_eccentric_velocity_force_multiplier(self, value)


    def constructProperty_max_eccentric_velocity_force_multiplier(self, initValue):
        """
        constructProperty_max_eccentric_velocity_force_multiplier(ForceVelocityCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ForceVelocityCurve_constructProperty_max_eccentric_velocity_force_multiplier(self, initValue)


    def get_max_eccentric_velocity_force_multiplier(self, *args):
        """
        get_max_eccentric_velocity_force_multiplier(ForceVelocityCurve self, int i) -> double const

        Parameters:
            i: int

        get_max_eccentric_velocity_force_multiplier(ForceVelocityCurve self) -> double const &

        Parameters:
            self: OpenSim::ForceVelocityCurve const *

        """
        return _opensim.ForceVelocityCurve_get_max_eccentric_velocity_force_multiplier(self, *args)


    def upd_max_eccentric_velocity_force_multiplier(self, *args):
        """
        upd_max_eccentric_velocity_force_multiplier(ForceVelocityCurve self, int i) -> double

        Parameters:
            i: int

        upd_max_eccentric_velocity_force_multiplier(ForceVelocityCurve self) -> double &

        Parameters:
            self: OpenSim::ForceVelocityCurve *

        """
        return _opensim.ForceVelocityCurve_upd_max_eccentric_velocity_force_multiplier(self, *args)


    def set_max_eccentric_velocity_force_multiplier(self, *args):
        """
        set_max_eccentric_velocity_force_multiplier(ForceVelocityCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_max_eccentric_velocity_force_multiplier(ForceVelocityCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityCurve_set_max_eccentric_velocity_force_multiplier(self, *args)


    def copyProperty_concentric_curviness(self, source):
        """
        copyProperty_concentric_curviness(ForceVelocityCurve self, ForceVelocityCurve source)

        Parameters:
            source: OpenSim::ForceVelocityCurve::Self const &

        """
        return _opensim.ForceVelocityCurve_copyProperty_concentric_curviness(self, source)


    def append_concentric_curviness(self, value):
        """
        append_concentric_curviness(ForceVelocityCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityCurve_append_concentric_curviness(self, value)


    def constructProperty_concentric_curviness(self, initValue):
        """
        constructProperty_concentric_curviness(ForceVelocityCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ForceVelocityCurve_constructProperty_concentric_curviness(self, initValue)


    def get_concentric_curviness(self, *args):
        """
        get_concentric_curviness(ForceVelocityCurve self, int i) -> double const

        Parameters:
            i: int

        get_concentric_curviness(ForceVelocityCurve self) -> double const &

        Parameters:
            self: OpenSim::ForceVelocityCurve const *

        """
        return _opensim.ForceVelocityCurve_get_concentric_curviness(self, *args)


    def upd_concentric_curviness(self, *args):
        """
        upd_concentric_curviness(ForceVelocityCurve self, int i) -> double

        Parameters:
            i: int

        upd_concentric_curviness(ForceVelocityCurve self) -> double &

        Parameters:
            self: OpenSim::ForceVelocityCurve *

        """
        return _opensim.ForceVelocityCurve_upd_concentric_curviness(self, *args)


    def set_concentric_curviness(self, *args):
        """
        set_concentric_curviness(ForceVelocityCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_concentric_curviness(ForceVelocityCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityCurve_set_concentric_curviness(self, *args)


    def copyProperty_eccentric_curviness(self, source):
        """
        copyProperty_eccentric_curviness(ForceVelocityCurve self, ForceVelocityCurve source)

        Parameters:
            source: OpenSim::ForceVelocityCurve::Self const &

        """
        return _opensim.ForceVelocityCurve_copyProperty_eccentric_curviness(self, source)


    def append_eccentric_curviness(self, value):
        """
        append_eccentric_curviness(ForceVelocityCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityCurve_append_eccentric_curviness(self, value)


    def constructProperty_eccentric_curviness(self, initValue):
        """
        constructProperty_eccentric_curviness(ForceVelocityCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ForceVelocityCurve_constructProperty_eccentric_curviness(self, initValue)


    def get_eccentric_curviness(self, *args):
        """
        get_eccentric_curviness(ForceVelocityCurve self, int i) -> double const

        Parameters:
            i: int

        get_eccentric_curviness(ForceVelocityCurve self) -> double const &

        Parameters:
            self: OpenSim::ForceVelocityCurve const *

        """
        return _opensim.ForceVelocityCurve_get_eccentric_curviness(self, *args)


    def upd_eccentric_curviness(self, *args):
        """
        upd_eccentric_curviness(ForceVelocityCurve self, int i) -> double

        Parameters:
            i: int

        upd_eccentric_curviness(ForceVelocityCurve self) -> double &

        Parameters:
            self: OpenSim::ForceVelocityCurve *

        """
        return _opensim.ForceVelocityCurve_upd_eccentric_curviness(self, *args)


    def set_eccentric_curviness(self, *args):
        """
        set_eccentric_curviness(ForceVelocityCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_eccentric_curviness(ForceVelocityCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityCurve_set_eccentric_curviness(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ForceVelocityCurve self) -> ForceVelocityCurve
        __init__(OpenSim::ForceVelocityCurve self, double concentricSlopeAtVmax, double concentricSlopeNearVmax, double isometricSlope, double eccentricSlopeAtVmax, double eccentricSlopeNearVmax, double maxEccentricVelocityForceMultiplier, double concentricCurviness, double eccentricCurviness) -> ForceVelocityCurve

        Parameters:
            concentricSlopeAtVmax: double
            concentricSlopeNearVmax: double
            isometricSlope: double
            eccentricSlopeAtVmax: double
            eccentricSlopeNearVmax: double
            maxEccentricVelocityForceMultiplier: double
            concentricCurviness: double
            eccentricCurviness: double

        """
        this = _opensim.new_ForceVelocityCurve(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getConcentricSlopeAtVmax(self):
        """
        getConcentricSlopeAtVmax(ForceVelocityCurve self) -> double

        Parameters:
            self: OpenSim::ForceVelocityCurve const *

        """
        return _opensim.ForceVelocityCurve_getConcentricSlopeAtVmax(self)


    def getConcentricSlopeNearVmax(self):
        """
        getConcentricSlopeNearVmax(ForceVelocityCurve self) -> double

        Parameters:
            self: OpenSim::ForceVelocityCurve const *

        """
        return _opensim.ForceVelocityCurve_getConcentricSlopeNearVmax(self)


    def getIsometricSlope(self):
        """
        getIsometricSlope(ForceVelocityCurve self) -> double

        Parameters:
            self: OpenSim::ForceVelocityCurve const *

        """
        return _opensim.ForceVelocityCurve_getIsometricSlope(self)


    def getEccentricSlopeAtVmax(self):
        """
        getEccentricSlopeAtVmax(ForceVelocityCurve self) -> double

        Parameters:
            self: OpenSim::ForceVelocityCurve const *

        """
        return _opensim.ForceVelocityCurve_getEccentricSlopeAtVmax(self)


    def getEccentricSlopeNearVmax(self):
        """
        getEccentricSlopeNearVmax(ForceVelocityCurve self) -> double

        Parameters:
            self: OpenSim::ForceVelocityCurve const *

        """
        return _opensim.ForceVelocityCurve_getEccentricSlopeNearVmax(self)


    def getMaxEccentricVelocityForceMultiplier(self):
        """
        getMaxEccentricVelocityForceMultiplier(ForceVelocityCurve self) -> double

        Parameters:
            self: OpenSim::ForceVelocityCurve const *

        """
        return _opensim.ForceVelocityCurve_getMaxEccentricVelocityForceMultiplier(self)


    def getConcentricCurviness(self):
        """
        getConcentricCurviness(ForceVelocityCurve self) -> double

        Parameters:
            self: OpenSim::ForceVelocityCurve const *

        """
        return _opensim.ForceVelocityCurve_getConcentricCurviness(self)


    def getEccentricCurviness(self):
        """
        getEccentricCurviness(ForceVelocityCurve self) -> double

        Parameters:
            self: OpenSim::ForceVelocityCurve const *

        """
        return _opensim.ForceVelocityCurve_getEccentricCurviness(self)


    def setCurveShape(self, aConcentricSlopeAtVmax, aConcentricSlopeNearVmax, aIsometricSlope, aEccentricSlopeAtVmax, aEccentricSlopeNearVmax, aMaxForceMultiplier):
        """
        setCurveShape(ForceVelocityCurve self, double aConcentricSlopeAtVmax, double aConcentricSlopeNearVmax, double aIsometricSlope, double aEccentricSlopeAtVmax, double aEccentricSlopeNearVmax, double aMaxForceMultiplier)

        Parameters:
            aConcentricSlopeAtVmax: double
            aConcentricSlopeNearVmax: double
            aIsometricSlope: double
            aEccentricSlopeAtVmax: double
            aEccentricSlopeNearVmax: double
            aMaxForceMultiplier: double

        """
        return _opensim.ForceVelocityCurve_setCurveShape(self, aConcentricSlopeAtVmax, aConcentricSlopeNearVmax, aIsometricSlope, aEccentricSlopeAtVmax, aEccentricSlopeNearVmax, aMaxForceMultiplier)


    def setConcentricCurviness(self, aConcentricCurviness):
        """
        setConcentricCurviness(ForceVelocityCurve self, double aConcentricCurviness)

        Parameters:
            aConcentricCurviness: double

        """
        return _opensim.ForceVelocityCurve_setConcentricCurviness(self, aConcentricCurviness)


    def setEccentricCurviness(self, aEccentricCurviness):
        """
        setEccentricCurviness(ForceVelocityCurve self, double aEccentricCurviness)

        Parameters:
            aEccentricCurviness: double

        """
        return _opensim.ForceVelocityCurve_setEccentricCurviness(self, aEccentricCurviness)


    def calcValue(self, *args):
        """
        calcValue(ForceVelocityCurve self, Vector x) -> double

        Parameters:
            x: SimTK::Vector const &

        calcValue(ForceVelocityCurve self, double normFiberVelocity) -> double

        Parameters:
            normFiberVelocity: double

        """
        return _opensim.ForceVelocityCurve_calcValue(self, *args)


    def calcDerivative(self, normFiberVelocity, order):
        """
        calcDerivative(ForceVelocityCurve self, double normFiberVelocity, int order) -> double

        Parameters:
            normFiberVelocity: double
            order: int

        """
        return _opensim.ForceVelocityCurve_calcDerivative(self, normFiberVelocity, order)


    def getCurveDomain(self):
        """
        getCurveDomain(ForceVelocityCurve self) -> Vec2

        Parameters:
            self: OpenSim::ForceVelocityCurve const *

        """
        return _opensim.ForceVelocityCurve_getCurveDomain(self)


    def printMuscleCurveToCSVFile(self, path):
        """
        printMuscleCurveToCSVFile(ForceVelocityCurve self, std::string const & path)

        Parameters:
            path: std::string const &

        """
        return _opensim.ForceVelocityCurve_printMuscleCurveToCSVFile(self, path)


    def ensureCurveUpToDate(self):
        """
        ensureCurveUpToDate(ForceVelocityCurve self)

        Parameters:
            self: OpenSim::ForceVelocityCurve *

        """
        return _opensim.ForceVelocityCurve_ensureCurveUpToDate(self)

    __swig_destroy__ = _opensim.delete_ForceVelocityCurve
    __del__ = lambda self: None
ForceVelocityCurve_swigregister = _opensim.ForceVelocityCurve_swigregister
ForceVelocityCurve_swigregister(ForceVelocityCurve)

def ForceVelocityCurve_safeDownCast(obj):
    """
    ForceVelocityCurve_safeDownCast(OpenSimObject obj) -> ForceVelocityCurve

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ForceVelocityCurve_safeDownCast(obj)

def ForceVelocityCurve_getClassName():
    """ForceVelocityCurve_getClassName() -> std::string const &"""
    return _opensim.ForceVelocityCurve_getClassName()

class ForceVelocityInverseCurve(Function):
    """Proxy of C++ OpenSim::ForceVelocityInverseCurve class"""
    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForceVelocityInverseCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForceVelocityInverseCurve, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ForceVelocityInverseCurve

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ForceVelocityInverseCurve_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ForceVelocityInverseCurve self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ForceVelocityInverseCurve_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ForceVelocityInverseCurve_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ForceVelocityInverseCurve self) -> ForceVelocityInverseCurve

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _opensim.ForceVelocityInverseCurve_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ForceVelocityInverseCurve self) -> std::string const &

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _opensim.ForceVelocityInverseCurve_getConcreteClassName(self)


    def copyProperty_concentric_slope_at_vmax(self, source):
        """
        copyProperty_concentric_slope_at_vmax(ForceVelocityInverseCurve self, ForceVelocityInverseCurve source)

        Parameters:
            source: OpenSim::ForceVelocityInverseCurve::Self const &

        """
        return _opensim.ForceVelocityInverseCurve_copyProperty_concentric_slope_at_vmax(self, source)


    def append_concentric_slope_at_vmax(self, value):
        """
        append_concentric_slope_at_vmax(ForceVelocityInverseCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityInverseCurve_append_concentric_slope_at_vmax(self, value)


    def constructProperty_concentric_slope_at_vmax(self, initValue):
        """
        constructProperty_concentric_slope_at_vmax(ForceVelocityInverseCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ForceVelocityInverseCurve_constructProperty_concentric_slope_at_vmax(self, initValue)


    def get_concentric_slope_at_vmax(self, *args):
        """
        get_concentric_slope_at_vmax(ForceVelocityInverseCurve self, int i) -> double const

        Parameters:
            i: int

        get_concentric_slope_at_vmax(ForceVelocityInverseCurve self) -> double const &

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _opensim.ForceVelocityInverseCurve_get_concentric_slope_at_vmax(self, *args)


    def upd_concentric_slope_at_vmax(self, *args):
        """
        upd_concentric_slope_at_vmax(ForceVelocityInverseCurve self, int i) -> double

        Parameters:
            i: int

        upd_concentric_slope_at_vmax(ForceVelocityInverseCurve self) -> double &

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve *

        """
        return _opensim.ForceVelocityInverseCurve_upd_concentric_slope_at_vmax(self, *args)


    def set_concentric_slope_at_vmax(self, *args):
        """
        set_concentric_slope_at_vmax(ForceVelocityInverseCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_concentric_slope_at_vmax(ForceVelocityInverseCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityInverseCurve_set_concentric_slope_at_vmax(self, *args)


    def copyProperty_concentric_slope_near_vmax(self, source):
        """
        copyProperty_concentric_slope_near_vmax(ForceVelocityInverseCurve self, ForceVelocityInverseCurve source)

        Parameters:
            source: OpenSim::ForceVelocityInverseCurve::Self const &

        """
        return _opensim.ForceVelocityInverseCurve_copyProperty_concentric_slope_near_vmax(self, source)


    def append_concentric_slope_near_vmax(self, value):
        """
        append_concentric_slope_near_vmax(ForceVelocityInverseCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityInverseCurve_append_concentric_slope_near_vmax(self, value)


    def constructProperty_concentric_slope_near_vmax(self, initValue):
        """
        constructProperty_concentric_slope_near_vmax(ForceVelocityInverseCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ForceVelocityInverseCurve_constructProperty_concentric_slope_near_vmax(self, initValue)


    def get_concentric_slope_near_vmax(self, *args):
        """
        get_concentric_slope_near_vmax(ForceVelocityInverseCurve self, int i) -> double const

        Parameters:
            i: int

        get_concentric_slope_near_vmax(ForceVelocityInverseCurve self) -> double const &

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _opensim.ForceVelocityInverseCurve_get_concentric_slope_near_vmax(self, *args)


    def upd_concentric_slope_near_vmax(self, *args):
        """
        upd_concentric_slope_near_vmax(ForceVelocityInverseCurve self, int i) -> double

        Parameters:
            i: int

        upd_concentric_slope_near_vmax(ForceVelocityInverseCurve self) -> double &

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve *

        """
        return _opensim.ForceVelocityInverseCurve_upd_concentric_slope_near_vmax(self, *args)


    def set_concentric_slope_near_vmax(self, *args):
        """
        set_concentric_slope_near_vmax(ForceVelocityInverseCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_concentric_slope_near_vmax(ForceVelocityInverseCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityInverseCurve_set_concentric_slope_near_vmax(self, *args)


    def copyProperty_isometric_slope(self, source):
        """
        copyProperty_isometric_slope(ForceVelocityInverseCurve self, ForceVelocityInverseCurve source)

        Parameters:
            source: OpenSim::ForceVelocityInverseCurve::Self const &

        """
        return _opensim.ForceVelocityInverseCurve_copyProperty_isometric_slope(self, source)


    def append_isometric_slope(self, value):
        """
        append_isometric_slope(ForceVelocityInverseCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityInverseCurve_append_isometric_slope(self, value)


    def constructProperty_isometric_slope(self, initValue):
        """
        constructProperty_isometric_slope(ForceVelocityInverseCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ForceVelocityInverseCurve_constructProperty_isometric_slope(self, initValue)


    def get_isometric_slope(self, *args):
        """
        get_isometric_slope(ForceVelocityInverseCurve self, int i) -> double const

        Parameters:
            i: int

        get_isometric_slope(ForceVelocityInverseCurve self) -> double const &

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _opensim.ForceVelocityInverseCurve_get_isometric_slope(self, *args)


    def upd_isometric_slope(self, *args):
        """
        upd_isometric_slope(ForceVelocityInverseCurve self, int i) -> double

        Parameters:
            i: int

        upd_isometric_slope(ForceVelocityInverseCurve self) -> double &

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve *

        """
        return _opensim.ForceVelocityInverseCurve_upd_isometric_slope(self, *args)


    def set_isometric_slope(self, *args):
        """
        set_isometric_slope(ForceVelocityInverseCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_isometric_slope(ForceVelocityInverseCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityInverseCurve_set_isometric_slope(self, *args)


    def copyProperty_eccentric_slope_at_vmax(self, source):
        """
        copyProperty_eccentric_slope_at_vmax(ForceVelocityInverseCurve self, ForceVelocityInverseCurve source)

        Parameters:
            source: OpenSim::ForceVelocityInverseCurve::Self const &

        """
        return _opensim.ForceVelocityInverseCurve_copyProperty_eccentric_slope_at_vmax(self, source)


    def append_eccentric_slope_at_vmax(self, value):
        """
        append_eccentric_slope_at_vmax(ForceVelocityInverseCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityInverseCurve_append_eccentric_slope_at_vmax(self, value)


    def constructProperty_eccentric_slope_at_vmax(self, initValue):
        """
        constructProperty_eccentric_slope_at_vmax(ForceVelocityInverseCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ForceVelocityInverseCurve_constructProperty_eccentric_slope_at_vmax(self, initValue)


    def get_eccentric_slope_at_vmax(self, *args):
        """
        get_eccentric_slope_at_vmax(ForceVelocityInverseCurve self, int i) -> double const

        Parameters:
            i: int

        get_eccentric_slope_at_vmax(ForceVelocityInverseCurve self) -> double const &

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _opensim.ForceVelocityInverseCurve_get_eccentric_slope_at_vmax(self, *args)


    def upd_eccentric_slope_at_vmax(self, *args):
        """
        upd_eccentric_slope_at_vmax(ForceVelocityInverseCurve self, int i) -> double

        Parameters:
            i: int

        upd_eccentric_slope_at_vmax(ForceVelocityInverseCurve self) -> double &

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve *

        """
        return _opensim.ForceVelocityInverseCurve_upd_eccentric_slope_at_vmax(self, *args)


    def set_eccentric_slope_at_vmax(self, *args):
        """
        set_eccentric_slope_at_vmax(ForceVelocityInverseCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_eccentric_slope_at_vmax(ForceVelocityInverseCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityInverseCurve_set_eccentric_slope_at_vmax(self, *args)


    def copyProperty_eccentric_slope_near_vmax(self, source):
        """
        copyProperty_eccentric_slope_near_vmax(ForceVelocityInverseCurve self, ForceVelocityInverseCurve source)

        Parameters:
            source: OpenSim::ForceVelocityInverseCurve::Self const &

        """
        return _opensim.ForceVelocityInverseCurve_copyProperty_eccentric_slope_near_vmax(self, source)


    def append_eccentric_slope_near_vmax(self, value):
        """
        append_eccentric_slope_near_vmax(ForceVelocityInverseCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityInverseCurve_append_eccentric_slope_near_vmax(self, value)


    def constructProperty_eccentric_slope_near_vmax(self, initValue):
        """
        constructProperty_eccentric_slope_near_vmax(ForceVelocityInverseCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ForceVelocityInverseCurve_constructProperty_eccentric_slope_near_vmax(self, initValue)


    def get_eccentric_slope_near_vmax(self, *args):
        """
        get_eccentric_slope_near_vmax(ForceVelocityInverseCurve self, int i) -> double const

        Parameters:
            i: int

        get_eccentric_slope_near_vmax(ForceVelocityInverseCurve self) -> double const &

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _opensim.ForceVelocityInverseCurve_get_eccentric_slope_near_vmax(self, *args)


    def upd_eccentric_slope_near_vmax(self, *args):
        """
        upd_eccentric_slope_near_vmax(ForceVelocityInverseCurve self, int i) -> double

        Parameters:
            i: int

        upd_eccentric_slope_near_vmax(ForceVelocityInverseCurve self) -> double &

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve *

        """
        return _opensim.ForceVelocityInverseCurve_upd_eccentric_slope_near_vmax(self, *args)


    def set_eccentric_slope_near_vmax(self, *args):
        """
        set_eccentric_slope_near_vmax(ForceVelocityInverseCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_eccentric_slope_near_vmax(ForceVelocityInverseCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityInverseCurve_set_eccentric_slope_near_vmax(self, *args)


    def copyProperty_max_eccentric_velocity_force_multiplier(self, source):
        """
        copyProperty_max_eccentric_velocity_force_multiplier(ForceVelocityInverseCurve self, ForceVelocityInverseCurve source)

        Parameters:
            source: OpenSim::ForceVelocityInverseCurve::Self const &

        """
        return _opensim.ForceVelocityInverseCurve_copyProperty_max_eccentric_velocity_force_multiplier(self, source)


    def append_max_eccentric_velocity_force_multiplier(self, value):
        """
        append_max_eccentric_velocity_force_multiplier(ForceVelocityInverseCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityInverseCurve_append_max_eccentric_velocity_force_multiplier(self, value)


    def constructProperty_max_eccentric_velocity_force_multiplier(self, initValue):
        """
        constructProperty_max_eccentric_velocity_force_multiplier(ForceVelocityInverseCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ForceVelocityInverseCurve_constructProperty_max_eccentric_velocity_force_multiplier(self, initValue)


    def get_max_eccentric_velocity_force_multiplier(self, *args):
        """
        get_max_eccentric_velocity_force_multiplier(ForceVelocityInverseCurve self, int i) -> double const

        Parameters:
            i: int

        get_max_eccentric_velocity_force_multiplier(ForceVelocityInverseCurve self) -> double const &

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _opensim.ForceVelocityInverseCurve_get_max_eccentric_velocity_force_multiplier(self, *args)


    def upd_max_eccentric_velocity_force_multiplier(self, *args):
        """
        upd_max_eccentric_velocity_force_multiplier(ForceVelocityInverseCurve self, int i) -> double

        Parameters:
            i: int

        upd_max_eccentric_velocity_force_multiplier(ForceVelocityInverseCurve self) -> double &

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve *

        """
        return _opensim.ForceVelocityInverseCurve_upd_max_eccentric_velocity_force_multiplier(self, *args)


    def set_max_eccentric_velocity_force_multiplier(self, *args):
        """
        set_max_eccentric_velocity_force_multiplier(ForceVelocityInverseCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_max_eccentric_velocity_force_multiplier(ForceVelocityInverseCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityInverseCurve_set_max_eccentric_velocity_force_multiplier(self, *args)


    def copyProperty_concentric_curviness(self, source):
        """
        copyProperty_concentric_curviness(ForceVelocityInverseCurve self, ForceVelocityInverseCurve source)

        Parameters:
            source: OpenSim::ForceVelocityInverseCurve::Self const &

        """
        return _opensim.ForceVelocityInverseCurve_copyProperty_concentric_curviness(self, source)


    def append_concentric_curviness(self, value):
        """
        append_concentric_curviness(ForceVelocityInverseCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityInverseCurve_append_concentric_curviness(self, value)


    def constructProperty_concentric_curviness(self, initValue):
        """
        constructProperty_concentric_curviness(ForceVelocityInverseCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ForceVelocityInverseCurve_constructProperty_concentric_curviness(self, initValue)


    def get_concentric_curviness(self, *args):
        """
        get_concentric_curviness(ForceVelocityInverseCurve self, int i) -> double const

        Parameters:
            i: int

        get_concentric_curviness(ForceVelocityInverseCurve self) -> double const &

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _opensim.ForceVelocityInverseCurve_get_concentric_curviness(self, *args)


    def upd_concentric_curviness(self, *args):
        """
        upd_concentric_curviness(ForceVelocityInverseCurve self, int i) -> double

        Parameters:
            i: int

        upd_concentric_curviness(ForceVelocityInverseCurve self) -> double &

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve *

        """
        return _opensim.ForceVelocityInverseCurve_upd_concentric_curviness(self, *args)


    def set_concentric_curviness(self, *args):
        """
        set_concentric_curviness(ForceVelocityInverseCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_concentric_curviness(ForceVelocityInverseCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityInverseCurve_set_concentric_curviness(self, *args)


    def copyProperty_eccentric_curviness(self, source):
        """
        copyProperty_eccentric_curviness(ForceVelocityInverseCurve self, ForceVelocityInverseCurve source)

        Parameters:
            source: OpenSim::ForceVelocityInverseCurve::Self const &

        """
        return _opensim.ForceVelocityInverseCurve_copyProperty_eccentric_curviness(self, source)


    def append_eccentric_curviness(self, value):
        """
        append_eccentric_curviness(ForceVelocityInverseCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityInverseCurve_append_eccentric_curviness(self, value)


    def constructProperty_eccentric_curviness(self, initValue):
        """
        constructProperty_eccentric_curviness(ForceVelocityInverseCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.ForceVelocityInverseCurve_constructProperty_eccentric_curviness(self, initValue)


    def get_eccentric_curviness(self, *args):
        """
        get_eccentric_curviness(ForceVelocityInverseCurve self, int i) -> double const

        Parameters:
            i: int

        get_eccentric_curviness(ForceVelocityInverseCurve self) -> double const &

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _opensim.ForceVelocityInverseCurve_get_eccentric_curviness(self, *args)


    def upd_eccentric_curviness(self, *args):
        """
        upd_eccentric_curviness(ForceVelocityInverseCurve self, int i) -> double

        Parameters:
            i: int

        upd_eccentric_curviness(ForceVelocityInverseCurve self) -> double &

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve *

        """
        return _opensim.ForceVelocityInverseCurve_upd_eccentric_curviness(self, *args)


    def set_eccentric_curviness(self, *args):
        """
        set_eccentric_curviness(ForceVelocityInverseCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_eccentric_curviness(ForceVelocityInverseCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.ForceVelocityInverseCurve_set_eccentric_curviness(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ForceVelocityInverseCurve self) -> ForceVelocityInverseCurve
        __init__(OpenSim::ForceVelocityInverseCurve self, double concentricSlopeAtVmax, double concentricSlopeNearVmax, double isometricSlope, double eccentricSlopeAtVmax, double eccentricSlopeNearVmax, double maxEccentricVelocityForceMultiplier, double concentricCurviness, double eccentricCurviness) -> ForceVelocityInverseCurve

        Parameters:
            concentricSlopeAtVmax: double
            concentricSlopeNearVmax: double
            isometricSlope: double
            eccentricSlopeAtVmax: double
            eccentricSlopeNearVmax: double
            maxEccentricVelocityForceMultiplier: double
            concentricCurviness: double
            eccentricCurviness: double

        """
        this = _opensim.new_ForceVelocityInverseCurve(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getConcentricSlopeAtVmax(self):
        """
        getConcentricSlopeAtVmax(ForceVelocityInverseCurve self) -> double

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _opensim.ForceVelocityInverseCurve_getConcentricSlopeAtVmax(self)


    def getConcentricSlopeNearVmax(self):
        """
        getConcentricSlopeNearVmax(ForceVelocityInverseCurve self) -> double

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _opensim.ForceVelocityInverseCurve_getConcentricSlopeNearVmax(self)


    def getIsometricSlope(self):
        """
        getIsometricSlope(ForceVelocityInverseCurve self) -> double

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _opensim.ForceVelocityInverseCurve_getIsometricSlope(self)


    def getEccentricSlopeAtVmax(self):
        """
        getEccentricSlopeAtVmax(ForceVelocityInverseCurve self) -> double

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _opensim.ForceVelocityInverseCurve_getEccentricSlopeAtVmax(self)


    def getEccentricSlopeNearVmax(self):
        """
        getEccentricSlopeNearVmax(ForceVelocityInverseCurve self) -> double

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _opensim.ForceVelocityInverseCurve_getEccentricSlopeNearVmax(self)


    def getMaxEccentricVelocityForceMultiplier(self):
        """
        getMaxEccentricVelocityForceMultiplier(ForceVelocityInverseCurve self) -> double

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _opensim.ForceVelocityInverseCurve_getMaxEccentricVelocityForceMultiplier(self)


    def getConcentricCurviness(self):
        """
        getConcentricCurviness(ForceVelocityInverseCurve self) -> double

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _opensim.ForceVelocityInverseCurve_getConcentricCurviness(self)


    def getEccentricCurviness(self):
        """
        getEccentricCurviness(ForceVelocityInverseCurve self) -> double

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _opensim.ForceVelocityInverseCurve_getEccentricCurviness(self)


    def setCurveShape(self, aConcentricSlopeAtVmax, aConcentricSlopeNearVmax, aIsometricSlope, aEccentricSlopeAtVmax, aEccentricSlopeNearVmax, aMaxForceMultiplier):
        """
        setCurveShape(ForceVelocityInverseCurve self, double aConcentricSlopeAtVmax, double aConcentricSlopeNearVmax, double aIsometricSlope, double aEccentricSlopeAtVmax, double aEccentricSlopeNearVmax, double aMaxForceMultiplier)

        Parameters:
            aConcentricSlopeAtVmax: double
            aConcentricSlopeNearVmax: double
            aIsometricSlope: double
            aEccentricSlopeAtVmax: double
            aEccentricSlopeNearVmax: double
            aMaxForceMultiplier: double

        """
        return _opensim.ForceVelocityInverseCurve_setCurveShape(self, aConcentricSlopeAtVmax, aConcentricSlopeNearVmax, aIsometricSlope, aEccentricSlopeAtVmax, aEccentricSlopeNearVmax, aMaxForceMultiplier)


    def setConcentricCurviness(self, aConcentricCurviness):
        """
        setConcentricCurviness(ForceVelocityInverseCurve self, double aConcentricCurviness)

        Parameters:
            aConcentricCurviness: double

        """
        return _opensim.ForceVelocityInverseCurve_setConcentricCurviness(self, aConcentricCurviness)


    def setEccentricCurviness(self, aEccentricCurviness):
        """
        setEccentricCurviness(ForceVelocityInverseCurve self, double aEccentricCurviness)

        Parameters:
            aEccentricCurviness: double

        """
        return _opensim.ForceVelocityInverseCurve_setEccentricCurviness(self, aEccentricCurviness)


    def calcValue(self, *args):
        """
        calcValue(ForceVelocityInverseCurve self, Vector x) -> double

        Parameters:
            x: SimTK::Vector const &

        calcValue(ForceVelocityInverseCurve self, double aForceVelocityMultiplier) -> double

        Parameters:
            aForceVelocityMultiplier: double

        """
        return _opensim.ForceVelocityInverseCurve_calcValue(self, *args)


    def calcDerivative(self, aForceVelocityMultiplier, order):
        """
        calcDerivative(ForceVelocityInverseCurve self, double aForceVelocityMultiplier, int order) -> double

        Parameters:
            aForceVelocityMultiplier: double
            order: int

        """
        return _opensim.ForceVelocityInverseCurve_calcDerivative(self, aForceVelocityMultiplier, order)


    def getCurveDomain(self):
        """
        getCurveDomain(ForceVelocityInverseCurve self) -> Vec2

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _opensim.ForceVelocityInverseCurve_getCurveDomain(self)


    def printMuscleCurveToCSVFile(self, path):
        """
        printMuscleCurveToCSVFile(ForceVelocityInverseCurve self, std::string const & path)

        Parameters:
            path: std::string const &

        """
        return _opensim.ForceVelocityInverseCurve_printMuscleCurveToCSVFile(self, path)


    def ensureCurveUpToDate(self):
        """
        ensureCurveUpToDate(ForceVelocityInverseCurve self)

        Parameters:
            self: OpenSim::ForceVelocityInverseCurve *

        """
        return _opensim.ForceVelocityInverseCurve_ensureCurveUpToDate(self)

    __swig_destroy__ = _opensim.delete_ForceVelocityInverseCurve
    __del__ = lambda self: None
ForceVelocityInverseCurve_swigregister = _opensim.ForceVelocityInverseCurve_swigregister
ForceVelocityInverseCurve_swigregister(ForceVelocityInverseCurve)

def ForceVelocityInverseCurve_safeDownCast(obj):
    """
    ForceVelocityInverseCurve_safeDownCast(OpenSimObject obj) -> ForceVelocityInverseCurve

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ForceVelocityInverseCurve_safeDownCast(obj)

def ForceVelocityInverseCurve_getClassName():
    """ForceVelocityInverseCurve_getClassName() -> std::string const &"""
    return _opensim.ForceVelocityInverseCurve_getClassName()

class TendonForceLengthCurve(Function):
    """Proxy of C++ OpenSim::TendonForceLengthCurve class"""
    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TendonForceLengthCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TendonForceLengthCurve, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> TendonForceLengthCurve

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.TendonForceLengthCurve_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(TendonForceLengthCurve self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.TendonForceLengthCurve_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.TendonForceLengthCurve_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(TendonForceLengthCurve self) -> TendonForceLengthCurve

        Parameters:
            self: OpenSim::TendonForceLengthCurve const *

        """
        return _opensim.TendonForceLengthCurve_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(TendonForceLengthCurve self) -> std::string const &

        Parameters:
            self: OpenSim::TendonForceLengthCurve const *

        """
        return _opensim.TendonForceLengthCurve_getConcreteClassName(self)


    def copyProperty_strain_at_one_norm_force(self, source):
        """
        copyProperty_strain_at_one_norm_force(TendonForceLengthCurve self, TendonForceLengthCurve source)

        Parameters:
            source: OpenSim::TendonForceLengthCurve::Self const &

        """
        return _opensim.TendonForceLengthCurve_copyProperty_strain_at_one_norm_force(self, source)


    def append_strain_at_one_norm_force(self, value):
        """
        append_strain_at_one_norm_force(TendonForceLengthCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.TendonForceLengthCurve_append_strain_at_one_norm_force(self, value)


    def constructProperty_strain_at_one_norm_force(self, initValue):
        """
        constructProperty_strain_at_one_norm_force(TendonForceLengthCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.TendonForceLengthCurve_constructProperty_strain_at_one_norm_force(self, initValue)


    def get_strain_at_one_norm_force(self, *args):
        """
        get_strain_at_one_norm_force(TendonForceLengthCurve self, int i) -> double const

        Parameters:
            i: int

        get_strain_at_one_norm_force(TendonForceLengthCurve self) -> double const &

        Parameters:
            self: OpenSim::TendonForceLengthCurve const *

        """
        return _opensim.TendonForceLengthCurve_get_strain_at_one_norm_force(self, *args)


    def upd_strain_at_one_norm_force(self, *args):
        """
        upd_strain_at_one_norm_force(TendonForceLengthCurve self, int i) -> double

        Parameters:
            i: int

        upd_strain_at_one_norm_force(TendonForceLengthCurve self) -> double &

        Parameters:
            self: OpenSim::TendonForceLengthCurve *

        """
        return _opensim.TendonForceLengthCurve_upd_strain_at_one_norm_force(self, *args)


    def set_strain_at_one_norm_force(self, *args):
        """
        set_strain_at_one_norm_force(TendonForceLengthCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_strain_at_one_norm_force(TendonForceLengthCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.TendonForceLengthCurve_set_strain_at_one_norm_force(self, *args)


    def copyProperty_stiffness_at_one_norm_force(self, source):
        """
        copyProperty_stiffness_at_one_norm_force(TendonForceLengthCurve self, TendonForceLengthCurve source)

        Parameters:
            source: OpenSim::TendonForceLengthCurve::Self const &

        """
        return _opensim.TendonForceLengthCurve_copyProperty_stiffness_at_one_norm_force(self, source)


    def append_stiffness_at_one_norm_force(self, value):
        """
        append_stiffness_at_one_norm_force(TendonForceLengthCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.TendonForceLengthCurve_append_stiffness_at_one_norm_force(self, value)


    def constructProperty_stiffness_at_one_norm_force(self, *args):
        """
        constructProperty_stiffness_at_one_norm_force(TendonForceLengthCurve self)
        constructProperty_stiffness_at_one_norm_force(TendonForceLengthCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.TendonForceLengthCurve_constructProperty_stiffness_at_one_norm_force(self, *args)


    def get_stiffness_at_one_norm_force(self, *args):
        """
        get_stiffness_at_one_norm_force(TendonForceLengthCurve self, int i) -> double const

        Parameters:
            i: int

        get_stiffness_at_one_norm_force(TendonForceLengthCurve self) -> double const &

        Parameters:
            self: OpenSim::TendonForceLengthCurve const *

        """
        return _opensim.TendonForceLengthCurve_get_stiffness_at_one_norm_force(self, *args)


    def upd_stiffness_at_one_norm_force(self, *args):
        """
        upd_stiffness_at_one_norm_force(TendonForceLengthCurve self, int i) -> double

        Parameters:
            i: int

        upd_stiffness_at_one_norm_force(TendonForceLengthCurve self) -> double &

        Parameters:
            self: OpenSim::TendonForceLengthCurve *

        """
        return _opensim.TendonForceLengthCurve_upd_stiffness_at_one_norm_force(self, *args)


    def set_stiffness_at_one_norm_force(self, *args):
        """
        set_stiffness_at_one_norm_force(TendonForceLengthCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_stiffness_at_one_norm_force(TendonForceLengthCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.TendonForceLengthCurve_set_stiffness_at_one_norm_force(self, *args)


    def copyProperty_norm_force_at_toe_end(self, source):
        """
        copyProperty_norm_force_at_toe_end(TendonForceLengthCurve self, TendonForceLengthCurve source)

        Parameters:
            source: OpenSim::TendonForceLengthCurve::Self const &

        """
        return _opensim.TendonForceLengthCurve_copyProperty_norm_force_at_toe_end(self, source)


    def append_norm_force_at_toe_end(self, value):
        """
        append_norm_force_at_toe_end(TendonForceLengthCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.TendonForceLengthCurve_append_norm_force_at_toe_end(self, value)


    def constructProperty_norm_force_at_toe_end(self, *args):
        """
        constructProperty_norm_force_at_toe_end(TendonForceLengthCurve self)
        constructProperty_norm_force_at_toe_end(TendonForceLengthCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.TendonForceLengthCurve_constructProperty_norm_force_at_toe_end(self, *args)


    def get_norm_force_at_toe_end(self, *args):
        """
        get_norm_force_at_toe_end(TendonForceLengthCurve self, int i) -> double const

        Parameters:
            i: int

        get_norm_force_at_toe_end(TendonForceLengthCurve self) -> double const &

        Parameters:
            self: OpenSim::TendonForceLengthCurve const *

        """
        return _opensim.TendonForceLengthCurve_get_norm_force_at_toe_end(self, *args)


    def upd_norm_force_at_toe_end(self, *args):
        """
        upd_norm_force_at_toe_end(TendonForceLengthCurve self, int i) -> double

        Parameters:
            i: int

        upd_norm_force_at_toe_end(TendonForceLengthCurve self) -> double &

        Parameters:
            self: OpenSim::TendonForceLengthCurve *

        """
        return _opensim.TendonForceLengthCurve_upd_norm_force_at_toe_end(self, *args)


    def set_norm_force_at_toe_end(self, *args):
        """
        set_norm_force_at_toe_end(TendonForceLengthCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_norm_force_at_toe_end(TendonForceLengthCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.TendonForceLengthCurve_set_norm_force_at_toe_end(self, *args)


    def copyProperty_curviness(self, source):
        """
        copyProperty_curviness(TendonForceLengthCurve self, TendonForceLengthCurve source)

        Parameters:
            source: OpenSim::TendonForceLengthCurve::Self const &

        """
        return _opensim.TendonForceLengthCurve_copyProperty_curviness(self, source)


    def append_curviness(self, value):
        """
        append_curviness(TendonForceLengthCurve self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.TendonForceLengthCurve_append_curviness(self, value)


    def constructProperty_curviness(self, *args):
        """
        constructProperty_curviness(TendonForceLengthCurve self)
        constructProperty_curviness(TendonForceLengthCurve self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.TendonForceLengthCurve_constructProperty_curviness(self, *args)


    def get_curviness(self, *args):
        """
        get_curviness(TendonForceLengthCurve self, int i) -> double const

        Parameters:
            i: int

        get_curviness(TendonForceLengthCurve self) -> double const &

        Parameters:
            self: OpenSim::TendonForceLengthCurve const *

        """
        return _opensim.TendonForceLengthCurve_get_curviness(self, *args)


    def upd_curviness(self, *args):
        """
        upd_curviness(TendonForceLengthCurve self, int i) -> double

        Parameters:
            i: int

        upd_curviness(TendonForceLengthCurve self) -> double &

        Parameters:
            self: OpenSim::TendonForceLengthCurve *

        """
        return _opensim.TendonForceLengthCurve_upd_curviness(self, *args)


    def set_curviness(self, *args):
        """
        set_curviness(TendonForceLengthCurve self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_curviness(TendonForceLengthCurve self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.TendonForceLengthCurve_set_curviness(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::TendonForceLengthCurve self) -> TendonForceLengthCurve
        __init__(OpenSim::TendonForceLengthCurve self, double strainAtOneNormForce, double stiffnessAtOneNormForce, double normForceAtToeEnd, double curviness) -> TendonForceLengthCurve

        Parameters:
            strainAtOneNormForce: double
            stiffnessAtOneNormForce: double
            normForceAtToeEnd: double
            curviness: double

        __init__(OpenSim::TendonForceLengthCurve self, double strainAtOneNormForce) -> TendonForceLengthCurve

        Parameters:
            strainAtOneNormForce: double

        """
        this = _opensim.new_TendonForceLengthCurve(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getStrainAtOneNormForce(self):
        """
        getStrainAtOneNormForce(TendonForceLengthCurve self) -> double

        Parameters:
            self: OpenSim::TendonForceLengthCurve const *

        """
        return _opensim.TendonForceLengthCurve_getStrainAtOneNormForce(self)


    def getStiffnessAtOneNormForceInUse(self):
        """
        getStiffnessAtOneNormForceInUse(TendonForceLengthCurve self) -> double

        Parameters:
            self: OpenSim::TendonForceLengthCurve const *

        """
        return _opensim.TendonForceLengthCurve_getStiffnessAtOneNormForceInUse(self)


    def getNormForceAtToeEndInUse(self):
        """
        getNormForceAtToeEndInUse(TendonForceLengthCurve self) -> double

        Parameters:
            self: OpenSim::TendonForceLengthCurve const *

        """
        return _opensim.TendonForceLengthCurve_getNormForceAtToeEndInUse(self)


    def getCurvinessInUse(self):
        """
        getCurvinessInUse(TendonForceLengthCurve self) -> double

        Parameters:
            self: OpenSim::TendonForceLengthCurve const *

        """
        return _opensim.TendonForceLengthCurve_getCurvinessInUse(self)


    def isFittedCurveBeingUsed(self):
        """
        isFittedCurveBeingUsed(TendonForceLengthCurve self) -> bool

        Parameters:
            self: OpenSim::TendonForceLengthCurve const *

        """
        return _opensim.TendonForceLengthCurve_isFittedCurveBeingUsed(self)


    def setStrainAtOneNormForce(self, aStrainAtOneNormForce):
        """
        setStrainAtOneNormForce(TendonForceLengthCurve self, double aStrainAtOneNormForce)

        Parameters:
            aStrainAtOneNormForce: double

        """
        return _opensim.TendonForceLengthCurve_setStrainAtOneNormForce(self, aStrainAtOneNormForce)


    def setOptionalProperties(self, stiffnessAtOneNormForce, normForceAtToeEnd, curviness):
        """
        setOptionalProperties(TendonForceLengthCurve self, double stiffnessAtOneNormForce, double normForceAtToeEnd, double curviness)

        Parameters:
            stiffnessAtOneNormForce: double
            normForceAtToeEnd: double
            curviness: double

        """
        return _opensim.TendonForceLengthCurve_setOptionalProperties(self, stiffnessAtOneNormForce, normForceAtToeEnd, curviness)


    def calcValue(self, *args):
        """
        calcValue(TendonForceLengthCurve self, Vector x) -> double

        Parameters:
            x: SimTK::Vector const &

        calcValue(TendonForceLengthCurve self, double aNormLength) -> double

        Parameters:
            aNormLength: double

        """
        return _opensim.TendonForceLengthCurve_calcValue(self, *args)


    def calcDerivative(self, aNormLength, order):
        """
        calcDerivative(TendonForceLengthCurve self, double aNormLength, int order) -> double

        Parameters:
            aNormLength: double
            order: int

        """
        return _opensim.TendonForceLengthCurve_calcDerivative(self, aNormLength, order)


    def calcIntegral(self, aNormLength):
        """
        calcIntegral(TendonForceLengthCurve self, double aNormLength) -> double

        Parameters:
            aNormLength: double

        """
        return _opensim.TendonForceLengthCurve_calcIntegral(self, aNormLength)


    def getCurveDomain(self):
        """
        getCurveDomain(TendonForceLengthCurve self) -> Vec2

        Parameters:
            self: OpenSim::TendonForceLengthCurve const *

        """
        return _opensim.TendonForceLengthCurve_getCurveDomain(self)


    def printMuscleCurveToCSVFile(self, path):
        """
        printMuscleCurveToCSVFile(TendonForceLengthCurve self, std::string const & path)

        Parameters:
            path: std::string const &

        """
        return _opensim.TendonForceLengthCurve_printMuscleCurveToCSVFile(self, path)


    def ensureCurveUpToDate(self):
        """
        ensureCurveUpToDate(TendonForceLengthCurve self)

        Parameters:
            self: OpenSim::TendonForceLengthCurve *

        """
        return _opensim.TendonForceLengthCurve_ensureCurveUpToDate(self)

    __swig_destroy__ = _opensim.delete_TendonForceLengthCurve
    __del__ = lambda self: None
TendonForceLengthCurve_swigregister = _opensim.TendonForceLengthCurve_swigregister
TendonForceLengthCurve_swigregister(TendonForceLengthCurve)

def TendonForceLengthCurve_safeDownCast(obj):
    """
    TendonForceLengthCurve_safeDownCast(OpenSimObject obj) -> TendonForceLengthCurve

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.TendonForceLengthCurve_safeDownCast(obj)

def TendonForceLengthCurve_getClassName():
    """TendonForceLengthCurve_getClassName() -> std::string const &"""
    return _opensim.TendonForceLengthCurve_getClassName()

class MuscleFirstOrderActivationDynamicModel(OpenSimObject):
    """Proxy of C++ OpenSim::MuscleFirstOrderActivationDynamicModel class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MuscleFirstOrderActivationDynamicModel, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MuscleFirstOrderActivationDynamicModel, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MuscleFirstOrderActivationDynamicModel

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(MuscleFirstOrderActivationDynamicModel self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.MuscleFirstOrderActivationDynamicModel_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(MuscleFirstOrderActivationDynamicModel self) -> MuscleFirstOrderActivationDynamicModel

        Parameters:
            self: OpenSim::MuscleFirstOrderActivationDynamicModel const *

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MuscleFirstOrderActivationDynamicModel self) -> std::string const &

        Parameters:
            self: OpenSim::MuscleFirstOrderActivationDynamicModel const *

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_getConcreteClassName(self)


    def copyProperty_activation_time_constant(self, source):
        """
        copyProperty_activation_time_constant(MuscleFirstOrderActivationDynamicModel self, MuscleFirstOrderActivationDynamicModel source)

        Parameters:
            source: OpenSim::MuscleFirstOrderActivationDynamicModel::Self const &

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_copyProperty_activation_time_constant(self, source)


    def append_activation_time_constant(self, value):
        """
        append_activation_time_constant(MuscleFirstOrderActivationDynamicModel self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_append_activation_time_constant(self, value)


    def constructProperty_activation_time_constant(self, initValue):
        """
        constructProperty_activation_time_constant(MuscleFirstOrderActivationDynamicModel self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_constructProperty_activation_time_constant(self, initValue)


    def get_activation_time_constant(self, *args):
        """
        get_activation_time_constant(MuscleFirstOrderActivationDynamicModel self, int i) -> double const

        Parameters:
            i: int

        get_activation_time_constant(MuscleFirstOrderActivationDynamicModel self) -> double const &

        Parameters:
            self: OpenSim::MuscleFirstOrderActivationDynamicModel const *

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_get_activation_time_constant(self, *args)


    def upd_activation_time_constant(self, *args):
        """
        upd_activation_time_constant(MuscleFirstOrderActivationDynamicModel self, int i) -> double

        Parameters:
            i: int

        upd_activation_time_constant(MuscleFirstOrderActivationDynamicModel self) -> double &

        Parameters:
            self: OpenSim::MuscleFirstOrderActivationDynamicModel *

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_upd_activation_time_constant(self, *args)


    def set_activation_time_constant(self, *args):
        """
        set_activation_time_constant(MuscleFirstOrderActivationDynamicModel self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_activation_time_constant(MuscleFirstOrderActivationDynamicModel self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_set_activation_time_constant(self, *args)


    def copyProperty_deactivation_time_constant(self, source):
        """
        copyProperty_deactivation_time_constant(MuscleFirstOrderActivationDynamicModel self, MuscleFirstOrderActivationDynamicModel source)

        Parameters:
            source: OpenSim::MuscleFirstOrderActivationDynamicModel::Self const &

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_copyProperty_deactivation_time_constant(self, source)


    def append_deactivation_time_constant(self, value):
        """
        append_deactivation_time_constant(MuscleFirstOrderActivationDynamicModel self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_append_deactivation_time_constant(self, value)


    def constructProperty_deactivation_time_constant(self, initValue):
        """
        constructProperty_deactivation_time_constant(MuscleFirstOrderActivationDynamicModel self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_constructProperty_deactivation_time_constant(self, initValue)


    def get_deactivation_time_constant(self, *args):
        """
        get_deactivation_time_constant(MuscleFirstOrderActivationDynamicModel self, int i) -> double const

        Parameters:
            i: int

        get_deactivation_time_constant(MuscleFirstOrderActivationDynamicModel self) -> double const &

        Parameters:
            self: OpenSim::MuscleFirstOrderActivationDynamicModel const *

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_get_deactivation_time_constant(self, *args)


    def upd_deactivation_time_constant(self, *args):
        """
        upd_deactivation_time_constant(MuscleFirstOrderActivationDynamicModel self, int i) -> double

        Parameters:
            i: int

        upd_deactivation_time_constant(MuscleFirstOrderActivationDynamicModel self) -> double &

        Parameters:
            self: OpenSim::MuscleFirstOrderActivationDynamicModel *

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_upd_deactivation_time_constant(self, *args)


    def set_deactivation_time_constant(self, *args):
        """
        set_deactivation_time_constant(MuscleFirstOrderActivationDynamicModel self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_deactivation_time_constant(MuscleFirstOrderActivationDynamicModel self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_set_deactivation_time_constant(self, *args)


    def copyProperty_minimum_activation(self, source):
        """
        copyProperty_minimum_activation(MuscleFirstOrderActivationDynamicModel self, MuscleFirstOrderActivationDynamicModel source)

        Parameters:
            source: OpenSim::MuscleFirstOrderActivationDynamicModel::Self const &

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_copyProperty_minimum_activation(self, source)


    def append_minimum_activation(self, value):
        """
        append_minimum_activation(MuscleFirstOrderActivationDynamicModel self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_append_minimum_activation(self, value)


    def constructProperty_minimum_activation(self, initValue):
        """
        constructProperty_minimum_activation(MuscleFirstOrderActivationDynamicModel self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_constructProperty_minimum_activation(self, initValue)


    def get_minimum_activation(self, *args):
        """
        get_minimum_activation(MuscleFirstOrderActivationDynamicModel self, int i) -> double const

        Parameters:
            i: int

        get_minimum_activation(MuscleFirstOrderActivationDynamicModel self) -> double const &

        Parameters:
            self: OpenSim::MuscleFirstOrderActivationDynamicModel const *

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_get_minimum_activation(self, *args)


    def upd_minimum_activation(self, *args):
        """
        upd_minimum_activation(MuscleFirstOrderActivationDynamicModel self, int i) -> double

        Parameters:
            i: int

        upd_minimum_activation(MuscleFirstOrderActivationDynamicModel self) -> double &

        Parameters:
            self: OpenSim::MuscleFirstOrderActivationDynamicModel *

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_upd_minimum_activation(self, *args)


    def set_minimum_activation(self, *args):
        """
        set_minimum_activation(MuscleFirstOrderActivationDynamicModel self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_minimum_activation(MuscleFirstOrderActivationDynamicModel self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_set_minimum_activation(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::MuscleFirstOrderActivationDynamicModel self) -> MuscleFirstOrderActivationDynamicModel
        __init__(OpenSim::MuscleFirstOrderActivationDynamicModel self, double tauActivation, double tauDeactivation, double minActivation, std::string const & muscleName) -> MuscleFirstOrderActivationDynamicModel

        Parameters:
            tauActivation: double
            tauDeactivation: double
            minActivation: double
            muscleName: std::string const &

        """
        this = _opensim.new_MuscleFirstOrderActivationDynamicModel(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def ensureModelUpToDate(self):
        """
        ensureModelUpToDate(MuscleFirstOrderActivationDynamicModel self)

        Parameters:
            self: OpenSim::MuscleFirstOrderActivationDynamicModel *

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_ensureModelUpToDate(self)


    def getActivationTimeConstant(self):
        """
        getActivationTimeConstant(MuscleFirstOrderActivationDynamicModel self) -> double

        Parameters:
            self: OpenSim::MuscleFirstOrderActivationDynamicModel const *

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_getActivationTimeConstant(self)


    def getDeactivationTimeConstant(self):
        """
        getDeactivationTimeConstant(MuscleFirstOrderActivationDynamicModel self) -> double

        Parameters:
            self: OpenSim::MuscleFirstOrderActivationDynamicModel const *

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_getDeactivationTimeConstant(self)


    def getMinimumActivation(self):
        """
        getMinimumActivation(MuscleFirstOrderActivationDynamicModel self) -> double

        Parameters:
            self: OpenSim::MuscleFirstOrderActivationDynamicModel const *

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_getMinimumActivation(self)


    def getMaximumActivation(self):
        """
        getMaximumActivation(MuscleFirstOrderActivationDynamicModel self) -> double

        Parameters:
            self: OpenSim::MuscleFirstOrderActivationDynamicModel const *

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_getMaximumActivation(self)


    def setActivationTimeConstant(self, activationTimeConstant):
        """
        setActivationTimeConstant(MuscleFirstOrderActivationDynamicModel self, double activationTimeConstant) -> bool

        Parameters:
            activationTimeConstant: double

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_setActivationTimeConstant(self, activationTimeConstant)


    def setDeactivationTimeConstant(self, deactivationTimeConstant):
        """
        setDeactivationTimeConstant(MuscleFirstOrderActivationDynamicModel self, double deactivationTimeConstant) -> bool

        Parameters:
            deactivationTimeConstant: double

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_setDeactivationTimeConstant(self, deactivationTimeConstant)


    def setMinimumActivation(self, minimumActivation):
        """
        setMinimumActivation(MuscleFirstOrderActivationDynamicModel self, double minimumActivation) -> bool

        Parameters:
            minimumActivation: double

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_setMinimumActivation(self, minimumActivation)


    def clampActivation(self, activation):
        """
        clampActivation(MuscleFirstOrderActivationDynamicModel self, double activation) -> double

        Parameters:
            activation: double

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_clampActivation(self, activation)


    def calcDerivative(self, activation, excitation):
        """
        calcDerivative(MuscleFirstOrderActivationDynamicModel self, double activation, double excitation) -> double

        Parameters:
            activation: double
            excitation: double

        """
        return _opensim.MuscleFirstOrderActivationDynamicModel_calcDerivative(self, activation, excitation)

    __swig_destroy__ = _opensim.delete_MuscleFirstOrderActivationDynamicModel
    __del__ = lambda self: None
MuscleFirstOrderActivationDynamicModel_swigregister = _opensim.MuscleFirstOrderActivationDynamicModel_swigregister
MuscleFirstOrderActivationDynamicModel_swigregister(MuscleFirstOrderActivationDynamicModel)

def MuscleFirstOrderActivationDynamicModel_safeDownCast(obj):
    """
    MuscleFirstOrderActivationDynamicModel_safeDownCast(OpenSimObject obj) -> MuscleFirstOrderActivationDynamicModel

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.MuscleFirstOrderActivationDynamicModel_safeDownCast(obj)

def MuscleFirstOrderActivationDynamicModel_getClassName():
    """MuscleFirstOrderActivationDynamicModel_getClassName() -> std::string const &"""
    return _opensim.MuscleFirstOrderActivationDynamicModel_getClassName()

class MuscleFixedWidthPennationModel(OpenSimObject):
    """Proxy of C++ OpenSim::MuscleFixedWidthPennationModel class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MuscleFixedWidthPennationModel, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MuscleFixedWidthPennationModel, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MuscleFixedWidthPennationModel

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.MuscleFixedWidthPennationModel_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(MuscleFixedWidthPennationModel self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.MuscleFixedWidthPennationModel_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.MuscleFixedWidthPennationModel_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(MuscleFixedWidthPennationModel self) -> MuscleFixedWidthPennationModel

        Parameters:
            self: OpenSim::MuscleFixedWidthPennationModel const *

        """
        return _opensim.MuscleFixedWidthPennationModel_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MuscleFixedWidthPennationModel self) -> std::string const &

        Parameters:
            self: OpenSim::MuscleFixedWidthPennationModel const *

        """
        return _opensim.MuscleFixedWidthPennationModel_getConcreteClassName(self)


    def copyProperty_optimal_fiber_length(self, source):
        """
        copyProperty_optimal_fiber_length(MuscleFixedWidthPennationModel self, MuscleFixedWidthPennationModel source)

        Parameters:
            source: OpenSim::MuscleFixedWidthPennationModel::Self const &

        """
        return _opensim.MuscleFixedWidthPennationModel_copyProperty_optimal_fiber_length(self, source)


    def append_optimal_fiber_length(self, value):
        """
        append_optimal_fiber_length(MuscleFixedWidthPennationModel self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.MuscleFixedWidthPennationModel_append_optimal_fiber_length(self, value)


    def constructProperty_optimal_fiber_length(self, initValue):
        """
        constructProperty_optimal_fiber_length(MuscleFixedWidthPennationModel self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.MuscleFixedWidthPennationModel_constructProperty_optimal_fiber_length(self, initValue)


    def get_optimal_fiber_length(self, *args):
        """
        get_optimal_fiber_length(MuscleFixedWidthPennationModel self, int i) -> double const

        Parameters:
            i: int

        get_optimal_fiber_length(MuscleFixedWidthPennationModel self) -> double const &

        Parameters:
            self: OpenSim::MuscleFixedWidthPennationModel const *

        """
        return _opensim.MuscleFixedWidthPennationModel_get_optimal_fiber_length(self, *args)


    def upd_optimal_fiber_length(self, *args):
        """
        upd_optimal_fiber_length(MuscleFixedWidthPennationModel self, int i) -> double

        Parameters:
            i: int

        upd_optimal_fiber_length(MuscleFixedWidthPennationModel self) -> double &

        Parameters:
            self: OpenSim::MuscleFixedWidthPennationModel *

        """
        return _opensim.MuscleFixedWidthPennationModel_upd_optimal_fiber_length(self, *args)


    def set_optimal_fiber_length(self, *args):
        """
        set_optimal_fiber_length(MuscleFixedWidthPennationModel self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_optimal_fiber_length(MuscleFixedWidthPennationModel self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.MuscleFixedWidthPennationModel_set_optimal_fiber_length(self, *args)


    def copyProperty_optimal_pennation_angle(self, source):
        """
        copyProperty_optimal_pennation_angle(MuscleFixedWidthPennationModel self, MuscleFixedWidthPennationModel source)

        Parameters:
            source: OpenSim::MuscleFixedWidthPennationModel::Self const &

        """
        return _opensim.MuscleFixedWidthPennationModel_copyProperty_optimal_pennation_angle(self, source)


    def append_optimal_pennation_angle(self, value):
        """
        append_optimal_pennation_angle(MuscleFixedWidthPennationModel self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.MuscleFixedWidthPennationModel_append_optimal_pennation_angle(self, value)


    def constructProperty_optimal_pennation_angle(self, initValue):
        """
        constructProperty_optimal_pennation_angle(MuscleFixedWidthPennationModel self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.MuscleFixedWidthPennationModel_constructProperty_optimal_pennation_angle(self, initValue)


    def get_optimal_pennation_angle(self, *args):
        """
        get_optimal_pennation_angle(MuscleFixedWidthPennationModel self, int i) -> double const

        Parameters:
            i: int

        get_optimal_pennation_angle(MuscleFixedWidthPennationModel self) -> double const &

        Parameters:
            self: OpenSim::MuscleFixedWidthPennationModel const *

        """
        return _opensim.MuscleFixedWidthPennationModel_get_optimal_pennation_angle(self, *args)


    def upd_optimal_pennation_angle(self, *args):
        """
        upd_optimal_pennation_angle(MuscleFixedWidthPennationModel self, int i) -> double

        Parameters:
            i: int

        upd_optimal_pennation_angle(MuscleFixedWidthPennationModel self) -> double &

        Parameters:
            self: OpenSim::MuscleFixedWidthPennationModel *

        """
        return _opensim.MuscleFixedWidthPennationModel_upd_optimal_pennation_angle(self, *args)


    def set_optimal_pennation_angle(self, *args):
        """
        set_optimal_pennation_angle(MuscleFixedWidthPennationModel self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_optimal_pennation_angle(MuscleFixedWidthPennationModel self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.MuscleFixedWidthPennationModel_set_optimal_pennation_angle(self, *args)


    def copyProperty_maximum_pennation_angle(self, source):
        """
        copyProperty_maximum_pennation_angle(MuscleFixedWidthPennationModel self, MuscleFixedWidthPennationModel source)

        Parameters:
            source: OpenSim::MuscleFixedWidthPennationModel::Self const &

        """
        return _opensim.MuscleFixedWidthPennationModel_copyProperty_maximum_pennation_angle(self, source)


    def append_maximum_pennation_angle(self, value):
        """
        append_maximum_pennation_angle(MuscleFixedWidthPennationModel self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.MuscleFixedWidthPennationModel_append_maximum_pennation_angle(self, value)


    def constructProperty_maximum_pennation_angle(self, initValue):
        """
        constructProperty_maximum_pennation_angle(MuscleFixedWidthPennationModel self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.MuscleFixedWidthPennationModel_constructProperty_maximum_pennation_angle(self, initValue)


    def get_maximum_pennation_angle(self, *args):
        """
        get_maximum_pennation_angle(MuscleFixedWidthPennationModel self, int i) -> double const

        Parameters:
            i: int

        get_maximum_pennation_angle(MuscleFixedWidthPennationModel self) -> double const &

        Parameters:
            self: OpenSim::MuscleFixedWidthPennationModel const *

        """
        return _opensim.MuscleFixedWidthPennationModel_get_maximum_pennation_angle(self, *args)


    def upd_maximum_pennation_angle(self, *args):
        """
        upd_maximum_pennation_angle(MuscleFixedWidthPennationModel self, int i) -> double

        Parameters:
            i: int

        upd_maximum_pennation_angle(MuscleFixedWidthPennationModel self) -> double &

        Parameters:
            self: OpenSim::MuscleFixedWidthPennationModel *

        """
        return _opensim.MuscleFixedWidthPennationModel_upd_maximum_pennation_angle(self, *args)


    def set_maximum_pennation_angle(self, *args):
        """
        set_maximum_pennation_angle(MuscleFixedWidthPennationModel self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_maximum_pennation_angle(MuscleFixedWidthPennationModel self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.MuscleFixedWidthPennationModel_set_maximum_pennation_angle(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::MuscleFixedWidthPennationModel self) -> MuscleFixedWidthPennationModel
        __init__(OpenSim::MuscleFixedWidthPennationModel self, double optimalFiberLength, double optimalPennationAngle, double maximumPennationAngle) -> MuscleFixedWidthPennationModel

        Parameters:
            optimalFiberLength: double
            optimalPennationAngle: double
            maximumPennationAngle: double

        """
        this = _opensim.new_MuscleFixedWidthPennationModel(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getParallelogramHeight(self):
        """
        getParallelogramHeight(MuscleFixedWidthPennationModel self) -> double

        Parameters:
            self: OpenSim::MuscleFixedWidthPennationModel const *

        """
        return _opensim.MuscleFixedWidthPennationModel_getParallelogramHeight(self)


    def getOptimalFiberLength(self):
        """
        getOptimalFiberLength(MuscleFixedWidthPennationModel self) -> double

        Parameters:
            self: OpenSim::MuscleFixedWidthPennationModel const *

        """
        return _opensim.MuscleFixedWidthPennationModel_getOptimalFiberLength(self)


    def getMinimumFiberLength(self):
        """
        getMinimumFiberLength(MuscleFixedWidthPennationModel self) -> double

        Parameters:
            self: OpenSim::MuscleFixedWidthPennationModel const *

        """
        return _opensim.MuscleFixedWidthPennationModel_getMinimumFiberLength(self)


    def getMinimumFiberLengthAlongTendon(self):
        """
        getMinimumFiberLengthAlongTendon(MuscleFixedWidthPennationModel self) -> double

        Parameters:
            self: OpenSim::MuscleFixedWidthPennationModel const *

        """
        return _opensim.MuscleFixedWidthPennationModel_getMinimumFiberLengthAlongTendon(self)


    def getOptimalPennationAngle(self):
        """
        getOptimalPennationAngle(MuscleFixedWidthPennationModel self) -> double

        Parameters:
            self: OpenSim::MuscleFixedWidthPennationModel const *

        """
        return _opensim.MuscleFixedWidthPennationModel_getOptimalPennationAngle(self)


    def getMaximumPennationAngle(self):
        """
        getMaximumPennationAngle(MuscleFixedWidthPennationModel self) -> double

        Parameters:
            self: OpenSim::MuscleFixedWidthPennationModel const *

        """
        return _opensim.MuscleFixedWidthPennationModel_getMaximumPennationAngle(self)


    def setOptimalFiberLength(self, aOptimalFiberLength):
        """
        setOptimalFiberLength(MuscleFixedWidthPennationModel self, double aOptimalFiberLength) -> bool

        Parameters:
            aOptimalFiberLength: double

        """
        return _opensim.MuscleFixedWidthPennationModel_setOptimalFiberLength(self, aOptimalFiberLength)


    def setOptimalPennationAngle(self, aOptimalPennationAngle):
        """
        setOptimalPennationAngle(MuscleFixedWidthPennationModel self, double aOptimalPennationAngle) -> bool

        Parameters:
            aOptimalPennationAngle: double

        """
        return _opensim.MuscleFixedWidthPennationModel_setOptimalPennationAngle(self, aOptimalPennationAngle)


    def setMaximumPennationAngle(self, aMaximumPennationAngle):
        """
        setMaximumPennationAngle(MuscleFixedWidthPennationModel self, double aMaximumPennationAngle) -> bool

        Parameters:
            aMaximumPennationAngle: double

        """
        return _opensim.MuscleFixedWidthPennationModel_setMaximumPennationAngle(self, aMaximumPennationAngle)


    def clampFiberLength(self, fiberLength):
        """
        clampFiberLength(MuscleFixedWidthPennationModel self, double fiberLength) -> double

        Parameters:
            fiberLength: double

        """
        return _opensim.MuscleFixedWidthPennationModel_clampFiberLength(self, fiberLength)


    def calcPennationAngle(self, fiberLength):
        """
        calcPennationAngle(MuscleFixedWidthPennationModel self, double fiberLength) -> double

        Parameters:
            fiberLength: double

        """
        return _opensim.MuscleFixedWidthPennationModel_calcPennationAngle(self, fiberLength)


    def calcTendonLength(self, cosPennationAngle, fiberLength, muscleLength):
        """
        calcTendonLength(MuscleFixedWidthPennationModel self, double cosPennationAngle, double fiberLength, double muscleLength) -> double

        Parameters:
            cosPennationAngle: double
            fiberLength: double
            muscleLength: double

        """
        return _opensim.MuscleFixedWidthPennationModel_calcTendonLength(self, cosPennationAngle, fiberLength, muscleLength)


    def calcFiberLengthAlongTendon(self, fiberLength, cosPennationAngle):
        """
        calcFiberLengthAlongTendon(MuscleFixedWidthPennationModel self, double fiberLength, double cosPennationAngle) -> double

        Parameters:
            fiberLength: double
            cosPennationAngle: double

        """
        return _opensim.MuscleFixedWidthPennationModel_calcFiberLengthAlongTendon(self, fiberLength, cosPennationAngle)


    def calcPennationAngularVelocity(self, tanPennationAngle, fiberLength, fiberVelocity):
        """
        calcPennationAngularVelocity(MuscleFixedWidthPennationModel self, double tanPennationAngle, double fiberLength, double fiberVelocity) -> double

        Parameters:
            tanPennationAngle: double
            fiberLength: double
            fiberVelocity: double

        """
        return _opensim.MuscleFixedWidthPennationModel_calcPennationAngularVelocity(self, tanPennationAngle, fiberLength, fiberVelocity)


    def calcTendonVelocity(self, cosPennationAngle, sinPennationAngle, pennationAngularVelocity, fiberLength, fiberVelocity, muscleVelocity):
        """
        calcTendonVelocity(MuscleFixedWidthPennationModel self, double cosPennationAngle, double sinPennationAngle, double pennationAngularVelocity, double fiberLength, double fiberVelocity, double muscleVelocity) -> double

        Parameters:
            cosPennationAngle: double
            sinPennationAngle: double
            pennationAngularVelocity: double
            fiberLength: double
            fiberVelocity: double
            muscleVelocity: double

        """
        return _opensim.MuscleFixedWidthPennationModel_calcTendonVelocity(self, cosPennationAngle, sinPennationAngle, pennationAngularVelocity, fiberLength, fiberVelocity, muscleVelocity)


    def calcFiberVelocityAlongTendon(self, fiberLength, fiberVelocity, sinPennationAngle, cosPennationAngle, pennationAngularVelocity):
        """
        calcFiberVelocityAlongTendon(MuscleFixedWidthPennationModel self, double fiberLength, double fiberVelocity, double sinPennationAngle, double cosPennationAngle, double pennationAngularVelocity) -> double

        Parameters:
            fiberLength: double
            fiberVelocity: double
            sinPennationAngle: double
            cosPennationAngle: double
            pennationAngularVelocity: double

        """
        return _opensim.MuscleFixedWidthPennationModel_calcFiberVelocityAlongTendon(self, fiberLength, fiberVelocity, sinPennationAngle, cosPennationAngle, pennationAngularVelocity)


    def calcPennationAngularAcceleration(self, fiberLength, fiberVelocity, fiberAcceleration, sinPennationAngle, cosPennationAngle, pennationAngularVelocity):
        """
        calcPennationAngularAcceleration(MuscleFixedWidthPennationModel self, double fiberLength, double fiberVelocity, double fiberAcceleration, double sinPennationAngle, double cosPennationAngle, double pennationAngularVelocity) -> double

        Parameters:
            fiberLength: double
            fiberVelocity: double
            fiberAcceleration: double
            sinPennationAngle: double
            cosPennationAngle: double
            pennationAngularVelocity: double

        """
        return _opensim.MuscleFixedWidthPennationModel_calcPennationAngularAcceleration(self, fiberLength, fiberVelocity, fiberAcceleration, sinPennationAngle, cosPennationAngle, pennationAngularVelocity)


    def calcFiberAccelerationAlongTendon(self, fiberLength, fiberVelocity, fiberAcceleration, sinPennationAngle, cosPennationAngle, pennationAngularVelocity, pennationAngularAcceleration):
        """
        calcFiberAccelerationAlongTendon(MuscleFixedWidthPennationModel self, double fiberLength, double fiberVelocity, double fiberAcceleration, double sinPennationAngle, double cosPennationAngle, double pennationAngularVelocity, double pennationAngularAcceleration) -> double

        Parameters:
            fiberLength: double
            fiberVelocity: double
            fiberAcceleration: double
            sinPennationAngle: double
            cosPennationAngle: double
            pennationAngularVelocity: double
            pennationAngularAcceleration: double

        """
        return _opensim.MuscleFixedWidthPennationModel_calcFiberAccelerationAlongTendon(self, fiberLength, fiberVelocity, fiberAcceleration, sinPennationAngle, cosPennationAngle, pennationAngularVelocity, pennationAngularAcceleration)


    def calc_DFiberLengthAlongTendon_DfiberLength(self, fiberLength, sinPennationAngle, cosPennationAngle, DpennationAngle_DfiberLength):
        """
        calc_DFiberLengthAlongTendon_DfiberLength(MuscleFixedWidthPennationModel self, double fiberLength, double sinPennationAngle, double cosPennationAngle, double DpennationAngle_DfiberLength) -> double

        Parameters:
            fiberLength: double
            sinPennationAngle: double
            cosPennationAngle: double
            DpennationAngle_DfiberLength: double

        """
        return _opensim.MuscleFixedWidthPennationModel_calc_DFiberLengthAlongTendon_DfiberLength(self, fiberLength, sinPennationAngle, cosPennationAngle, DpennationAngle_DfiberLength)


    def calc_DPennationAngularVelocity_DfiberLength(self, fiberLength, fiberVelocity, sinPennationAngle, cosPennationAngle, pennationAngularVelocity, DpennationAngle_DfiberLength):
        """
        calc_DPennationAngularVelocity_DfiberLength(MuscleFixedWidthPennationModel self, double fiberLength, double fiberVelocity, double sinPennationAngle, double cosPennationAngle, double pennationAngularVelocity, double DpennationAngle_DfiberLength) -> double

        Parameters:
            fiberLength: double
            fiberVelocity: double
            sinPennationAngle: double
            cosPennationAngle: double
            pennationAngularVelocity: double
            DpennationAngle_DfiberLength: double

        """
        return _opensim.MuscleFixedWidthPennationModel_calc_DPennationAngularVelocity_DfiberLength(self, fiberLength, fiberVelocity, sinPennationAngle, cosPennationAngle, pennationAngularVelocity, DpennationAngle_DfiberLength)


    def calc_DFiberVelocityAlongTendon_DfiberLength(self, fiberLength, fiberVelocity, sinPennationAngle, cosPennationAngle, pennationAngularVelocity, DpennationAngle_DfiberLength, DpennationAngularVelocity_DfiberLength):
        """
        calc_DFiberVelocityAlongTendon_DfiberLength(MuscleFixedWidthPennationModel self, double fiberLength, double fiberVelocity, double sinPennationAngle, double cosPennationAngle, double pennationAngularVelocity, double DpennationAngle_DfiberLength, double DpennationAngularVelocity_DfiberLength) -> double

        Parameters:
            fiberLength: double
            fiberVelocity: double
            sinPennationAngle: double
            cosPennationAngle: double
            pennationAngularVelocity: double
            DpennationAngle_DfiberLength: double
            DpennationAngularVelocity_DfiberLength: double

        """
        return _opensim.MuscleFixedWidthPennationModel_calc_DFiberVelocityAlongTendon_DfiberLength(self, fiberLength, fiberVelocity, sinPennationAngle, cosPennationAngle, pennationAngularVelocity, DpennationAngle_DfiberLength, DpennationAngularVelocity_DfiberLength)


    def calc_DPennationAngle_DfiberLength(self, fiberLength):
        """
        calc_DPennationAngle_DfiberLength(MuscleFixedWidthPennationModel self, double fiberLength) -> double

        Parameters:
            fiberLength: double

        """
        return _opensim.MuscleFixedWidthPennationModel_calc_DPennationAngle_DfiberLength(self, fiberLength)


    def calc_DTendonLength_DfiberLength(self, fiberLength, sinPennationAngle, cosPennationAngle, DpennationAngle_DfiberLength):
        """
        calc_DTendonLength_DfiberLength(MuscleFixedWidthPennationModel self, double fiberLength, double sinPennationAngle, double cosPennationAngle, double DpennationAngle_DfiberLength) -> double

        Parameters:
            fiberLength: double
            sinPennationAngle: double
            cosPennationAngle: double
            DpennationAngle_DfiberLength: double

        """
        return _opensim.MuscleFixedWidthPennationModel_calc_DTendonLength_DfiberLength(self, fiberLength, sinPennationAngle, cosPennationAngle, DpennationAngle_DfiberLength)


    def calcFiberLength(self, muscleLength, tendonLength):
        """
        calcFiberLength(MuscleFixedWidthPennationModel self, double muscleLength, double tendonLength) -> double

        Parameters:
            muscleLength: double
            tendonLength: double

        """
        return _opensim.MuscleFixedWidthPennationModel_calcFiberLength(self, muscleLength, tendonLength)


    def calcFiberVelocity(self, cosPennationAngle, muscleVelocity, tendonVelocity):
        """
        calcFiberVelocity(MuscleFixedWidthPennationModel self, double cosPennationAngle, double muscleVelocity, double tendonVelocity) -> double

        Parameters:
            cosPennationAngle: double
            muscleVelocity: double
            tendonVelocity: double

        """
        return _opensim.MuscleFixedWidthPennationModel_calcFiberVelocity(self, cosPennationAngle, muscleVelocity, tendonVelocity)


    def ensureModelUpToDate(self):
        """
        ensureModelUpToDate(MuscleFixedWidthPennationModel self)

        Parameters:
            self: OpenSim::MuscleFixedWidthPennationModel *

        """
        return _opensim.MuscleFixedWidthPennationModel_ensureModelUpToDate(self)

    __swig_destroy__ = _opensim.delete_MuscleFixedWidthPennationModel
    __del__ = lambda self: None
MuscleFixedWidthPennationModel_swigregister = _opensim.MuscleFixedWidthPennationModel_swigregister
MuscleFixedWidthPennationModel_swigregister(MuscleFixedWidthPennationModel)

def MuscleFixedWidthPennationModel_safeDownCast(obj):
    """
    MuscleFixedWidthPennationModel_safeDownCast(OpenSimObject obj) -> MuscleFixedWidthPennationModel

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.MuscleFixedWidthPennationModel_safeDownCast(obj)

def MuscleFixedWidthPennationModel_getClassName():
    """MuscleFixedWidthPennationModel_getClassName() -> std::string const &"""
    return _opensim.MuscleFixedWidthPennationModel_getClassName()

class Millard2012EquilibriumMuscle(Muscle):
    """Proxy of C++ OpenSim::Millard2012EquilibriumMuscle class"""
    __swig_setmethods__ = {}
    for _s in [Muscle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Millard2012EquilibriumMuscle, name, value)
    __swig_getmethods__ = {}
    for _s in [Muscle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Millard2012EquilibriumMuscle, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Millard2012EquilibriumMuscle

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Millard2012EquilibriumMuscle_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Millard2012EquilibriumMuscle self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Millard2012EquilibriumMuscle_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Millard2012EquilibriumMuscle_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Millard2012EquilibriumMuscle self) -> Millard2012EquilibriumMuscle

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Millard2012EquilibriumMuscle self) -> std::string const &

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_getConcreteClassName(self)


    def copyProperty_fiber_damping(self, source):
        """
        copyProperty_fiber_damping(Millard2012EquilibriumMuscle self, Millard2012EquilibriumMuscle source)

        Parameters:
            source: OpenSim::Millard2012EquilibriumMuscle::Self const &

        """
        return _opensim.Millard2012EquilibriumMuscle_copyProperty_fiber_damping(self, source)


    def append_fiber_damping(self, value):
        """
        append_fiber_damping(Millard2012EquilibriumMuscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012EquilibriumMuscle_append_fiber_damping(self, value)


    def constructProperty_fiber_damping(self, initValue):
        """
        constructProperty_fiber_damping(Millard2012EquilibriumMuscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Millard2012EquilibriumMuscle_constructProperty_fiber_damping(self, initValue)


    def get_fiber_damping(self, *args):
        """
        get_fiber_damping(Millard2012EquilibriumMuscle self, int i) -> double const

        Parameters:
            i: int

        get_fiber_damping(Millard2012EquilibriumMuscle self) -> double const &

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_get_fiber_damping(self, *args)


    def upd_fiber_damping(self, *args):
        """
        upd_fiber_damping(Millard2012EquilibriumMuscle self, int i) -> double

        Parameters:
            i: int

        upd_fiber_damping(Millard2012EquilibriumMuscle self) -> double &

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle *

        """
        return _opensim.Millard2012EquilibriumMuscle_upd_fiber_damping(self, *args)


    def set_fiber_damping(self, *args):
        """
        set_fiber_damping(Millard2012EquilibriumMuscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_fiber_damping(Millard2012EquilibriumMuscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012EquilibriumMuscle_set_fiber_damping(self, *args)


    def copyProperty_default_activation(self, source):
        """
        copyProperty_default_activation(Millard2012EquilibriumMuscle self, Millard2012EquilibriumMuscle source)

        Parameters:
            source: OpenSim::Millard2012EquilibriumMuscle::Self const &

        """
        return _opensim.Millard2012EquilibriumMuscle_copyProperty_default_activation(self, source)


    def append_default_activation(self, value):
        """
        append_default_activation(Millard2012EquilibriumMuscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012EquilibriumMuscle_append_default_activation(self, value)


    def constructProperty_default_activation(self, initValue):
        """
        constructProperty_default_activation(Millard2012EquilibriumMuscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Millard2012EquilibriumMuscle_constructProperty_default_activation(self, initValue)


    def get_default_activation(self, *args):
        """
        get_default_activation(Millard2012EquilibriumMuscle self, int i) -> double const

        Parameters:
            i: int

        get_default_activation(Millard2012EquilibriumMuscle self) -> double const &

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_get_default_activation(self, *args)


    def upd_default_activation(self, *args):
        """
        upd_default_activation(Millard2012EquilibriumMuscle self, int i) -> double

        Parameters:
            i: int

        upd_default_activation(Millard2012EquilibriumMuscle self) -> double &

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle *

        """
        return _opensim.Millard2012EquilibriumMuscle_upd_default_activation(self, *args)


    def set_default_activation(self, *args):
        """
        set_default_activation(Millard2012EquilibriumMuscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_default_activation(Millard2012EquilibriumMuscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012EquilibriumMuscle_set_default_activation(self, *args)


    def copyProperty_default_fiber_length(self, source):
        """
        copyProperty_default_fiber_length(Millard2012EquilibriumMuscle self, Millard2012EquilibriumMuscle source)

        Parameters:
            source: OpenSim::Millard2012EquilibriumMuscle::Self const &

        """
        return _opensim.Millard2012EquilibriumMuscle_copyProperty_default_fiber_length(self, source)


    def append_default_fiber_length(self, value):
        """
        append_default_fiber_length(Millard2012EquilibriumMuscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012EquilibriumMuscle_append_default_fiber_length(self, value)


    def constructProperty_default_fiber_length(self, initValue):
        """
        constructProperty_default_fiber_length(Millard2012EquilibriumMuscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Millard2012EquilibriumMuscle_constructProperty_default_fiber_length(self, initValue)


    def get_default_fiber_length(self, *args):
        """
        get_default_fiber_length(Millard2012EquilibriumMuscle self, int i) -> double const

        Parameters:
            i: int

        get_default_fiber_length(Millard2012EquilibriumMuscle self) -> double const &

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_get_default_fiber_length(self, *args)


    def upd_default_fiber_length(self, *args):
        """
        upd_default_fiber_length(Millard2012EquilibriumMuscle self, int i) -> double

        Parameters:
            i: int

        upd_default_fiber_length(Millard2012EquilibriumMuscle self) -> double &

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle *

        """
        return _opensim.Millard2012EquilibriumMuscle_upd_default_fiber_length(self, *args)


    def set_default_fiber_length(self, *args):
        """
        set_default_fiber_length(Millard2012EquilibriumMuscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_default_fiber_length(Millard2012EquilibriumMuscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012EquilibriumMuscle_set_default_fiber_length(self, *args)


    def copyProperty_activation_time_constant(self, source):
        """
        copyProperty_activation_time_constant(Millard2012EquilibriumMuscle self, Millard2012EquilibriumMuscle source)

        Parameters:
            source: OpenSim::Millard2012EquilibriumMuscle::Self const &

        """
        return _opensim.Millard2012EquilibriumMuscle_copyProperty_activation_time_constant(self, source)


    def append_activation_time_constant(self, value):
        """
        append_activation_time_constant(Millard2012EquilibriumMuscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012EquilibriumMuscle_append_activation_time_constant(self, value)


    def constructProperty_activation_time_constant(self, initValue):
        """
        constructProperty_activation_time_constant(Millard2012EquilibriumMuscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Millard2012EquilibriumMuscle_constructProperty_activation_time_constant(self, initValue)


    def get_activation_time_constant(self, *args):
        """
        get_activation_time_constant(Millard2012EquilibriumMuscle self, int i) -> double const

        Parameters:
            i: int

        get_activation_time_constant(Millard2012EquilibriumMuscle self) -> double const &

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_get_activation_time_constant(self, *args)


    def upd_activation_time_constant(self, *args):
        """
        upd_activation_time_constant(Millard2012EquilibriumMuscle self, int i) -> double

        Parameters:
            i: int

        upd_activation_time_constant(Millard2012EquilibriumMuscle self) -> double &

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle *

        """
        return _opensim.Millard2012EquilibriumMuscle_upd_activation_time_constant(self, *args)


    def set_activation_time_constant(self, *args):
        """
        set_activation_time_constant(Millard2012EquilibriumMuscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_activation_time_constant(Millard2012EquilibriumMuscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012EquilibriumMuscle_set_activation_time_constant(self, *args)


    def copyProperty_deactivation_time_constant(self, source):
        """
        copyProperty_deactivation_time_constant(Millard2012EquilibriumMuscle self, Millard2012EquilibriumMuscle source)

        Parameters:
            source: OpenSim::Millard2012EquilibriumMuscle::Self const &

        """
        return _opensim.Millard2012EquilibriumMuscle_copyProperty_deactivation_time_constant(self, source)


    def append_deactivation_time_constant(self, value):
        """
        append_deactivation_time_constant(Millard2012EquilibriumMuscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012EquilibriumMuscle_append_deactivation_time_constant(self, value)


    def constructProperty_deactivation_time_constant(self, initValue):
        """
        constructProperty_deactivation_time_constant(Millard2012EquilibriumMuscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Millard2012EquilibriumMuscle_constructProperty_deactivation_time_constant(self, initValue)


    def get_deactivation_time_constant(self, *args):
        """
        get_deactivation_time_constant(Millard2012EquilibriumMuscle self, int i) -> double const

        Parameters:
            i: int

        get_deactivation_time_constant(Millard2012EquilibriumMuscle self) -> double const &

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_get_deactivation_time_constant(self, *args)


    def upd_deactivation_time_constant(self, *args):
        """
        upd_deactivation_time_constant(Millard2012EquilibriumMuscle self, int i) -> double

        Parameters:
            i: int

        upd_deactivation_time_constant(Millard2012EquilibriumMuscle self) -> double &

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle *

        """
        return _opensim.Millard2012EquilibriumMuscle_upd_deactivation_time_constant(self, *args)


    def set_deactivation_time_constant(self, *args):
        """
        set_deactivation_time_constant(Millard2012EquilibriumMuscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_deactivation_time_constant(Millard2012EquilibriumMuscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012EquilibriumMuscle_set_deactivation_time_constant(self, *args)


    def copyProperty_minimum_activation(self, source):
        """
        copyProperty_minimum_activation(Millard2012EquilibriumMuscle self, Millard2012EquilibriumMuscle source)

        Parameters:
            source: OpenSim::Millard2012EquilibriumMuscle::Self const &

        """
        return _opensim.Millard2012EquilibriumMuscle_copyProperty_minimum_activation(self, source)


    def append_minimum_activation(self, value):
        """
        append_minimum_activation(Millard2012EquilibriumMuscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012EquilibriumMuscle_append_minimum_activation(self, value)


    def constructProperty_minimum_activation(self, initValue):
        """
        constructProperty_minimum_activation(Millard2012EquilibriumMuscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Millard2012EquilibriumMuscle_constructProperty_minimum_activation(self, initValue)


    def get_minimum_activation(self, *args):
        """
        get_minimum_activation(Millard2012EquilibriumMuscle self, int i) -> double const

        Parameters:
            i: int

        get_minimum_activation(Millard2012EquilibriumMuscle self) -> double const &

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_get_minimum_activation(self, *args)


    def upd_minimum_activation(self, *args):
        """
        upd_minimum_activation(Millard2012EquilibriumMuscle self, int i) -> double

        Parameters:
            i: int

        upd_minimum_activation(Millard2012EquilibriumMuscle self) -> double &

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle *

        """
        return _opensim.Millard2012EquilibriumMuscle_upd_minimum_activation(self, *args)


    def set_minimum_activation(self, *args):
        """
        set_minimum_activation(Millard2012EquilibriumMuscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_minimum_activation(Millard2012EquilibriumMuscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012EquilibriumMuscle_set_minimum_activation(self, *args)


    def copyProperty_ActiveForceLengthCurve(self, source):
        """
        copyProperty_ActiveForceLengthCurve(Millard2012EquilibriumMuscle self, Millard2012EquilibriumMuscle source)

        Parameters:
            source: OpenSim::Millard2012EquilibriumMuscle::Self const &

        """
        return _opensim.Millard2012EquilibriumMuscle_copyProperty_ActiveForceLengthCurve(self, source)


    def append_ActiveForceLengthCurve(self, value):
        """
        append_ActiveForceLengthCurve(Millard2012EquilibriumMuscle self, ActiveForceLengthCurve value) -> int

        Parameters:
            value: OpenSim::ActiveForceLengthCurve const &

        """
        return _opensim.Millard2012EquilibriumMuscle_append_ActiveForceLengthCurve(self, value)


    def constructProperty_ActiveForceLengthCurve(self, initValue):
        """
        constructProperty_ActiveForceLengthCurve(Millard2012EquilibriumMuscle self, ActiveForceLengthCurve initValue)

        Parameters:
            initValue: OpenSim::ActiveForceLengthCurve const &

        """
        return _opensim.Millard2012EquilibriumMuscle_constructProperty_ActiveForceLengthCurve(self, initValue)


    def get_ActiveForceLengthCurve(self, *args):
        """
        get_ActiveForceLengthCurve(Millard2012EquilibriumMuscle self, int i) -> ActiveForceLengthCurve

        Parameters:
            i: int

        get_ActiveForceLengthCurve(Millard2012EquilibriumMuscle self) -> ActiveForceLengthCurve

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_get_ActiveForceLengthCurve(self, *args)


    def upd_ActiveForceLengthCurve(self, *args):
        """
        upd_ActiveForceLengthCurve(Millard2012EquilibriumMuscle self, int i) -> ActiveForceLengthCurve

        Parameters:
            i: int

        upd_ActiveForceLengthCurve(Millard2012EquilibriumMuscle self) -> ActiveForceLengthCurve

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle *

        """
        return _opensim.Millard2012EquilibriumMuscle_upd_ActiveForceLengthCurve(self, *args)


    def set_ActiveForceLengthCurve(self, *args):
        """
        set_ActiveForceLengthCurve(Millard2012EquilibriumMuscle self, int i, ActiveForceLengthCurve value)

        Parameters:
            i: int
            value: OpenSim::ActiveForceLengthCurve const &

        set_ActiveForceLengthCurve(Millard2012EquilibriumMuscle self, ActiveForceLengthCurve value)

        Parameters:
            value: OpenSim::ActiveForceLengthCurve const &

        """
        return _opensim.Millard2012EquilibriumMuscle_set_ActiveForceLengthCurve(self, *args)


    def copyProperty_ForceVelocityCurve(self, source):
        """
        copyProperty_ForceVelocityCurve(Millard2012EquilibriumMuscle self, Millard2012EquilibriumMuscle source)

        Parameters:
            source: OpenSim::Millard2012EquilibriumMuscle::Self const &

        """
        return _opensim.Millard2012EquilibriumMuscle_copyProperty_ForceVelocityCurve(self, source)


    def append_ForceVelocityCurve(self, value):
        """
        append_ForceVelocityCurve(Millard2012EquilibriumMuscle self, ForceVelocityCurve value) -> int

        Parameters:
            value: OpenSim::ForceVelocityCurve const &

        """
        return _opensim.Millard2012EquilibriumMuscle_append_ForceVelocityCurve(self, value)


    def constructProperty_ForceVelocityCurve(self, initValue):
        """
        constructProperty_ForceVelocityCurve(Millard2012EquilibriumMuscle self, ForceVelocityCurve initValue)

        Parameters:
            initValue: OpenSim::ForceVelocityCurve const &

        """
        return _opensim.Millard2012EquilibriumMuscle_constructProperty_ForceVelocityCurve(self, initValue)


    def get_ForceVelocityCurve(self, *args):
        """
        get_ForceVelocityCurve(Millard2012EquilibriumMuscle self, int i) -> ForceVelocityCurve

        Parameters:
            i: int

        get_ForceVelocityCurve(Millard2012EquilibriumMuscle self) -> ForceVelocityCurve

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_get_ForceVelocityCurve(self, *args)


    def upd_ForceVelocityCurve(self, *args):
        """
        upd_ForceVelocityCurve(Millard2012EquilibriumMuscle self, int i) -> ForceVelocityCurve

        Parameters:
            i: int

        upd_ForceVelocityCurve(Millard2012EquilibriumMuscle self) -> ForceVelocityCurve

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle *

        """
        return _opensim.Millard2012EquilibriumMuscle_upd_ForceVelocityCurve(self, *args)


    def set_ForceVelocityCurve(self, *args):
        """
        set_ForceVelocityCurve(Millard2012EquilibriumMuscle self, int i, ForceVelocityCurve value)

        Parameters:
            i: int
            value: OpenSim::ForceVelocityCurve const &

        set_ForceVelocityCurve(Millard2012EquilibriumMuscle self, ForceVelocityCurve value)

        Parameters:
            value: OpenSim::ForceVelocityCurve const &

        """
        return _opensim.Millard2012EquilibriumMuscle_set_ForceVelocityCurve(self, *args)


    def copyProperty_FiberForceLengthCurve(self, source):
        """
        copyProperty_FiberForceLengthCurve(Millard2012EquilibriumMuscle self, Millard2012EquilibriumMuscle source)

        Parameters:
            source: OpenSim::Millard2012EquilibriumMuscle::Self const &

        """
        return _opensim.Millard2012EquilibriumMuscle_copyProperty_FiberForceLengthCurve(self, source)


    def append_FiberForceLengthCurve(self, value):
        """
        append_FiberForceLengthCurve(Millard2012EquilibriumMuscle self, FiberForceLengthCurve value) -> int

        Parameters:
            value: OpenSim::FiberForceLengthCurve const &

        """
        return _opensim.Millard2012EquilibriumMuscle_append_FiberForceLengthCurve(self, value)


    def constructProperty_FiberForceLengthCurve(self, initValue):
        """
        constructProperty_FiberForceLengthCurve(Millard2012EquilibriumMuscle self, FiberForceLengthCurve initValue)

        Parameters:
            initValue: OpenSim::FiberForceLengthCurve const &

        """
        return _opensim.Millard2012EquilibriumMuscle_constructProperty_FiberForceLengthCurve(self, initValue)


    def get_FiberForceLengthCurve(self, *args):
        """
        get_FiberForceLengthCurve(Millard2012EquilibriumMuscle self, int i) -> FiberForceLengthCurve

        Parameters:
            i: int

        get_FiberForceLengthCurve(Millard2012EquilibriumMuscle self) -> FiberForceLengthCurve

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_get_FiberForceLengthCurve(self, *args)


    def upd_FiberForceLengthCurve(self, *args):
        """
        upd_FiberForceLengthCurve(Millard2012EquilibriumMuscle self, int i) -> FiberForceLengthCurve

        Parameters:
            i: int

        upd_FiberForceLengthCurve(Millard2012EquilibriumMuscle self) -> FiberForceLengthCurve

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle *

        """
        return _opensim.Millard2012EquilibriumMuscle_upd_FiberForceLengthCurve(self, *args)


    def set_FiberForceLengthCurve(self, *args):
        """
        set_FiberForceLengthCurve(Millard2012EquilibriumMuscle self, int i, FiberForceLengthCurve value)

        Parameters:
            i: int
            value: OpenSim::FiberForceLengthCurve const &

        set_FiberForceLengthCurve(Millard2012EquilibriumMuscle self, FiberForceLengthCurve value)

        Parameters:
            value: OpenSim::FiberForceLengthCurve const &

        """
        return _opensim.Millard2012EquilibriumMuscle_set_FiberForceLengthCurve(self, *args)


    def copyProperty_TendonForceLengthCurve(self, source):
        """
        copyProperty_TendonForceLengthCurve(Millard2012EquilibriumMuscle self, Millard2012EquilibriumMuscle source)

        Parameters:
            source: OpenSim::Millard2012EquilibriumMuscle::Self const &

        """
        return _opensim.Millard2012EquilibriumMuscle_copyProperty_TendonForceLengthCurve(self, source)


    def append_TendonForceLengthCurve(self, value):
        """
        append_TendonForceLengthCurve(Millard2012EquilibriumMuscle self, TendonForceLengthCurve value) -> int

        Parameters:
            value: OpenSim::TendonForceLengthCurve const &

        """
        return _opensim.Millard2012EquilibriumMuscle_append_TendonForceLengthCurve(self, value)


    def constructProperty_TendonForceLengthCurve(self, initValue):
        """
        constructProperty_TendonForceLengthCurve(Millard2012EquilibriumMuscle self, TendonForceLengthCurve initValue)

        Parameters:
            initValue: OpenSim::TendonForceLengthCurve const &

        """
        return _opensim.Millard2012EquilibriumMuscle_constructProperty_TendonForceLengthCurve(self, initValue)


    def get_TendonForceLengthCurve(self, *args):
        """
        get_TendonForceLengthCurve(Millard2012EquilibriumMuscle self, int i) -> TendonForceLengthCurve

        Parameters:
            i: int

        get_TendonForceLengthCurve(Millard2012EquilibriumMuscle self) -> TendonForceLengthCurve

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_get_TendonForceLengthCurve(self, *args)


    def upd_TendonForceLengthCurve(self, *args):
        """
        upd_TendonForceLengthCurve(Millard2012EquilibriumMuscle self, int i) -> TendonForceLengthCurve

        Parameters:
            i: int

        upd_TendonForceLengthCurve(Millard2012EquilibriumMuscle self) -> TendonForceLengthCurve

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle *

        """
        return _opensim.Millard2012EquilibriumMuscle_upd_TendonForceLengthCurve(self, *args)


    def set_TendonForceLengthCurve(self, *args):
        """
        set_TendonForceLengthCurve(Millard2012EquilibriumMuscle self, int i, TendonForceLengthCurve value)

        Parameters:
            i: int
            value: OpenSim::TendonForceLengthCurve const &

        set_TendonForceLengthCurve(Millard2012EquilibriumMuscle self, TendonForceLengthCurve value)

        Parameters:
            value: OpenSim::TendonForceLengthCurve const &

        """
        return _opensim.Millard2012EquilibriumMuscle_set_TendonForceLengthCurve(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::Millard2012EquilibriumMuscle self) -> Millard2012EquilibriumMuscle
        __init__(OpenSim::Millard2012EquilibriumMuscle self, std::string const & aName, double aMaxIsometricForce, double aOptimalFiberLength, double aTendonSlackLength, double aPennationAngle) -> Millard2012EquilibriumMuscle

        Parameters:
            aName: std::string const &
            aMaxIsometricForce: double
            aOptimalFiberLength: double
            aTendonSlackLength: double
            aPennationAngle: double

        """
        this = _opensim.new_Millard2012EquilibriumMuscle(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getUseFiberDamping(self):
        """
        getUseFiberDamping(Millard2012EquilibriumMuscle self) -> bool

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_getUseFiberDamping(self)


    def getFiberDamping(self):
        """
        getFiberDamping(Millard2012EquilibriumMuscle self) -> double

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_getFiberDamping(self)


    def getDefaultActivation(self):
        """
        getDefaultActivation(Millard2012EquilibriumMuscle self) -> double

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_getDefaultActivation(self)


    def getDefaultFiberLength(self):
        """
        getDefaultFiberLength(Millard2012EquilibriumMuscle self) -> double

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_getDefaultFiberLength(self)


    def getActivationTimeConstant(self):
        """
        getActivationTimeConstant(Millard2012EquilibriumMuscle self) -> double

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_getActivationTimeConstant(self)


    def getDeactivationTimeConstant(self):
        """
        getDeactivationTimeConstant(Millard2012EquilibriumMuscle self) -> double

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_getDeactivationTimeConstant(self)


    def getMinimumActivation(self):
        """
        getMinimumActivation(Millard2012EquilibriumMuscle self) -> double

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_getMinimumActivation(self)


    def getActiveForceLengthCurve(self):
        """
        getActiveForceLengthCurve(Millard2012EquilibriumMuscle self) -> ActiveForceLengthCurve

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_getActiveForceLengthCurve(self)


    def getForceVelocityCurve(self):
        """
        getForceVelocityCurve(Millard2012EquilibriumMuscle self) -> ForceVelocityCurve

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_getForceVelocityCurve(self)


    def getFiberForceLengthCurve(self):
        """
        getFiberForceLengthCurve(Millard2012EquilibriumMuscle self) -> FiberForceLengthCurve

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_getFiberForceLengthCurve(self)


    def getTendonForceLengthCurve(self):
        """
        getTendonForceLengthCurve(Millard2012EquilibriumMuscle self) -> TendonForceLengthCurve

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_getTendonForceLengthCurve(self)


    def getPennationModel(self):
        """
        getPennationModel(Millard2012EquilibriumMuscle self) -> MuscleFixedWidthPennationModel

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_getPennationModel(self)


    def getMaximumPennationAngle(self):
        """
        getMaximumPennationAngle(Millard2012EquilibriumMuscle self) -> double

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_getMaximumPennationAngle(self)


    def getMinimumFiberLength(self):
        """
        getMinimumFiberLength(Millard2012EquilibriumMuscle self) -> double

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_getMinimumFiberLength(self)


    def getMinimumFiberLengthAlongTendon(self):
        """
        getMinimumFiberLengthAlongTendon(Millard2012EquilibriumMuscle self) -> double

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_getMinimumFiberLengthAlongTendon(self)


    def getTendonForceMultiplier(self, s):
        """
        getTendonForceMultiplier(Millard2012EquilibriumMuscle self, State s) -> double

        Parameters:
            s: SimTK::State &

        """
        return _opensim.Millard2012EquilibriumMuscle_getTendonForceMultiplier(self, s)


    def getFiberStiffnessAlongTendon(self, s):
        """
        getFiberStiffnessAlongTendon(Millard2012EquilibriumMuscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Millard2012EquilibriumMuscle_getFiberStiffnessAlongTendon(self, s)


    def getFiberVelocity(self, s):
        """
        getFiberVelocity(Millard2012EquilibriumMuscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Millard2012EquilibriumMuscle_getFiberVelocity(self, s)


    def getActivationDerivative(self, s):
        """
        getActivationDerivative(Millard2012EquilibriumMuscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Millard2012EquilibriumMuscle_getActivationDerivative(self, s)


    def getStateVariableNames(self):
        """
        getStateVariableNames(Millard2012EquilibriumMuscle self) -> ArrayStr

        Parameters:
            self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _opensim.Millard2012EquilibriumMuscle_getStateVariableNames(self)


    def getStateVariableSystemIndex(self, stateVariableName):
        """
        getStateVariableSystemIndex(Millard2012EquilibriumMuscle self, std::string const & stateVariableName) -> SimTK::SystemYIndex

        Parameters:
            stateVariableName: std::string const &

        """
        return _opensim.Millard2012EquilibriumMuscle_getStateVariableSystemIndex(self, stateVariableName)


    def setMuscleConfiguration(self, ignoreTendonCompliance, ignoreActivationDynamics, dampingCoefficient):
        """
        setMuscleConfiguration(Millard2012EquilibriumMuscle self, bool ignoreTendonCompliance, bool ignoreActivationDynamics, double dampingCoefficient)

        Parameters:
            ignoreTendonCompliance: bool
            ignoreActivationDynamics: bool
            dampingCoefficient: double

        """
        return _opensim.Millard2012EquilibriumMuscle_setMuscleConfiguration(self, ignoreTendonCompliance, ignoreActivationDynamics, dampingCoefficient)


    def setFiberDamping(self, dampingCoefficient):
        """
        setFiberDamping(Millard2012EquilibriumMuscle self, double dampingCoefficient)

        Parameters:
            dampingCoefficient: double

        """
        return _opensim.Millard2012EquilibriumMuscle_setFiberDamping(self, dampingCoefficient)


    def setDefaultActivation(self, activation):
        """
        setDefaultActivation(Millard2012EquilibriumMuscle self, double activation)

        Parameters:
            activation: double

        """
        return _opensim.Millard2012EquilibriumMuscle_setDefaultActivation(self, activation)


    def setActivation(self, s, activation):
        """
        setActivation(Millard2012EquilibriumMuscle self, State s, double activation)

        Parameters:
            s: SimTK::State &
            activation: double

        """
        return _opensim.Millard2012EquilibriumMuscle_setActivation(self, s, activation)


    def setDefaultFiberLength(self, fiberLength):
        """
        setDefaultFiberLength(Millard2012EquilibriumMuscle self, double fiberLength)

        Parameters:
            fiberLength: double

        """
        return _opensim.Millard2012EquilibriumMuscle_setDefaultFiberLength(self, fiberLength)


    def setActivationTimeConstant(self, activationTimeConstant):
        """
        setActivationTimeConstant(Millard2012EquilibriumMuscle self, double activationTimeConstant)

        Parameters:
            activationTimeConstant: double

        """
        return _opensim.Millard2012EquilibriumMuscle_setActivationTimeConstant(self, activationTimeConstant)


    def setDeactivationTimeConstant(self, deactivationTimeConstant):
        """
        setDeactivationTimeConstant(Millard2012EquilibriumMuscle self, double deactivationTimeConstant)

        Parameters:
            deactivationTimeConstant: double

        """
        return _opensim.Millard2012EquilibriumMuscle_setDeactivationTimeConstant(self, deactivationTimeConstant)


    def setMinimumActivation(self, minimumActivation):
        """
        setMinimumActivation(Millard2012EquilibriumMuscle self, double minimumActivation)

        Parameters:
            minimumActivation: double

        """
        return _opensim.Millard2012EquilibriumMuscle_setMinimumActivation(self, minimumActivation)


    def setActiveForceLengthCurve(self, aActiveForceLengthCurve):
        """
        setActiveForceLengthCurve(Millard2012EquilibriumMuscle self, ActiveForceLengthCurve aActiveForceLengthCurve)

        Parameters:
            aActiveForceLengthCurve: OpenSim::ActiveForceLengthCurve &

        """
        return _opensim.Millard2012EquilibriumMuscle_setActiveForceLengthCurve(self, aActiveForceLengthCurve)


    def setForceVelocityCurve(self, aForceVelocityCurve):
        """
        setForceVelocityCurve(Millard2012EquilibriumMuscle self, ForceVelocityCurve aForceVelocityCurve)

        Parameters:
            aForceVelocityCurve: OpenSim::ForceVelocityCurve &

        """
        return _opensim.Millard2012EquilibriumMuscle_setForceVelocityCurve(self, aForceVelocityCurve)


    def setFiberForceLengthCurve(self, aFiberForceLengthCurve):
        """
        setFiberForceLengthCurve(Millard2012EquilibriumMuscle self, FiberForceLengthCurve aFiberForceLengthCurve)

        Parameters:
            aFiberForceLengthCurve: OpenSim::FiberForceLengthCurve &

        """
        return _opensim.Millard2012EquilibriumMuscle_setFiberForceLengthCurve(self, aFiberForceLengthCurve)


    def setTendonForceLengthCurve(self, aTendonForceLengthCurve):
        """
        setTendonForceLengthCurve(Millard2012EquilibriumMuscle self, TendonForceLengthCurve aTendonForceLengthCurve)

        Parameters:
            aTendonForceLengthCurve: OpenSim::TendonForceLengthCurve &

        """
        return _opensim.Millard2012EquilibriumMuscle_setTendonForceLengthCurve(self, aTendonForceLengthCurve)


    def setFiberLength(self, s, fiberLength):
        """
        setFiberLength(Millard2012EquilibriumMuscle self, State s, double fiberLength)

        Parameters:
            s: SimTK::State &
            fiberLength: double

        """
        return _opensim.Millard2012EquilibriumMuscle_setFiberLength(self, s, fiberLength)


    def computeActuation(self, s):
        """
        computeActuation(Millard2012EquilibriumMuscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Millard2012EquilibriumMuscle_computeActuation(self, s)


    def computeInitialFiberEquilibrium(self, s):
        """
        computeInitialFiberEquilibrium(Millard2012EquilibriumMuscle self, State s)

        Parameters:
            s: SimTK::State &

        """
        return _opensim.Millard2012EquilibriumMuscle_computeInitialFiberEquilibrium(self, s)


    def computeFiberEquilibriumAtZeroVelocity(self, s):
        """
        computeFiberEquilibriumAtZeroVelocity(Millard2012EquilibriumMuscle self, State s)

        Parameters:
            s: SimTK::State &

        """
        return _opensim.Millard2012EquilibriumMuscle_computeFiberEquilibriumAtZeroVelocity(self, s)


    def calcActiveFiberForceAlongTendon(self, activation, fiberLength, fiberVelocity):
        """
        calcActiveFiberForceAlongTendon(Millard2012EquilibriumMuscle self, double activation, double fiberLength, double fiberVelocity) -> double

        Parameters:
            activation: double
            fiberLength: double
            fiberVelocity: double

        """
        return _opensim.Millard2012EquilibriumMuscle_calcActiveFiberForceAlongTendon(self, activation, fiberLength, fiberVelocity)


    def calcFiberStateGivenBoundaryCond(self, lengthMT, velocityMT, tendonForce, dTendonForceDT):
        """
        calcFiberStateGivenBoundaryCond(Millard2012EquilibriumMuscle self, double lengthMT, double velocityMT, double tendonForce, double dTendonForceDT) -> Vec4

        Parameters:
            lengthMT: double
            velocityMT: double
            tendonForce: double
            dTendonForceDT: double

        """
        return _opensim.Millard2012EquilibriumMuscle_calcFiberStateGivenBoundaryCond(self, lengthMT, velocityMT, tendonForce, dTendonForceDT)


    def calcInextensibleTendonActiveFiberForce(self, s, aActivation):
        """
        calcInextensibleTendonActiveFiberForce(Millard2012EquilibriumMuscle self, State s, double aActivation) -> double

        Parameters:
            s: SimTK::State &
            aActivation: double

        """
        return _opensim.Millard2012EquilibriumMuscle_calcInextensibleTendonActiveFiberForce(self, s, aActivation)

    __swig_destroy__ = _opensim.delete_Millard2012EquilibriumMuscle
    __del__ = lambda self: None
Millard2012EquilibriumMuscle_swigregister = _opensim.Millard2012EquilibriumMuscle_swigregister
Millard2012EquilibriumMuscle_swigregister(Millard2012EquilibriumMuscle)

def Millard2012EquilibriumMuscle_safeDownCast(obj):
    """
    Millard2012EquilibriumMuscle_safeDownCast(OpenSimObject obj) -> Millard2012EquilibriumMuscle

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Millard2012EquilibriumMuscle_safeDownCast(obj)

def Millard2012EquilibriumMuscle_getClassName():
    """Millard2012EquilibriumMuscle_getClassName() -> std::string const &"""
    return _opensim.Millard2012EquilibriumMuscle_getClassName()

class Millard2012AccelerationMuscle(Muscle):
    """Proxy of C++ OpenSim::Millard2012AccelerationMuscle class"""
    __swig_setmethods__ = {}
    for _s in [Muscle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Millard2012AccelerationMuscle, name, value)
    __swig_getmethods__ = {}
    for _s in [Muscle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Millard2012AccelerationMuscle, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Millard2012AccelerationMuscle

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Millard2012AccelerationMuscle_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Millard2012AccelerationMuscle self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Millard2012AccelerationMuscle_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Millard2012AccelerationMuscle_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Millard2012AccelerationMuscle self) -> Millard2012AccelerationMuscle

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Millard2012AccelerationMuscle self) -> std::string const &

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_getConcreteClassName(self)


    def copyProperty_default_activation(self, source):
        """
        copyProperty_default_activation(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters:
            source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _opensim.Millard2012AccelerationMuscle_copyProperty_default_activation(self, source)


    def append_default_activation(self, value):
        """
        append_default_activation(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_append_default_activation(self, value)


    def constructProperty_default_activation(self, initValue):
        """
        constructProperty_default_activation(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_constructProperty_default_activation(self, initValue)


    def get_default_activation(self, *args):
        """
        get_default_activation(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters:
            i: int

        get_default_activation(Millard2012AccelerationMuscle self) -> double const &

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_get_default_activation(self, *args)


    def upd_default_activation(self, *args):
        """
        upd_default_activation(Millard2012AccelerationMuscle self, int i) -> double

        Parameters:
            i: int

        upd_default_activation(Millard2012AccelerationMuscle self) -> double &

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _opensim.Millard2012AccelerationMuscle_upd_default_activation(self, *args)


    def set_default_activation(self, *args):
        """
        set_default_activation(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_default_activation(Millard2012AccelerationMuscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_set_default_activation(self, *args)


    def copyProperty_default_fiber_length(self, source):
        """
        copyProperty_default_fiber_length(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters:
            source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _opensim.Millard2012AccelerationMuscle_copyProperty_default_fiber_length(self, source)


    def append_default_fiber_length(self, value):
        """
        append_default_fiber_length(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_append_default_fiber_length(self, value)


    def constructProperty_default_fiber_length(self, initValue):
        """
        constructProperty_default_fiber_length(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_constructProperty_default_fiber_length(self, initValue)


    def get_default_fiber_length(self, *args):
        """
        get_default_fiber_length(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters:
            i: int

        get_default_fiber_length(Millard2012AccelerationMuscle self) -> double const &

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_get_default_fiber_length(self, *args)


    def upd_default_fiber_length(self, *args):
        """
        upd_default_fiber_length(Millard2012AccelerationMuscle self, int i) -> double

        Parameters:
            i: int

        upd_default_fiber_length(Millard2012AccelerationMuscle self) -> double &

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _opensim.Millard2012AccelerationMuscle_upd_default_fiber_length(self, *args)


    def set_default_fiber_length(self, *args):
        """
        set_default_fiber_length(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_default_fiber_length(Millard2012AccelerationMuscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_set_default_fiber_length(self, *args)


    def copyProperty_default_fiber_velocity(self, source):
        """
        copyProperty_default_fiber_velocity(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters:
            source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _opensim.Millard2012AccelerationMuscle_copyProperty_default_fiber_velocity(self, source)


    def append_default_fiber_velocity(self, value):
        """
        append_default_fiber_velocity(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_append_default_fiber_velocity(self, value)


    def constructProperty_default_fiber_velocity(self, initValue):
        """
        constructProperty_default_fiber_velocity(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_constructProperty_default_fiber_velocity(self, initValue)


    def get_default_fiber_velocity(self, *args):
        """
        get_default_fiber_velocity(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters:
            i: int

        get_default_fiber_velocity(Millard2012AccelerationMuscle self) -> double const &

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_get_default_fiber_velocity(self, *args)


    def upd_default_fiber_velocity(self, *args):
        """
        upd_default_fiber_velocity(Millard2012AccelerationMuscle self, int i) -> double

        Parameters:
            i: int

        upd_default_fiber_velocity(Millard2012AccelerationMuscle self) -> double &

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _opensim.Millard2012AccelerationMuscle_upd_default_fiber_velocity(self, *args)


    def set_default_fiber_velocity(self, *args):
        """
        set_default_fiber_velocity(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_default_fiber_velocity(Millard2012AccelerationMuscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_set_default_fiber_velocity(self, *args)


    def copyProperty_MuscleFirstOrderActivationDynamicModel(self, source):
        """
        copyProperty_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters:
            source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _opensim.Millard2012AccelerationMuscle_copyProperty_MuscleFirstOrderActivationDynamicModel(self, source)


    def append_MuscleFirstOrderActivationDynamicModel(self, value):
        """
        append_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self, MuscleFirstOrderActivationDynamicModel value) -> int

        Parameters:
            value: OpenSim::MuscleFirstOrderActivationDynamicModel const &

        """
        return _opensim.Millard2012AccelerationMuscle_append_MuscleFirstOrderActivationDynamicModel(self, value)


    def constructProperty_MuscleFirstOrderActivationDynamicModel(self, initValue):
        """
        constructProperty_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self, MuscleFirstOrderActivationDynamicModel initValue)

        Parameters:
            initValue: OpenSim::MuscleFirstOrderActivationDynamicModel const &

        """
        return _opensim.Millard2012AccelerationMuscle_constructProperty_MuscleFirstOrderActivationDynamicModel(self, initValue)


    def get_MuscleFirstOrderActivationDynamicModel(self, *args):
        """
        get_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self, int i) -> MuscleFirstOrderActivationDynamicModel

        Parameters:
            i: int

        get_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self) -> MuscleFirstOrderActivationDynamicModel

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_get_MuscleFirstOrderActivationDynamicModel(self, *args)


    def upd_MuscleFirstOrderActivationDynamicModel(self, *args):
        """
        upd_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self, int i) -> MuscleFirstOrderActivationDynamicModel

        Parameters:
            i: int

        upd_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self) -> MuscleFirstOrderActivationDynamicModel

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _opensim.Millard2012AccelerationMuscle_upd_MuscleFirstOrderActivationDynamicModel(self, *args)


    def set_MuscleFirstOrderActivationDynamicModel(self, *args):
        """
        set_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self, int i, MuscleFirstOrderActivationDynamicModel value)

        Parameters:
            i: int
            value: OpenSim::MuscleFirstOrderActivationDynamicModel const &

        set_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self, MuscleFirstOrderActivationDynamicModel value)

        Parameters:
            value: OpenSim::MuscleFirstOrderActivationDynamicModel const &

        """
        return _opensim.Millard2012AccelerationMuscle_set_MuscleFirstOrderActivationDynamicModel(self, *args)


    def copyProperty_ActiveForceLengthCurve(self, source):
        """
        copyProperty_ActiveForceLengthCurve(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters:
            source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _opensim.Millard2012AccelerationMuscle_copyProperty_ActiveForceLengthCurve(self, source)


    def append_ActiveForceLengthCurve(self, value):
        """
        append_ActiveForceLengthCurve(Millard2012AccelerationMuscle self, ActiveForceLengthCurve value) -> int

        Parameters:
            value: OpenSim::ActiveForceLengthCurve const &

        """
        return _opensim.Millard2012AccelerationMuscle_append_ActiveForceLengthCurve(self, value)


    def constructProperty_ActiveForceLengthCurve(self, initValue):
        """
        constructProperty_ActiveForceLengthCurve(Millard2012AccelerationMuscle self, ActiveForceLengthCurve initValue)

        Parameters:
            initValue: OpenSim::ActiveForceLengthCurve const &

        """
        return _opensim.Millard2012AccelerationMuscle_constructProperty_ActiveForceLengthCurve(self, initValue)


    def get_ActiveForceLengthCurve(self, *args):
        """
        get_ActiveForceLengthCurve(Millard2012AccelerationMuscle self, int i) -> ActiveForceLengthCurve

        Parameters:
            i: int

        get_ActiveForceLengthCurve(Millard2012AccelerationMuscle self) -> ActiveForceLengthCurve

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_get_ActiveForceLengthCurve(self, *args)


    def upd_ActiveForceLengthCurve(self, *args):
        """
        upd_ActiveForceLengthCurve(Millard2012AccelerationMuscle self, int i) -> ActiveForceLengthCurve

        Parameters:
            i: int

        upd_ActiveForceLengthCurve(Millard2012AccelerationMuscle self) -> ActiveForceLengthCurve

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _opensim.Millard2012AccelerationMuscle_upd_ActiveForceLengthCurve(self, *args)


    def set_ActiveForceLengthCurve(self, *args):
        """
        set_ActiveForceLengthCurve(Millard2012AccelerationMuscle self, int i, ActiveForceLengthCurve value)

        Parameters:
            i: int
            value: OpenSim::ActiveForceLengthCurve const &

        set_ActiveForceLengthCurve(Millard2012AccelerationMuscle self, ActiveForceLengthCurve value)

        Parameters:
            value: OpenSim::ActiveForceLengthCurve const &

        """
        return _opensim.Millard2012AccelerationMuscle_set_ActiveForceLengthCurve(self, *args)


    def copyProperty_ForceVelocityCurve(self, source):
        """
        copyProperty_ForceVelocityCurve(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters:
            source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _opensim.Millard2012AccelerationMuscle_copyProperty_ForceVelocityCurve(self, source)


    def append_ForceVelocityCurve(self, value):
        """
        append_ForceVelocityCurve(Millard2012AccelerationMuscle self, ForceVelocityCurve value) -> int

        Parameters:
            value: OpenSim::ForceVelocityCurve const &

        """
        return _opensim.Millard2012AccelerationMuscle_append_ForceVelocityCurve(self, value)


    def constructProperty_ForceVelocityCurve(self, initValue):
        """
        constructProperty_ForceVelocityCurve(Millard2012AccelerationMuscle self, ForceVelocityCurve initValue)

        Parameters:
            initValue: OpenSim::ForceVelocityCurve const &

        """
        return _opensim.Millard2012AccelerationMuscle_constructProperty_ForceVelocityCurve(self, initValue)


    def get_ForceVelocityCurve(self, *args):
        """
        get_ForceVelocityCurve(Millard2012AccelerationMuscle self, int i) -> ForceVelocityCurve

        Parameters:
            i: int

        get_ForceVelocityCurve(Millard2012AccelerationMuscle self) -> ForceVelocityCurve

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_get_ForceVelocityCurve(self, *args)


    def upd_ForceVelocityCurve(self, *args):
        """
        upd_ForceVelocityCurve(Millard2012AccelerationMuscle self, int i) -> ForceVelocityCurve

        Parameters:
            i: int

        upd_ForceVelocityCurve(Millard2012AccelerationMuscle self) -> ForceVelocityCurve

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _opensim.Millard2012AccelerationMuscle_upd_ForceVelocityCurve(self, *args)


    def set_ForceVelocityCurve(self, *args):
        """
        set_ForceVelocityCurve(Millard2012AccelerationMuscle self, int i, ForceVelocityCurve value)

        Parameters:
            i: int
            value: OpenSim::ForceVelocityCurve const &

        set_ForceVelocityCurve(Millard2012AccelerationMuscle self, ForceVelocityCurve value)

        Parameters:
            value: OpenSim::ForceVelocityCurve const &

        """
        return _opensim.Millard2012AccelerationMuscle_set_ForceVelocityCurve(self, *args)


    def copyProperty_FiberForceLengthCurve(self, source):
        """
        copyProperty_FiberForceLengthCurve(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters:
            source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _opensim.Millard2012AccelerationMuscle_copyProperty_FiberForceLengthCurve(self, source)


    def append_FiberForceLengthCurve(self, value):
        """
        append_FiberForceLengthCurve(Millard2012AccelerationMuscle self, FiberForceLengthCurve value) -> int

        Parameters:
            value: OpenSim::FiberForceLengthCurve const &

        """
        return _opensim.Millard2012AccelerationMuscle_append_FiberForceLengthCurve(self, value)


    def constructProperty_FiberForceLengthCurve(self, initValue):
        """
        constructProperty_FiberForceLengthCurve(Millard2012AccelerationMuscle self, FiberForceLengthCurve initValue)

        Parameters:
            initValue: OpenSim::FiberForceLengthCurve const &

        """
        return _opensim.Millard2012AccelerationMuscle_constructProperty_FiberForceLengthCurve(self, initValue)


    def get_FiberForceLengthCurve(self, *args):
        """
        get_FiberForceLengthCurve(Millard2012AccelerationMuscle self, int i) -> FiberForceLengthCurve

        Parameters:
            i: int

        get_FiberForceLengthCurve(Millard2012AccelerationMuscle self) -> FiberForceLengthCurve

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_get_FiberForceLengthCurve(self, *args)


    def upd_FiberForceLengthCurve(self, *args):
        """
        upd_FiberForceLengthCurve(Millard2012AccelerationMuscle self, int i) -> FiberForceLengthCurve

        Parameters:
            i: int

        upd_FiberForceLengthCurve(Millard2012AccelerationMuscle self) -> FiberForceLengthCurve

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _opensim.Millard2012AccelerationMuscle_upd_FiberForceLengthCurve(self, *args)


    def set_FiberForceLengthCurve(self, *args):
        """
        set_FiberForceLengthCurve(Millard2012AccelerationMuscle self, int i, FiberForceLengthCurve value)

        Parameters:
            i: int
            value: OpenSim::FiberForceLengthCurve const &

        set_FiberForceLengthCurve(Millard2012AccelerationMuscle self, FiberForceLengthCurve value)

        Parameters:
            value: OpenSim::FiberForceLengthCurve const &

        """
        return _opensim.Millard2012AccelerationMuscle_set_FiberForceLengthCurve(self, *args)


    def copyProperty_TendonForceLengthCurve(self, source):
        """
        copyProperty_TendonForceLengthCurve(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters:
            source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _opensim.Millard2012AccelerationMuscle_copyProperty_TendonForceLengthCurve(self, source)


    def append_TendonForceLengthCurve(self, value):
        """
        append_TendonForceLengthCurve(Millard2012AccelerationMuscle self, TendonForceLengthCurve value) -> int

        Parameters:
            value: OpenSim::TendonForceLengthCurve const &

        """
        return _opensim.Millard2012AccelerationMuscle_append_TendonForceLengthCurve(self, value)


    def constructProperty_TendonForceLengthCurve(self, initValue):
        """
        constructProperty_TendonForceLengthCurve(Millard2012AccelerationMuscle self, TendonForceLengthCurve initValue)

        Parameters:
            initValue: OpenSim::TendonForceLengthCurve const &

        """
        return _opensim.Millard2012AccelerationMuscle_constructProperty_TendonForceLengthCurve(self, initValue)


    def get_TendonForceLengthCurve(self, *args):
        """
        get_TendonForceLengthCurve(Millard2012AccelerationMuscle self, int i) -> TendonForceLengthCurve

        Parameters:
            i: int

        get_TendonForceLengthCurve(Millard2012AccelerationMuscle self) -> TendonForceLengthCurve

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_get_TendonForceLengthCurve(self, *args)


    def upd_TendonForceLengthCurve(self, *args):
        """
        upd_TendonForceLengthCurve(Millard2012AccelerationMuscle self, int i) -> TendonForceLengthCurve

        Parameters:
            i: int

        upd_TendonForceLengthCurve(Millard2012AccelerationMuscle self) -> TendonForceLengthCurve

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _opensim.Millard2012AccelerationMuscle_upd_TendonForceLengthCurve(self, *args)


    def set_TendonForceLengthCurve(self, *args):
        """
        set_TendonForceLengthCurve(Millard2012AccelerationMuscle self, int i, TendonForceLengthCurve value)

        Parameters:
            i: int
            value: OpenSim::TendonForceLengthCurve const &

        set_TendonForceLengthCurve(Millard2012AccelerationMuscle self, TendonForceLengthCurve value)

        Parameters:
            value: OpenSim::TendonForceLengthCurve const &

        """
        return _opensim.Millard2012AccelerationMuscle_set_TendonForceLengthCurve(self, *args)


    def copyProperty_FiberCompressiveForceLengthCurve(self, source):
        """
        copyProperty_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters:
            source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _opensim.Millard2012AccelerationMuscle_copyProperty_FiberCompressiveForceLengthCurve(self, source)


    def append_FiberCompressiveForceLengthCurve(self, value):
        """
        append_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self, FiberCompressiveForceLengthCurve value) -> int

        Parameters:
            value: OpenSim::FiberCompressiveForceLengthCurve const &

        """
        return _opensim.Millard2012AccelerationMuscle_append_FiberCompressiveForceLengthCurve(self, value)


    def constructProperty_FiberCompressiveForceLengthCurve(self, initValue):
        """
        constructProperty_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self, FiberCompressiveForceLengthCurve initValue)

        Parameters:
            initValue: OpenSim::FiberCompressiveForceLengthCurve const &

        """
        return _opensim.Millard2012AccelerationMuscle_constructProperty_FiberCompressiveForceLengthCurve(self, initValue)


    def get_FiberCompressiveForceLengthCurve(self, *args):
        """
        get_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self, int i) -> FiberCompressiveForceLengthCurve

        Parameters:
            i: int

        get_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self) -> FiberCompressiveForceLengthCurve

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_get_FiberCompressiveForceLengthCurve(self, *args)


    def upd_FiberCompressiveForceLengthCurve(self, *args):
        """
        upd_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self, int i) -> FiberCompressiveForceLengthCurve

        Parameters:
            i: int

        upd_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self) -> FiberCompressiveForceLengthCurve

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _opensim.Millard2012AccelerationMuscle_upd_FiberCompressiveForceLengthCurve(self, *args)


    def set_FiberCompressiveForceLengthCurve(self, *args):
        """
        set_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self, int i, FiberCompressiveForceLengthCurve value)

        Parameters:
            i: int
            value: OpenSim::FiberCompressiveForceLengthCurve const &

        set_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self, FiberCompressiveForceLengthCurve value)

        Parameters:
            value: OpenSim::FiberCompressiveForceLengthCurve const &

        """
        return _opensim.Millard2012AccelerationMuscle_set_FiberCompressiveForceLengthCurve(self, *args)


    def copyProperty_FiberCompressiveForceCosPennationCurve(self, source):
        """
        copyProperty_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters:
            source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _opensim.Millard2012AccelerationMuscle_copyProperty_FiberCompressiveForceCosPennationCurve(self, source)


    def append_FiberCompressiveForceCosPennationCurve(self, value):
        """
        append_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self, FiberCompressiveForceCosPennationCurve value) -> int

        Parameters:
            value: OpenSim::FiberCompressiveForceCosPennationCurve const &

        """
        return _opensim.Millard2012AccelerationMuscle_append_FiberCompressiveForceCosPennationCurve(self, value)


    def constructProperty_FiberCompressiveForceCosPennationCurve(self, initValue):
        """
        constructProperty_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self, FiberCompressiveForceCosPennationCurve initValue)

        Parameters:
            initValue: OpenSim::FiberCompressiveForceCosPennationCurve const &

        """
        return _opensim.Millard2012AccelerationMuscle_constructProperty_FiberCompressiveForceCosPennationCurve(self, initValue)


    def get_FiberCompressiveForceCosPennationCurve(self, *args):
        """
        get_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self, int i) -> FiberCompressiveForceCosPennationCurve

        Parameters:
            i: int

        get_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self) -> FiberCompressiveForceCosPennationCurve

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_get_FiberCompressiveForceCosPennationCurve(self, *args)


    def upd_FiberCompressiveForceCosPennationCurve(self, *args):
        """
        upd_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self, int i) -> FiberCompressiveForceCosPennationCurve

        Parameters:
            i: int

        upd_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self) -> FiberCompressiveForceCosPennationCurve

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _opensim.Millard2012AccelerationMuscle_upd_FiberCompressiveForceCosPennationCurve(self, *args)


    def set_FiberCompressiveForceCosPennationCurve(self, *args):
        """
        set_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self, int i, FiberCompressiveForceCosPennationCurve value)

        Parameters:
            i: int
            value: OpenSim::FiberCompressiveForceCosPennationCurve const &

        set_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self, FiberCompressiveForceCosPennationCurve value)

        Parameters:
            value: OpenSim::FiberCompressiveForceCosPennationCurve const &

        """
        return _opensim.Millard2012AccelerationMuscle_set_FiberCompressiveForceCosPennationCurve(self, *args)


    def copyProperty_fiber_damping(self, source):
        """
        copyProperty_fiber_damping(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters:
            source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _opensim.Millard2012AccelerationMuscle_copyProperty_fiber_damping(self, source)


    def append_fiber_damping(self, value):
        """
        append_fiber_damping(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_append_fiber_damping(self, value)


    def constructProperty_fiber_damping(self, initValue):
        """
        constructProperty_fiber_damping(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_constructProperty_fiber_damping(self, initValue)


    def get_fiber_damping(self, *args):
        """
        get_fiber_damping(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters:
            i: int

        get_fiber_damping(Millard2012AccelerationMuscle self) -> double const &

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_get_fiber_damping(self, *args)


    def upd_fiber_damping(self, *args):
        """
        upd_fiber_damping(Millard2012AccelerationMuscle self, int i) -> double

        Parameters:
            i: int

        upd_fiber_damping(Millard2012AccelerationMuscle self) -> double &

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _opensim.Millard2012AccelerationMuscle_upd_fiber_damping(self, *args)


    def set_fiber_damping(self, *args):
        """
        set_fiber_damping(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_fiber_damping(Millard2012AccelerationMuscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_set_fiber_damping(self, *args)


    def copyProperty_fiber_force_length_damping(self, source):
        """
        copyProperty_fiber_force_length_damping(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters:
            source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _opensim.Millard2012AccelerationMuscle_copyProperty_fiber_force_length_damping(self, source)


    def append_fiber_force_length_damping(self, value):
        """
        append_fiber_force_length_damping(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_append_fiber_force_length_damping(self, value)


    def constructProperty_fiber_force_length_damping(self, initValue):
        """
        constructProperty_fiber_force_length_damping(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_constructProperty_fiber_force_length_damping(self, initValue)


    def get_fiber_force_length_damping(self, *args):
        """
        get_fiber_force_length_damping(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters:
            i: int

        get_fiber_force_length_damping(Millard2012AccelerationMuscle self) -> double const &

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_get_fiber_force_length_damping(self, *args)


    def upd_fiber_force_length_damping(self, *args):
        """
        upd_fiber_force_length_damping(Millard2012AccelerationMuscle self, int i) -> double

        Parameters:
            i: int

        upd_fiber_force_length_damping(Millard2012AccelerationMuscle self) -> double &

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _opensim.Millard2012AccelerationMuscle_upd_fiber_force_length_damping(self, *args)


    def set_fiber_force_length_damping(self, *args):
        """
        set_fiber_force_length_damping(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_fiber_force_length_damping(Millard2012AccelerationMuscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_set_fiber_force_length_damping(self, *args)


    def copyProperty_fiber_compressive_force_length_damping(self, source):
        """
        copyProperty_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters:
            source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _opensim.Millard2012AccelerationMuscle_copyProperty_fiber_compressive_force_length_damping(self, source)


    def append_fiber_compressive_force_length_damping(self, value):
        """
        append_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_append_fiber_compressive_force_length_damping(self, value)


    def constructProperty_fiber_compressive_force_length_damping(self, initValue):
        """
        constructProperty_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_constructProperty_fiber_compressive_force_length_damping(self, initValue)


    def get_fiber_compressive_force_length_damping(self, *args):
        """
        get_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters:
            i: int

        get_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self) -> double const &

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_get_fiber_compressive_force_length_damping(self, *args)


    def upd_fiber_compressive_force_length_damping(self, *args):
        """
        upd_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self, int i) -> double

        Parameters:
            i: int

        upd_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self) -> double &

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _opensim.Millard2012AccelerationMuscle_upd_fiber_compressive_force_length_damping(self, *args)


    def set_fiber_compressive_force_length_damping(self, *args):
        """
        set_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_set_fiber_compressive_force_length_damping(self, *args)


    def copyProperty_fiber_compressive_force_cos_pennation_damping(self, source):
        """
        copyProperty_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters:
            source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _opensim.Millard2012AccelerationMuscle_copyProperty_fiber_compressive_force_cos_pennation_damping(self, source)


    def append_fiber_compressive_force_cos_pennation_damping(self, value):
        """
        append_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_append_fiber_compressive_force_cos_pennation_damping(self, value)


    def constructProperty_fiber_compressive_force_cos_pennation_damping(self, initValue):
        """
        constructProperty_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_constructProperty_fiber_compressive_force_cos_pennation_damping(self, initValue)


    def get_fiber_compressive_force_cos_pennation_damping(self, *args):
        """
        get_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters:
            i: int

        get_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self) -> double const &

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_get_fiber_compressive_force_cos_pennation_damping(self, *args)


    def upd_fiber_compressive_force_cos_pennation_damping(self, *args):
        """
        upd_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self, int i) -> double

        Parameters:
            i: int

        upd_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self) -> double &

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _opensim.Millard2012AccelerationMuscle_upd_fiber_compressive_force_cos_pennation_damping(self, *args)


    def set_fiber_compressive_force_cos_pennation_damping(self, *args):
        """
        set_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_set_fiber_compressive_force_cos_pennation_damping(self, *args)


    def copyProperty_tendon_force_length_damping(self, source):
        """
        copyProperty_tendon_force_length_damping(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters:
            source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _opensim.Millard2012AccelerationMuscle_copyProperty_tendon_force_length_damping(self, source)


    def append_tendon_force_length_damping(self, value):
        """
        append_tendon_force_length_damping(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_append_tendon_force_length_damping(self, value)


    def constructProperty_tendon_force_length_damping(self, initValue):
        """
        constructProperty_tendon_force_length_damping(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_constructProperty_tendon_force_length_damping(self, initValue)


    def get_tendon_force_length_damping(self, *args):
        """
        get_tendon_force_length_damping(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters:
            i: int

        get_tendon_force_length_damping(Millard2012AccelerationMuscle self) -> double const &

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_get_tendon_force_length_damping(self, *args)


    def upd_tendon_force_length_damping(self, *args):
        """
        upd_tendon_force_length_damping(Millard2012AccelerationMuscle self, int i) -> double

        Parameters:
            i: int

        upd_tendon_force_length_damping(Millard2012AccelerationMuscle self) -> double &

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _opensim.Millard2012AccelerationMuscle_upd_tendon_force_length_damping(self, *args)


    def set_tendon_force_length_damping(self, *args):
        """
        set_tendon_force_length_damping(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_tendon_force_length_damping(Millard2012AccelerationMuscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_set_tendon_force_length_damping(self, *args)


    def copyProperty_mass(self, source):
        """
        copyProperty_mass(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters:
            source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _opensim.Millard2012AccelerationMuscle_copyProperty_mass(self, source)


    def append_mass(self, value):
        """
        append_mass(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_append_mass(self, value)


    def constructProperty_mass(self, initValue):
        """
        constructProperty_mass(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters:
            initValue: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_constructProperty_mass(self, initValue)


    def get_mass(self, *args):
        """
        get_mass(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters:
            i: int

        get_mass(Millard2012AccelerationMuscle self) -> double const &

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_get_mass(self, *args)


    def upd_mass(self, *args):
        """
        upd_mass(Millard2012AccelerationMuscle self, int i) -> double

        Parameters:
            i: int

        upd_mass(Millard2012AccelerationMuscle self) -> double &

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _opensim.Millard2012AccelerationMuscle_upd_mass(self, *args)


    def set_mass(self, *args):
        """
        set_mass(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters:
            i: int
            value: double const &

        set_mass(Millard2012AccelerationMuscle self, double const & value)

        Parameters:
            value: double const &

        """
        return _opensim.Millard2012AccelerationMuscle_set_mass(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::Millard2012AccelerationMuscle self) -> Millard2012AccelerationMuscle
        __init__(OpenSim::Millard2012AccelerationMuscle self, std::string const & aName, double aMaxIsometricForce, double aOptimalFiberLength, double aTendonSlackLength, double aPennationAngle) -> Millard2012AccelerationMuscle

        Parameters:
            aName: std::string const &
            aMaxIsometricForce: double
            aOptimalFiberLength: double
            aTendonSlackLength: double
            aPennationAngle: double

        """
        this = _opensim.new_Millard2012AccelerationMuscle(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getFiberCompressiveForceLengthMultiplier(self, s):
        """
        getFiberCompressiveForceLengthMultiplier(Millard2012AccelerationMuscle self, State s) -> double

        Parameters:
            s: SimTK::State &

        """
        return _opensim.Millard2012AccelerationMuscle_getFiberCompressiveForceLengthMultiplier(self, s)


    def getFiberCompressiveForceCosPennationMultiplier(self, s):
        """
        getFiberCompressiveForceCosPennationMultiplier(Millard2012AccelerationMuscle self, State s) -> double

        Parameters:
            s: SimTK::State &

        """
        return _opensim.Millard2012AccelerationMuscle_getFiberCompressiveForceCosPennationMultiplier(self, s)


    def getTendonForceMultiplier(self, s):
        """
        getTendonForceMultiplier(Millard2012AccelerationMuscle self, State s) -> double

        Parameters:
            s: SimTK::State &

        """
        return _opensim.Millard2012AccelerationMuscle_getTendonForceMultiplier(self, s)


    def getMass(self):
        """
        getMass(Millard2012AccelerationMuscle self) -> double

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_getMass(self)


    def getActivationModel(self):
        """
        getActivationModel(Millard2012AccelerationMuscle self) -> MuscleFirstOrderActivationDynamicModel

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_getActivationModel(self)


    def getPennationModel(self):
        """
        getPennationModel(Millard2012AccelerationMuscle self) -> MuscleFixedWidthPennationModel

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_getPennationModel(self)


    def getActiveForceLengthCurve(self):
        """
        getActiveForceLengthCurve(Millard2012AccelerationMuscle self) -> ActiveForceLengthCurve

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_getActiveForceLengthCurve(self)


    def getForceVelocityCurve(self):
        """
        getForceVelocityCurve(Millard2012AccelerationMuscle self) -> ForceVelocityCurve

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_getForceVelocityCurve(self)


    def getFiberForceLengthCurve(self):
        """
        getFiberForceLengthCurve(Millard2012AccelerationMuscle self) -> FiberForceLengthCurve

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_getFiberForceLengthCurve(self)


    def getTendonForceLengthCurve(self):
        """
        getTendonForceLengthCurve(Millard2012AccelerationMuscle self) -> TendonForceLengthCurve

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_getTendonForceLengthCurve(self)


    def getFiberCompressiveForceLengthCurve(self):
        """
        getFiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self) -> FiberCompressiveForceLengthCurve

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_getFiberCompressiveForceLengthCurve(self)


    def getFiberCompressiveForceCosPennationCurve(self):
        """
        getFiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self) -> FiberCompressiveForceCosPennationCurve

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_getFiberCompressiveForceCosPennationCurve(self)


    def getFiberStiffnessAlongTendon(self, s):
        """
        getFiberStiffnessAlongTendon(Millard2012AccelerationMuscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Millard2012AccelerationMuscle_getFiberStiffnessAlongTendon(self, s)


    def setActivationModel(self, aActivationMdl):
        """
        setActivationModel(Millard2012AccelerationMuscle self, MuscleFirstOrderActivationDynamicModel aActivationMdl)

        Parameters:
            aActivationMdl: OpenSim::MuscleFirstOrderActivationDynamicModel &

        """
        return _opensim.Millard2012AccelerationMuscle_setActivationModel(self, aActivationMdl)


    def setActiveForceLengthCurve(self, aActiveForceLengthCurve):
        """
        setActiveForceLengthCurve(Millard2012AccelerationMuscle self, ActiveForceLengthCurve aActiveForceLengthCurve)

        Parameters:
            aActiveForceLengthCurve: OpenSim::ActiveForceLengthCurve &

        """
        return _opensim.Millard2012AccelerationMuscle_setActiveForceLengthCurve(self, aActiveForceLengthCurve)


    def setForceVelocityCurve(self, aForceVelocityCurve):
        """
        setForceVelocityCurve(Millard2012AccelerationMuscle self, ForceVelocityCurve aForceVelocityCurve)

        Parameters:
            aForceVelocityCurve: OpenSim::ForceVelocityCurve &

        """
        return _opensim.Millard2012AccelerationMuscle_setForceVelocityCurve(self, aForceVelocityCurve)


    def setFiberForceLengthCurve(self, aFiberForceLengthCurve):
        """
        setFiberForceLengthCurve(Millard2012AccelerationMuscle self, FiberForceLengthCurve aFiberForceLengthCurve)

        Parameters:
            aFiberForceLengthCurve: OpenSim::FiberForceLengthCurve &

        """
        return _opensim.Millard2012AccelerationMuscle_setFiberForceLengthCurve(self, aFiberForceLengthCurve)


    def setTendonForceLengthCurve(self, aTendonForceLengthCurve):
        """
        setTendonForceLengthCurve(Millard2012AccelerationMuscle self, TendonForceLengthCurve aTendonForceLengthCurve)

        Parameters:
            aTendonForceLengthCurve: OpenSim::TendonForceLengthCurve &

        """
        return _opensim.Millard2012AccelerationMuscle_setTendonForceLengthCurve(self, aTendonForceLengthCurve)


    def setFiberCompressiveForceLengthCurve(self, aFiberCompressiveForceLengthCurve):
        """
        setFiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self, FiberCompressiveForceLengthCurve aFiberCompressiveForceLengthCurve)

        Parameters:
            aFiberCompressiveForceLengthCurve: OpenSim::FiberCompressiveForceLengthCurve &

        """
        return _opensim.Millard2012AccelerationMuscle_setFiberCompressiveForceLengthCurve(self, aFiberCompressiveForceLengthCurve)


    def setFiberCompressiveForceCosPennationCurve(self, aFiberCompressiveForceCosPennationCurve):
        """
        setFiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self, FiberCompressiveForceCosPennationCurve aFiberCompressiveForceCosPennationCurve)

        Parameters:
            aFiberCompressiveForceCosPennationCurve: OpenSim::FiberCompressiveForceCosPennationCurve &

        """
        return _opensim.Millard2012AccelerationMuscle_setFiberCompressiveForceCosPennationCurve(self, aFiberCompressiveForceCosPennationCurve)


    def setMass(self, mass):
        """
        setMass(Millard2012AccelerationMuscle self, double mass)

        Parameters:
            mass: double

        """
        return _opensim.Millard2012AccelerationMuscle_setMass(self, mass)


    def getDefaultActivation(self):
        """
        getDefaultActivation(Millard2012AccelerationMuscle self) -> double

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_getDefaultActivation(self)


    def getDefaultFiberLength(self):
        """
        getDefaultFiberLength(Millard2012AccelerationMuscle self) -> double

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_getDefaultFiberLength(self)


    def getDefaultFiberVelocity(self):
        """
        getDefaultFiberVelocity(Millard2012AccelerationMuscle self) -> double

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_getDefaultFiberVelocity(self)


    def getActivationRate(self, s):
        """
        getActivationRate(Millard2012AccelerationMuscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Millard2012AccelerationMuscle_getActivationRate(self, s)


    def getFiberVelocity(self, s):
        """
        getFiberVelocity(Millard2012AccelerationMuscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Millard2012AccelerationMuscle_getFiberVelocity(self, s)


    def getFiberAcceleration(self, s):
        """
        getFiberAcceleration(Millard2012AccelerationMuscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Millard2012AccelerationMuscle_getFiberAcceleration(self, s)


    def setDefaultActivation(self, activation):
        """
        setDefaultActivation(Millard2012AccelerationMuscle self, double activation)

        Parameters:
            activation: double

        """
        return _opensim.Millard2012AccelerationMuscle_setDefaultActivation(self, activation)


    def setDefaultFiberLength(self, fiberLength):
        """
        setDefaultFiberLength(Millard2012AccelerationMuscle self, double fiberLength)

        Parameters:
            fiberLength: double

        """
        return _opensim.Millard2012AccelerationMuscle_setDefaultFiberLength(self, fiberLength)


    def setDefaultFiberVelocity(self, fiberVelocity):
        """
        setDefaultFiberVelocity(Millard2012AccelerationMuscle self, double fiberVelocity)

        Parameters:
            fiberVelocity: double

        """
        return _opensim.Millard2012AccelerationMuscle_setDefaultFiberVelocity(self, fiberVelocity)


    def setActivation(self, s, activation):
        """
        setActivation(Millard2012AccelerationMuscle self, State s, double activation)

        Parameters:
            s: SimTK::State &
            activation: double

        """
        return _opensim.Millard2012AccelerationMuscle_setActivation(self, s, activation)


    def setFiberLength(self, s, fiberLength):
        """
        setFiberLength(Millard2012AccelerationMuscle self, State s, double fiberLength)

        Parameters:
            s: SimTK::State &
            fiberLength: double

        """
        return _opensim.Millard2012AccelerationMuscle_setFiberLength(self, s, fiberLength)


    def setFiberVelocity(self, s, fiberVelocity):
        """
        setFiberVelocity(Millard2012AccelerationMuscle self, State s, double fiberVelocity)

        Parameters:
            s: SimTK::State &
            fiberVelocity: double

        """
        return _opensim.Millard2012AccelerationMuscle_setFiberVelocity(self, s, fiberVelocity)


    def getStateVariableNames(self):
        """
        getStateVariableNames(Millard2012AccelerationMuscle self) -> ArrayStr

        Parameters:
            self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _opensim.Millard2012AccelerationMuscle_getStateVariableNames(self)


    def getStateVariableSystemIndex(self, stateVariableName):
        """
        getStateVariableSystemIndex(Millard2012AccelerationMuscle self, std::string const & stateVariableName) -> SimTK::SystemYIndex

        Parameters:
            stateVariableName: std::string const &

        """
        return _opensim.Millard2012AccelerationMuscle_getStateVariableSystemIndex(self, stateVariableName)


    def computeActuation(self, s):
        """
        computeActuation(Millard2012AccelerationMuscle self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.Millard2012AccelerationMuscle_computeActuation(self, s)


    def computeInitialFiberEquilibrium(self, s):
        """
        computeInitialFiberEquilibrium(Millard2012AccelerationMuscle self, State s)

        Parameters:
            s: SimTK::State &

        """
        return _opensim.Millard2012AccelerationMuscle_computeInitialFiberEquilibrium(self, s)


    def calcInextensibleTendonActiveFiberForce(self, s, aActivation):
        """
        calcInextensibleTendonActiveFiberForce(Millard2012AccelerationMuscle self, State s, double aActivation) -> double

        Parameters:
            s: SimTK::State &
            aActivation: double

        """
        return _opensim.Millard2012AccelerationMuscle_calcInextensibleTendonActiveFiberForce(self, s, aActivation)


    def calcActiveFiberForceAlongTendon(self, activation, fiberLength, fiberVelocity):
        """
        calcActiveFiberForceAlongTendon(Millard2012AccelerationMuscle self, double activation, double fiberLength, double fiberVelocity) -> double

        Parameters:
            activation: double
            fiberLength: double
            fiberVelocity: double

        """
        return _opensim.Millard2012AccelerationMuscle_calcActiveFiberForceAlongTendon(self, activation, fiberLength, fiberVelocity)

    __swig_destroy__ = _opensim.delete_Millard2012AccelerationMuscle
    __del__ = lambda self: None
Millard2012AccelerationMuscle_swigregister = _opensim.Millard2012AccelerationMuscle_swigregister
Millard2012AccelerationMuscle_swigregister(Millard2012AccelerationMuscle)

def Millard2012AccelerationMuscle_safeDownCast(obj):
    """
    Millard2012AccelerationMuscle_safeDownCast(OpenSimObject obj) -> Millard2012AccelerationMuscle

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Millard2012AccelerationMuscle_safeDownCast(obj)

def Millard2012AccelerationMuscle_getClassName():
    """Millard2012AccelerationMuscle_getClassName() -> std::string const &"""
    return _opensim.Millard2012AccelerationMuscle_getClassName()

class IKTask(OpenSimObject):
    """Proxy of C++ OpenSim::IKTask class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKTask, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IKTask, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> IKTask

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.IKTask_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(IKTask self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.IKTask_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.IKTask_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(IKTask self) -> IKTask

        Parameters:
            self: OpenSim::IKTask const *

        """
        return _opensim.IKTask_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(IKTask self) -> std::string const &

        Parameters:
            self: OpenSim::IKTask const *

        """
        return _opensim.IKTask_getConcreteClassName(self)


    def getApply(self):
        """
        getApply(IKTask self) -> bool

        Parameters:
            self: OpenSim::IKTask const *

        """
        return _opensim.IKTask_getApply(self)


    def setApply(self, aApply):
        """
        setApply(IKTask self, bool aApply)

        Parameters:
            aApply: bool

        """
        return _opensim.IKTask_setApply(self, aApply)


    def getWeight(self):
        """
        getWeight(IKTask self) -> double

        Parameters:
            self: OpenSim::IKTask *

        """
        return _opensim.IKTask_getWeight(self)


    def setWeight(self, weight):
        """
        setWeight(IKTask self, double weight)

        Parameters:
            weight: double

        """
        return _opensim.IKTask_setWeight(self, weight)

    __swig_destroy__ = _opensim.delete_IKTask
    __del__ = lambda self: None
IKTask_swigregister = _opensim.IKTask_swigregister
IKTask_swigregister(IKTask)

def IKTask_safeDownCast(obj):
    """
    IKTask_safeDownCast(OpenSimObject obj) -> IKTask

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.IKTask_safeDownCast(obj)

def IKTask_getClassName():
    """IKTask_getClassName() -> std::string const &"""
    return _opensim.IKTask_getClassName()

class SetIKTasks(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::IKTask)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetIKTasks, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetIKTasks, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetIKTasks

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetIKTasks_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetIKTasks self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetIKTasks_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetIKTasks_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetIKTasks self) -> SetIKTasks

        Parameters:
            self: OpenSim::Set< OpenSim::IKTask > const *

        """
        return _opensim.SetIKTasks_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetIKTasks self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::IKTask > const *

        """
        return _opensim.SetIKTasks_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetIKTasks
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::IKTask)> self) -> SetIKTasks
        __init__(OpenSim::Set<(OpenSim::IKTask)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetIKTasks

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::IKTask)> self, std::string const & aFileName) -> SetIKTasks

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::IKTask)> self, SetIKTasks aSet) -> SetIKTasks

        Parameters:
            aSet: OpenSim::Set< OpenSim::IKTask > const &

        """
        this = _opensim.new_SetIKTasks(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetIKTasks self)

        Parameters:
            self: OpenSim::Set< OpenSim::IKTask > *

        """
        return _opensim.SetIKTasks_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetIKTasks self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetIKTasks_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetIKTasks self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetIKTasks_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetIKTasks self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::IKTask > const *

        """
        return _opensim.SetIKTasks_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetIKTasks self, IKTask aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::IKTask const *
            aStartIndex: int

        getIndex(SetIKTasks self, IKTask aObject) -> int

        Parameters:
            aObject: OpenSim::IKTask const *

        getIndex(SetIKTasks self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetIKTasks self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetIKTasks_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetIKTasks self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetIKTasks_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetIKTasks self, IKTask aObject) -> bool

        Parameters:
            aObject: OpenSim::IKTask *

        """
        return _opensim.SetIKTasks_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetIKTasks self, IKTask aObject) -> bool

        Parameters:
            aObject: OpenSim::IKTask const &

        """
        return _opensim.SetIKTasks_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetIKTasks self, int aIndex, IKTask aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::IKTask *

        """
        return _opensim.SetIKTasks_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetIKTasks self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetIKTasks self, IKTask aObject) -> bool

        Parameters:
            aObject: OpenSim::IKTask const *

        """
        return _opensim.SetIKTasks_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetIKTasks self)

        Parameters:
            self: OpenSim::Set< OpenSim::IKTask > *

        """
        return _opensim.SetIKTasks_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetIKTasks self, int aIndex, IKTask aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::IKTask *
            preserveGroups: bool

        set(SetIKTasks self, int aIndex, IKTask aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::IKTask *

        """
        return _opensim.SetIKTasks_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetIKTasks self, int aIndex) -> IKTask

        Parameters:
            aIndex: int

        get(SetIKTasks self, std::string const & aName) -> IKTask

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetIKTasks_get(self, *args)


    def contains(self, aName):
        """
        contains(SetIKTasks self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetIKTasks_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetIKTasks self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetIKTasks_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetIKTasks self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::IKTask > const *

        """
        return _opensim.SetIKTasks_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetIKTasks self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetIKTasks_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetIKTasks self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetIKTasks_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetIKTasks self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetIKTasks_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetIKTasks self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetIKTasks_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetIKTasks self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetIKTasks_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetIKTasks self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetIKTasks self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetIKTasks_getGroup(self, *args)

SetIKTasks_swigregister = _opensim.SetIKTasks_swigregister
SetIKTasks_swigregister(SetIKTasks)

def SetIKTasks_safeDownCast(obj):
    """
    SetIKTasks_safeDownCast(OpenSimObject obj) -> SetIKTasks

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetIKTasks_safeDownCast(obj)

def SetIKTasks_getClassName():
    """SetIKTasks_getClassName() -> std::string const &"""
    return _opensim.SetIKTasks_getClassName()

class SetMarkerWeights(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(MarkerWeight)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetMarkerWeights, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetMarkerWeights, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetMarkerWeights

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetMarkerWeights_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetMarkerWeights self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetMarkerWeights_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetMarkerWeights_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetMarkerWeights self) -> SetMarkerWeights

        Parameters:
            self: OpenSim::Set< MarkerWeight > const *

        """
        return _opensim.SetMarkerWeights_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetMarkerWeights self) -> std::string const &

        Parameters:
            self: OpenSim::Set< MarkerWeight > const *

        """
        return _opensim.SetMarkerWeights_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetMarkerWeights
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(MarkerWeight)> self) -> SetMarkerWeights
        __init__(OpenSim::Set<(MarkerWeight)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetMarkerWeights

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(MarkerWeight)> self, std::string const & aFileName) -> SetMarkerWeights

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(MarkerWeight)> self, SetMarkerWeights aSet) -> SetMarkerWeights

        Parameters:
            aSet: OpenSim::Set< MarkerWeight > const &

        """
        this = _opensim.new_SetMarkerWeights(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetMarkerWeights self)

        Parameters:
            self: OpenSim::Set< MarkerWeight > *

        """
        return _opensim.SetMarkerWeights_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetMarkerWeights self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetMarkerWeights_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetMarkerWeights self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetMarkerWeights_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetMarkerWeights self) -> int

        Parameters:
            self: OpenSim::Set< MarkerWeight > const *

        """
        return _opensim.SetMarkerWeights_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetMarkerWeights self, MarkerWeight const * aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: MarkerWeight const *
            aStartIndex: int

        getIndex(SetMarkerWeights self, MarkerWeight const * aObject) -> int

        Parameters:
            aObject: MarkerWeight const *

        getIndex(SetMarkerWeights self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetMarkerWeights self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetMarkerWeights_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetMarkerWeights self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetMarkerWeights_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetMarkerWeights self, MarkerWeight * aObject) -> bool

        Parameters:
            aObject: MarkerWeight *

        """
        return _opensim.SetMarkerWeights_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetMarkerWeights self, MarkerWeight const & aObject) -> bool

        Parameters:
            aObject: MarkerWeight const &

        """
        return _opensim.SetMarkerWeights_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetMarkerWeights self, int aIndex, MarkerWeight * aObject) -> bool

        Parameters:
            aIndex: int
            aObject: MarkerWeight *

        """
        return _opensim.SetMarkerWeights_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetMarkerWeights self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetMarkerWeights self, MarkerWeight const * aObject) -> bool

        Parameters:
            aObject: MarkerWeight const *

        """
        return _opensim.SetMarkerWeights_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetMarkerWeights self)

        Parameters:
            self: OpenSim::Set< MarkerWeight > *

        """
        return _opensim.SetMarkerWeights_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetMarkerWeights self, int aIndex, MarkerWeight * aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: MarkerWeight *
            preserveGroups: bool

        set(SetMarkerWeights self, int aIndex, MarkerWeight * aObject) -> bool

        Parameters:
            aIndex: int
            aObject: MarkerWeight *

        """
        return _opensim.SetMarkerWeights_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetMarkerWeights self, int aIndex) -> MarkerWeight

        Parameters:
            aIndex: int

        get(SetMarkerWeights self, std::string const & aName) -> MarkerWeight &

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetMarkerWeights_get(self, *args)


    def contains(self, aName):
        """
        contains(SetMarkerWeights self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetMarkerWeights_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetMarkerWeights self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetMarkerWeights_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetMarkerWeights self) -> int

        Parameters:
            self: OpenSim::Set< MarkerWeight > const *

        """
        return _opensim.SetMarkerWeights_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetMarkerWeights self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetMarkerWeights_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetMarkerWeights self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetMarkerWeights_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetMarkerWeights self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetMarkerWeights_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetMarkerWeights self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetMarkerWeights_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetMarkerWeights self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetMarkerWeights_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetMarkerWeights self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetMarkerWeights self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetMarkerWeights_getGroup(self, *args)

SetMarkerWeights_swigregister = _opensim.SetMarkerWeights_swigregister
SetMarkerWeights_swigregister(SetMarkerWeights)

def SetMarkerWeights_safeDownCast(obj):
    """
    SetMarkerWeights_safeDownCast(OpenSimObject obj) -> SetMarkerWeights

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetMarkerWeights_safeDownCast(obj)

def SetMarkerWeights_getClassName():
    """SetMarkerWeights_getClassName() -> std::string const &"""
    return _opensim.SetMarkerWeights_getClassName()

class IKMarkerTask(IKTask):
    """Proxy of C++ OpenSim::IKMarkerTask class"""
    __swig_setmethods__ = {}
    for _s in [IKTask]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKMarkerTask, name, value)
    __swig_getmethods__ = {}
    for _s in [IKTask]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IKMarkerTask, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> IKMarkerTask

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.IKMarkerTask_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(IKMarkerTask self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.IKMarkerTask_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.IKMarkerTask_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(IKMarkerTask self) -> IKMarkerTask

        Parameters:
            self: OpenSim::IKMarkerTask const *

        """
        return _opensim.IKMarkerTask_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(IKMarkerTask self) -> std::string const &

        Parameters:
            self: OpenSim::IKMarkerTask const *

        """
        return _opensim.IKMarkerTask_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::IKMarkerTask self) -> IKMarkerTask
        __init__(OpenSim::IKMarkerTask self, IKMarkerTask aIKMarkerTask) -> IKMarkerTask

        Parameters:
            aIKMarkerTask: OpenSim::IKMarkerTask const &

        """
        this = _opensim.new_IKMarkerTask(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_IKMarkerTask
    __del__ = lambda self: None
IKMarkerTask_swigregister = _opensim.IKMarkerTask_swigregister
IKMarkerTask_swigregister(IKMarkerTask)

def IKMarkerTask_safeDownCast(obj):
    """
    IKMarkerTask_safeDownCast(OpenSimObject obj) -> IKMarkerTask

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.IKMarkerTask_safeDownCast(obj)

def IKMarkerTask_getClassName():
    """IKMarkerTask_getClassName() -> std::string const &"""
    return _opensim.IKMarkerTask_getClassName()

class IKCoordinateTask(IKTask):
    """Proxy of C++ OpenSim::IKCoordinateTask class"""
    __swig_setmethods__ = {}
    for _s in [IKTask]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKCoordinateTask, name, value)
    __swig_getmethods__ = {}
    for _s in [IKTask]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IKCoordinateTask, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> IKCoordinateTask

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.IKCoordinateTask_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(IKCoordinateTask self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.IKCoordinateTask_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.IKCoordinateTask_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(IKCoordinateTask self) -> IKCoordinateTask

        Parameters:
            self: OpenSim::IKCoordinateTask const *

        """
        return _opensim.IKCoordinateTask_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(IKCoordinateTask self) -> std::string const &

        Parameters:
            self: OpenSim::IKCoordinateTask const *

        """
        return _opensim.IKCoordinateTask_getConcreteClassName(self)

    DefaultValue = _opensim.IKCoordinateTask_DefaultValue
    ManualValue = _opensim.IKCoordinateTask_ManualValue
    FromFile = _opensim.IKCoordinateTask_FromFile

    def __init__(self, *args):
        """
        __init__(OpenSim::IKCoordinateTask self) -> IKCoordinateTask
        __init__(OpenSim::IKCoordinateTask self, IKCoordinateTask aIKCoordinateTask) -> IKCoordinateTask

        Parameters:
            aIKCoordinateTask: OpenSim::IKCoordinateTask const &

        """
        this = _opensim.new_IKCoordinateTask(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setValueType(self, type):
        """
        setValueType(IKCoordinateTask self, OpenSim::IKCoordinateTask::ValueType type)

        Parameters:
            type: enum OpenSim::IKCoordinateTask::ValueType

        """
        return _opensim.IKCoordinateTask_setValueType(self, type)


    def getValueType(self):
        """
        getValueType(IKCoordinateTask self) -> OpenSim::IKCoordinateTask::ValueType

        Parameters:
            self: OpenSim::IKCoordinateTask const *

        """
        return _opensim.IKCoordinateTask_getValueType(self)


    def getValue(self):
        """
        getValue(IKCoordinateTask self) -> double

        Parameters:
            self: OpenSim::IKCoordinateTask const *

        """
        return _opensim.IKCoordinateTask_getValue(self)


    def setValue(self, value):
        """
        setValue(IKCoordinateTask self, double value)

        Parameters:
            value: double

        """
        return _opensim.IKCoordinateTask_setValue(self, value)


    def ValueTypeToString(type):
        """
        ValueTypeToString(OpenSim::IKCoordinateTask::ValueType type) -> std::string

        Parameters:
            type: enum OpenSim::IKCoordinateTask::ValueType

        """
        return _opensim.IKCoordinateTask_ValueTypeToString(type)

    if _newclass:
        ValueTypeToString = staticmethod(ValueTypeToString)
    __swig_getmethods__["ValueTypeToString"] = lambda x: ValueTypeToString

    def StringToValueType(str):
        """
        StringToValueType(std::string const & str) -> OpenSim::IKCoordinateTask::ValueType

        Parameters:
            str: std::string const &

        """
        return _opensim.IKCoordinateTask_StringToValueType(str)

    if _newclass:
        StringToValueType = staticmethod(StringToValueType)
    __swig_getmethods__["StringToValueType"] = lambda x: StringToValueType
    __swig_destroy__ = _opensim.delete_IKCoordinateTask
    __del__ = lambda self: None
IKCoordinateTask_swigregister = _opensim.IKCoordinateTask_swigregister
IKCoordinateTask_swigregister(IKCoordinateTask)

def IKCoordinateTask_safeDownCast(obj):
    """
    IKCoordinateTask_safeDownCast(OpenSimObject obj) -> IKCoordinateTask

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.IKCoordinateTask_safeDownCast(obj)

def IKCoordinateTask_getClassName():
    """IKCoordinateTask_getClassName() -> std::string const &"""
    return _opensim.IKCoordinateTask_getClassName()

def IKCoordinateTask_ValueTypeToString(type):
    """
    IKCoordinateTask_ValueTypeToString(OpenSim::IKCoordinateTask::ValueType type) -> std::string

    Parameters:
        type: enum OpenSim::IKCoordinateTask::ValueType

    """
    return _opensim.IKCoordinateTask_ValueTypeToString(type)

def IKCoordinateTask_StringToValueType(str):
    """
    IKCoordinateTask_StringToValueType(std::string const & str) -> OpenSim::IKCoordinateTask::ValueType

    Parameters:
        str: std::string const &

    """
    return _opensim.IKCoordinateTask_StringToValueType(str)

class IKTaskSet(SetIKTasks):
    """Proxy of C++ OpenSim::IKTaskSet class"""
    __swig_setmethods__ = {}
    for _s in [SetIKTasks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKTaskSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetIKTasks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IKTaskSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> IKTaskSet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.IKTaskSet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(IKTaskSet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.IKTaskSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.IKTaskSet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(IKTaskSet self) -> IKTaskSet

        Parameters:
            self: OpenSim::IKTaskSet const *

        """
        return _opensim.IKTaskSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(IKTaskSet self) -> std::string const &

        Parameters:
            self: OpenSim::IKTaskSet const *

        """
        return _opensim.IKTaskSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::IKTaskSet self) -> IKTaskSet
        __init__(OpenSim::IKTaskSet self, IKTaskSet aIKTaskSet) -> IKTaskSet

        Parameters:
            aIKTaskSet: OpenSim::IKTaskSet const &

        __init__(OpenSim::IKTaskSet self, std::string const & aFileName) -> IKTaskSet

        Parameters:
            aFileName: std::string const &

        """
        this = _opensim.new_IKTaskSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def createMarkerWeightSet(self, aWeights):
        """
        createMarkerWeightSet(IKTaskSet self, SetMarkerWeights aWeights)

        Parameters:
            aWeights: OpenSim::Set< MarkerWeight > &

        """
        return _opensim.IKTaskSet_createMarkerWeightSet(self, aWeights)

    def adoptAndAppend(self, aIKTask):
        aIKTask._markAdopted()
        return super(IKTaskSet, self).adoptAndAppend(aIKTask)

    __swig_destroy__ = _opensim.delete_IKTaskSet
    __del__ = lambda self: None
IKTaskSet_swigregister = _opensim.IKTaskSet_swigregister
IKTaskSet_swigregister(IKTaskSet)

def IKTaskSet_safeDownCast(obj):
    """
    IKTaskSet_safeDownCast(OpenSimObject obj) -> IKTaskSet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.IKTaskSet_safeDownCast(obj)

def IKTaskSet_getClassName():
    """IKTaskSet_getClassName() -> std::string const &"""
    return _opensim.IKTaskSet_getClassName()

class MarkerPair(OpenSimObject):
    """Proxy of C++ OpenSim::MarkerPair class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarkerPair, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarkerPair, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MarkerPair

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.MarkerPair_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(MarkerPair self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.MarkerPair_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.MarkerPair_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(MarkerPair self) -> MarkerPair

        Parameters:
            self: OpenSim::MarkerPair const *

        """
        return _opensim.MarkerPair_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MarkerPair self) -> std::string const &

        Parameters:
            self: OpenSim::MarkerPair const *

        """
        return _opensim.MarkerPair_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::MarkerPair self) -> MarkerPair
        __init__(OpenSim::MarkerPair self, MarkerPair aMarkerPair) -> MarkerPair

        Parameters:
            aMarkerPair: OpenSim::MarkerPair const &

        __init__(OpenSim::MarkerPair self, std::string const & aName1, std::string const & aName2) -> MarkerPair

        Parameters:
            aName1: std::string const &
            aName2: std::string const &

        """
        this = _opensim.new_MarkerPair(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_MarkerPair
    __del__ = lambda self: None

    def copyData(self, aMarkerPair):
        """
        copyData(MarkerPair self, MarkerPair aMarkerPair)

        Parameters:
            aMarkerPair: OpenSim::MarkerPair const &

        """
        return _opensim.MarkerPair_copyData(self, aMarkerPair)


    def getMarkerNames(self, aName1, aName2):
        """
        getMarkerNames(MarkerPair self, std::string & aName1, std::string & aName2)

        Parameters:
            aName1: std::string &
            aName2: std::string &

        """
        return _opensim.MarkerPair_getMarkerNames(self, aName1, aName2)


    def getMarkerName(self, i):
        """
        getMarkerName(MarkerPair self, int i) -> std::string const &

        Parameters:
            i: int

        """
        return _opensim.MarkerPair_getMarkerName(self, i)


    def setMarkerName(self, i, aName):
        """
        setMarkerName(MarkerPair self, int i, std::string const & aName)

        Parameters:
            i: int
            aName: std::string const &

        """
        return _opensim.MarkerPair_setMarkerName(self, i, aName)

MarkerPair_swigregister = _opensim.MarkerPair_swigregister
MarkerPair_swigregister(MarkerPair)

def MarkerPair_safeDownCast(obj):
    """
    MarkerPair_safeDownCast(OpenSimObject obj) -> MarkerPair

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.MarkerPair_safeDownCast(obj)

def MarkerPair_getClassName():
    """MarkerPair_getClassName() -> std::string const &"""
    return _opensim.MarkerPair_getClassName()

class SetMarkerPairs(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::MarkerPair)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetMarkerPairs, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetMarkerPairs, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetMarkerPairs

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetMarkerPairs_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetMarkerPairs self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetMarkerPairs_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetMarkerPairs_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetMarkerPairs self) -> SetMarkerPairs

        Parameters:
            self: OpenSim::Set< OpenSim::MarkerPair > const *

        """
        return _opensim.SetMarkerPairs_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetMarkerPairs self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::MarkerPair > const *

        """
        return _opensim.SetMarkerPairs_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetMarkerPairs
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::MarkerPair)> self) -> SetMarkerPairs
        __init__(OpenSim::Set<(OpenSim::MarkerPair)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetMarkerPairs

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::MarkerPair)> self, std::string const & aFileName) -> SetMarkerPairs

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::MarkerPair)> self, SetMarkerPairs aSet) -> SetMarkerPairs

        Parameters:
            aSet: OpenSim::Set< OpenSim::MarkerPair > const &

        """
        this = _opensim.new_SetMarkerPairs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetMarkerPairs self)

        Parameters:
            self: OpenSim::Set< OpenSim::MarkerPair > *

        """
        return _opensim.SetMarkerPairs_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetMarkerPairs self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetMarkerPairs_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetMarkerPairs self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetMarkerPairs_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetMarkerPairs self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::MarkerPair > const *

        """
        return _opensim.SetMarkerPairs_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetMarkerPairs self, MarkerPair aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::MarkerPair const *
            aStartIndex: int

        getIndex(SetMarkerPairs self, MarkerPair aObject) -> int

        Parameters:
            aObject: OpenSim::MarkerPair const *

        getIndex(SetMarkerPairs self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetMarkerPairs self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetMarkerPairs_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetMarkerPairs self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetMarkerPairs_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetMarkerPairs self, MarkerPair aObject) -> bool

        Parameters:
            aObject: OpenSim::MarkerPair *

        """
        return _opensim.SetMarkerPairs_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetMarkerPairs self, MarkerPair aObject) -> bool

        Parameters:
            aObject: OpenSim::MarkerPair const &

        """
        return _opensim.SetMarkerPairs_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetMarkerPairs self, int aIndex, MarkerPair aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::MarkerPair *

        """
        return _opensim.SetMarkerPairs_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetMarkerPairs self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetMarkerPairs self, MarkerPair aObject) -> bool

        Parameters:
            aObject: OpenSim::MarkerPair const *

        """
        return _opensim.SetMarkerPairs_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetMarkerPairs self)

        Parameters:
            self: OpenSim::Set< OpenSim::MarkerPair > *

        """
        return _opensim.SetMarkerPairs_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetMarkerPairs self, int aIndex, MarkerPair aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::MarkerPair *
            preserveGroups: bool

        set(SetMarkerPairs self, int aIndex, MarkerPair aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::MarkerPair *

        """
        return _opensim.SetMarkerPairs_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetMarkerPairs self, int aIndex) -> MarkerPair

        Parameters:
            aIndex: int

        get(SetMarkerPairs self, std::string const & aName) -> MarkerPair

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetMarkerPairs_get(self, *args)


    def contains(self, aName):
        """
        contains(SetMarkerPairs self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetMarkerPairs_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetMarkerPairs self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetMarkerPairs_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetMarkerPairs self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::MarkerPair > const *

        """
        return _opensim.SetMarkerPairs_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetMarkerPairs self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetMarkerPairs_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetMarkerPairs self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetMarkerPairs_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetMarkerPairs self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetMarkerPairs_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetMarkerPairs self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetMarkerPairs_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetMarkerPairs self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetMarkerPairs_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetMarkerPairs self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetMarkerPairs self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetMarkerPairs_getGroup(self, *args)

SetMarkerPairs_swigregister = _opensim.SetMarkerPairs_swigregister
SetMarkerPairs_swigregister(SetMarkerPairs)

def SetMarkerPairs_safeDownCast(obj):
    """
    SetMarkerPairs_safeDownCast(OpenSimObject obj) -> SetMarkerPairs

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetMarkerPairs_safeDownCast(obj)

def SetMarkerPairs_getClassName():
    """SetMarkerPairs_getClassName() -> std::string const &"""
    return _opensim.SetMarkerPairs_getClassName()

class MarkerPairSet(SetMarkerPairs):
    """Proxy of C++ OpenSim::MarkerPairSet class"""
    __swig_setmethods__ = {}
    for _s in [SetMarkerPairs]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarkerPairSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetMarkerPairs]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarkerPairSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MarkerPairSet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.MarkerPairSet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(MarkerPairSet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.MarkerPairSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.MarkerPairSet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(MarkerPairSet self) -> MarkerPairSet

        Parameters:
            self: OpenSim::MarkerPairSet const *

        """
        return _opensim.MarkerPairSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MarkerPairSet self) -> std::string const &

        Parameters:
            self: OpenSim::MarkerPairSet const *

        """
        return _opensim.MarkerPairSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::MarkerPairSet self) -> MarkerPairSet
        __init__(OpenSim::MarkerPairSet self, MarkerPairSet aSimmMarkerPairSet) -> MarkerPairSet

        Parameters:
            aSimmMarkerPairSet: OpenSim::MarkerPairSet const &

        """
        this = _opensim.new_MarkerPairSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_MarkerPairSet
    __del__ = lambda self: None
    def adoptAndAppend(self, aMarkerPair):
        aMarkerPair._markAdopted()
        return super(MarkerPairSet, self).adoptAndAppend(aMarkerPair)

MarkerPairSet_swigregister = _opensim.MarkerPairSet_swigregister
MarkerPairSet_swigregister(MarkerPairSet)

def MarkerPairSet_safeDownCast(obj):
    """
    MarkerPairSet_safeDownCast(OpenSimObject obj) -> MarkerPairSet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.MarkerPairSet_safeDownCast(obj)

def MarkerPairSet_getClassName():
    """MarkerPairSet_getClassName() -> std::string const &"""
    return _opensim.MarkerPairSet_getClassName()

class Measurement(OpenSimObject):
    """Proxy of C++ OpenSim::Measurement class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Measurement, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Measurement, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Measurement

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Measurement_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Measurement self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Measurement_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Measurement_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Measurement self) -> Measurement

        Parameters:
            self: OpenSim::Measurement const *

        """
        return _opensim.Measurement_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Measurement self) -> std::string const &

        Parameters:
            self: OpenSim::Measurement const *

        """
        return _opensim.Measurement_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::Measurement self) -> Measurement
        __init__(OpenSim::Measurement self, Measurement aMeasurement) -> Measurement

        Parameters:
            aMeasurement: OpenSim::Measurement const &

        """
        this = _opensim.new_Measurement(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_Measurement
    __del__ = lambda self: None

    def copyData(self, aMeasurement):
        """
        copyData(Measurement self, Measurement aMeasurement)

        Parameters:
            aMeasurement: OpenSim::Measurement const &

        """
        return _opensim.Measurement_copyData(self, aMeasurement)


    def getBodyScaleSet(self):
        """
        getBodyScaleSet(Measurement self) -> BodyScaleSet

        Parameters:
            self: OpenSim::Measurement *

        """
        return _opensim.Measurement_getBodyScaleSet(self)


    def getMarkerPairSet(self):
        """
        getMarkerPairSet(Measurement self) -> MarkerPairSet

        Parameters:
            self: OpenSim::Measurement *

        """
        return _opensim.Measurement_getMarkerPairSet(self)


    def getNumMarkerPairs(self):
        """
        getNumMarkerPairs(Measurement self) -> int

        Parameters:
            self: OpenSim::Measurement const *

        """
        return _opensim.Measurement_getNumMarkerPairs(self)


    def getMarkerPair(self, aIndex):
        """
        getMarkerPair(Measurement self, int aIndex) -> MarkerPair

        Parameters:
            aIndex: int

        """
        return _opensim.Measurement_getMarkerPair(self, aIndex)


    def getApply(self):
        """
        getApply(Measurement self) -> bool

        Parameters:
            self: OpenSim::Measurement const *

        """
        return _opensim.Measurement_getApply(self)


    def setApply(self, aApply):
        """
        setApply(Measurement self, bool aApply)

        Parameters:
            aApply: bool

        """
        return _opensim.Measurement_setApply(self, aApply)


    def applyScaleFactor(self, aFactor, aScaleSet):
        """
        applyScaleFactor(Measurement self, double aFactor, ScaleSet aScaleSet)

        Parameters:
            aFactor: double
            aScaleSet: OpenSim::ScaleSet &

        """
        return _opensim.Measurement_applyScaleFactor(self, aFactor, aScaleSet)


    def registerTypes():
        """registerTypes()"""
        return _opensim.Measurement_registerTypes()

    if _newclass:
        registerTypes = staticmethod(registerTypes)
    __swig_getmethods__["registerTypes"] = lambda x: registerTypes
Measurement_swigregister = _opensim.Measurement_swigregister
Measurement_swigregister(Measurement)

def Measurement_safeDownCast(obj):
    """
    Measurement_safeDownCast(OpenSimObject obj) -> Measurement

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Measurement_safeDownCast(obj)

def Measurement_getClassName():
    """Measurement_getClassName() -> std::string const &"""
    return _opensim.Measurement_getClassName()

def Measurement_registerTypes():
    """Measurement_registerTypes()"""
    return _opensim.Measurement_registerTypes()

class SetMeasurements(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::Measurement)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetMeasurements, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetMeasurements, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetMeasurements

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetMeasurements_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetMeasurements self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetMeasurements_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetMeasurements_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetMeasurements self) -> SetMeasurements

        Parameters:
            self: OpenSim::Set< OpenSim::Measurement > const *

        """
        return _opensim.SetMeasurements_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetMeasurements self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::Measurement > const *

        """
        return _opensim.SetMeasurements_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetMeasurements
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Measurement)> self) -> SetMeasurements
        __init__(OpenSim::Set<(OpenSim::Measurement)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetMeasurements

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Measurement)> self, std::string const & aFileName) -> SetMeasurements

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Measurement)> self, SetMeasurements aSet) -> SetMeasurements

        Parameters:
            aSet: OpenSim::Set< OpenSim::Measurement > const &

        """
        this = _opensim.new_SetMeasurements(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetMeasurements self)

        Parameters:
            self: OpenSim::Set< OpenSim::Measurement > *

        """
        return _opensim.SetMeasurements_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetMeasurements self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetMeasurements_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetMeasurements self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetMeasurements_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetMeasurements self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Measurement > const *

        """
        return _opensim.SetMeasurements_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetMeasurements self, Measurement aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::Measurement const *
            aStartIndex: int

        getIndex(SetMeasurements self, Measurement aObject) -> int

        Parameters:
            aObject: OpenSim::Measurement const *

        getIndex(SetMeasurements self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetMeasurements self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetMeasurements_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetMeasurements self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetMeasurements_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetMeasurements self, Measurement aObject) -> bool

        Parameters:
            aObject: OpenSim::Measurement *

        """
        return _opensim.SetMeasurements_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetMeasurements self, Measurement aObject) -> bool

        Parameters:
            aObject: OpenSim::Measurement const &

        """
        return _opensim.SetMeasurements_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetMeasurements self, int aIndex, Measurement aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Measurement *

        """
        return _opensim.SetMeasurements_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetMeasurements self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetMeasurements self, Measurement aObject) -> bool

        Parameters:
            aObject: OpenSim::Measurement const *

        """
        return _opensim.SetMeasurements_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetMeasurements self)

        Parameters:
            self: OpenSim::Set< OpenSim::Measurement > *

        """
        return _opensim.SetMeasurements_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetMeasurements self, int aIndex, Measurement aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Measurement *
            preserveGroups: bool

        set(SetMeasurements self, int aIndex, Measurement aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::Measurement *

        """
        return _opensim.SetMeasurements_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetMeasurements self, int aIndex) -> Measurement

        Parameters:
            aIndex: int

        get(SetMeasurements self, std::string const & aName) -> Measurement

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetMeasurements_get(self, *args)


    def contains(self, aName):
        """
        contains(SetMeasurements self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetMeasurements_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetMeasurements self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetMeasurements_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetMeasurements self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::Measurement > const *

        """
        return _opensim.SetMeasurements_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetMeasurements self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetMeasurements_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetMeasurements self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetMeasurements_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetMeasurements self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetMeasurements_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetMeasurements self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetMeasurements_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetMeasurements self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetMeasurements_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetMeasurements self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetMeasurements self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetMeasurements_getGroup(self, *args)

SetMeasurements_swigregister = _opensim.SetMeasurements_swigregister
SetMeasurements_swigregister(SetMeasurements)

def SetMeasurements_safeDownCast(obj):
    """
    SetMeasurements_safeDownCast(OpenSimObject obj) -> SetMeasurements

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetMeasurements_safeDownCast(obj)

def SetMeasurements_getClassName():
    """SetMeasurements_getClassName() -> std::string const &"""
    return _opensim.SetMeasurements_getClassName()

class MeasurementSet(SetMeasurements):
    """Proxy of C++ OpenSim::MeasurementSet class"""
    __swig_setmethods__ = {}
    for _s in [SetMeasurements]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeasurementSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetMeasurements]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MeasurementSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MeasurementSet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.MeasurementSet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(MeasurementSet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.MeasurementSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.MeasurementSet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(MeasurementSet self) -> MeasurementSet

        Parameters:
            self: OpenSim::MeasurementSet const *

        """
        return _opensim.MeasurementSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MeasurementSet self) -> std::string const &

        Parameters:
            self: OpenSim::MeasurementSet const *

        """
        return _opensim.MeasurementSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::MeasurementSet self) -> MeasurementSet
        __init__(OpenSim::MeasurementSet self, MeasurementSet aSimmMeasurementSet) -> MeasurementSet

        Parameters:
            aSimmMeasurementSet: OpenSim::MeasurementSet const &

        """
        this = _opensim.new_MeasurementSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_MeasurementSet
    __del__ = lambda self: None
    def adoptAndAppend(self, aMeasurement):
        aMeasurement._markAdopted()
        return super(MeasurementSet, self).adoptAndAppend(aMeasurement)

MeasurementSet_swigregister = _opensim.MeasurementSet_swigregister
MeasurementSet_swigregister(MeasurementSet)

def MeasurementSet_safeDownCast(obj):
    """
    MeasurementSet_safeDownCast(OpenSimObject obj) -> MeasurementSet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.MeasurementSet_safeDownCast(obj)

def MeasurementSet_getClassName():
    """MeasurementSet_getClassName() -> std::string const &"""
    return _opensim.MeasurementSet_getClassName()

class GenericModelMaker(OpenSimObject):
    """Proxy of C++ OpenSim::GenericModelMaker class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericModelMaker, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GenericModelMaker, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> GenericModelMaker

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.GenericModelMaker_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(GenericModelMaker self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.GenericModelMaker_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.GenericModelMaker_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(GenericModelMaker self) -> GenericModelMaker

        Parameters:
            self: OpenSim::GenericModelMaker const *

        """
        return _opensim.GenericModelMaker_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(GenericModelMaker self) -> std::string const &

        Parameters:
            self: OpenSim::GenericModelMaker const *

        """
        return _opensim.GenericModelMaker_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::GenericModelMaker self) -> GenericModelMaker
        __init__(OpenSim::GenericModelMaker self, GenericModelMaker aGenericModelMaker) -> GenericModelMaker

        Parameters:
            aGenericModelMaker: OpenSim::GenericModelMaker const &

        """
        this = _opensim.new_GenericModelMaker(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_GenericModelMaker
    __del__ = lambda self: None

    def copyData(self, aGenericModelMaker):
        """
        copyData(GenericModelMaker self, GenericModelMaker aGenericModelMaker)

        Parameters:
            aGenericModelMaker: OpenSim::GenericModelMaker const &

        """
        return _opensim.GenericModelMaker_copyData(self, aGenericModelMaker)


    def processModel(self, *args):
        """
        processModel(GenericModelMaker self, std::string const & aPathToSubject) -> Model

        Parameters:
            aPathToSubject: std::string const &

        processModel(GenericModelMaker self) -> Model

        Parameters:
            self: OpenSim::GenericModelMaker *

        """
        return _opensim.GenericModelMaker_processModel(self, *args)


    def registerTypes():
        """registerTypes()"""
        return _opensim.GenericModelMaker_registerTypes()

    if _newclass:
        registerTypes = staticmethod(registerTypes)
    __swig_getmethods__["registerTypes"] = lambda x: registerTypes

    def getModelFileName(self):
        """
        getModelFileName(GenericModelMaker self) -> std::string const &

        Parameters:
            self: OpenSim::GenericModelMaker const *

        """
        return _opensim.GenericModelMaker_getModelFileName(self)


    def setModelFileName(self, aFileName):
        """
        setModelFileName(GenericModelMaker self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.GenericModelMaker_setModelFileName(self, aFileName)


    def getMarkerSetFileName(self):
        """
        getMarkerSetFileName(GenericModelMaker self) -> std::string const &

        Parameters:
            self: OpenSim::GenericModelMaker const *

        """
        return _opensim.GenericModelMaker_getMarkerSetFileName(self)


    def setMarkerSetFileName(self, aFileName):
        """
        setMarkerSetFileName(GenericModelMaker self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.GenericModelMaker_setMarkerSetFileName(self, aFileName)

GenericModelMaker_swigregister = _opensim.GenericModelMaker_swigregister
GenericModelMaker_swigregister(GenericModelMaker)

def GenericModelMaker_safeDownCast(obj):
    """
    GenericModelMaker_safeDownCast(OpenSimObject obj) -> GenericModelMaker

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.GenericModelMaker_safeDownCast(obj)

def GenericModelMaker_getClassName():
    """GenericModelMaker_getClassName() -> std::string const &"""
    return _opensim.GenericModelMaker_getClassName()

def GenericModelMaker_registerTypes():
    """GenericModelMaker_registerTypes()"""
    return _opensim.GenericModelMaker_registerTypes()

class ModelScaler(OpenSimObject):
    """Proxy of C++ OpenSim::ModelScaler class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelScaler, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelScaler, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelScaler

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ModelScaler_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ModelScaler self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ModelScaler_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ModelScaler_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ModelScaler self) -> ModelScaler

        Parameters:
            self: OpenSim::ModelScaler const *

        """
        return _opensim.ModelScaler_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelScaler self) -> std::string const &

        Parameters:
            self: OpenSim::ModelScaler const *

        """
        return _opensim.ModelScaler_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ModelScaler self) -> ModelScaler
        __init__(OpenSim::ModelScaler self, ModelScaler aModelScaler) -> ModelScaler

        Parameters:
            aModelScaler: OpenSim::ModelScaler const &

        """
        this = _opensim.new_ModelScaler(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_ModelScaler
    __del__ = lambda self: None

    def copyData(self, aModelScaler):
        """
        copyData(ModelScaler self, ModelScaler aModelScaler)

        Parameters:
            aModelScaler: OpenSim::ModelScaler const &

        """
        return _opensim.ModelScaler_copyData(self, aModelScaler)


    def processModel(self, *args):
        """
        processModel(ModelScaler self, State s, Model aModel, std::string const & aPathToSubject, double aFinalMass=-1.0) -> bool

        Parameters:
            s: SimTK::State &
            aModel: OpenSim::Model *
            aPathToSubject: std::string const &
            aFinalMass: double

        processModel(ModelScaler self, State s, Model aModel, std::string const & aPathToSubject) -> bool

        Parameters:
            s: SimTK::State &
            aModel: OpenSim::Model *
            aPathToSubject: std::string const &

        processModel(ModelScaler self, State s, Model aModel) -> bool

        Parameters:
            s: SimTK::State &
            aModel: OpenSim::Model *

        """
        return _opensim.ModelScaler_processModel(self, *args)


    def registerTypes():
        """registerTypes()"""
        return _opensim.ModelScaler_registerTypes()

    if _newclass:
        registerTypes = staticmethod(registerTypes)
    __swig_getmethods__["registerTypes"] = lambda x: registerTypes

    def addMeasurement(self, aMeasurement):
        """
        addMeasurement(ModelScaler self, Measurement aMeasurement)

        Parameters:
            aMeasurement: OpenSim::Measurement *

        """
        return _opensim.ModelScaler_addMeasurement(self, aMeasurement)


    def addScale(self, aScale):
        """
        addScale(ModelScaler self, Scale aScale)

        Parameters:
            aScale: OpenSim::Scale *

        """
        return _opensim.ModelScaler_addScale(self, aScale)


    def getApply(self):
        """
        getApply(ModelScaler self) -> bool

        Parameters:
            self: OpenSim::ModelScaler const *

        """
        return _opensim.ModelScaler_getApply(self)


    def setApply(self, aApply):
        """
        setApply(ModelScaler self, bool aApply)

        Parameters:
            aApply: bool

        """
        return _opensim.ModelScaler_setApply(self, aApply)


    def getMeasurementSet(self):
        """
        getMeasurementSet(ModelScaler self) -> MeasurementSet

        Parameters:
            self: OpenSim::ModelScaler *

        """
        return _opensim.ModelScaler_getMeasurementSet(self)


    def setMeasurementSet(self, measurementSet):
        """
        setMeasurementSet(ModelScaler self, MeasurementSet measurementSet)

        Parameters:
            measurementSet: OpenSim::MeasurementSet &

        """
        return _opensim.ModelScaler_setMeasurementSet(self, measurementSet)


    def getScaleSet(self):
        """
        getScaleSet(ModelScaler self) -> ScaleSet

        Parameters:
            self: OpenSim::ModelScaler *

        """
        return _opensim.ModelScaler_getScaleSet(self)


    def setScaleSetFile(self, aScaleSetFilename):
        """
        setScaleSetFile(ModelScaler self, std::string const & aScaleSetFilename)

        Parameters:
            aScaleSetFilename: std::string const &

        """
        return _opensim.ModelScaler_setScaleSetFile(self, aScaleSetFilename)


    def getTimeRange(self):
        """
        getTimeRange(ModelScaler self) -> ArrayDouble

        Parameters:
            self: OpenSim::ModelScaler const *

        """
        return _opensim.ModelScaler_getTimeRange(self)


    def setTimeRange(self, timeRange):
        """
        setTimeRange(ModelScaler self, ArrayDouble timeRange)

        Parameters:
            timeRange: OpenSim::Array< double >

        """
        return _opensim.ModelScaler_setTimeRange(self, timeRange)


    def getPreserveMassDist(self):
        """
        getPreserveMassDist(ModelScaler self) -> bool

        Parameters:
            self: OpenSim::ModelScaler const *

        """
        return _opensim.ModelScaler_getPreserveMassDist(self)


    def setPreserveMassDist(self, preserveMassDist):
        """
        setPreserveMassDist(ModelScaler self, bool preserveMassDist)

        Parameters:
            preserveMassDist: bool

        """
        return _opensim.ModelScaler_setPreserveMassDist(self, preserveMassDist)


    def getScalingOrder(self):
        """
        getScalingOrder(ModelScaler self) -> ArrayStr

        Parameters:
            self: OpenSim::ModelScaler *

        """
        return _opensim.ModelScaler_getScalingOrder(self)


    def setScalingOrder(self, scalingOrder):
        """
        setScalingOrder(ModelScaler self, ArrayStr scalingOrder)

        Parameters:
            scalingOrder: OpenSim::Array< std::string > &

        """
        return _opensim.ModelScaler_setScalingOrder(self, scalingOrder)


    def getMarkerFileName(self):
        """
        getMarkerFileName(ModelScaler self) -> std::string const &

        Parameters:
            self: OpenSim::ModelScaler const *

        """
        return _opensim.ModelScaler_getMarkerFileName(self)


    def setMarkerFileName(self, aMarkerFileName):
        """
        setMarkerFileName(ModelScaler self, std::string const & aMarkerFileName)

        Parameters:
            aMarkerFileName: std::string const &

        """
        return _opensim.ModelScaler_setMarkerFileName(self, aMarkerFileName)


    def getOutputModelFileName(self):
        """
        getOutputModelFileName(ModelScaler self) -> std::string const &

        Parameters:
            self: OpenSim::ModelScaler const *

        """
        return _opensim.ModelScaler_getOutputModelFileName(self)


    def setOutputModelFileName(self, aOutputModelFileName):
        """
        setOutputModelFileName(ModelScaler self, std::string const & aOutputModelFileName)

        Parameters:
            aOutputModelFileName: std::string const &

        """
        return _opensim.ModelScaler_setOutputModelFileName(self, aOutputModelFileName)


    def getOutputScaleFileName(self):
        """
        getOutputScaleFileName(ModelScaler self) -> std::string const &

        Parameters:
            self: OpenSim::ModelScaler const *

        """
        return _opensim.ModelScaler_getOutputScaleFileName(self)


    def setOutputScaleFileName(self, aOutputScaleFileName):
        """
        setOutputScaleFileName(ModelScaler self, std::string const & aOutputScaleFileName)

        Parameters:
            aOutputScaleFileName: std::string const &

        """
        return _opensim.ModelScaler_setOutputScaleFileName(self, aOutputScaleFileName)


    def setPrintResultFiles(self, aToWrite):
        """
        setPrintResultFiles(ModelScaler self, bool aToWrite)

        Parameters:
            aToWrite: bool

        """
        return _opensim.ModelScaler_setPrintResultFiles(self, aToWrite)


    def computeMeasurementScaleFactor(self, s, aModel, aMarkerData, aMeasurement):
        """
        computeMeasurementScaleFactor(ModelScaler self, State s, Model aModel, MarkerData aMarkerData, Measurement aMeasurement) -> double

        Parameters:
            s: SimTK::State const &
            aModel: OpenSim::Model const &
            aMarkerData: OpenSim::MarkerData const &
            aMeasurement: OpenSim::Measurement const &

        """
        return _opensim.ModelScaler_computeMeasurementScaleFactor(self, s, aModel, aMarkerData, aMeasurement)

ModelScaler_swigregister = _opensim.ModelScaler_swigregister
ModelScaler_swigregister(ModelScaler)

def ModelScaler_safeDownCast(obj):
    """
    ModelScaler_safeDownCast(OpenSimObject obj) -> ModelScaler

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ModelScaler_safeDownCast(obj)

def ModelScaler_getClassName():
    """ModelScaler_getClassName() -> std::string const &"""
    return _opensim.ModelScaler_getClassName()

def ModelScaler_registerTypes():
    """ModelScaler_registerTypes()"""
    return _opensim.ModelScaler_registerTypes()

class MarkerPlacer(OpenSimObject):
    """Proxy of C++ OpenSim::MarkerPlacer class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarkerPlacer, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarkerPlacer, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MarkerPlacer

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.MarkerPlacer_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(MarkerPlacer self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.MarkerPlacer_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.MarkerPlacer_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(MarkerPlacer self) -> MarkerPlacer

        Parameters:
            self: OpenSim::MarkerPlacer const *

        """
        return _opensim.MarkerPlacer_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MarkerPlacer self) -> std::string const &

        Parameters:
            self: OpenSim::MarkerPlacer const *

        """
        return _opensim.MarkerPlacer_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::MarkerPlacer self) -> MarkerPlacer
        __init__(OpenSim::MarkerPlacer self, MarkerPlacer aMarkerPlacementParams) -> MarkerPlacer

        Parameters:
            aMarkerPlacementParams: OpenSim::MarkerPlacer const &

        """
        this = _opensim.new_MarkerPlacer(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_MarkerPlacer
    __del__ = lambda self: None

    def copyData(self, aMarkerPlacementParams):
        """
        copyData(MarkerPlacer self, MarkerPlacer aMarkerPlacementParams)

        Parameters:
            aMarkerPlacementParams: OpenSim::MarkerPlacer const &

        """
        return _opensim.MarkerPlacer_copyData(self, aMarkerPlacementParams)


    def processModel(self, *args):
        """
        processModel(MarkerPlacer self, State s, Model aModel, std::string const & aPathToSubject) -> bool

        Parameters:
            s: SimTK::State &
            aModel: OpenSim::Model *
            aPathToSubject: std::string const &

        processModel(MarkerPlacer self, State s, Model aModel) -> bool

        Parameters:
            s: SimTK::State &
            aModel: OpenSim::Model *

        """
        return _opensim.MarkerPlacer_processModel(self, *args)


    def getApply(self):
        """
        getApply(MarkerPlacer self) -> bool

        Parameters:
            self: OpenSim::MarkerPlacer const *

        """
        return _opensim.MarkerPlacer_getApply(self)


    def setApply(self, aApply):
        """
        setApply(MarkerPlacer self, bool aApply)

        Parameters:
            aApply: bool

        """
        return _opensim.MarkerPlacer_setApply(self, aApply)


    def getStaticPoseFileName(self):
        """
        getStaticPoseFileName(MarkerPlacer self) -> std::string const &

        Parameters:
            self: OpenSim::MarkerPlacer const *

        """
        return _opensim.MarkerPlacer_getStaticPoseFileName(self)


    def setStaticPoseFileName(self, aFileName):
        """
        setStaticPoseFileName(MarkerPlacer self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.MarkerPlacer_setStaticPoseFileName(self, aFileName)


    def getTimeRange(self):
        """
        getTimeRange(MarkerPlacer self) -> ArrayDouble

        Parameters:
            self: OpenSim::MarkerPlacer const *

        """
        return _opensim.MarkerPlacer_getTimeRange(self)


    def setTimeRange(self, timeRange):
        """
        setTimeRange(MarkerPlacer self, ArrayDouble timeRange)

        Parameters:
            timeRange: OpenSim::Array< double > const &

        """
        return _opensim.MarkerPlacer_setTimeRange(self, timeRange)


    def getIKTaskSet(self):
        """
        getIKTaskSet(MarkerPlacer self) -> IKTaskSet

        Parameters:
            self: OpenSim::MarkerPlacer *

        """
        return _opensim.MarkerPlacer_getIKTaskSet(self)


    def getCoordinateFileName(self):
        """
        getCoordinateFileName(MarkerPlacer self) -> std::string const &

        Parameters:
            self: OpenSim::MarkerPlacer const *

        """
        return _opensim.MarkerPlacer_getCoordinateFileName(self)


    def setCoordinateFileName(self, aCoordinateFileName):
        """
        setCoordinateFileName(MarkerPlacer self, std::string const & aCoordinateFileName)

        Parameters:
            aCoordinateFileName: std::string const &

        """
        return _opensim.MarkerPlacer_setCoordinateFileName(self, aCoordinateFileName)


    def getMaxMarkerMovement(self):
        """
        getMaxMarkerMovement(MarkerPlacer self) -> double

        Parameters:
            self: OpenSim::MarkerPlacer const *

        """
        return _opensim.MarkerPlacer_getMaxMarkerMovement(self)


    def setMaxMarkerMovement(self, aMaxMarkerMovement):
        """
        setMaxMarkerMovement(MarkerPlacer self, double aMaxMarkerMovement)

        Parameters:
            aMaxMarkerMovement: double

        """
        return _opensim.MarkerPlacer_setMaxMarkerMovement(self, aMaxMarkerMovement)


    def getOutputModelFileName(self):
        """
        getOutputModelFileName(MarkerPlacer self) -> std::string const &

        Parameters:
            self: OpenSim::MarkerPlacer const *

        """
        return _opensim.MarkerPlacer_getOutputModelFileName(self)


    def setOutputModelFileName(self, aOutputModelFileName):
        """
        setOutputModelFileName(MarkerPlacer self, std::string const & aOutputModelFileName)

        Parameters:
            aOutputModelFileName: std::string const &

        """
        return _opensim.MarkerPlacer_setOutputModelFileName(self, aOutputModelFileName)


    def getOutputMarkerFileName(self):
        """
        getOutputMarkerFileName(MarkerPlacer self) -> std::string const &

        Parameters:
            self: OpenSim::MarkerPlacer const *

        """
        return _opensim.MarkerPlacer_getOutputMarkerFileName(self)


    def setOutputMarkerFileName(self, outputMarkerFileName):
        """
        setOutputMarkerFileName(MarkerPlacer self, std::string const & outputMarkerFileName)

        Parameters:
            outputMarkerFileName: std::string const &

        """
        return _opensim.MarkerPlacer_setOutputMarkerFileName(self, outputMarkerFileName)


    def getOutputMotionFileName(self):
        """
        getOutputMotionFileName(MarkerPlacer self) -> std::string const &

        Parameters:
            self: OpenSim::MarkerPlacer const *

        """
        return _opensim.MarkerPlacer_getOutputMotionFileName(self)


    def setOutputMotionFileName(self, outputMotionFileName):
        """
        setOutputMotionFileName(MarkerPlacer self, std::string const & outputMotionFileName)

        Parameters:
            outputMotionFileName: std::string const &

        """
        return _opensim.MarkerPlacer_setOutputMotionFileName(self, outputMotionFileName)


    def setPrintResultFiles(self, aToWrite):
        """
        setPrintResultFiles(MarkerPlacer self, bool aToWrite)

        Parameters:
            aToWrite: bool

        """
        return _opensim.MarkerPlacer_setPrintResultFiles(self, aToWrite)


    def getMoveModelMarkers(self):
        """
        getMoveModelMarkers(MarkerPlacer self) -> bool

        Parameters:
            self: OpenSim::MarkerPlacer *

        """
        return _opensim.MarkerPlacer_getMoveModelMarkers(self)


    def setMoveModelMarkers(self, aMove):
        """
        setMoveModelMarkers(MarkerPlacer self, bool aMove)

        Parameters:
            aMove: bool

        """
        return _opensim.MarkerPlacer_setMoveModelMarkers(self, aMove)


    def getOutputStorage(self):
        """
        getOutputStorage(MarkerPlacer self) -> Storage

        Parameters:
            self: OpenSim::MarkerPlacer *

        """
        return _opensim.MarkerPlacer_getOutputStorage(self)

MarkerPlacer_swigregister = _opensim.MarkerPlacer_swigregister
MarkerPlacer_swigregister(MarkerPlacer)

def MarkerPlacer_safeDownCast(obj):
    """
    MarkerPlacer_safeDownCast(OpenSimObject obj) -> MarkerPlacer

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.MarkerPlacer_safeDownCast(obj)

def MarkerPlacer_getClassName():
    """MarkerPlacer_getClassName() -> std::string const &"""
    return _opensim.MarkerPlacer_getClassName()

class ScaleTool(OpenSimObject):
    """Proxy of C++ OpenSim::ScaleTool class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScaleTool, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScaleTool, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ScaleTool

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ScaleTool_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ScaleTool self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ScaleTool_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ScaleTool_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ScaleTool self) -> ScaleTool

        Parameters:
            self: OpenSim::ScaleTool const *

        """
        return _opensim.ScaleTool_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ScaleTool self) -> std::string const &

        Parameters:
            self: OpenSim::ScaleTool const *

        """
        return _opensim.ScaleTool_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ScaleTool self) -> ScaleTool
        __init__(OpenSim::ScaleTool self, std::string const & aFileName) -> ScaleTool

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::ScaleTool self, ScaleTool aSubject) -> ScaleTool

        Parameters:
            aSubject: OpenSim::ScaleTool const &

        """
        this = _opensim.new_ScaleTool(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_ScaleTool
    __del__ = lambda self: None

    def copyData(self, aSubject):
        """
        copyData(ScaleTool self, ScaleTool aSubject)

        Parameters:
            aSubject: OpenSim::ScaleTool const &

        """
        return _opensim.ScaleTool_copyData(self, aSubject)


    def createModel(self):
        """
        createModel(ScaleTool self) -> Model

        Parameters:
            self: OpenSim::ScaleTool *

        """
        return _opensim.ScaleTool_createModel(self)


    def getGenericModelMaker(self):
        """
        getGenericModelMaker(ScaleTool self) -> GenericModelMaker

        Parameters:
            self: OpenSim::ScaleTool *

        """
        return _opensim.ScaleTool_getGenericModelMaker(self)


    def getModelScaler(self):
        """
        getModelScaler(ScaleTool self) -> ModelScaler

        Parameters:
            self: OpenSim::ScaleTool *

        """
        return _opensim.ScaleTool_getModelScaler(self)


    def getMarkerPlacer(self):
        """
        getMarkerPlacer(ScaleTool self) -> MarkerPlacer

        Parameters:
            self: OpenSim::ScaleTool *

        """
        return _opensim.ScaleTool_getMarkerPlacer(self)


    def isDefaultGenericModelMaker(self):
        """
        isDefaultGenericModelMaker(ScaleTool self) -> bool

        Parameters:
            self: OpenSim::ScaleTool *

        """
        return _opensim.ScaleTool_isDefaultGenericModelMaker(self)


    def isDefaultModelScaler(self):
        """
        isDefaultModelScaler(ScaleTool self) -> bool

        Parameters:
            self: OpenSim::ScaleTool *

        """
        return _opensim.ScaleTool_isDefaultModelScaler(self)


    def isDefaultMarkerPlacer(self):
        """
        isDefaultMarkerPlacer(ScaleTool self) -> bool

        Parameters:
            self: OpenSim::ScaleTool *

        """
        return _opensim.ScaleTool_isDefaultMarkerPlacer(self)


    def registerTypes():
        """registerTypes()"""
        return _opensim.ScaleTool_registerTypes()

    if _newclass:
        registerTypes = staticmethod(registerTypes)
    __swig_getmethods__["registerTypes"] = lambda x: registerTypes

    def getSubjectMass(self):
        """
        getSubjectMass(ScaleTool self) -> double

        Parameters:
            self: OpenSim::ScaleTool *

        """
        return _opensim.ScaleTool_getSubjectMass(self)


    def getSubjectAge(self):
        """
        getSubjectAge(ScaleTool self) -> double

        Parameters:
            self: OpenSim::ScaleTool *

        """
        return _opensim.ScaleTool_getSubjectAge(self)


    def getSubjectHeight(self):
        """
        getSubjectHeight(ScaleTool self) -> double

        Parameters:
            self: OpenSim::ScaleTool *

        """
        return _opensim.ScaleTool_getSubjectHeight(self)


    def setSubjectMass(self, mass):
        """
        setSubjectMass(ScaleTool self, double mass)

        Parameters:
            mass: double

        """
        return _opensim.ScaleTool_setSubjectMass(self, mass)


    def setSubjectAge(self, age):
        """
        setSubjectAge(ScaleTool self, double age)

        Parameters:
            age: double

        """
        return _opensim.ScaleTool_setSubjectAge(self, age)


    def setSubjectHeight(self, height):
        """
        setSubjectHeight(ScaleTool self, double height)

        Parameters:
            height: double

        """
        return _opensim.ScaleTool_setSubjectHeight(self, height)


    def getPathToSubject(self):
        """
        getPathToSubject(ScaleTool self) -> std::string const &

        Parameters:
            self: OpenSim::ScaleTool *

        """
        return _opensim.ScaleTool_getPathToSubject(self)


    def setPathToSubject(self, aPath):
        """
        setPathToSubject(ScaleTool self, std::string const & aPath)

        Parameters:
            aPath: std::string const &

        """
        return _opensim.ScaleTool_setPathToSubject(self, aPath)


    def setPrintResultFiles(self, aToWrite):
        """
        setPrintResultFiles(ScaleTool self, bool aToWrite)

        Parameters:
            aToWrite: bool

        """
        return _opensim.ScaleTool_setPrintResultFiles(self, aToWrite)

ScaleTool_swigregister = _opensim.ScaleTool_swigregister
ScaleTool_swigregister(ScaleTool)

def ScaleTool_safeDownCast(obj):
    """
    ScaleTool_safeDownCast(OpenSimObject obj) -> ScaleTool

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ScaleTool_safeDownCast(obj)

def ScaleTool_getClassName():
    """ScaleTool_getClassName() -> std::string const &"""
    return _opensim.ScaleTool_getClassName()

def ScaleTool_registerTypes():
    """ScaleTool_registerTypes()"""
    return _opensim.ScaleTool_registerTypes()

class AssemblySolver(Solver):
    """Proxy of C++ OpenSim::AssemblySolver class"""
    __swig_setmethods__ = {}
    for _s in [Solver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AssemblySolver, name, value)
    __swig_getmethods__ = {}
    for _s in [Solver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AssemblySolver, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> AssemblySolver

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.AssemblySolver_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(AssemblySolver self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.AssemblySolver_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.AssemblySolver_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(AssemblySolver self) -> AssemblySolver

        Parameters:
            self: OpenSim::AssemblySolver const *

        """
        return _opensim.AssemblySolver_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(AssemblySolver self) -> std::string const &

        Parameters:
            self: OpenSim::AssemblySolver const *

        """
        return _opensim.AssemblySolver_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::AssemblySolver self, Model model, ArrayCoordinateReference coordinateReferences, double constraintWeight) -> AssemblySolver

        Parameters:
            model: OpenSim::Model const &
            coordinateReferences: SimTK::Array_< OpenSim::CoordinateReference,unsigned int > &
            constraintWeight: double

        __init__(OpenSim::AssemblySolver self, Model model, ArrayCoordinateReference coordinateReferences) -> AssemblySolver

        Parameters:
            model: OpenSim::Model const &
            coordinateReferences: SimTK::Array_< OpenSim::CoordinateReference,unsigned int > &

        """
        this = _opensim.new_AssemblySolver(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_AssemblySolver
    __del__ = lambda self: None

    def setAccuracy(self, accuracy):
        """
        setAccuracy(AssemblySolver self, double accuracy)

        Parameters:
            accuracy: double

        """
        return _opensim.AssemblySolver_setAccuracy(self, accuracy)


    def setConstraintWeight(self, weight):
        """
        setConstraintWeight(AssemblySolver self, double weight)

        Parameters:
            weight: double

        """
        return _opensim.AssemblySolver_setConstraintWeight(self, weight)


    def getCoordinateReferences(self):
        """
        getCoordinateReferences(AssemblySolver self) -> ArrayCoordinateReference

        Parameters:
            self: OpenSim::AssemblySolver const *

        """
        return _opensim.AssemblySolver_getCoordinateReferences(self)


    def updateCoordinateReference(self, coordName, value, weight=1.0):
        """
        updateCoordinateReference(AssemblySolver self, std::string const & coordName, double value, double weight=1.0)

        Parameters:
            coordName: std::string const &
            value: double
            weight: double

        updateCoordinateReference(AssemblySolver self, std::string const & coordName, double value)

        Parameters:
            coordName: std::string const &
            value: double

        """
        return _opensim.AssemblySolver_updateCoordinateReference(self, coordName, value, weight)


    def assemble(self, s):
        """
        assemble(AssemblySolver self, State s)

        Parameters:
            s: SimTK::State &

        """
        return _opensim.AssemblySolver_assemble(self, s)


    def track(self, s):
        """
        track(AssemblySolver self, State s)

        Parameters:
            s: SimTK::State &

        """
        return _opensim.AssemblySolver_track(self, s)

AssemblySolver_swigregister = _opensim.AssemblySolver_swigregister
AssemblySolver_swigregister(AssemblySolver)

def AssemblySolver_safeDownCast(obj):
    """
    AssemblySolver_safeDownCast(OpenSimObject obj) -> AssemblySolver

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.AssemblySolver_safeDownCast(obj)

def AssemblySolver_getClassName():
    """AssemblySolver_getClassName() -> std::string const &"""
    return _opensim.AssemblySolver_getClassName()

class ReferenceVec3(OpenSimObject):
    """Proxy of C++ OpenSim::Reference_<(SimTK::Vec3)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceVec3, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceVec3, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ReferenceVec3

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ReferenceVec3_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ReferenceVec3 self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ReferenceVec3_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ReferenceVec3_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ReferenceVec3 self) -> ReferenceVec3

        Parameters:
            self: OpenSim::Reference_< SimTK::Vec3 > const *

        """
        return _opensim.ReferenceVec3_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ReferenceVec3 self) -> std::string const &

        Parameters:
            self: OpenSim::Reference_< SimTK::Vec3 > const *

        """
        return _opensim.ReferenceVec3_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_ReferenceVec3
    __del__ = lambda self: None

    def getNumRefs(self):
        """
        getNumRefs(ReferenceVec3 self) -> int

        Parameters:
            self: OpenSim::Reference_< SimTK::Vec3 > const *

        """
        return _opensim.ReferenceVec3_getNumRefs(self)


    def getValidTimeRange(self):
        """
        getValidTimeRange(ReferenceVec3 self) -> Vec2

        Parameters:
            self: OpenSim::Reference_< SimTK::Vec3 > const *

        """
        return _opensim.ReferenceVec3_getValidTimeRange(self)


    def getNames(self):
        """
        getNames(ReferenceVec3 self) -> SimTK::Array_< std::string,unsigned int > const &

        Parameters:
            self: OpenSim::Reference_< SimTK::Vec3 > const *

        """
        return _opensim.ReferenceVec3_getNames(self)


    def getValues(self, *args):
        """
        getValues(ReferenceVec3 self, State s, SimTKArrayVec3 values)

        Parameters:
            s: SimTK::State const &
            values: SimTK::Array_< SimTK::Vec< 3,double,1 >,unsigned int > &

        getValues(ReferenceVec3 self, State s) -> SimTKArrayVec3

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.ReferenceVec3_getValues(self, *args)


    def getWeights(self, *args):
        """
        getWeights(ReferenceVec3 self, State s, SimTKArrayDouble weights)

        Parameters:
            s: SimTK::State const &
            weights: SimTK::Array_< double,unsigned int > &

        getWeights(ReferenceVec3 self, State s) -> SimTKArrayDouble

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.ReferenceVec3_getWeights(self, *args)

ReferenceVec3_swigregister = _opensim.ReferenceVec3_swigregister
ReferenceVec3_swigregister(ReferenceVec3)

def ReferenceVec3_safeDownCast(obj):
    """
    ReferenceVec3_safeDownCast(OpenSimObject obj) -> ReferenceVec3

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ReferenceVec3_safeDownCast(obj)

def ReferenceVec3_getClassName():
    """ReferenceVec3_getClassName() -> std::string const &"""
    return _opensim.ReferenceVec3_getClassName()

class ReferenceDouble(OpenSimObject):
    """Proxy of C++ OpenSim::Reference_<(double)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceDouble, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ReferenceDouble

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ReferenceDouble_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ReferenceDouble self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ReferenceDouble_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ReferenceDouble_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ReferenceDouble self) -> ReferenceDouble

        Parameters:
            self: OpenSim::Reference_< double > const *

        """
        return _opensim.ReferenceDouble_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ReferenceDouble self) -> std::string const &

        Parameters:
            self: OpenSim::Reference_< double > const *

        """
        return _opensim.ReferenceDouble_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_ReferenceDouble
    __del__ = lambda self: None

    def getNumRefs(self):
        """
        getNumRefs(ReferenceDouble self) -> int

        Parameters:
            self: OpenSim::Reference_< double > const *

        """
        return _opensim.ReferenceDouble_getNumRefs(self)


    def getValidTimeRange(self):
        """
        getValidTimeRange(ReferenceDouble self) -> Vec2

        Parameters:
            self: OpenSim::Reference_< double > const *

        """
        return _opensim.ReferenceDouble_getValidTimeRange(self)


    def getNames(self):
        """
        getNames(ReferenceDouble self) -> SimTK::Array_< std::string,unsigned int > const &

        Parameters:
            self: OpenSim::Reference_< double > const *

        """
        return _opensim.ReferenceDouble_getNames(self)


    def getValues(self, *args):
        """
        getValues(ReferenceDouble self, State s, SimTKArrayDouble values)

        Parameters:
            s: SimTK::State const &
            values: SimTK::Array_< double,unsigned int > &

        getValues(ReferenceDouble self, State s) -> SimTKArrayDouble

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.ReferenceDouble_getValues(self, *args)


    def getWeights(self, *args):
        """
        getWeights(ReferenceDouble self, State s, SimTKArrayDouble weights)

        Parameters:
            s: SimTK::State const &
            weights: SimTK::Array_< double,unsigned int > &

        getWeights(ReferenceDouble self, State s) -> SimTKArrayDouble

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.ReferenceDouble_getWeights(self, *args)

ReferenceDouble_swigregister = _opensim.ReferenceDouble_swigregister
ReferenceDouble_swigregister(ReferenceDouble)

def ReferenceDouble_safeDownCast(obj):
    """
    ReferenceDouble_safeDownCast(OpenSimObject obj) -> ReferenceDouble

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ReferenceDouble_safeDownCast(obj)

def ReferenceDouble_getClassName():
    """ReferenceDouble_getClassName() -> std::string const &"""
    return _opensim.ReferenceDouble_getClassName()

class ArrayCoordinateReference(_object):
    """Proxy of C++ SimTK::Array_<(OpenSim::CoordinateReference)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayCoordinateReference, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayCoordinateReference, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SimTK::Array_<(OpenSim::CoordinateReference)> self) -> ArrayCoordinateReference
        __init__(SimTK::Array_<(OpenSim::CoordinateReference)> self, SimTK::Array_< OpenSim::CoordinateReference >::size_type n) -> ArrayCoordinateReference

        Parameters:
            n: SimTK::Array_< OpenSim::CoordinateReference >::size_type

        __init__(SimTK::Array_<(OpenSim::CoordinateReference)> self, SimTK::Array_< OpenSim::CoordinateReference >::size_type n, CoordinateReference initVal) -> ArrayCoordinateReference

        Parameters:
            n: SimTK::Array_< OpenSim::CoordinateReference >::size_type
            initVal: OpenSim::CoordinateReference const &

        __init__(SimTK::Array_<(OpenSim::CoordinateReference)> self, ArrayCoordinateReference src) -> ArrayCoordinateReference

        Parameters:
            src: SimTK::Array_< OpenSim::CoordinateReference > const &

        __init__(SimTK::Array_<(OpenSim::CoordinateReference)> self, CoordinateReference first, CoordinateReference last1, DontCopy arg4) -> ArrayCoordinateReference

        Parameters:
            first: OpenSim::CoordinateReference *
            last1: OpenSim::CoordinateReference const *
            arg4: SimTK::DontCopy const &

        """
        this = _opensim.new_ArrayCoordinateReference(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_ArrayCoordinateReference
    __del__ = lambda self: None

    def deallocate(self):
        """
        deallocate(ArrayCoordinateReference self) -> ArrayCoordinateReference

        Parameters:
            self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _opensim.ArrayCoordinateReference_deallocate(self)


    def assign(self, n, fillValue):
        """
        assign(ArrayCoordinateReference self, SimTK::Array_< OpenSim::CoordinateReference >::size_type n, CoordinateReference fillValue)

        Parameters:
            n: SimTK::Array_< OpenSim::CoordinateReference >::size_type
            fillValue: OpenSim::CoordinateReference const &

        """
        return _opensim.ArrayCoordinateReference_assign(self, n, fillValue)


    def fill(self, fillValue):
        """
        fill(ArrayCoordinateReference self, CoordinateReference fillValue)

        Parameters:
            fillValue: OpenSim::CoordinateReference const &

        """
        return _opensim.ArrayCoordinateReference_fill(self, fillValue)


    def swap(self, other):
        """
        swap(ArrayCoordinateReference self, ArrayCoordinateReference other)

        Parameters:
            other: SimTK::Array_< OpenSim::CoordinateReference > &

        """
        return _opensim.ArrayCoordinateReference_swap(self, other)


    def adoptData(self, *args):
        """
        adoptData(ArrayCoordinateReference self, CoordinateReference newData, SimTK::Array_< OpenSim::CoordinateReference >::size_type dataSize, SimTK::Array_< OpenSim::CoordinateReference >::size_type dataCapacity) -> ArrayCoordinateReference

        Parameters:
            newData: OpenSim::CoordinateReference *
            dataSize: SimTK::Array_< OpenSim::CoordinateReference >::size_type
            dataCapacity: SimTK::Array_< OpenSim::CoordinateReference >::size_type

        adoptData(ArrayCoordinateReference self, CoordinateReference newData, SimTK::Array_< OpenSim::CoordinateReference >::size_type dataSize) -> ArrayCoordinateReference

        Parameters:
            newData: OpenSim::CoordinateReference *
            dataSize: SimTK::Array_< OpenSim::CoordinateReference >::size_type

        """
        return _opensim.ArrayCoordinateReference_adoptData(self, *args)


    def shareData(self, *args):
        """
        shareData(ArrayCoordinateReference self, CoordinateReference newData, SimTK::Array_< OpenSim::CoordinateReference >::size_type dataSize) -> ArrayCoordinateReference

        Parameters:
            newData: OpenSim::CoordinateReference *
            dataSize: SimTK::Array_< OpenSim::CoordinateReference >::size_type

        shareData(ArrayCoordinateReference self, CoordinateReference first, CoordinateReference last1) -> ArrayCoordinateReference

        Parameters:
            first: OpenSim::CoordinateReference *
            last1: OpenSim::CoordinateReference const *

        """
        return _opensim.ArrayCoordinateReference_shareData(self, *args)


    def size(self):
        """
        size(ArrayCoordinateReference self) -> SimTK::Array_< OpenSim::CoordinateReference >::size_type

        Parameters:
            self: SimTK::Array_< OpenSim::CoordinateReference > const *

        """
        return _opensim.ArrayCoordinateReference_size(self)


    def max_size(self):
        """
        max_size(ArrayCoordinateReference self) -> SimTK::Array_< OpenSim::CoordinateReference >::size_type

        Parameters:
            self: SimTK::Array_< OpenSim::CoordinateReference > const *

        """
        return _opensim.ArrayCoordinateReference_max_size(self)


    def empty(self):
        """
        empty(ArrayCoordinateReference self) -> bool

        Parameters:
            self: SimTK::Array_< OpenSim::CoordinateReference > const *

        """
        return _opensim.ArrayCoordinateReference_empty(self)


    def capacity(self):
        """
        capacity(ArrayCoordinateReference self) -> SimTK::Array_< OpenSim::CoordinateReference >::size_type

        Parameters:
            self: SimTK::Array_< OpenSim::CoordinateReference > const *

        """
        return _opensim.ArrayCoordinateReference_capacity(self)


    def resize(self, *args):
        """
        resize(ArrayCoordinateReference self, SimTK::Array_< OpenSim::CoordinateReference >::size_type n)

        Parameters:
            n: SimTK::Array_< OpenSim::CoordinateReference >::size_type

        resize(ArrayCoordinateReference self, SimTK::Array_< OpenSim::CoordinateReference >::size_type n, CoordinateReference initVal)

        Parameters:
            n: SimTK::Array_< OpenSim::CoordinateReference >::size_type
            initVal: OpenSim::CoordinateReference const &

        """
        return _opensim.ArrayCoordinateReference_resize(self, *args)


    def reserve(self, n):
        """
        reserve(ArrayCoordinateReference self, SimTK::Array_< OpenSim::CoordinateReference >::size_type n)

        Parameters:
            n: SimTK::Array_< OpenSim::CoordinateReference >::size_type

        """
        return _opensim.ArrayCoordinateReference_reserve(self, n)


    def shrink_to_fit(self):
        """
        shrink_to_fit(ArrayCoordinateReference self)

        Parameters:
            self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _opensim.ArrayCoordinateReference_shrink_to_fit(self)


    def allocated(self):
        """
        allocated(ArrayCoordinateReference self) -> SimTK::Array_< OpenSim::CoordinateReference >::size_type

        Parameters:
            self: SimTK::Array_< OpenSim::CoordinateReference > const *

        """
        return _opensim.ArrayCoordinateReference_allocated(self)


    def isOwner(self):
        """
        isOwner(ArrayCoordinateReference self) -> bool

        Parameters:
            self: SimTK::Array_< OpenSim::CoordinateReference > const *

        """
        return _opensim.ArrayCoordinateReference_isOwner(self)


    def cbegin(self):
        """
        cbegin(ArrayCoordinateReference self) -> CoordinateReference

        Parameters:
            self: SimTK::Array_< OpenSim::CoordinateReference > const *

        """
        return _opensim.ArrayCoordinateReference_cbegin(self)


    def begin(self, *args):
        """
        begin(ArrayCoordinateReference self) -> CoordinateReference
        begin(ArrayCoordinateReference self) -> CoordinateReference

        Parameters:
            self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _opensim.ArrayCoordinateReference_begin(self, *args)


    def cend(self):
        """
        cend(ArrayCoordinateReference self) -> CoordinateReference

        Parameters:
            self: SimTK::Array_< OpenSim::CoordinateReference > const *

        """
        return _opensim.ArrayCoordinateReference_cend(self)


    def end(self, *args):
        """
        end(ArrayCoordinateReference self) -> CoordinateReference
        end(ArrayCoordinateReference self) -> CoordinateReference

        Parameters:
            self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _opensim.ArrayCoordinateReference_end(self, *args)


    def crbegin(self):
        """
        crbegin(ArrayCoordinateReference self) -> SimTK::Array_< OpenSim::CoordinateReference >::const_reverse_iterator

        Parameters:
            self: SimTK::Array_< OpenSim::CoordinateReference > const *

        """
        return _opensim.ArrayCoordinateReference_crbegin(self)


    def rbegin(self, *args):
        """
        rbegin(ArrayCoordinateReference self) -> SimTK::Array_< OpenSim::CoordinateReference >::const_reverse_iterator
        rbegin(ArrayCoordinateReference self) -> SimTK::Array_< OpenSim::CoordinateReference >::reverse_iterator

        Parameters:
            self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _opensim.ArrayCoordinateReference_rbegin(self, *args)


    def crend(self):
        """
        crend(ArrayCoordinateReference self) -> SimTK::Array_< OpenSim::CoordinateReference >::const_reverse_iterator

        Parameters:
            self: SimTK::Array_< OpenSim::CoordinateReference > const *

        """
        return _opensim.ArrayCoordinateReference_crend(self)


    def rend(self, *args):
        """
        rend(ArrayCoordinateReference self) -> SimTK::Array_< OpenSim::CoordinateReference >::const_reverse_iterator
        rend(ArrayCoordinateReference self) -> SimTK::Array_< OpenSim::CoordinateReference >::reverse_iterator

        Parameters:
            self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _opensim.ArrayCoordinateReference_rend(self, *args)


    def cdata(self):
        """
        cdata(ArrayCoordinateReference self) -> CoordinateReference

        Parameters:
            self: SimTK::Array_< OpenSim::CoordinateReference > const *

        """
        return _opensim.ArrayCoordinateReference_cdata(self)


    def data(self, *args):
        """
        data(ArrayCoordinateReference self) -> CoordinateReference
        data(ArrayCoordinateReference self) -> CoordinateReference

        Parameters:
            self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _opensim.ArrayCoordinateReference_data(self, *args)


    def at(self, *args):
        """
        at(ArrayCoordinateReference self, SimTK::Array_< OpenSim::CoordinateReference >::index_type i) -> CoordinateReference

        Parameters:
            i: SimTK::Array_< OpenSim::CoordinateReference >::index_type

        at(ArrayCoordinateReference self, SimTK::Array_< OpenSim::CoordinateReference >::index_type i) -> CoordinateReference

        Parameters:
            i: SimTK::Array_< OpenSim::CoordinateReference >::index_type

        """
        return _opensim.ArrayCoordinateReference_at(self, *args)


    def getElt(self, i):
        """
        getElt(ArrayCoordinateReference self, SimTK::Array_< OpenSim::CoordinateReference >::index_type i) -> CoordinateReference

        Parameters:
            i: SimTK::Array_< OpenSim::CoordinateReference >::index_type

        """
        return _opensim.ArrayCoordinateReference_getElt(self, i)


    def updElt(self, i):
        """
        updElt(ArrayCoordinateReference self, SimTK::Array_< OpenSim::CoordinateReference >::index_type i) -> CoordinateReference

        Parameters:
            i: SimTK::Array_< OpenSim::CoordinateReference >::index_type

        """
        return _opensim.ArrayCoordinateReference_updElt(self, i)


    def front(self, *args):
        """
        front(ArrayCoordinateReference self) -> CoordinateReference
        front(ArrayCoordinateReference self) -> CoordinateReference

        Parameters:
            self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _opensim.ArrayCoordinateReference_front(self, *args)


    def back(self, *args):
        """
        back(ArrayCoordinateReference self) -> CoordinateReference
        back(ArrayCoordinateReference self) -> CoordinateReference

        Parameters:
            self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _opensim.ArrayCoordinateReference_back(self, *args)


    def push_back(self, *args):
        """
        push_back(ArrayCoordinateReference self, CoordinateReference value)

        Parameters:
            value: OpenSim::CoordinateReference const &

        push_back(ArrayCoordinateReference self)

        Parameters:
            self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _opensim.ArrayCoordinateReference_push_back(self, *args)


    def raw_push_back(self):
        """
        raw_push_back(ArrayCoordinateReference self) -> CoordinateReference

        Parameters:
            self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _opensim.ArrayCoordinateReference_raw_push_back(self)


    def pop_back(self):
        """
        pop_back(ArrayCoordinateReference self)

        Parameters:
            self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _opensim.ArrayCoordinateReference_pop_back(self)


    def erase(self, *args):
        """
        erase(ArrayCoordinateReference self, CoordinateReference first, CoordinateReference last1) -> CoordinateReference

        Parameters:
            first: OpenSim::CoordinateReference *
            last1: OpenSim::CoordinateReference const *

        erase(ArrayCoordinateReference self, CoordinateReference p) -> CoordinateReference

        Parameters:
            p: OpenSim::CoordinateReference *

        """
        return _opensim.ArrayCoordinateReference_erase(self, *args)


    def eraseFast(self, p):
        """
        eraseFast(ArrayCoordinateReference self, CoordinateReference p) -> CoordinateReference

        Parameters:
            p: OpenSim::CoordinateReference *

        """
        return _opensim.ArrayCoordinateReference_eraseFast(self, p)


    def clear(self):
        """
        clear(ArrayCoordinateReference self)

        Parameters:
            self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _opensim.ArrayCoordinateReference_clear(self)


    def insert(self, *args):
        """
        insert(ArrayCoordinateReference self, CoordinateReference p, SimTK::Array_< OpenSim::CoordinateReference >::size_type n, CoordinateReference value) -> CoordinateReference

        Parameters:
            p: OpenSim::CoordinateReference *
            n: SimTK::Array_< OpenSim::CoordinateReference >::size_type
            value: OpenSim::CoordinateReference const &

        insert(ArrayCoordinateReference self, CoordinateReference p, CoordinateReference value) -> CoordinateReference

        Parameters:
            p: OpenSim::CoordinateReference *
            value: OpenSim::CoordinateReference const &

        """
        return _opensim.ArrayCoordinateReference_insert(self, *args)

ArrayCoordinateReference_swigregister = _opensim.ArrayCoordinateReference_swigregister
ArrayCoordinateReference_swigregister(ArrayCoordinateReference)

class SimTKArrayDouble(_object):
    """Proxy of C++ SimTK::Array_<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimTKArrayDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimTKArrayDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SimTK::Array_<(double)> self) -> SimTKArrayDouble
        __init__(SimTK::Array_<(double)> self, SimTK::Array_< double >::size_type n) -> SimTKArrayDouble

        Parameters:
            n: SimTK::Array_< double >::size_type

        __init__(SimTK::Array_<(double)> self, SimTK::Array_< double >::size_type n, double const & initVal) -> SimTKArrayDouble

        Parameters:
            n: SimTK::Array_< double >::size_type
            initVal: double const &

        __init__(SimTK::Array_<(double)> self, SimTKArrayDouble src) -> SimTKArrayDouble

        Parameters:
            src: SimTK::Array_< double > const &

        __init__(SimTK::Array_<(double)> self, double * first, double const * last1, DontCopy arg4) -> SimTKArrayDouble

        Parameters:
            first: double *
            last1: double const *
            arg4: SimTK::DontCopy const &

        """
        this = _opensim.new_SimTKArrayDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_SimTKArrayDouble
    __del__ = lambda self: None

    def deallocate(self):
        """
        deallocate(SimTKArrayDouble self) -> SimTKArrayDouble

        Parameters:
            self: SimTK::Array_< double > *

        """
        return _opensim.SimTKArrayDouble_deallocate(self)


    def assign(self, n, fillValue):
        """
        assign(SimTKArrayDouble self, SimTK::Array_< double >::size_type n, double const & fillValue)

        Parameters:
            n: SimTK::Array_< double >::size_type
            fillValue: double const &

        """
        return _opensim.SimTKArrayDouble_assign(self, n, fillValue)


    def fill(self, fillValue):
        """
        fill(SimTKArrayDouble self, double const & fillValue)

        Parameters:
            fillValue: double const &

        """
        return _opensim.SimTKArrayDouble_fill(self, fillValue)


    def swap(self, other):
        """
        swap(SimTKArrayDouble self, SimTKArrayDouble other)

        Parameters:
            other: SimTK::Array_< double > &

        """
        return _opensim.SimTKArrayDouble_swap(self, other)


    def adoptData(self, *args):
        """
        adoptData(SimTKArrayDouble self, double * newData, SimTK::Array_< double >::size_type dataSize, SimTK::Array_< double >::size_type dataCapacity) -> SimTKArrayDouble

        Parameters:
            newData: double *
            dataSize: SimTK::Array_< double >::size_type
            dataCapacity: SimTK::Array_< double >::size_type

        adoptData(SimTKArrayDouble self, double * newData, SimTK::Array_< double >::size_type dataSize) -> SimTKArrayDouble

        Parameters:
            newData: double *
            dataSize: SimTK::Array_< double >::size_type

        """
        return _opensim.SimTKArrayDouble_adoptData(self, *args)


    def shareData(self, *args):
        """
        shareData(SimTKArrayDouble self, double * newData, SimTK::Array_< double >::size_type dataSize) -> SimTKArrayDouble

        Parameters:
            newData: double *
            dataSize: SimTK::Array_< double >::size_type

        shareData(SimTKArrayDouble self, double * first, double const * last1) -> SimTKArrayDouble

        Parameters:
            first: double *
            last1: double const *

        """
        return _opensim.SimTKArrayDouble_shareData(self, *args)


    def size(self):
        """
        size(SimTKArrayDouble self) -> SimTK::Array_< double >::size_type

        Parameters:
            self: SimTK::Array_< double > const *

        """
        return _opensim.SimTKArrayDouble_size(self)


    def max_size(self):
        """
        max_size(SimTKArrayDouble self) -> SimTK::Array_< double >::size_type

        Parameters:
            self: SimTK::Array_< double > const *

        """
        return _opensim.SimTKArrayDouble_max_size(self)


    def empty(self):
        """
        empty(SimTKArrayDouble self) -> bool

        Parameters:
            self: SimTK::Array_< double > const *

        """
        return _opensim.SimTKArrayDouble_empty(self)


    def capacity(self):
        """
        capacity(SimTKArrayDouble self) -> SimTK::Array_< double >::size_type

        Parameters:
            self: SimTK::Array_< double > const *

        """
        return _opensim.SimTKArrayDouble_capacity(self)


    def resize(self, *args):
        """
        resize(SimTKArrayDouble self, SimTK::Array_< double >::size_type n)

        Parameters:
            n: SimTK::Array_< double >::size_type

        resize(SimTKArrayDouble self, SimTK::Array_< double >::size_type n, double const & initVal)

        Parameters:
            n: SimTK::Array_< double >::size_type
            initVal: double const &

        """
        return _opensim.SimTKArrayDouble_resize(self, *args)


    def reserve(self, n):
        """
        reserve(SimTKArrayDouble self, SimTK::Array_< double >::size_type n)

        Parameters:
            n: SimTK::Array_< double >::size_type

        """
        return _opensim.SimTKArrayDouble_reserve(self, n)


    def shrink_to_fit(self):
        """
        shrink_to_fit(SimTKArrayDouble self)

        Parameters:
            self: SimTK::Array_< double > *

        """
        return _opensim.SimTKArrayDouble_shrink_to_fit(self)


    def allocated(self):
        """
        allocated(SimTKArrayDouble self) -> SimTK::Array_< double >::size_type

        Parameters:
            self: SimTK::Array_< double > const *

        """
        return _opensim.SimTKArrayDouble_allocated(self)


    def isOwner(self):
        """
        isOwner(SimTKArrayDouble self) -> bool

        Parameters:
            self: SimTK::Array_< double > const *

        """
        return _opensim.SimTKArrayDouble_isOwner(self)


    def cbegin(self):
        """
        cbegin(SimTKArrayDouble self) -> double const *

        Parameters:
            self: SimTK::Array_< double > const *

        """
        return _opensim.SimTKArrayDouble_cbegin(self)


    def begin(self, *args):
        """
        begin(SimTKArrayDouble self) -> double const
        begin(SimTKArrayDouble self) -> double *

        Parameters:
            self: SimTK::Array_< double > *

        """
        return _opensim.SimTKArrayDouble_begin(self, *args)


    def cend(self):
        """
        cend(SimTKArrayDouble self) -> double const *

        Parameters:
            self: SimTK::Array_< double > const *

        """
        return _opensim.SimTKArrayDouble_cend(self)


    def end(self, *args):
        """
        end(SimTKArrayDouble self) -> double const
        end(SimTKArrayDouble self) -> double *

        Parameters:
            self: SimTK::Array_< double > *

        """
        return _opensim.SimTKArrayDouble_end(self, *args)


    def crbegin(self):
        """
        crbegin(SimTKArrayDouble self) -> SimTK::Array_< double >::const_reverse_iterator

        Parameters:
            self: SimTK::Array_< double > const *

        """
        return _opensim.SimTKArrayDouble_crbegin(self)


    def rbegin(self, *args):
        """
        rbegin(SimTKArrayDouble self) -> SimTK::Array_< double >::const_reverse_iterator
        rbegin(SimTKArrayDouble self) -> SimTK::Array_< double >::reverse_iterator

        Parameters:
            self: SimTK::Array_< double > *

        """
        return _opensim.SimTKArrayDouble_rbegin(self, *args)


    def crend(self):
        """
        crend(SimTKArrayDouble self) -> SimTK::Array_< double >::const_reverse_iterator

        Parameters:
            self: SimTK::Array_< double > const *

        """
        return _opensim.SimTKArrayDouble_crend(self)


    def rend(self, *args):
        """
        rend(SimTKArrayDouble self) -> SimTK::Array_< double >::const_reverse_iterator
        rend(SimTKArrayDouble self) -> SimTK::Array_< double >::reverse_iterator

        Parameters:
            self: SimTK::Array_< double > *

        """
        return _opensim.SimTKArrayDouble_rend(self, *args)


    def cdata(self):
        """
        cdata(SimTKArrayDouble self) -> double const *

        Parameters:
            self: SimTK::Array_< double > const *

        """
        return _opensim.SimTKArrayDouble_cdata(self)


    def data(self, *args):
        """
        data(SimTKArrayDouble self) -> double const
        data(SimTKArrayDouble self) -> double *

        Parameters:
            self: SimTK::Array_< double > *

        """
        return _opensim.SimTKArrayDouble_data(self, *args)


    def at(self, *args):
        """
        at(SimTKArrayDouble self, SimTK::Array_< double >::index_type i) -> double const

        Parameters:
            i: SimTK::Array_< double >::index_type

        at(SimTKArrayDouble self, SimTK::Array_< double >::index_type i) -> double &

        Parameters:
            i: SimTK::Array_< double >::index_type

        """
        return _opensim.SimTKArrayDouble_at(self, *args)


    def getElt(self, i):
        """
        getElt(SimTKArrayDouble self, SimTK::Array_< double >::index_type i) -> double const &

        Parameters:
            i: SimTK::Array_< double >::index_type

        """
        return _opensim.SimTKArrayDouble_getElt(self, i)


    def updElt(self, i):
        """
        updElt(SimTKArrayDouble self, SimTK::Array_< double >::index_type i) -> double &

        Parameters:
            i: SimTK::Array_< double >::index_type

        """
        return _opensim.SimTKArrayDouble_updElt(self, i)


    def front(self, *args):
        """
        front(SimTKArrayDouble self) -> double const
        front(SimTKArrayDouble self) -> double &

        Parameters:
            self: SimTK::Array_< double > *

        """
        return _opensim.SimTKArrayDouble_front(self, *args)


    def back(self, *args):
        """
        back(SimTKArrayDouble self) -> double const
        back(SimTKArrayDouble self) -> double &

        Parameters:
            self: SimTK::Array_< double > *

        """
        return _opensim.SimTKArrayDouble_back(self, *args)


    def push_back(self, *args):
        """
        push_back(SimTKArrayDouble self, double const & value)

        Parameters:
            value: double const &

        push_back(SimTKArrayDouble self)

        Parameters:
            self: SimTK::Array_< double > *

        """
        return _opensim.SimTKArrayDouble_push_back(self, *args)


    def raw_push_back(self):
        """
        raw_push_back(SimTKArrayDouble self) -> double *

        Parameters:
            self: SimTK::Array_< double > *

        """
        return _opensim.SimTKArrayDouble_raw_push_back(self)


    def pop_back(self):
        """
        pop_back(SimTKArrayDouble self)

        Parameters:
            self: SimTK::Array_< double > *

        """
        return _opensim.SimTKArrayDouble_pop_back(self)


    def erase(self, *args):
        """
        erase(SimTKArrayDouble self, double * first, double const * last1) -> double

        Parameters:
            first: double *
            last1: double const *

        erase(SimTKArrayDouble self, double * p) -> double *

        Parameters:
            p: double *

        """
        return _opensim.SimTKArrayDouble_erase(self, *args)


    def eraseFast(self, p):
        """
        eraseFast(SimTKArrayDouble self, double * p) -> double *

        Parameters:
            p: double *

        """
        return _opensim.SimTKArrayDouble_eraseFast(self, p)


    def clear(self):
        """
        clear(SimTKArrayDouble self)

        Parameters:
            self: SimTK::Array_< double > *

        """
        return _opensim.SimTKArrayDouble_clear(self)


    def insert(self, *args):
        """
        insert(SimTKArrayDouble self, double * p, SimTK::Array_< double >::size_type n, double const & value) -> double

        Parameters:
            p: double *
            n: SimTK::Array_< double >::size_type
            value: double const &

        insert(SimTKArrayDouble self, double * p, double const & value) -> double *

        Parameters:
            p: double *
            value: double const &

        """
        return _opensim.SimTKArrayDouble_insert(self, *args)

SimTKArrayDouble_swigregister = _opensim.SimTKArrayDouble_swigregister
SimTKArrayDouble_swigregister(SimTKArrayDouble)

class SimTKArrayVec3(_object):
    """Proxy of C++ SimTK::Array_<(SimTK::Vec3)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimTKArrayVec3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimTKArrayVec3, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SimTK::Array_<(SimTK::Vec3)> self) -> SimTKArrayVec3
        __init__(SimTK::Array_<(SimTK::Vec3)> self, SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type n) -> SimTKArrayVec3

        Parameters:
            n: SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type

        __init__(SimTK::Array_<(SimTK::Vec3)> self, SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type n, Vec3 initVal) -> SimTKArrayVec3

        Parameters:
            n: SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type
            initVal: SimTK::Vec< 3,double,1 > const &

        __init__(SimTK::Array_<(SimTK::Vec3)> self, SimTKArrayVec3 src) -> SimTKArrayVec3

        Parameters:
            src: SimTK::Array_< SimTK::Vec3 > const &

        __init__(SimTK::Array_<(SimTK::Vec3)> self, Vec3 first, Vec3 last1, DontCopy arg4) -> SimTKArrayVec3

        Parameters:
            first: SimTK::Vec< 3,double,1 > *
            last1: SimTK::Vec< 3,double,1 > const *
            arg4: SimTK::DontCopy const &

        """
        this = _opensim.new_SimTKArrayVec3(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_SimTKArrayVec3
    __del__ = lambda self: None

    def deallocate(self):
        """
        deallocate(SimTKArrayVec3 self) -> SimTKArrayVec3

        Parameters:
            self: SimTK::Array_< SimTK::Vec3 > *

        """
        return _opensim.SimTKArrayVec3_deallocate(self)


    def assign(self, n, fillValue):
        """
        assign(SimTKArrayVec3 self, SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type n, Vec3 fillValue)

        Parameters:
            n: SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type
            fillValue: SimTK::Vec< 3,double,1 > const &

        """
        return _opensim.SimTKArrayVec3_assign(self, n, fillValue)


    def fill(self, fillValue):
        """
        fill(SimTKArrayVec3 self, Vec3 fillValue)

        Parameters:
            fillValue: SimTK::Vec< 3,double,1 > const &

        """
        return _opensim.SimTKArrayVec3_fill(self, fillValue)


    def swap(self, other):
        """
        swap(SimTKArrayVec3 self, SimTKArrayVec3 other)

        Parameters:
            other: SimTK::Array_< SimTK::Vec3 > &

        """
        return _opensim.SimTKArrayVec3_swap(self, other)


    def adoptData(self, *args):
        """
        adoptData(SimTKArrayVec3 self, Vec3 newData, SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type dataSize, SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type dataCapacity) -> SimTKArrayVec3

        Parameters:
            newData: SimTK::Vec< 3,double,1 > *
            dataSize: SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type
            dataCapacity: SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type

        adoptData(SimTKArrayVec3 self, Vec3 newData, SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type dataSize) -> SimTKArrayVec3

        Parameters:
            newData: SimTK::Vec< 3,double,1 > *
            dataSize: SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type

        """
        return _opensim.SimTKArrayVec3_adoptData(self, *args)


    def shareData(self, *args):
        """
        shareData(SimTKArrayVec3 self, Vec3 newData, SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type dataSize) -> SimTKArrayVec3

        Parameters:
            newData: SimTK::Vec< 3,double,1 > *
            dataSize: SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type

        shareData(SimTKArrayVec3 self, Vec3 first, Vec3 last1) -> SimTKArrayVec3

        Parameters:
            first: SimTK::Vec< 3,double,1 > *
            last1: SimTK::Vec< 3,double,1 > const *

        """
        return _opensim.SimTKArrayVec3_shareData(self, *args)


    def size(self):
        """
        size(SimTKArrayVec3 self) -> SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type

        Parameters:
            self: SimTK::Array_< SimTK::Vec3 > const *

        """
        return _opensim.SimTKArrayVec3_size(self)


    def max_size(self):
        """
        max_size(SimTKArrayVec3 self) -> SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type

        Parameters:
            self: SimTK::Array_< SimTK::Vec3 > const *

        """
        return _opensim.SimTKArrayVec3_max_size(self)


    def empty(self):
        """
        empty(SimTKArrayVec3 self) -> bool

        Parameters:
            self: SimTK::Array_< SimTK::Vec3 > const *

        """
        return _opensim.SimTKArrayVec3_empty(self)


    def capacity(self):
        """
        capacity(SimTKArrayVec3 self) -> SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type

        Parameters:
            self: SimTK::Array_< SimTK::Vec3 > const *

        """
        return _opensim.SimTKArrayVec3_capacity(self)


    def resize(self, *args):
        """
        resize(SimTKArrayVec3 self, SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type n)

        Parameters:
            n: SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type

        resize(SimTKArrayVec3 self, SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type n, Vec3 initVal)

        Parameters:
            n: SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type
            initVal: SimTK::Vec< 3,double,1 > const &

        """
        return _opensim.SimTKArrayVec3_resize(self, *args)


    def reserve(self, n):
        """
        reserve(SimTKArrayVec3 self, SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type n)

        Parameters:
            n: SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type

        """
        return _opensim.SimTKArrayVec3_reserve(self, n)


    def shrink_to_fit(self):
        """
        shrink_to_fit(SimTKArrayVec3 self)

        Parameters:
            self: SimTK::Array_< SimTK::Vec3 > *

        """
        return _opensim.SimTKArrayVec3_shrink_to_fit(self)


    def allocated(self):
        """
        allocated(SimTKArrayVec3 self) -> SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type

        Parameters:
            self: SimTK::Array_< SimTK::Vec3 > const *

        """
        return _opensim.SimTKArrayVec3_allocated(self)


    def isOwner(self):
        """
        isOwner(SimTKArrayVec3 self) -> bool

        Parameters:
            self: SimTK::Array_< SimTK::Vec3 > const *

        """
        return _opensim.SimTKArrayVec3_isOwner(self)


    def cbegin(self):
        """
        cbegin(SimTKArrayVec3 self) -> Vec3

        Parameters:
            self: SimTK::Array_< SimTK::Vec3 > const *

        """
        return _opensim.SimTKArrayVec3_cbegin(self)


    def begin(self, *args):
        """
        begin(SimTKArrayVec3 self) -> Vec3
        begin(SimTKArrayVec3 self) -> Vec3

        Parameters:
            self: SimTK::Array_< SimTK::Vec3 > *

        """
        return _opensim.SimTKArrayVec3_begin(self, *args)


    def cend(self):
        """
        cend(SimTKArrayVec3 self) -> Vec3

        Parameters:
            self: SimTK::Array_< SimTK::Vec3 > const *

        """
        return _opensim.SimTKArrayVec3_cend(self)


    def end(self, *args):
        """
        end(SimTKArrayVec3 self) -> Vec3
        end(SimTKArrayVec3 self) -> Vec3

        Parameters:
            self: SimTK::Array_< SimTK::Vec3 > *

        """
        return _opensim.SimTKArrayVec3_end(self, *args)


    def crbegin(self):
        """
        crbegin(SimTKArrayVec3 self) -> SimTK::Array_< SimTK::Vec< 3,double,1 > >::const_reverse_iterator

        Parameters:
            self: SimTK::Array_< SimTK::Vec3 > const *

        """
        return _opensim.SimTKArrayVec3_crbegin(self)


    def rbegin(self, *args):
        """
        rbegin(SimTKArrayVec3 self) -> SimTK::Array_< SimTK::Vec< 3,double,1 > >::const_reverse_iterator
        rbegin(SimTKArrayVec3 self) -> SimTK::Array_< SimTK::Vec< 3,double,1 > >::reverse_iterator

        Parameters:
            self: SimTK::Array_< SimTK::Vec3 > *

        """
        return _opensim.SimTKArrayVec3_rbegin(self, *args)


    def crend(self):
        """
        crend(SimTKArrayVec3 self) -> SimTK::Array_< SimTK::Vec< 3,double,1 > >::const_reverse_iterator

        Parameters:
            self: SimTK::Array_< SimTK::Vec3 > const *

        """
        return _opensim.SimTKArrayVec3_crend(self)


    def rend(self, *args):
        """
        rend(SimTKArrayVec3 self) -> SimTK::Array_< SimTK::Vec< 3,double,1 > >::const_reverse_iterator
        rend(SimTKArrayVec3 self) -> SimTK::Array_< SimTK::Vec< 3,double,1 > >::reverse_iterator

        Parameters:
            self: SimTK::Array_< SimTK::Vec3 > *

        """
        return _opensim.SimTKArrayVec3_rend(self, *args)


    def cdata(self):
        """
        cdata(SimTKArrayVec3 self) -> Vec3

        Parameters:
            self: SimTK::Array_< SimTK::Vec3 > const *

        """
        return _opensim.SimTKArrayVec3_cdata(self)


    def data(self, *args):
        """
        data(SimTKArrayVec3 self) -> Vec3
        data(SimTKArrayVec3 self) -> Vec3

        Parameters:
            self: SimTK::Array_< SimTK::Vec3 > *

        """
        return _opensim.SimTKArrayVec3_data(self, *args)


    def at(self, *args):
        """
        at(SimTKArrayVec3 self, SimTK::Array_< SimTK::Vec< 3,double,1 > >::index_type i) -> Vec3

        Parameters:
            i: SimTK::Array_< SimTK::Vec< 3,double,1 > >::index_type

        at(SimTKArrayVec3 self, SimTK::Array_< SimTK::Vec< 3,double,1 > >::index_type i) -> Vec3

        Parameters:
            i: SimTK::Array_< SimTK::Vec< 3,double,1 > >::index_type

        """
        return _opensim.SimTKArrayVec3_at(self, *args)


    def getElt(self, i):
        """
        getElt(SimTKArrayVec3 self, SimTK::Array_< SimTK::Vec< 3,double,1 > >::index_type i) -> Vec3

        Parameters:
            i: SimTK::Array_< SimTK::Vec< 3,double,1 > >::index_type

        """
        return _opensim.SimTKArrayVec3_getElt(self, i)


    def updElt(self, i):
        """
        updElt(SimTKArrayVec3 self, SimTK::Array_< SimTK::Vec< 3,double,1 > >::index_type i) -> Vec3

        Parameters:
            i: SimTK::Array_< SimTK::Vec< 3,double,1 > >::index_type

        """
        return _opensim.SimTKArrayVec3_updElt(self, i)


    def front(self, *args):
        """
        front(SimTKArrayVec3 self) -> Vec3
        front(SimTKArrayVec3 self) -> Vec3

        Parameters:
            self: SimTK::Array_< SimTK::Vec3 > *

        """
        return _opensim.SimTKArrayVec3_front(self, *args)


    def back(self, *args):
        """
        back(SimTKArrayVec3 self) -> Vec3
        back(SimTKArrayVec3 self) -> Vec3

        Parameters:
            self: SimTK::Array_< SimTK::Vec3 > *

        """
        return _opensim.SimTKArrayVec3_back(self, *args)


    def push_back(self, *args):
        """
        push_back(SimTKArrayVec3 self, Vec3 value)

        Parameters:
            value: SimTK::Vec< 3,double,1 > const &

        push_back(SimTKArrayVec3 self)

        Parameters:
            self: SimTK::Array_< SimTK::Vec3 > *

        """
        return _opensim.SimTKArrayVec3_push_back(self, *args)


    def raw_push_back(self):
        """
        raw_push_back(SimTKArrayVec3 self) -> Vec3

        Parameters:
            self: SimTK::Array_< SimTK::Vec3 > *

        """
        return _opensim.SimTKArrayVec3_raw_push_back(self)


    def pop_back(self):
        """
        pop_back(SimTKArrayVec3 self)

        Parameters:
            self: SimTK::Array_< SimTK::Vec3 > *

        """
        return _opensim.SimTKArrayVec3_pop_back(self)


    def erase(self, *args):
        """
        erase(SimTKArrayVec3 self, Vec3 first, Vec3 last1) -> Vec3

        Parameters:
            first: SimTK::Vec< 3,double,1 > *
            last1: SimTK::Vec< 3,double,1 > const *

        erase(SimTKArrayVec3 self, Vec3 p) -> Vec3

        Parameters:
            p: SimTK::Vec< 3,double,1 > *

        """
        return _opensim.SimTKArrayVec3_erase(self, *args)


    def eraseFast(self, p):
        """
        eraseFast(SimTKArrayVec3 self, Vec3 p) -> Vec3

        Parameters:
            p: SimTK::Vec< 3,double,1 > *

        """
        return _opensim.SimTKArrayVec3_eraseFast(self, p)


    def clear(self):
        """
        clear(SimTKArrayVec3 self)

        Parameters:
            self: SimTK::Array_< SimTK::Vec3 > *

        """
        return _opensim.SimTKArrayVec3_clear(self)


    def insert(self, *args):
        """
        insert(SimTKArrayVec3 self, Vec3 p, SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type n, Vec3 value) -> Vec3

        Parameters:
            p: SimTK::Vec< 3,double,1 > *
            n: SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type
            value: SimTK::Vec< 3,double,1 > const &

        insert(SimTKArrayVec3 self, Vec3 p, Vec3 value) -> Vec3

        Parameters:
            p: SimTK::Vec< 3,double,1 > *
            value: SimTK::Vec< 3,double,1 > const &

        """
        return _opensim.SimTKArrayVec3_insert(self, *args)

SimTKArrayVec3_swigregister = _opensim.SimTKArrayVec3_swigregister
SimTKArrayVec3_swigregister(SimTKArrayVec3)

class MarkerWeight(OpenSimObject):
    """Proxy of C++ OpenSim::MarkerWeight class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarkerWeight, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarkerWeight, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MarkerWeight

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.MarkerWeight_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(MarkerWeight self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.MarkerWeight_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.MarkerWeight_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(MarkerWeight self) -> MarkerWeight

        Parameters:
            self: OpenSim::MarkerWeight const *

        """
        return _opensim.MarkerWeight_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MarkerWeight self) -> std::string const &

        Parameters:
            self: OpenSim::MarkerWeight const *

        """
        return _opensim.MarkerWeight_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::MarkerWeight self) -> MarkerWeight
        __init__(OpenSim::MarkerWeight self, std::string name, double weight) -> MarkerWeight

        Parameters:
            name: std::string
            weight: double

        __init__(OpenSim::MarkerWeight self, MarkerWeight source) -> MarkerWeight

        Parameters:
            source: OpenSim::MarkerWeight const &

        """
        this = _opensim.new_MarkerWeight(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setWeight(self, weight):
        """
        setWeight(MarkerWeight self, double weight)

        Parameters:
            weight: double

        """
        return _opensim.MarkerWeight_setWeight(self, weight)


    def getWeight(self):
        """
        getWeight(MarkerWeight self) -> double

        Parameters:
            self: OpenSim::MarkerWeight const *

        """
        return _opensim.MarkerWeight_getWeight(self)

    __swig_destroy__ = _opensim.delete_MarkerWeight
    __del__ = lambda self: None
MarkerWeight_swigregister = _opensim.MarkerWeight_swigregister
MarkerWeight_swigregister(MarkerWeight)

def MarkerWeight_safeDownCast(obj):
    """
    MarkerWeight_safeDownCast(OpenSimObject obj) -> MarkerWeight

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.MarkerWeight_safeDownCast(obj)

def MarkerWeight_getClassName():
    """MarkerWeight_getClassName() -> std::string const &"""
    return _opensim.MarkerWeight_getClassName()

class MarkersReference(ReferenceVec3):
    """Proxy of C++ OpenSim::MarkersReference class"""
    __swig_setmethods__ = {}
    for _s in [ReferenceVec3]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarkersReference, name, value)
    __swig_getmethods__ = {}
    for _s in [ReferenceVec3]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarkersReference, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MarkersReference

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.MarkersReference_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(MarkersReference self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.MarkersReference_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.MarkersReference_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(MarkersReference self) -> MarkersReference

        Parameters:
            self: OpenSim::MarkersReference const *

        """
        return _opensim.MarkersReference_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MarkersReference self) -> std::string const &

        Parameters:
            self: OpenSim::MarkersReference const *

        """
        return _opensim.MarkersReference_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::MarkersReference self) -> MarkersReference
        __init__(OpenSim::MarkersReference self, std::string const filename, Units modelUnits) -> MarkersReference

        Parameters:
            filename: std::string const
            modelUnits: OpenSim::Units

        __init__(OpenSim::MarkersReference self, std::string const filename) -> MarkersReference

        Parameters:
            filename: std::string const

        __init__(OpenSim::MarkersReference self, MarkerData aMarkerData, OpenSim::Set< OpenSim::MarkerWeight > const * aMarkerWeightSet=None) -> MarkersReference

        Parameters:
            aMarkerData: OpenSim::MarkerData &
            aMarkerWeightSet: OpenSim::Set< OpenSim::MarkerWeight > const *

        __init__(OpenSim::MarkersReference self, MarkerData aMarkerData) -> MarkersReference

        Parameters:
            aMarkerData: OpenSim::MarkerData &

        """
        this = _opensim.new_MarkersReference(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_MarkersReference
    __del__ = lambda self: None

    def copyData(self, aRef):
        """
        copyData(MarkersReference self, MarkersReference aRef)

        Parameters:
            aRef: OpenSim::MarkersReference const &

        """
        return _opensim.MarkersReference_copyData(self, aRef)


    def loadMarkersFile(self, *args):
        """
        loadMarkersFile(MarkersReference self, std::string const markerFile, Units modelUnits)

        Parameters:
            markerFile: std::string const
            modelUnits: OpenSim::Units

        loadMarkersFile(MarkersReference self, std::string const markerFile)

        Parameters:
            markerFile: std::string const

        """
        return _opensim.MarkersReference_loadMarkersFile(self, *args)


    def getNumRefs(self):
        """
        getNumRefs(MarkersReference self) -> int

        Parameters:
            self: OpenSim::MarkersReference const *

        """
        return _opensim.MarkersReference_getNumRefs(self)


    def getValidTimeRange(self):
        """
        getValidTimeRange(MarkersReference self) -> Vec2

        Parameters:
            self: OpenSim::MarkersReference const *

        """
        return _opensim.MarkersReference_getValidTimeRange(self)


    def getNames(self):
        """
        getNames(MarkersReference self) -> SimTK::Array_< std::string,unsigned int > const &

        Parameters:
            self: OpenSim::MarkersReference const *

        """
        return _opensim.MarkersReference_getNames(self)


    def getValues(self, s, values):
        """
        getValues(MarkersReference self, State s, SimTKArrayVec3 values)

        Parameters:
            s: SimTK::State const &
            values: SimTK::Array_< SimTK::Vec3,unsigned int > &

        """
        return _opensim.MarkersReference_getValues(self, s, values)


    def getSpeedValues(self, s, speedValues):
        """
        getSpeedValues(MarkersReference self, State s, SimTKArrayVec3 speedValues)

        Parameters:
            s: SimTK::State const &
            speedValues: SimTK::Array_< SimTK::Vec3,unsigned int > &

        """
        return _opensim.MarkersReference_getSpeedValues(self, s, speedValues)


    def getAccelerationValues(self, s, accValues):
        """
        getAccelerationValues(MarkersReference self, State s, SimTKArrayVec3 accValues)

        Parameters:
            s: SimTK::State const &
            accValues: SimTK::Array_< SimTK::Vec3,unsigned int > &

        """
        return _opensim.MarkersReference_getAccelerationValues(self, s, accValues)


    def getWeights(self, s, weights):
        """
        getWeights(MarkersReference self, State s, SimTKArrayDouble weights)

        Parameters:
            s: SimTK::State const &
            weights: SimTK::Array_< double,unsigned int > &

        """
        return _opensim.MarkersReference_getWeights(self, s, weights)


    def getSamplingFrequency(self):
        """
        getSamplingFrequency(MarkersReference self) -> double

        Parameters:
            self: OpenSim::MarkersReference *

        """
        return _opensim.MarkersReference_getSamplingFrequency(self)


    def updMarkerWeightSet(self):
        """
        updMarkerWeightSet(MarkersReference self) -> OpenSim::Set< OpenSim::MarkerWeight > &

        Parameters:
            self: OpenSim::MarkersReference *

        """
        return _opensim.MarkersReference_updMarkerWeightSet(self)


    def setMarkerWeightSet(self, markerWeights):
        """
        setMarkerWeightSet(MarkersReference self, OpenSim::Set< OpenSim::MarkerWeight > & markerWeights)

        Parameters:
            markerWeights: OpenSim::Set< OpenSim::MarkerWeight > &

        """
        return _opensim.MarkersReference_setMarkerWeightSet(self, markerWeights)


    def setDefaultWeight(self, weight):
        """
        setDefaultWeight(MarkersReference self, double weight)

        Parameters:
            weight: double

        """
        return _opensim.MarkersReference_setDefaultWeight(self, weight)

MarkersReference_swigregister = _opensim.MarkersReference_swigregister
MarkersReference_swigregister(MarkersReference)

def MarkersReference_safeDownCast(obj):
    """
    MarkersReference_safeDownCast(OpenSimObject obj) -> MarkersReference

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.MarkersReference_safeDownCast(obj)

def MarkersReference_getClassName():
    """MarkersReference_getClassName() -> std::string const &"""
    return _opensim.MarkersReference_getClassName()

class CoordinateReference(ReferenceDouble):
    """Proxy of C++ OpenSim::CoordinateReference class"""
    __swig_setmethods__ = {}
    for _s in [ReferenceDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoordinateReference, name, value)
    __swig_getmethods__ = {}
    for _s in [ReferenceDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoordinateReference, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> CoordinateReference

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.CoordinateReference_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(CoordinateReference self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.CoordinateReference_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.CoordinateReference_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(CoordinateReference self) -> CoordinateReference

        Parameters:
            self: OpenSim::CoordinateReference const *

        """
        return _opensim.CoordinateReference_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(CoordinateReference self) -> std::string const &

        Parameters:
            self: OpenSim::CoordinateReference const *

        """
        return _opensim.CoordinateReference_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::CoordinateReference self) -> CoordinateReference
        __init__(OpenSim::CoordinateReference self, std::string const name, Function ReferenceFunction) -> CoordinateReference

        Parameters:
            name: std::string const
            ReferenceFunction: OpenSim::Function &

        __init__(OpenSim::CoordinateReference self, CoordinateReference source) -> CoordinateReference

        Parameters:
            source: OpenSim::CoordinateReference const &

        """
        this = _opensim.new_CoordinateReference(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_CoordinateReference
    __del__ = lambda self: None

    def getNumRefs(self):
        """
        getNumRefs(CoordinateReference self) -> int

        Parameters:
            self: OpenSim::CoordinateReference const *

        """
        return _opensim.CoordinateReference_getNumRefs(self)


    def getNames(self):
        """
        getNames(CoordinateReference self) -> SimTK::Array_< std::string,unsigned int > const &

        Parameters:
            self: OpenSim::CoordinateReference const *

        """
        return _opensim.CoordinateReference_getNames(self)


    def getValues(self, s, values):
        """
        getValues(CoordinateReference self, State s, SimTKArrayDouble values)

        Parameters:
            s: SimTK::State const &
            values: SimTK::Array_< double,unsigned int > &

        """
        return _opensim.CoordinateReference_getValues(self, s, values)


    def getWeights(self, s, weights):
        """
        getWeights(CoordinateReference self, State s, SimTKArrayDouble weights)

        Parameters:
            s: SimTK::State const &
            weights: SimTK::Array_< double,unsigned int > &

        """
        return _opensim.CoordinateReference_getWeights(self, s, weights)


    def getValue(self, s):
        """
        getValue(CoordinateReference self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.CoordinateReference_getValue(self, s)


    def getSpeedValue(self, s):
        """
        getSpeedValue(CoordinateReference self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.CoordinateReference_getSpeedValue(self, s)


    def getAccelerationValue(self, s):
        """
        getAccelerationValue(CoordinateReference self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.CoordinateReference_getAccelerationValue(self, s)


    def getWeight(self, s):
        """
        getWeight(CoordinateReference self, State s) -> double

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.CoordinateReference_getWeight(self, s)


    def setWeight(self, weight):
        """
        setWeight(CoordinateReference self, double weight)

        Parameters:
            weight: double

        """
        return _opensim.CoordinateReference_setWeight(self, weight)


    def setValueFunction(self, function):
        """
        setValueFunction(CoordinateReference self, Function function)

        Parameters:
            function: OpenSim::Function const &

        """
        return _opensim.CoordinateReference_setValueFunction(self, function)

CoordinateReference_swigregister = _opensim.CoordinateReference_swigregister
CoordinateReference_swigregister(CoordinateReference)

def CoordinateReference_safeDownCast(obj):
    """
    CoordinateReference_safeDownCast(OpenSimObject obj) -> CoordinateReference

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.CoordinateReference_safeDownCast(obj)

def CoordinateReference_getClassName():
    """CoordinateReference_getClassName() -> std::string const &"""
    return _opensim.CoordinateReference_getClassName()

class InverseKinematicsSolver(AssemblySolver):
    """Proxy of C++ OpenSim::InverseKinematicsSolver class"""
    __swig_setmethods__ = {}
    for _s in [AssemblySolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseKinematicsSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [AssemblySolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InverseKinematicsSolver, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _opensim.delete_InverseKinematicsSolver
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::InverseKinematicsSolver self, Model model, MarkersReference markersReference, ArrayCoordinateReference coordinateReferences, double constraintWeight) -> InverseKinematicsSolver

        Parameters:
            model: OpenSim::Model const &
            markersReference: OpenSim::MarkersReference &
            coordinateReferences: SimTK::Array_< OpenSim::CoordinateReference,unsigned int > &
            constraintWeight: double

        __init__(OpenSim::InverseKinematicsSolver self, Model model, MarkersReference markersReference, ArrayCoordinateReference coordinateReferences) -> InverseKinematicsSolver

        Parameters:
            model: OpenSim::Model const &
            markersReference: OpenSim::MarkersReference &
            coordinateReferences: SimTK::Array_< OpenSim::CoordinateReference,unsigned int > &

        """
        this = _opensim.new_InverseKinematicsSolver(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def updateMarkerWeight(self, *args):
        """
        updateMarkerWeight(InverseKinematicsSolver self, std::string const & markerName, double value)

        Parameters:
            markerName: std::string const &
            value: double

        updateMarkerWeight(InverseKinematicsSolver self, int markerIndex, double value)

        Parameters:
            markerIndex: int
            value: double

        """
        return _opensim.InverseKinematicsSolver_updateMarkerWeight(self, *args)


    def updateMarkerWeights(self, weights):
        """
        updateMarkerWeights(InverseKinematicsSolver self, SimTKArrayDouble weights)

        Parameters:
            weights: SimTK::Array_< double,unsigned int > const &

        """
        return _opensim.InverseKinematicsSolver_updateMarkerWeights(self, weights)


    def computeCurrentMarkerLocation(self, *args):
        """
        computeCurrentMarkerLocation(InverseKinematicsSolver self, std::string const & markerName) -> Vec3

        Parameters:
            markerName: std::string const &

        computeCurrentMarkerLocation(InverseKinematicsSolver self, int markerIndex) -> Vec3

        Parameters:
            markerIndex: int

        """
        return _opensim.InverseKinematicsSolver_computeCurrentMarkerLocation(self, *args)


    def computeCurrentMarkerLocations(self, markerLocations):
        """
        computeCurrentMarkerLocations(InverseKinematicsSolver self, SimTKArrayVec3 markerLocations)

        Parameters:
            markerLocations: SimTK::Array_< SimTK::Vec3,unsigned int > &

        """
        return _opensim.InverseKinematicsSolver_computeCurrentMarkerLocations(self, markerLocations)


    def computeCurrentMarkerError(self, *args):
        """
        computeCurrentMarkerError(InverseKinematicsSolver self, std::string const & markerName) -> double

        Parameters:
            markerName: std::string const &

        computeCurrentMarkerError(InverseKinematicsSolver self, int markerIndex) -> double

        Parameters:
            markerIndex: int

        """
        return _opensim.InverseKinematicsSolver_computeCurrentMarkerError(self, *args)


    def computeCurrentMarkerErrors(self, markerErrors):
        """
        computeCurrentMarkerErrors(InverseKinematicsSolver self, SimTKArrayDouble markerErrors)

        Parameters:
            markerErrors: SimTK::Array_< double,unsigned int > &

        """
        return _opensim.InverseKinematicsSolver_computeCurrentMarkerErrors(self, markerErrors)


    def computeCurrentSquaredMarkerError(self, *args):
        """
        computeCurrentSquaredMarkerError(InverseKinematicsSolver self, std::string const & markerName) -> double

        Parameters:
            markerName: std::string const &

        computeCurrentSquaredMarkerError(InverseKinematicsSolver self, int markerIndex) -> double

        Parameters:
            markerIndex: int

        """
        return _opensim.InverseKinematicsSolver_computeCurrentSquaredMarkerError(self, *args)


    def computeCurrentSquaredMarkerErrors(self, markerErrors):
        """
        computeCurrentSquaredMarkerErrors(InverseKinematicsSolver self, SimTKArrayDouble markerErrors)

        Parameters:
            markerErrors: SimTK::Array_< double,unsigned int > &

        """
        return _opensim.InverseKinematicsSolver_computeCurrentSquaredMarkerErrors(self, markerErrors)


    def getMarkerNameForIndex(self, markerIndex):
        """
        getMarkerNameForIndex(InverseKinematicsSolver self, int markerIndex) -> std::string

        Parameters:
            markerIndex: int

        """
        return _opensim.InverseKinematicsSolver_getMarkerNameForIndex(self, markerIndex)

InverseKinematicsSolver_swigregister = _opensim.InverseKinematicsSolver_swigregister
InverseKinematicsSolver_swigregister(InverseKinematicsSolver)

class Tool(OpenSimObject):
    """Proxy of C++ OpenSim::Tool class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tool, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Tool, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Tool

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.Tool_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(Tool self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.Tool_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.Tool_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(Tool self) -> Tool

        Parameters:
            self: OpenSim::Tool const *

        """
        return _opensim.Tool_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Tool self) -> std::string const &

        Parameters:
            self: OpenSim::Tool const *

        """
        return _opensim.Tool_getConcreteClassName(self)

    Quiet = _opensim.Tool_Quiet
    Progress = _opensim.Tool_Progress
    DetailedProgress = _opensim.Tool_DetailedProgress
    Debug = _opensim.Tool_Debug
    __swig_destroy__ = _opensim.delete_Tool
    __del__ = lambda self: None

    def run(self):
        """
        run(Tool self) -> bool

        Parameters:
            self: OpenSim::Tool *

        """
        return _opensim.Tool_run(self)


    def getInputsDir(self):
        """
        getInputsDir(Tool self) -> std::string const &

        Parameters:
            self: OpenSim::Tool const *

        """
        return _opensim.Tool_getInputsDir(self)


    def setInputsDir(self, aString):
        """
        setInputsDir(Tool self, std::string const & aString)

        Parameters:
            aString: std::string const &

        """
        return _opensim.Tool_setInputsDir(self, aString)


    def getResultsDir(self):
        """
        getResultsDir(Tool self) -> std::string const &

        Parameters:
            self: OpenSim::Tool const *

        """
        return _opensim.Tool_getResultsDir(self)


    def setResultsDir(self, aString):
        """
        setResultsDir(Tool self, std::string const & aString)

        Parameters:
            aString: std::string const &

        """
        return _opensim.Tool_setResultsDir(self, aString)


    def getVerboseLevel(self):
        """
        getVerboseLevel(Tool self) -> OpenSim::Tool::VerboseLevel const

        Parameters:
            self: OpenSim::Tool const *

        """
        return _opensim.Tool_getVerboseLevel(self)


    def setVerboseLevel(self, aVerboseLevel):
        """
        setVerboseLevel(Tool self, OpenSim::Tool::VerboseLevel const aVerboseLevel)

        Parameters:
            aVerboseLevel: enum OpenSim::Tool::VerboseLevel const

        """
        return _opensim.Tool_setVerboseLevel(self, aVerboseLevel)

Tool_swigregister = _opensim.Tool_swigregister
Tool_swigregister(Tool)

def Tool_safeDownCast(obj):
    """
    Tool_safeDownCast(OpenSimObject obj) -> Tool

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.Tool_safeDownCast(obj)

def Tool_getClassName():
    """Tool_getClassName() -> std::string const &"""
    return _opensim.Tool_getClassName()

class DynamicsTool(Tool):
    """Proxy of C++ OpenSim::DynamicsTool class"""
    __swig_setmethods__ = {}
    for _s in [Tool]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicsTool, name, value)
    __swig_getmethods__ = {}
    for _s in [Tool]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicsTool, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> DynamicsTool

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.DynamicsTool_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(DynamicsTool self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.DynamicsTool_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.DynamicsTool_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(DynamicsTool self) -> DynamicsTool

        Parameters:
            self: OpenSim::DynamicsTool const *

        """
        return _opensim.DynamicsTool_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(DynamicsTool self) -> std::string const &

        Parameters:
            self: OpenSim::DynamicsTool const *

        """
        return _opensim.DynamicsTool_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_DynamicsTool
    __del__ = lambda self: None

    def disableModelForces(self, model, s, forcesByNameOrGroup):
        """
        disableModelForces(DynamicsTool self, Model model, State s, ArrayStr forcesByNameOrGroup)

        Parameters:
            model: OpenSim::Model &
            s: SimTK::State &
            forcesByNameOrGroup: OpenSim::Array< std::string > const &

        """
        return _opensim.DynamicsTool_disableModelForces(self, model, s, forcesByNameOrGroup)


    def getExternalLoads(self):
        """
        getExternalLoads(DynamicsTool self) -> ExternalLoads

        Parameters:
            self: OpenSim::DynamicsTool const *

        """
        return _opensim.DynamicsTool_getExternalLoads(self)


    def updExternalLoads(self):
        """
        updExternalLoads(DynamicsTool self) -> ExternalLoads

        Parameters:
            self: OpenSim::DynamicsTool *

        """
        return _opensim.DynamicsTool_updExternalLoads(self)


    def getExternalLoadsFileName(self):
        """
        getExternalLoadsFileName(DynamicsTool self) -> std::string const &

        Parameters:
            self: OpenSim::DynamicsTool const *

        """
        return _opensim.DynamicsTool_getExternalLoadsFileName(self)


    def setExternalLoadsFileName(self, aFileName):
        """
        setExternalLoadsFileName(DynamicsTool self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.DynamicsTool_setExternalLoadsFileName(self, aFileName)


    def setModelFileName(self, aFileName):
        """
        setModelFileName(DynamicsTool self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.DynamicsTool_setModelFileName(self, aFileName)


    def getModelFileName(self):
        """
        getModelFileName(DynamicsTool self) -> std::string

        Parameters:
            self: OpenSim::DynamicsTool const *

        """
        return _opensim.DynamicsTool_getModelFileName(self)


    def setStartTime(self, d):
        """
        setStartTime(DynamicsTool self, double d)

        Parameters:
            d: double

        """
        return _opensim.DynamicsTool_setStartTime(self, d)


    def getStartTime(self):
        """
        getStartTime(DynamicsTool self) -> double

        Parameters:
            self: OpenSim::DynamicsTool const *

        """
        return _opensim.DynamicsTool_getStartTime(self)


    def setEndTime(self, d):
        """
        setEndTime(DynamicsTool self, double d)

        Parameters:
            d: double

        """
        return _opensim.DynamicsTool_setEndTime(self, d)


    def getEndTime(self):
        """
        getEndTime(DynamicsTool self) -> double

        Parameters:
            self: OpenSim::DynamicsTool const *

        """
        return _opensim.DynamicsTool_getEndTime(self)


    def setModel(self, aModel):
        """
        setModel(DynamicsTool self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.DynamicsTool_setModel(self, aModel)


    def setExcludedForces(self, aExcluded):
        """
        setExcludedForces(DynamicsTool self, ArrayStr aExcluded)

        Parameters:
            aExcluded: OpenSim::Array< std::string > const &

        """
        return _opensim.DynamicsTool_setExcludedForces(self, aExcluded)


    def createExternalLoads(self, aExternalLoadsFileName, aModel, loadKinematics=None):
        """
        createExternalLoads(DynamicsTool self, std::string const & aExternalLoadsFileName, Model aModel, Storage loadKinematics=None) -> bool

        Parameters:
            aExternalLoadsFileName: std::string const &
            aModel: OpenSim::Model &
            loadKinematics: OpenSim::Storage const *

        createExternalLoads(DynamicsTool self, std::string const & aExternalLoadsFileName, Model aModel) -> bool

        Parameters:
            aExternalLoadsFileName: std::string const &
            aModel: OpenSim::Model &

        """
        return _opensim.DynamicsTool_createExternalLoads(self, aExternalLoadsFileName, aModel, loadKinematics)


    def run(self):
        """
        run(DynamicsTool self) -> bool

        Parameters:
            self: OpenSim::DynamicsTool *

        """
        return _opensim.DynamicsTool_run(self)

DynamicsTool_swigregister = _opensim.DynamicsTool_swigregister
DynamicsTool_swigregister(DynamicsTool)

def DynamicsTool_safeDownCast(obj):
    """
    DynamicsTool_safeDownCast(OpenSimObject obj) -> DynamicsTool

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.DynamicsTool_safeDownCast(obj)

def DynamicsTool_getClassName():
    """DynamicsTool_getClassName() -> std::string const &"""
    return _opensim.DynamicsTool_getClassName()

class InverseDynamicsTool(DynamicsTool):
    """Proxy of C++ OpenSim::InverseDynamicsTool class"""
    __swig_setmethods__ = {}
    for _s in [DynamicsTool]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseDynamicsTool, name, value)
    __swig_getmethods__ = {}
    for _s in [DynamicsTool]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InverseDynamicsTool, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> InverseDynamicsTool

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.InverseDynamicsTool_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(InverseDynamicsTool self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.InverseDynamicsTool_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.InverseDynamicsTool_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(InverseDynamicsTool self) -> InverseDynamicsTool

        Parameters:
            self: OpenSim::InverseDynamicsTool const *

        """
        return _opensim.InverseDynamicsTool_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(InverseDynamicsTool self) -> std::string const &

        Parameters:
            self: OpenSim::InverseDynamicsTool const *

        """
        return _opensim.InverseDynamicsTool_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_InverseDynamicsTool
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::InverseDynamicsTool self) -> InverseDynamicsTool
        __init__(OpenSim::InverseDynamicsTool self, std::string const & aFileName, bool aLoadModel=True) -> InverseDynamicsTool

        Parameters:
            aFileName: std::string const &
            aLoadModel: bool

        __init__(OpenSim::InverseDynamicsTool self, std::string const & aFileName) -> InverseDynamicsTool

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::InverseDynamicsTool self, InverseDynamicsTool aObject) -> InverseDynamicsTool

        Parameters:
            aObject: OpenSim::InverseDynamicsTool const &

        """
        this = _opensim.new_InverseDynamicsTool(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def registerTypes():
        """registerTypes()"""
        return _opensim.InverseDynamicsTool_registerTypes()

    if _newclass:
        registerTypes = staticmethod(registerTypes)
    __swig_getmethods__["registerTypes"] = lambda x: registerTypes

    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(InverseDynamicsTool self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters:
            aNode: SimTK::Xml::Element &
            versionNumber: int

        updateFromXMLNode(InverseDynamicsTool self, SimTK::Xml::Element & aNode)

        Parameters:
            aNode: SimTK::Xml::Element &

        """
        return _opensim.InverseDynamicsTool_updateFromXMLNode(self, aNode, versionNumber)


    def setCoordinateValues(self, aStorage):
        """
        setCoordinateValues(InverseDynamicsTool self, Storage aStorage)

        Parameters:
            aStorage: OpenSim::Storage const &

        """
        return _opensim.InverseDynamicsTool_setCoordinateValues(self, aStorage)


    def getOutputGenForceFileName(self):
        """
        getOutputGenForceFileName(InverseDynamicsTool self) -> std::string

        Parameters:
            self: OpenSim::InverseDynamicsTool const *

        """
        return _opensim.InverseDynamicsTool_getOutputGenForceFileName(self)


    def setOutputGenForceFileName(self, desiredOutputFileName):
        """
        setOutputGenForceFileName(InverseDynamicsTool self, std::string const & desiredOutputFileName)

        Parameters:
            desiredOutputFileName: std::string const &

        """
        return _opensim.InverseDynamicsTool_setOutputGenForceFileName(self, desiredOutputFileName)


    def getCoordinatesFileName(self):
        """
        getCoordinatesFileName(InverseDynamicsTool self) -> std::string const &

        Parameters:
            self: OpenSim::InverseDynamicsTool const *

        """
        return _opensim.InverseDynamicsTool_getCoordinatesFileName(self)


    def setCoordinatesFileName(self, aCoordinateFile):
        """
        setCoordinatesFileName(InverseDynamicsTool self, std::string const & aCoordinateFile)

        Parameters:
            aCoordinateFile: std::string const &

        """
        return _opensim.InverseDynamicsTool_setCoordinatesFileName(self, aCoordinateFile)


    def getLowpassCutoffFrequency(self):
        """
        getLowpassCutoffFrequency(InverseDynamicsTool self) -> double const

        Parameters:
            self: OpenSim::InverseDynamicsTool const *

        """
        return _opensim.InverseDynamicsTool_getLowpassCutoffFrequency(self)


    def setLowpassCutoffFrequency(self, aFrequency):
        """
        setLowpassCutoffFrequency(InverseDynamicsTool self, double aFrequency)

        Parameters:
            aFrequency: double

        """
        return _opensim.InverseDynamicsTool_setLowpassCutoffFrequency(self, aFrequency)


    def run(self):
        """
        run(InverseDynamicsTool self) -> bool

        Parameters:
            self: OpenSim::InverseDynamicsTool *

        """
        return _opensim.InverseDynamicsTool_run(self)

InverseDynamicsTool_swigregister = _opensim.InverseDynamicsTool_swigregister
InverseDynamicsTool_swigregister(InverseDynamicsTool)

def InverseDynamicsTool_safeDownCast(obj):
    """
    InverseDynamicsTool_safeDownCast(OpenSimObject obj) -> InverseDynamicsTool

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.InverseDynamicsTool_safeDownCast(obj)

def InverseDynamicsTool_getClassName():
    """InverseDynamicsTool_getClassName() -> std::string const &"""
    return _opensim.InverseDynamicsTool_getClassName()

def InverseDynamicsTool_registerTypes():
    """InverseDynamicsTool_registerTypes()"""
    return _opensim.InverseDynamicsTool_registerTypes()

class ForwardTool(AbstractTool):
    """Proxy of C++ OpenSim::ForwardTool class"""
    __swig_setmethods__ = {}
    for _s in [AbstractTool]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForwardTool, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractTool]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForwardTool, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ForwardTool

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.ForwardTool_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(ForwardTool self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.ForwardTool_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.ForwardTool_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(ForwardTool self) -> ForwardTool

        Parameters:
            self: OpenSim::ForwardTool const *

        """
        return _opensim.ForwardTool_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ForwardTool self) -> std::string const &

        Parameters:
            self: OpenSim::ForwardTool const *

        """
        return _opensim.ForwardTool_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_ForwardTool
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::ForwardTool self) -> ForwardTool
        __init__(OpenSim::ForwardTool self, std::string const & aFileName, bool aUpdateFromXMLNode=True, bool aLoadModel=True) -> ForwardTool

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool
            aLoadModel: bool

        __init__(OpenSim::ForwardTool self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> ForwardTool

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::ForwardTool self, std::string const & aFileName) -> ForwardTool

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::ForwardTool self, ForwardTool aObject) -> ForwardTool

        Parameters:
            aObject: OpenSim::ForwardTool const &

        """
        this = _opensim.new_ForwardTool(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(ForwardTool self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters:
            aNode: SimTK::Xml::Element &
            versionNumber: int

        updateFromXMLNode(ForwardTool self, SimTK::Xml::Element & aNode)

        Parameters:
            aNode: SimTK::Xml::Element &

        """
        return _opensim.ForwardTool_updateFromXMLNode(self, aNode, versionNumber)


    def setManager(self, m):
        """
        setManager(ForwardTool self, Manager m)

        Parameters:
            m: OpenSim::Manager &

        """
        return _opensim.ForwardTool_setManager(self, m)


    def getManager(self):
        """
        getManager(ForwardTool self) -> Manager

        Parameters:
            self: OpenSim::ForwardTool const *

        """
        return _opensim.ForwardTool_getManager(self)


    def getStatesFileName(self):
        """
        getStatesFileName(ForwardTool self) -> std::string const &

        Parameters:
            self: OpenSim::ForwardTool const *

        """
        return _opensim.ForwardTool_getStatesFileName(self)


    def setStatesFileName(self, aFileName):
        """
        setStatesFileName(ForwardTool self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.ForwardTool_setStatesFileName(self, aFileName)


    def getUseSpecifiedDt(self):
        """
        getUseSpecifiedDt(ForwardTool self) -> bool

        Parameters:
            self: OpenSim::ForwardTool const *

        """
        return _opensim.ForwardTool_getUseSpecifiedDt(self)


    def setUseSpecifiedDt(self, aUseSpecifiedDt):
        """
        setUseSpecifiedDt(ForwardTool self, bool aUseSpecifiedDt)

        Parameters:
            aUseSpecifiedDt: bool

        """
        return _opensim.ForwardTool_setUseSpecifiedDt(self, aUseSpecifiedDt)


    def setPrintResultFiles(self, aToWrite):
        """
        setPrintResultFiles(ForwardTool self, bool aToWrite)

        Parameters:
            aToWrite: bool

        """
        return _opensim.ForwardTool_setPrintResultFiles(self, aToWrite)


    def run(self):
        """
        run(ForwardTool self) -> bool

        Parameters:
            self: OpenSim::ForwardTool *

        """
        return _opensim.ForwardTool_run(self)


    def printResults(self):
        """
        printResults(ForwardTool self)

        Parameters:
            self: OpenSim::ForwardTool *

        """
        return _opensim.ForwardTool_printResults(self)


    def Step(t, t0, t1):
        """
        Step(double t, double t0, double t1) -> double

        Parameters:
            t: double
            t0: double
            t1: double

        """
        return _opensim.ForwardTool_Step(t, t0, t1)

    if _newclass:
        Step = staticmethod(Step)
    __swig_getmethods__["Step"] = lambda x: Step

    def SigmaUp(tau, to, t):
        """
        SigmaUp(double tau, double to, double t) -> double

        Parameters:
            tau: double
            to: double
            t: double

        """
        return _opensim.ForwardTool_SigmaUp(tau, to, t)

    if _newclass:
        SigmaUp = staticmethod(SigmaUp)
    __swig_getmethods__["SigmaUp"] = lambda x: SigmaUp

    def SigmaDn(tau, to, t):
        """
        SigmaDn(double tau, double to, double t) -> double

        Parameters:
            tau: double
            to: double
            t: double

        """
        return _opensim.ForwardTool_SigmaDn(tau, to, t)

    if _newclass:
        SigmaDn = staticmethod(SigmaDn)
    __swig_getmethods__["SigmaDn"] = lambda x: SigmaDn

    def loadStatesStorage(self, statesFileName, rYStore):
        """
        loadStatesStorage(ForwardTool self, std::string & statesFileName, OpenSim::Storage *& rYStore)

        Parameters:
            statesFileName: std::string &
            rYStore: OpenSim::Storage *&

        """
        return _opensim.ForwardTool_loadStatesStorage(self, statesFileName, rYStore)


    def getParsingLog(self):
        """
        getParsingLog(ForwardTool self) -> std::string const &

        Parameters:
            self: OpenSim::ForwardTool *

        """
        return _opensim.ForwardTool_getParsingLog(self)

ForwardTool_swigregister = _opensim.ForwardTool_swigregister
ForwardTool_swigregister(ForwardTool)

def ForwardTool_safeDownCast(obj):
    """
    ForwardTool_safeDownCast(OpenSimObject obj) -> ForwardTool

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.ForwardTool_safeDownCast(obj)

def ForwardTool_getClassName():
    """ForwardTool_getClassName() -> std::string const &"""
    return _opensim.ForwardTool_getClassName()

def ForwardTool_Step(t, t0, t1):
    """
    ForwardTool_Step(double t, double t0, double t1) -> double

    Parameters:
        t: double
        t0: double
        t1: double

    """
    return _opensim.ForwardTool_Step(t, t0, t1)

def ForwardTool_SigmaUp(tau, to, t):
    """
    ForwardTool_SigmaUp(double tau, double to, double t) -> double

    Parameters:
        tau: double
        to: double
        t: double

    """
    return _opensim.ForwardTool_SigmaUp(tau, to, t)

def ForwardTool_SigmaDn(tau, to, t):
    """
    ForwardTool_SigmaDn(double tau, double to, double t) -> double

    Parameters:
        tau: double
        to: double
        t: double

    """
    return _opensim.ForwardTool_SigmaDn(tau, to, t)

class TrackingTask(OpenSimObject):
    """Proxy of C++ OpenSim::TrackingTask class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrackingTask, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrackingTask, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> TrackingTask

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.TrackingTask_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(TrackingTask self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.TrackingTask_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.TrackingTask_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(TrackingTask self) -> TrackingTask

        Parameters:
            self: OpenSim::TrackingTask const *

        """
        return _opensim.TrackingTask_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(TrackingTask self) -> std::string const &

        Parameters:
            self: OpenSim::TrackingTask const *

        """
        return _opensim.TrackingTask_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_TrackingTask
    __del__ = lambda self: None

    def setModel(self, aModel):
        """
        setModel(TrackingTask self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.TrackingTask_setModel(self, aModel)


    def getModel(self):
        """
        getModel(TrackingTask self) -> Model

        Parameters:
            self: OpenSim::TrackingTask const *

        """
        return _opensim.TrackingTask_getModel(self)


    def setOn(self, aTrueFalse):
        """
        setOn(TrackingTask self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.TrackingTask_setOn(self, aTrueFalse)


    def getOn(self):
        """
        getOn(TrackingTask self) -> bool

        Parameters:
            self: OpenSim::TrackingTask const *

        """
        return _opensim.TrackingTask_getOn(self)


    def setWeight(self, aW0, aW1=0.0, aW2=0.0):
        """
        setWeight(TrackingTask self, double aW0, double aW1=0.0, double aW2=0.0)

        Parameters:
            aW0: double
            aW1: double
            aW2: double

        setWeight(TrackingTask self, double aW0, double aW1=0.0)

        Parameters:
            aW0: double
            aW1: double

        setWeight(TrackingTask self, double aW0)

        Parameters:
            aW0: double

        """
        return _opensim.TrackingTask_setWeight(self, aW0, aW1, aW2)


    def setWeights(self, aWeights):
        """
        setWeights(TrackingTask self, ArrayDouble aWeights)

        Parameters:
            aWeights: OpenSim::Array< double > const &

        """
        return _opensim.TrackingTask_setWeights(self, aWeights)


    def getWeight(self, aWhich):
        """
        getWeight(TrackingTask self, int aWhich) -> double

        Parameters:
            aWhich: int

        """
        return _opensim.TrackingTask_getWeight(self, aWhich)


    def getWeights(self):
        """
        getWeights(TrackingTask self) -> ArrayDouble

        Parameters:
            self: OpenSim::TrackingTask const *

        """
        return _opensim.TrackingTask_getWeights(self)


    def getNumTaskFunctions(self):
        """
        getNumTaskFunctions(TrackingTask self) -> int

        Parameters:
            self: OpenSim::TrackingTask const *

        """
        return _opensim.TrackingTask_getNumTaskFunctions(self)


    def setTaskFunctions(self, aF0, aF1=None, aF2=None):
        """
        setTaskFunctions(TrackingTask self, Function aF0, Function aF1=None, Function aF2=None)

        Parameters:
            aF0: OpenSim::Function *
            aF1: OpenSim::Function *
            aF2: OpenSim::Function *

        setTaskFunctions(TrackingTask self, Function aF0, Function aF1=None)

        Parameters:
            aF0: OpenSim::Function *
            aF1: OpenSim::Function *

        setTaskFunctions(TrackingTask self, Function aF0)

        Parameters:
            aF0: OpenSim::Function *

        """
        return _opensim.TrackingTask_setTaskFunctions(self, aF0, aF1, aF2)

TrackingTask_swigregister = _opensim.TrackingTask_swigregister
TrackingTask_swigregister(TrackingTask)

def TrackingTask_safeDownCast(obj):
    """
    TrackingTask_safeDownCast(OpenSimObject obj) -> TrackingTask

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.TrackingTask_safeDownCast(obj)

def TrackingTask_getClassName():
    """TrackingTask_getClassName() -> std::string const &"""
    return _opensim.TrackingTask_getClassName()

class CMC_Task(TrackingTask):
    """Proxy of C++ OpenSim::CMC_Task class"""
    __swig_setmethods__ = {}
    for _s in [TrackingTask]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMC_Task, name, value)
    __swig_getmethods__ = {}
    for _s in [TrackingTask]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMC_Task, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> CMC_Task

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.CMC_Task_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(CMC_Task self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.CMC_Task_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.CMC_Task_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(CMC_Task self) -> CMC_Task

        Parameters:
            self: OpenSim::CMC_Task const *

        """
        return _opensim.CMC_Task_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(CMC_Task self) -> std::string const &

        Parameters:
            self: OpenSim::CMC_Task const *

        """
        return _opensim.CMC_Task_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_CMC_Task
    __del__ = lambda self: None

    def setWRTBodyName(self, aBodyName):
        """
        setWRTBodyName(CMC_Task self, std::string aBodyName)

        Parameters:
            aBodyName: std::string

        """
        return _opensim.CMC_Task_setWRTBodyName(self, aBodyName)


    def getWRTBodyName(self):
        """
        getWRTBodyName(CMC_Task self) -> std::string

        Parameters:
            self: OpenSim::CMC_Task const *

        """
        return _opensim.CMC_Task_getWRTBodyName(self)


    def setExpressBodyName(self, aBodyName):
        """
        setExpressBodyName(CMC_Task self, std::string aBodyName)

        Parameters:
            aBodyName: std::string

        """
        return _opensim.CMC_Task_setExpressBodyName(self, aBodyName)


    def getExpressBodyName(self):
        """
        getExpressBodyName(CMC_Task self) -> std::string

        Parameters:
            self: OpenSim::CMC_Task const *

        """
        return _opensim.CMC_Task_getExpressBodyName(self)


    def setActive(self, a0, a1=False, a2=False):
        """
        setActive(CMC_Task self, bool a0, bool a1=False, bool a2=False)

        Parameters:
            a0: bool
            a1: bool
            a2: bool

        setActive(CMC_Task self, bool a0, bool a1=False)

        Parameters:
            a0: bool
            a1: bool

        setActive(CMC_Task self, bool a0)

        Parameters:
            a0: bool

        """
        return _opensim.CMC_Task_setActive(self, a0, a1, a2)


    def getActive(self, aWhich):
        """
        getActive(CMC_Task self, int aWhich) -> bool

        Parameters:
            aWhich: int

        """
        return _opensim.CMC_Task_getActive(self, aWhich)


    def setWeight(self, aW0, aW1=0.0, aW2=0.0):
        """
        setWeight(CMC_Task self, double aW0, double aW1=0.0, double aW2=0.0)

        Parameters:
            aW0: double
            aW1: double
            aW2: double

        setWeight(CMC_Task self, double aW0, double aW1=0.0)

        Parameters:
            aW0: double
            aW1: double

        setWeight(CMC_Task self, double aW0)

        Parameters:
            aW0: double

        """
        return _opensim.CMC_Task_setWeight(self, aW0, aW1, aW2)


    def getWeight(self, aWhich):
        """
        getWeight(CMC_Task self, int aWhich) -> double

        Parameters:
            aWhich: int

        """
        return _opensim.CMC_Task_getWeight(self, aWhich)


    def setKP(self, aK0, aK1=0.0, aK2=0.0):
        """
        setKP(CMC_Task self, double aK0, double aK1=0.0, double aK2=0.0)

        Parameters:
            aK0: double
            aK1: double
            aK2: double

        setKP(CMC_Task self, double aK0, double aK1=0.0)

        Parameters:
            aK0: double
            aK1: double

        setKP(CMC_Task self, double aK0)

        Parameters:
            aK0: double

        """
        return _opensim.CMC_Task_setKP(self, aK0, aK1, aK2)


    def getKP(self, aWhich):
        """
        getKP(CMC_Task self, int aWhich) -> double

        Parameters:
            aWhich: int

        """
        return _opensim.CMC_Task_getKP(self, aWhich)


    def setKV(self, aK0, aK1=0.0, aK2=0.0):
        """
        setKV(CMC_Task self, double aK0, double aK1=0.0, double aK2=0.0)

        Parameters:
            aK0: double
            aK1: double
            aK2: double

        setKV(CMC_Task self, double aK0, double aK1=0.0)

        Parameters:
            aK0: double
            aK1: double

        setKV(CMC_Task self, double aK0)

        Parameters:
            aK0: double

        """
        return _opensim.CMC_Task_setKV(self, aK0, aK1, aK2)


    def getKV(self, aWhich):
        """
        getKV(CMC_Task self, int aWhich) -> double

        Parameters:
            aWhich: int

        """
        return _opensim.CMC_Task_getKV(self, aWhich)


    def setKA(self, aK0, aK1=0.0, aK2=0.0):
        """
        setKA(CMC_Task self, double aK0, double aK1=0.0, double aK2=0.0)

        Parameters:
            aK0: double
            aK1: double
            aK2: double

        setKA(CMC_Task self, double aK0, double aK1=0.0)

        Parameters:
            aK0: double
            aK1: double

        setKA(CMC_Task self, double aK0)

        Parameters:
            aK0: double

        """
        return _opensim.CMC_Task_setKA(self, aK0, aK1, aK2)


    def getKA(self, aWhich):
        """
        getKA(CMC_Task self, int aWhich) -> double

        Parameters:
            aWhich: int

        """
        return _opensim.CMC_Task_getKA(self, aWhich)


    def setDirection_0(self, aR):
        """
        setDirection_0(CMC_Task self, Vec3 aR)

        Parameters:
            aR: SimTK::Vec3 const &

        """
        return _opensim.CMC_Task_setDirection_0(self, aR)


    def getDirection_0(self, rR):
        """
        getDirection_0(CMC_Task self, Vec3 rR)

        Parameters:
            rR: SimTK::Vec3 &

        """
        return _opensim.CMC_Task_getDirection_0(self, rR)


    def setDirection_1(self, aR):
        """
        setDirection_1(CMC_Task self, Vec3 aR)

        Parameters:
            aR: SimTK::Vec3 const &

        """
        return _opensim.CMC_Task_setDirection_1(self, aR)


    def getDirection_1(self, rR):
        """
        getDirection_1(CMC_Task self, Vec3 rR)

        Parameters:
            rR: SimTK::Vec3 &

        """
        return _opensim.CMC_Task_getDirection_1(self, rR)


    def setDirection_2(self, aR):
        """
        setDirection_2(CMC_Task self, Vec3 aR)

        Parameters:
            aR: SimTK::Vec3 const &

        """
        return _opensim.CMC_Task_setDirection_2(self, aR)


    def getDirection_2(self, rR):
        """
        getDirection_2(CMC_Task self, Vec3 rR)

        Parameters:
            rR: SimTK::Vec3 &

        """
        return _opensim.CMC_Task_getDirection_2(self, rR)


    def getTaskFunction(self, aWhich):
        """
        getTaskFunction(CMC_Task self, int aWhich) -> Function

        Parameters:
            aWhich: int

        """
        return _opensim.CMC_Task_getTaskFunction(self, aWhich)


    def setTaskFunctionsForVelocity(self, aF0, aF1=None, aF2=None):
        """
        setTaskFunctionsForVelocity(CMC_Task self, Function aF0, Function aF1=None, Function aF2=None)

        Parameters:
            aF0: OpenSim::Function *
            aF1: OpenSim::Function *
            aF2: OpenSim::Function *

        setTaskFunctionsForVelocity(CMC_Task self, Function aF0, Function aF1=None)

        Parameters:
            aF0: OpenSim::Function *
            aF1: OpenSim::Function *

        setTaskFunctionsForVelocity(CMC_Task self, Function aF0)

        Parameters:
            aF0: OpenSim::Function *

        """
        return _opensim.CMC_Task_setTaskFunctionsForVelocity(self, aF0, aF1, aF2)


    def getTaskFunctionForVelocity(self, aWhich):
        """
        getTaskFunctionForVelocity(CMC_Task self, int aWhich) -> Function

        Parameters:
            aWhich: int

        """
        return _opensim.CMC_Task_getTaskFunctionForVelocity(self, aWhich)


    def setTaskFunctionsForAcceleration(self, aF0, aF1=None, aF2=None):
        """
        setTaskFunctionsForAcceleration(CMC_Task self, Function aF0, Function aF1=None, Function aF2=None)

        Parameters:
            aF0: OpenSim::Function *
            aF1: OpenSim::Function *
            aF2: OpenSim::Function *

        setTaskFunctionsForAcceleration(CMC_Task self, Function aF0, Function aF1=None)

        Parameters:
            aF0: OpenSim::Function *
            aF1: OpenSim::Function *

        setTaskFunctionsForAcceleration(CMC_Task self, Function aF0)

        Parameters:
            aF0: OpenSim::Function *

        """
        return _opensim.CMC_Task_setTaskFunctionsForAcceleration(self, aF0, aF1, aF2)


    def getTaskFunctionForAcceleration(self, aWhich):
        """
        getTaskFunctionForAcceleration(CMC_Task self, int aWhich) -> Function

        Parameters:
            aWhich: int

        """
        return _opensim.CMC_Task_getTaskFunctionForAcceleration(self, aWhich)


    def getTaskPosition(self, aWhich, aT):
        """
        getTaskPosition(CMC_Task self, int aWhich, double aT) -> double

        Parameters:
            aWhich: int
            aT: double

        """
        return _opensim.CMC_Task_getTaskPosition(self, aWhich, aT)


    def getTaskVelocity(self, aWhich, aT):
        """
        getTaskVelocity(CMC_Task self, int aWhich, double aT) -> double

        Parameters:
            aWhich: int
            aT: double

        """
        return _opensim.CMC_Task_getTaskVelocity(self, aWhich, aT)


    def getTaskAcceleration(self, aWhich, aT):
        """
        getTaskAcceleration(CMC_Task self, int aWhich, double aT) -> double

        Parameters:
            aWhich: int
            aT: double

        """
        return _opensim.CMC_Task_getTaskAcceleration(self, aWhich, aT)


    def setPositionErrorLast(self, aE0, aE1=0.0, aE2=0.0):
        """
        setPositionErrorLast(CMC_Task self, double aE0, double aE1=0.0, double aE2=0.0)

        Parameters:
            aE0: double
            aE1: double
            aE2: double

        setPositionErrorLast(CMC_Task self, double aE0, double aE1=0.0)

        Parameters:
            aE0: double
            aE1: double

        setPositionErrorLast(CMC_Task self, double aE0)

        Parameters:
            aE0: double

        """
        return _opensim.CMC_Task_setPositionErrorLast(self, aE0, aE1, aE2)


    def getPositionErrorLast(self, aWhich):
        """
        getPositionErrorLast(CMC_Task self, int aWhich) -> double

        Parameters:
            aWhich: int

        """
        return _opensim.CMC_Task_getPositionErrorLast(self, aWhich)


    def setVelocityErrorLast(self, aE0, aE1=0.0, aE2=0.0):
        """
        setVelocityErrorLast(CMC_Task self, double aE0, double aE1=0.0, double aE2=0.0)

        Parameters:
            aE0: double
            aE1: double
            aE2: double

        setVelocityErrorLast(CMC_Task self, double aE0, double aE1=0.0)

        Parameters:
            aE0: double
            aE1: double

        setVelocityErrorLast(CMC_Task self, double aE0)

        Parameters:
            aE0: double

        """
        return _opensim.CMC_Task_setVelocityErrorLast(self, aE0, aE1, aE2)


    def getVelocityErrorLast(self, aWhich):
        """
        getVelocityErrorLast(CMC_Task self, int aWhich) -> double

        Parameters:
            aWhich: int

        """
        return _opensim.CMC_Task_getVelocityErrorLast(self, aWhich)


    def getPositionError(self, aWhich):
        """
        getPositionError(CMC_Task self, int aWhich) -> double

        Parameters:
            aWhich: int

        """
        return _opensim.CMC_Task_getPositionError(self, aWhich)


    def getVelocityError(self, aWhich):
        """
        getVelocityError(CMC_Task self, int aWhich) -> double

        Parameters:
            aWhich: int

        """
        return _opensim.CMC_Task_getVelocityError(self, aWhich)


    def getDesiredAcceleration(self, aWhich):
        """
        getDesiredAcceleration(CMC_Task self, int aWhich) -> double

        Parameters:
            aWhich: int

        """
        return _opensim.CMC_Task_getDesiredAcceleration(self, aWhich)


    def getAcceleration(self, aWhich):
        """
        getAcceleration(CMC_Task self, int aWhich) -> double

        Parameters:
            aWhich: int

        """
        return _opensim.CMC_Task_getAcceleration(self, aWhich)


    def computeErrors(self, s, aT):
        """
        computeErrors(CMC_Task self, State s, double aT)

        Parameters:
            s: SimTK::State const &
            aT: double

        """
        return _opensim.CMC_Task_computeErrors(self, s, aT)


    def computeDesiredAccelerations(self, *args):
        """
        computeDesiredAccelerations(CMC_Task self, State s, double aT)

        Parameters:
            s: SimTK::State const &
            aT: double

        computeDesiredAccelerations(CMC_Task self, State s, double aTI, double aTF)

        Parameters:
            s: SimTK::State const &
            aTI: double
            aTF: double

        """
        return _opensim.CMC_Task_computeDesiredAccelerations(self, *args)


    def computeAccelerations(self, s):
        """
        computeAccelerations(CMC_Task self, State s)

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.CMC_Task_computeAccelerations(self, s)


    def computeJacobian(self):
        """
        computeJacobian(CMC_Task self)

        Parameters:
            self: OpenSim::CMC_Task *

        """
        return _opensim.CMC_Task_computeJacobian(self)


    def computeEffectiveMassMatrix(self):
        """
        computeEffectiveMassMatrix(CMC_Task self)

        Parameters:
            self: OpenSim::CMC_Task *

        """
        return _opensim.CMC_Task_computeEffectiveMassMatrix(self)


    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(CMC_Task self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters:
            aNode: SimTK::Xml::Element &
            versionNumber: int

        updateFromXMLNode(CMC_Task self, SimTK::Xml::Element & aNode)

        Parameters:
            aNode: SimTK::Xml::Element &

        """
        return _opensim.CMC_Task_updateFromXMLNode(self, aNode, versionNumber)

CMC_Task_swigregister = _opensim.CMC_Task_swigregister
CMC_Task_swigregister(CMC_Task)

def CMC_Task_safeDownCast(obj):
    """
    CMC_Task_safeDownCast(OpenSimObject obj) -> CMC_Task

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.CMC_Task_safeDownCast(obj)

def CMC_Task_getClassName():
    """CMC_Task_getClassName() -> std::string const &"""
    return _opensim.CMC_Task_getClassName()

class CMC_Joint(CMC_Task):
    """Proxy of C++ OpenSim::CMC_Joint class"""
    __swig_setmethods__ = {}
    for _s in [CMC_Task]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMC_Joint, name, value)
    __swig_getmethods__ = {}
    for _s in [CMC_Task]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMC_Joint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> CMC_Joint

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.CMC_Joint_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(CMC_Joint self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.CMC_Joint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.CMC_Joint_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(CMC_Joint self) -> CMC_Joint

        Parameters:
            self: OpenSim::CMC_Joint const *

        """
        return _opensim.CMC_Joint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(CMC_Joint self) -> std::string const &

        Parameters:
            self: OpenSim::CMC_Joint const *

        """
        return _opensim.CMC_Joint_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::CMC_Joint self, std::string const & aCoordinateName) -> CMC_Joint

        Parameters:
            aCoordinateName: std::string const &

        __init__(OpenSim::CMC_Joint self) -> CMC_Joint
        __init__(OpenSim::CMC_Joint self, CMC_Joint aTask) -> CMC_Joint

        Parameters:
            aTask: OpenSim::CMC_Joint const &

        """
        this = _opensim.new_CMC_Joint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_CMC_Joint
    __del__ = lambda self: None

    def setModel(self, aModel):
        """
        setModel(CMC_Joint self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.CMC_Joint_setModel(self, aModel)


    def setCoordinateName(self, aName):
        """
        setCoordinateName(CMC_Joint self, std::string const & aName)

        Parameters:
            aName: std::string const &

        """
        return _opensim.CMC_Joint_setCoordinateName(self, aName)


    def getCoordinateName(self):
        """
        getCoordinateName(CMC_Joint self) -> std::string

        Parameters:
            self: OpenSim::CMC_Joint const *

        """
        return _opensim.CMC_Joint_getCoordinateName(self)


    def getLimit(self):
        """
        getLimit(CMC_Joint self) -> double

        Parameters:
            self: OpenSim::CMC_Joint const *

        """
        return _opensim.CMC_Joint_getLimit(self)


    def computeErrors(self, s, aT):
        """
        computeErrors(CMC_Joint self, State s, double aT)

        Parameters:
            s: SimTK::State const &
            aT: double

        """
        return _opensim.CMC_Joint_computeErrors(self, s, aT)


    def computeDesiredAccelerations(self, *args):
        """
        computeDesiredAccelerations(CMC_Joint self, State s, double aT)

        Parameters:
            s: SimTK::State const &
            aT: double

        computeDesiredAccelerations(CMC_Joint self, State s, double aTI, double aTF)

        Parameters:
            s: SimTK::State const &
            aTI: double
            aTF: double

        """
        return _opensim.CMC_Joint_computeDesiredAccelerations(self, *args)


    def computeAccelerations(self, s):
        """
        computeAccelerations(CMC_Joint self, State s)

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.CMC_Joint_computeAccelerations(self, s)


    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(CMC_Joint self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters:
            aNode: SimTK::Xml::Element &
            versionNumber: int

        updateFromXMLNode(CMC_Joint self, SimTK::Xml::Element & aNode)

        Parameters:
            aNode: SimTK::Xml::Element &

        """
        return _opensim.CMC_Joint_updateFromXMLNode(self, aNode, versionNumber)

CMC_Joint_swigregister = _opensim.CMC_Joint_swigregister
CMC_Joint_swigregister(CMC_Joint)

def CMC_Joint_safeDownCast(obj):
    """
    CMC_Joint_safeDownCast(OpenSimObject obj) -> CMC_Joint

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.CMC_Joint_safeDownCast(obj)

def CMC_Joint_getClassName():
    """CMC_Joint_getClassName() -> std::string const &"""
    return _opensim.CMC_Joint_getClassName()

class CMC_Point(CMC_Task):
    """Proxy of C++ OpenSim::CMC_Point class"""
    __swig_setmethods__ = {}
    for _s in [CMC_Task]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMC_Point, name, value)
    __swig_getmethods__ = {}
    for _s in [CMC_Task]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMC_Point, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> CMC_Point

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.CMC_Point_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(CMC_Point self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.CMC_Point_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.CMC_Point_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(CMC_Point self) -> CMC_Point

        Parameters:
            self: OpenSim::CMC_Point const *

        """
        return _opensim.CMC_Point_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(CMC_Point self) -> std::string const &

        Parameters:
            self: OpenSim::CMC_Point const *

        """
        return _opensim.CMC_Point_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::CMC_Point self, Vec3 aPoint) -> CMC_Point

        Parameters:
            aPoint: SimTK::Vec3 const &

        __init__(OpenSim::CMC_Point self) -> CMC_Point
        __init__(OpenSim::CMC_Point self, CMC_Point aTask) -> CMC_Point

        Parameters:
            aTask: OpenSim::CMC_Point const &

        """
        this = _opensim.new_CMC_Point(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_CMC_Point
    __del__ = lambda self: None

    def setModel(self, aModel):
        """
        setModel(CMC_Point self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.CMC_Point_setModel(self, aModel)


    def setPoint(self, aPoint):
        """
        setPoint(CMC_Point self, Vec3 aPoint)

        Parameters:
            aPoint: SimTK::Vec3 const &

        """
        return _opensim.CMC_Point_setPoint(self, aPoint)


    def getPoint(self):
        """
        getPoint(CMC_Point self) -> Vec3

        Parameters:
            self: OpenSim::CMC_Point const *

        """
        return _opensim.CMC_Point_getPoint(self)


    def computeErrors(self, s, aT):
        """
        computeErrors(CMC_Point self, State s, double aT)

        Parameters:
            s: SimTK::State const &
            aT: double

        """
        return _opensim.CMC_Point_computeErrors(self, s, aT)


    def computeDesiredAccelerations(self, *args):
        """
        computeDesiredAccelerations(CMC_Point self, State s, double aT)

        Parameters:
            s: SimTK::State const &
            aT: double

        computeDesiredAccelerations(CMC_Point self, State s, double aTI, double aTF)

        Parameters:
            s: SimTK::State const &
            aTI: double
            aTF: double

        """
        return _opensim.CMC_Point_computeDesiredAccelerations(self, *args)


    def computeAccelerations(self, s):
        """
        computeAccelerations(CMC_Point self, State s)

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.CMC_Point_computeAccelerations(self, s)


    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(CMC_Point self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters:
            aNode: SimTK::Xml::Element &
            versionNumber: int

        updateFromXMLNode(CMC_Point self, SimTK::Xml::Element & aNode)

        Parameters:
            aNode: SimTK::Xml::Element &

        """
        return _opensim.CMC_Point_updateFromXMLNode(self, aNode, versionNumber)

CMC_Point_swigregister = _opensim.CMC_Point_swigregister
CMC_Point_swigregister(CMC_Point)

def CMC_Point_safeDownCast(obj):
    """
    CMC_Point_safeDownCast(OpenSimObject obj) -> CMC_Point

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.CMC_Point_safeDownCast(obj)

def CMC_Point_getClassName():
    """CMC_Point_getClassName() -> std::string const &"""
    return _opensim.CMC_Point_getClassName()

class SetTrackingTasks(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::TrackingTask)> class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetTrackingTasks, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetTrackingTasks, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetTrackingTasks

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.SetTrackingTasks_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(SetTrackingTasks self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.SetTrackingTasks_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.SetTrackingTasks_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(SetTrackingTasks self) -> SetTrackingTasks

        Parameters:
            self: OpenSim::Set< OpenSim::TrackingTask > const *

        """
        return _opensim.SetTrackingTasks_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetTrackingTasks self) -> std::string const &

        Parameters:
            self: OpenSim::Set< OpenSim::TrackingTask > const *

        """
        return _opensim.SetTrackingTasks_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_SetTrackingTasks
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::TrackingTask)> self) -> SetTrackingTasks
        __init__(OpenSim::Set<(OpenSim::TrackingTask)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetTrackingTasks

        Parameters:
            aFileName: std::string const &
            aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::TrackingTask)> self, std::string const & aFileName) -> SetTrackingTasks

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::TrackingTask)> self, SetTrackingTasks aSet) -> SetTrackingTasks

        Parameters:
            aSet: OpenSim::Set< OpenSim::TrackingTask > const &

        """
        this = _opensim.new_SetTrackingTasks(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetTrackingTasks self)

        Parameters:
            self: OpenSim::Set< OpenSim::TrackingTask > *

        """
        return _opensim.SetTrackingTasks_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetTrackingTasks self, bool aTrueFalse)

        Parameters:
            aTrueFalse: bool

        """
        return _opensim.SetTrackingTasks_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetTrackingTasks self, int aSize) -> bool

        Parameters:
            aSize: int

        """
        return _opensim.SetTrackingTasks_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetTrackingTasks self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::TrackingTask > const *

        """
        return _opensim.SetTrackingTasks_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetTrackingTasks self, TrackingTask aObject, int aStartIndex=0) -> int

        Parameters:
            aObject: OpenSim::TrackingTask const *
            aStartIndex: int

        getIndex(SetTrackingTasks self, TrackingTask aObject) -> int

        Parameters:
            aObject: OpenSim::TrackingTask const *

        getIndex(SetTrackingTasks self, std::string const & aName, int aStartIndex=0) -> int

        Parameters:
            aName: std::string const &
            aStartIndex: int

        getIndex(SetTrackingTasks self, std::string const & aName) -> int

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetTrackingTasks_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetTrackingTasks self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters:
            aObjectName: std::string const &
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetTrackingTasks_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetTrackingTasks self, TrackingTask aObject) -> bool

        Parameters:
            aObject: OpenSim::TrackingTask *

        """
        return _opensim.SetTrackingTasks_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetTrackingTasks self, TrackingTask aObject) -> bool

        Parameters:
            aObject: OpenSim::TrackingTask const &

        """
        return _opensim.SetTrackingTasks_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetTrackingTasks self, int aIndex, TrackingTask aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::TrackingTask *

        """
        return _opensim.SetTrackingTasks_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetTrackingTasks self, int aIndex) -> bool

        Parameters:
            aIndex: int

        remove(SetTrackingTasks self, TrackingTask aObject) -> bool

        Parameters:
            aObject: OpenSim::TrackingTask const *

        """
        return _opensim.SetTrackingTasks_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetTrackingTasks self)

        Parameters:
            self: OpenSim::Set< OpenSim::TrackingTask > *

        """
        return _opensim.SetTrackingTasks_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetTrackingTasks self, int aIndex, TrackingTask aObject, bool preserveGroups=False) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::TrackingTask *
            preserveGroups: bool

        set(SetTrackingTasks self, int aIndex, TrackingTask aObject) -> bool

        Parameters:
            aIndex: int
            aObject: OpenSim::TrackingTask *

        """
        return _opensim.SetTrackingTasks_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetTrackingTasks self, int aIndex) -> TrackingTask

        Parameters:
            aIndex: int

        get(SetTrackingTasks self, std::string const & aName) -> TrackingTask

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetTrackingTasks_get(self, *args)


    def contains(self, aName):
        """
        contains(SetTrackingTasks self, std::string const & aName) -> bool

        Parameters:
            aName: std::string const &

        """
        return _opensim.SetTrackingTasks_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetTrackingTasks self, ArrayStr rNames)

        Parameters:
            rNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetTrackingTasks_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetTrackingTasks self) -> int

        Parameters:
            self: OpenSim::Set< OpenSim::TrackingTask > const *

        """
        return _opensim.SetTrackingTasks_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetTrackingTasks self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetTrackingTasks_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetTrackingTasks self, std::string const & aGroupName)

        Parameters:
            aGroupName: std::string const &

        """
        return _opensim.SetTrackingTasks_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetTrackingTasks self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters:
            oldGroupName: std::string const &
            newGroupName: std::string const &

        """
        return _opensim.SetTrackingTasks_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetTrackingTasks self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters:
            aGroupName: std::string const &
            aObjectName: std::string const &

        """
        return _opensim.SetTrackingTasks_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetTrackingTasks self, ArrayStr rGroupNames)

        Parameters:
            rGroupNames: OpenSim::Array< std::string > &

        """
        return _opensim.SetTrackingTasks_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetTrackingTasks self, std::string const & aGroupName) -> ObjectGroup

        Parameters:
            aGroupName: std::string const &

        getGroup(SetTrackingTasks self, int aIndex) -> ObjectGroup

        Parameters:
            aIndex: int

        """
        return _opensim.SetTrackingTasks_getGroup(self, *args)

SetTrackingTasks_swigregister = _opensim.SetTrackingTasks_swigregister
SetTrackingTasks_swigregister(SetTrackingTasks)

def SetTrackingTasks_safeDownCast(obj):
    """
    SetTrackingTasks_safeDownCast(OpenSimObject obj) -> SetTrackingTasks

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.SetTrackingTasks_safeDownCast(obj)

def SetTrackingTasks_getClassName():
    """SetTrackingTasks_getClassName() -> std::string const &"""
    return _opensim.SetTrackingTasks_getClassName()

class CMC_TaskSet(SetTrackingTasks):
    """Proxy of C++ OpenSim::CMC_TaskSet class"""
    __swig_setmethods__ = {}
    for _s in [SetTrackingTasks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMC_TaskSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetTrackingTasks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMC_TaskSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> CMC_TaskSet

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.CMC_TaskSet_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(CMC_TaskSet self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.CMC_TaskSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.CMC_TaskSet_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(CMC_TaskSet self) -> CMC_TaskSet

        Parameters:
            self: OpenSim::CMC_TaskSet const *

        """
        return _opensim.CMC_TaskSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(CMC_TaskSet self) -> std::string const &

        Parameters:
            self: OpenSim::CMC_TaskSet const *

        """
        return _opensim.CMC_TaskSet_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_CMC_TaskSet
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::CMC_TaskSet self) -> CMC_TaskSet
        __init__(OpenSim::CMC_TaskSet self, std::string const & aFileName) -> CMC_TaskSet

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::CMC_TaskSet self, CMC_TaskSet aCMCTaskSet) -> CMC_TaskSet

        Parameters:
            aCMCTaskSet: OpenSim::CMC_TaskSet const &

        """
        this = _opensim.new_CMC_TaskSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setModel(self, aModel):
        """
        setModel(CMC_TaskSet self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.CMC_TaskSet_setModel(self, aModel)


    def getModel(self):
        """
        getModel(CMC_TaskSet self) -> Model

        Parameters:
            self: OpenSim::CMC_TaskSet const *

        """
        return _opensim.CMC_TaskSet_getModel(self)


    def getDataFileName(self):
        """
        getDataFileName(CMC_TaskSet self) -> std::string const &

        Parameters:
            self: OpenSim::CMC_TaskSet const *

        """
        return _opensim.CMC_TaskSet_getDataFileName(self)


    def setFunctions(self, aFuncSet):
        """
        setFunctions(CMC_TaskSet self, FunctionSet aFuncSet)

        Parameters:
            aFuncSet: OpenSim::FunctionSet &

        """
        return _opensim.CMC_TaskSet_setFunctions(self, aFuncSet)


    def setFunctionsForVelocity(self, aFuncSet):
        """
        setFunctionsForVelocity(CMC_TaskSet self, FunctionSet aFuncSet)

        Parameters:
            aFuncSet: OpenSim::FunctionSet &

        """
        return _opensim.CMC_TaskSet_setFunctionsForVelocity(self, aFuncSet)


    def setFunctionsForAcceleration(self, aFuncSet):
        """
        setFunctionsForAcceleration(CMC_TaskSet self, FunctionSet aFuncSet)

        Parameters:
            aFuncSet: OpenSim::FunctionSet &

        """
        return _opensim.CMC_TaskSet_setFunctionsForAcceleration(self, aFuncSet)


    def getNumActiveTaskFunctions(self):
        """
        getNumActiveTaskFunctions(CMC_TaskSet self) -> int

        Parameters:
            self: OpenSim::CMC_TaskSet const *

        """
        return _opensim.CMC_TaskSet_getNumActiveTaskFunctions(self)


    def getTaskPositions(self, aT):
        """
        getTaskPositions(CMC_TaskSet self, double aT) -> ArrayDouble

        Parameters:
            aT: double

        """
        return _opensim.CMC_TaskSet_getTaskPositions(self, aT)


    def getTaskVelocities(self, aT):
        """
        getTaskVelocities(CMC_TaskSet self, double aT) -> ArrayDouble

        Parameters:
            aT: double

        """
        return _opensim.CMC_TaskSet_getTaskVelocities(self, aT)


    def getTaskAccelerations(self, aT):
        """
        getTaskAccelerations(CMC_TaskSet self, double aT) -> ArrayDouble

        Parameters:
            aT: double

        """
        return _opensim.CMC_TaskSet_getTaskAccelerations(self, aT)


    def getPositionGains(self):
        """
        getPositionGains(CMC_TaskSet self) -> ArrayDouble

        Parameters:
            self: OpenSim::CMC_TaskSet *

        """
        return _opensim.CMC_TaskSet_getPositionGains(self)


    def getVelocityGains(self):
        """
        getVelocityGains(CMC_TaskSet self) -> ArrayDouble

        Parameters:
            self: OpenSim::CMC_TaskSet *

        """
        return _opensim.CMC_TaskSet_getVelocityGains(self)


    def getAccelerationGains(self):
        """
        getAccelerationGains(CMC_TaskSet self) -> ArrayDouble

        Parameters:
            self: OpenSim::CMC_TaskSet *

        """
        return _opensim.CMC_TaskSet_getAccelerationGains(self)


    def getPositionErrorsLast(self):
        """
        getPositionErrorsLast(CMC_TaskSet self) -> ArrayDouble

        Parameters:
            self: OpenSim::CMC_TaskSet *

        """
        return _opensim.CMC_TaskSet_getPositionErrorsLast(self)


    def getPositionErrors(self):
        """
        getPositionErrors(CMC_TaskSet self) -> ArrayDouble

        Parameters:
            self: OpenSim::CMC_TaskSet *

        """
        return _opensim.CMC_TaskSet_getPositionErrors(self)


    def getVelocityErrorsLast(self):
        """
        getVelocityErrorsLast(CMC_TaskSet self) -> ArrayDouble

        Parameters:
            self: OpenSim::CMC_TaskSet *

        """
        return _opensim.CMC_TaskSet_getVelocityErrorsLast(self)


    def getVelocityErrors(self):
        """
        getVelocityErrors(CMC_TaskSet self) -> ArrayDouble

        Parameters:
            self: OpenSim::CMC_TaskSet *

        """
        return _opensim.CMC_TaskSet_getVelocityErrors(self)


    def getWeights(self):
        """
        getWeights(CMC_TaskSet self) -> ArrayDouble

        Parameters:
            self: OpenSim::CMC_TaskSet *

        """
        return _opensim.CMC_TaskSet_getWeights(self)


    def getDesiredAccelerations(self):
        """
        getDesiredAccelerations(CMC_TaskSet self) -> ArrayDouble

        Parameters:
            self: OpenSim::CMC_TaskSet *

        """
        return _opensim.CMC_TaskSet_getDesiredAccelerations(self)


    def getAccelerations(self):
        """
        getAccelerations(CMC_TaskSet self) -> ArrayDouble

        Parameters:
            self: OpenSim::CMC_TaskSet *

        """
        return _opensim.CMC_TaskSet_getAccelerations(self)


    def recordErrorsAsLastErrors(self):
        """
        recordErrorsAsLastErrors(CMC_TaskSet self)

        Parameters:
            self: OpenSim::CMC_TaskSet *

        """
        return _opensim.CMC_TaskSet_recordErrorsAsLastErrors(self)


    def computeErrors(self, s, aT):
        """
        computeErrors(CMC_TaskSet self, State s, double aT)

        Parameters:
            s: SimTK::State const &
            aT: double

        """
        return _opensim.CMC_TaskSet_computeErrors(self, s, aT)


    def computeDesiredAccelerations(self, *args):
        """
        computeDesiredAccelerations(CMC_TaskSet self, State s, double aT)

        Parameters:
            s: SimTK::State const &
            aT: double

        computeDesiredAccelerations(CMC_TaskSet self, State s, double aTCurrent, double aTFuture)

        Parameters:
            s: SimTK::State const &
            aTCurrent: double
            aTFuture: double

        """
        return _opensim.CMC_TaskSet_computeDesiredAccelerations(self, *args)


    def computeAccelerations(self, s):
        """
        computeAccelerations(CMC_TaskSet self, State s)

        Parameters:
            s: SimTK::State const &

        """
        return _opensim.CMC_TaskSet_computeAccelerations(self, s)

CMC_TaskSet_swigregister = _opensim.CMC_TaskSet_swigregister
CMC_TaskSet_swigregister(CMC_TaskSet)

def CMC_TaskSet_safeDownCast(obj):
    """
    CMC_TaskSet_safeDownCast(OpenSimObject obj) -> CMC_TaskSet

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.CMC_TaskSet_safeDownCast(obj)

def CMC_TaskSet_getClassName():
    """CMC_TaskSet_getClassName() -> std::string const &"""
    return _opensim.CMC_TaskSet_getClassName()

class CMCTool(AbstractTool):
    """Proxy of C++ OpenSim::CMCTool class"""
    __swig_setmethods__ = {}
    for _s in [AbstractTool]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMCTool, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractTool]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMCTool, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> CMCTool

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.CMCTool_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(CMCTool self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.CMCTool_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.CMCTool_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(CMCTool self) -> CMCTool

        Parameters:
            self: OpenSim::CMCTool const *

        """
        return _opensim.CMCTool_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(CMCTool self) -> std::string const &

        Parameters:
            self: OpenSim::CMCTool const *

        """
        return _opensim.CMCTool_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_CMCTool
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::CMCTool self) -> CMCTool
        __init__(OpenSim::CMCTool self, std::string const & aFileName, bool aLoadModel=True) -> CMCTool

        Parameters:
            aFileName: std::string const &
            aLoadModel: bool

        __init__(OpenSim::CMCTool self, std::string const & aFileName) -> CMCTool

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::CMCTool self, CMCTool aObject) -> CMCTool

        Parameters:
            aObject: OpenSim::CMCTool const &

        """
        this = _opensim.new_CMCTool(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getExcludedActuators(self):
        """
        getExcludedActuators(CMCTool self) -> ArrayStr

        Parameters:
            self: OpenSim::CMCTool const *

        """
        return _opensim.CMCTool_getExcludedActuators(self)


    def setExcludedActuators(self, excludedActs):
        """
        setExcludedActuators(CMCTool self, ArrayStr excludedActs)

        Parameters:
            excludedActs: OpenSim::Array< std::string > const &

        """
        return _opensim.CMCTool_setExcludedActuators(self, excludedActs)


    def getDesiredPointsFileName(self):
        """
        getDesiredPointsFileName(CMCTool self) -> std::string const &

        Parameters:
            self: OpenSim::CMCTool *

        """
        return _opensim.CMCTool_getDesiredPointsFileName(self)


    def setDesiredPointsFileName(self, aFileName):
        """
        setDesiredPointsFileName(CMCTool self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.CMCTool_setDesiredPointsFileName(self, aFileName)


    def getDesiredKinematicsFileName(self):
        """
        getDesiredKinematicsFileName(CMCTool self) -> std::string const &

        Parameters:
            self: OpenSim::CMCTool *

        """
        return _opensim.CMCTool_getDesiredKinematicsFileName(self)


    def setDesiredKinematicsFileName(self, aFileName):
        """
        setDesiredKinematicsFileName(CMCTool self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.CMCTool_setDesiredKinematicsFileName(self, aFileName)


    def getConstraintsFileName(self):
        """
        getConstraintsFileName(CMCTool self) -> std::string const &

        Parameters:
            self: OpenSim::CMCTool *

        """
        return _opensim.CMCTool_getConstraintsFileName(self)


    def setConstraintsFileName(self, aFileName):
        """
        setConstraintsFileName(CMCTool self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.CMCTool_setConstraintsFileName(self, aFileName)


    def getTaskSetFileName(self):
        """
        getTaskSetFileName(CMCTool self) -> std::string const &

        Parameters:
            self: OpenSim::CMCTool *

        """
        return _opensim.CMCTool_getTaskSetFileName(self)


    def setTaskSetFileName(self, aFileName):
        """
        setTaskSetFileName(CMCTool self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.CMCTool_setTaskSetFileName(self, aFileName)


    def getRRAControlsFileName(self):
        """
        getRRAControlsFileName(CMCTool self) -> std::string const &

        Parameters:
            self: OpenSim::CMCTool *

        """
        return _opensim.CMCTool_getRRAControlsFileName(self)


    def setRRAControlsFileName(self, aFileName):
        """
        setRRAControlsFileName(CMCTool self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.CMCTool_setRRAControlsFileName(self, aFileName)


    def getLowpassCutoffFrequency(self):
        """
        getLowpassCutoffFrequency(CMCTool self) -> double

        Parameters:
            self: OpenSim::CMCTool const *

        """
        return _opensim.CMCTool_getLowpassCutoffFrequency(self)


    def setLowpassCutoffFrequency(self, aLowpassCutoffFrequency):
        """
        setLowpassCutoffFrequency(CMCTool self, double aLowpassCutoffFrequency)

        Parameters:
            aLowpassCutoffFrequency: double

        """
        return _opensim.CMCTool_setLowpassCutoffFrequency(self, aLowpassCutoffFrequency)


    def getTimeWindow(self):
        """
        getTimeWindow(CMCTool self) -> double

        Parameters:
            self: OpenSim::CMCTool const *

        """
        return _opensim.CMCTool_getTimeWindow(self)


    def setTimeWindow(self, aTargetDT):
        """
        setTimeWindow(CMCTool self, double aTargetDT)

        Parameters:
            aTargetDT: double

        """
        return _opensim.CMCTool_setTimeWindow(self, aTargetDT)


    def getExternalLoadsFileName(self):
        """
        getExternalLoadsFileName(CMCTool self) -> std::string const &

        Parameters:
            self: OpenSim::CMCTool const *

        """
        return _opensim.CMCTool_getExternalLoadsFileName(self)


    def setExternalLoadsFileName(self, aFileName):
        """
        setExternalLoadsFileName(CMCTool self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.CMCTool_setExternalLoadsFileName(self, aFileName)


    def getUseFastTarget(self):
        """
        getUseFastTarget(CMCTool self) -> bool

        Parameters:
            self: OpenSim::CMCTool const *

        """
        return _opensim.CMCTool_getUseFastTarget(self)


    def setUseFastTarget(self, useFastTarget):
        """
        setUseFastTarget(CMCTool self, bool useFastTarget)

        Parameters:
            useFastTarget: bool

        """
        return _opensim.CMCTool_setUseFastTarget(self, useFastTarget)


    def run(self):
        """
        run(CMCTool self) -> bool

        Parameters:
            self: OpenSim::CMCTool *

        """
        return _opensim.CMCTool_run(self)


    def getForceStorage(self):
        """
        getForceStorage(CMCTool self) -> Storage

        Parameters:
            self: OpenSim::CMCTool *

        """
        return _opensim.CMCTool_getForceStorage(self)


    def setOriginalForceSet(self, aForceSet):
        """
        setOriginalForceSet(CMCTool self, ForceSet aForceSet)

        Parameters:
            aForceSet: OpenSim::ForceSet const &

        """
        return _opensim.CMCTool_setOriginalForceSet(self, aForceSet)

CMCTool_swigregister = _opensim.CMCTool_swigregister
CMCTool_swigregister(CMCTool)

def CMCTool_safeDownCast(obj):
    """
    CMCTool_safeDownCast(OpenSimObject obj) -> CMCTool

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.CMCTool_safeDownCast(obj)

def CMCTool_getClassName():
    """CMCTool_getClassName() -> std::string const &"""
    return _opensim.CMCTool_getClassName()

class RRATool(AbstractTool):
    """Proxy of C++ OpenSim::RRATool class"""
    __swig_setmethods__ = {}
    for _s in [AbstractTool]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RRATool, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractTool]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RRATool, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> RRATool

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.RRATool_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(RRATool self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.RRATool_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.RRATool_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(RRATool self) -> RRATool

        Parameters:
            self: OpenSim::RRATool const *

        """
        return _opensim.RRATool_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(RRATool self) -> std::string const &

        Parameters:
            self: OpenSim::RRATool const *

        """
        return _opensim.RRATool_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_RRATool
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::RRATool self) -> RRATool
        __init__(OpenSim::RRATool self, std::string const & aFileName, bool aLoadModel=True) -> RRATool

        Parameters:
            aFileName: std::string const &
            aLoadModel: bool

        __init__(OpenSim::RRATool self, std::string const & aFileName) -> RRATool

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::RRATool self, RRATool aObject) -> RRATool

        Parameters:
            aObject: OpenSim::RRATool const &

        """
        this = _opensim.new_RRATool(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getDesiredPointsFileName(self):
        """
        getDesiredPointsFileName(RRATool self) -> std::string const &

        Parameters:
            self: OpenSim::RRATool *

        """
        return _opensim.RRATool_getDesiredPointsFileName(self)


    def setDesiredPointsFileName(self, aFileName):
        """
        setDesiredPointsFileName(RRATool self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.RRATool_setDesiredPointsFileName(self, aFileName)


    def getDesiredKinematicsFileName(self):
        """
        getDesiredKinematicsFileName(RRATool self) -> std::string const &

        Parameters:
            self: OpenSim::RRATool *

        """
        return _opensim.RRATool_getDesiredKinematicsFileName(self)


    def setDesiredKinematicsFileName(self, aFileName):
        """
        setDesiredKinematicsFileName(RRATool self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.RRATool_setDesiredKinematicsFileName(self, aFileName)


    def getConstraintsFileName(self):
        """
        getConstraintsFileName(RRATool self) -> std::string const &

        Parameters:
            self: OpenSim::RRATool *

        """
        return _opensim.RRATool_getConstraintsFileName(self)


    def setConstraintsFileName(self, aFileName):
        """
        setConstraintsFileName(RRATool self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.RRATool_setConstraintsFileName(self, aFileName)


    def getTaskSetFileName(self):
        """
        getTaskSetFileName(RRATool self) -> std::string const &

        Parameters:
            self: OpenSim::RRATool *

        """
        return _opensim.RRATool_getTaskSetFileName(self)


    def setTaskSetFileName(self, aFileName):
        """
        setTaskSetFileName(RRATool self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.RRATool_setTaskSetFileName(self, aFileName)


    def getOutputModelFileName(self):
        """
        getOutputModelFileName(RRATool self) -> std::string const &

        Parameters:
            self: OpenSim::RRATool *

        """
        return _opensim.RRATool_getOutputModelFileName(self)


    def setOutputModelFileName(self, aFileName):
        """
        setOutputModelFileName(RRATool self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.RRATool_setOutputModelFileName(self, aFileName)


    def getAdjustCOMToReduceResiduals(self):
        """
        getAdjustCOMToReduceResiduals(RRATool self) -> bool

        Parameters:
            self: OpenSim::RRATool *

        """
        return _opensim.RRATool_getAdjustCOMToReduceResiduals(self)


    def setAdjustCOMToReduceResiduals(self, aAdjust):
        """
        setAdjustCOMToReduceResiduals(RRATool self, bool aAdjust)

        Parameters:
            aAdjust: bool

        """
        return _opensim.RRATool_setAdjustCOMToReduceResiduals(self, aAdjust)


    def getAdjustedCOMBody(self):
        """
        getAdjustedCOMBody(RRATool self) -> std::string const &

        Parameters:
            self: OpenSim::RRATool *

        """
        return _opensim.RRATool_getAdjustedCOMBody(self)


    def setAdjustedCOMBody(self, aBody):
        """
        setAdjustedCOMBody(RRATool self, std::string const & aBody)

        Parameters:
            aBody: std::string const &

        """
        return _opensim.RRATool_setAdjustedCOMBody(self, aBody)


    def getLowpassCutoffFrequency(self):
        """
        getLowpassCutoffFrequency(RRATool self) -> double

        Parameters:
            self: OpenSim::RRATool const *

        """
        return _opensim.RRATool_getLowpassCutoffFrequency(self)


    def setLowpassCutoffFrequency(self, aLowpassCutoffFrequency):
        """
        setLowpassCutoffFrequency(RRATool self, double aLowpassCutoffFrequency)

        Parameters:
            aLowpassCutoffFrequency: double

        """
        return _opensim.RRATool_setLowpassCutoffFrequency(self, aLowpassCutoffFrequency)


    def getExternalLoadsFileName(self):
        """
        getExternalLoadsFileName(RRATool self) -> std::string const &

        Parameters:
            self: OpenSim::RRATool const *

        """
        return _opensim.RRATool_getExternalLoadsFileName(self)


    def setExternalLoadsFileName(self, aFileName):
        """
        setExternalLoadsFileName(RRATool self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.RRATool_setExternalLoadsFileName(self, aFileName)


    def run(self):
        """
        run(RRATool self) -> bool

        Parameters:
            self: OpenSim::RRATool *

        """
        return _opensim.RRATool_run(self)


    def getForceStorage(self):
        """
        getForceStorage(RRATool self) -> Storage

        Parameters:
            self: OpenSim::RRATool *

        """
        return _opensim.RRATool_getForceStorage(self)


    def setOriginalForceSet(self, aForceSet):
        """
        setOriginalForceSet(RRATool self, ForceSet aForceSet)

        Parameters:
            aForceSet: OpenSim::ForceSet const &

        """
        return _opensim.RRATool_setOriginalForceSet(self, aForceSet)


    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(RRATool self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters:
            aNode: SimTK::Xml::Element &
            versionNumber: int

        updateFromXMLNode(RRATool self, SimTK::Xml::Element & aNode)

        Parameters:
            aNode: SimTK::Xml::Element &

        """
        return _opensim.RRATool_updateFromXMLNode(self, aNode, versionNumber)

RRATool_swigregister = _opensim.RRATool_swigregister
RRATool_swigregister(RRATool)

def RRATool_safeDownCast(obj):
    """
    RRATool_safeDownCast(OpenSimObject obj) -> RRATool

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.RRATool_safeDownCast(obj)

def RRATool_getClassName():
    """RRATool_getClassName() -> std::string const &"""
    return _opensim.RRATool_getClassName()

class AnalyzeTool(AbstractTool):
    """Proxy of C++ OpenSim::AnalyzeTool class"""
    __swig_setmethods__ = {}
    for _s in [AbstractTool]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyzeTool, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractTool]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyzeTool, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> AnalyzeTool

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.AnalyzeTool_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(AnalyzeTool self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.AnalyzeTool_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.AnalyzeTool_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(AnalyzeTool self) -> AnalyzeTool

        Parameters:
            self: OpenSim::AnalyzeTool const *

        """
        return _opensim.AnalyzeTool_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(AnalyzeTool self) -> std::string const &

        Parameters:
            self: OpenSim::AnalyzeTool const *

        """
        return _opensim.AnalyzeTool_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_AnalyzeTool
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::AnalyzeTool self) -> AnalyzeTool
        __init__(OpenSim::AnalyzeTool self, std::string const & aFileName, bool aLoadModelAndInput=True) -> AnalyzeTool

        Parameters:
            aFileName: std::string const &
            aLoadModelAndInput: bool

        __init__(OpenSim::AnalyzeTool self, std::string const & aFileName) -> AnalyzeTool

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::AnalyzeTool self, AnalyzeTool aObject) -> AnalyzeTool

        Parameters:
            aObject: OpenSim::AnalyzeTool const &

        __init__(OpenSim::AnalyzeTool self, Model aModel) -> AnalyzeTool

        Parameters:
            aModel: OpenSim::Model &

        """
        this = _opensim.new_AnalyzeTool(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setStatesStorage(self, aStore):
        """
        setStatesStorage(AnalyzeTool self, Storage aStore)

        Parameters:
            aStore: OpenSim::Storage &

        """
        return _opensim.AnalyzeTool_setStatesStorage(self, aStore)


    def createStatesStorageFromCoordinatesAndSpeeds(aModel, aQStore, aUStore):
        """
        createStatesStorageFromCoordinatesAndSpeeds(Model aModel, Storage aQStore, Storage aUStore) -> Storage

        Parameters:
            aModel: OpenSim::Model const &
            aQStore: OpenSim::Storage const &
            aUStore: OpenSim::Storage const &

        """
        return _opensim.AnalyzeTool_createStatesStorageFromCoordinatesAndSpeeds(aModel, aQStore, aUStore)

    if _newclass:
        createStatesStorageFromCoordinatesAndSpeeds = staticmethod(createStatesStorageFromCoordinatesAndSpeeds)
    __swig_getmethods__["createStatesStorageFromCoordinatesAndSpeeds"] = lambda x: createStatesStorageFromCoordinatesAndSpeeds

    def getStatesStorage(self):
        """
        getStatesStorage(AnalyzeTool self) -> Storage

        Parameters:
            self: OpenSim::AnalyzeTool *

        """
        return _opensim.AnalyzeTool_getStatesStorage(self)


    def getStatesFileName(self):
        """
        getStatesFileName(AnalyzeTool self) -> std::string const &

        Parameters:
            self: OpenSim::AnalyzeTool const *

        """
        return _opensim.AnalyzeTool_getStatesFileName(self)


    def setStatesFileName(self, aFileName):
        """
        setStatesFileName(AnalyzeTool self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.AnalyzeTool_setStatesFileName(self, aFileName)


    def getCoordinatesFileName(self):
        """
        getCoordinatesFileName(AnalyzeTool self) -> std::string const &

        Parameters:
            self: OpenSim::AnalyzeTool const *

        """
        return _opensim.AnalyzeTool_getCoordinatesFileName(self)


    def setCoordinatesFileName(self, aFileName):
        """
        setCoordinatesFileName(AnalyzeTool self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.AnalyzeTool_setCoordinatesFileName(self, aFileName)


    def getSpeedsFileName(self):
        """
        getSpeedsFileName(AnalyzeTool self) -> std::string const &

        Parameters:
            self: OpenSim::AnalyzeTool const *

        """
        return _opensim.AnalyzeTool_getSpeedsFileName(self)


    def setSpeedsFileName(self, aFileName):
        """
        setSpeedsFileName(AnalyzeTool self, std::string const & aFileName)

        Parameters:
            aFileName: std::string const &

        """
        return _opensim.AnalyzeTool_setSpeedsFileName(self, aFileName)


    def getLowpassCutoffFrequency(self):
        """
        getLowpassCutoffFrequency(AnalyzeTool self) -> double

        Parameters:
            self: OpenSim::AnalyzeTool const *

        """
        return _opensim.AnalyzeTool_getLowpassCutoffFrequency(self)


    def setLowpassCutoffFrequency(self, aLowpassCutoffFrequency):
        """
        setLowpassCutoffFrequency(AnalyzeTool self, double aLowpassCutoffFrequency)

        Parameters:
            aLowpassCutoffFrequency: double

        """
        return _opensim.AnalyzeTool_setLowpassCutoffFrequency(self, aLowpassCutoffFrequency)


    def getLoadModelAndInput(self):
        """
        getLoadModelAndInput(AnalyzeTool self) -> bool const

        Parameters:
            self: OpenSim::AnalyzeTool const *

        """
        return _opensim.AnalyzeTool_getLoadModelAndInput(self)


    def setLoadModelAndInput(self, b):
        """
        setLoadModelAndInput(AnalyzeTool self, bool b)

        Parameters:
            b: bool

        """
        return _opensim.AnalyzeTool_setLoadModelAndInput(self, b)


    def setStatesFromMotion(self, s, aMotion, aInDegrees):
        """
        setStatesFromMotion(AnalyzeTool self, State s, Storage aMotion, bool aInDegrees)

        Parameters:
            s: SimTK::State const &
            aMotion: OpenSim::Storage const &
            aInDegrees: bool

        """
        return _opensim.AnalyzeTool_setStatesFromMotion(self, s, aMotion, aInDegrees)


    def loadStatesFromFile(self, s):
        """
        loadStatesFromFile(AnalyzeTool self, State s)

        Parameters:
            s: SimTK::State &

        """
        return _opensim.AnalyzeTool_loadStatesFromFile(self, s)


    def verifyControlsStates(self):
        """
        verifyControlsStates(AnalyzeTool self)

        Parameters:
            self: OpenSim::AnalyzeTool *

        """
        return _opensim.AnalyzeTool_verifyControlsStates(self)


    def setPrintResultFiles(self, aToWrite):
        """
        setPrintResultFiles(AnalyzeTool self, bool aToWrite)

        Parameters:
            aToWrite: bool

        """
        return _opensim.AnalyzeTool_setPrintResultFiles(self, aToWrite)


    def disableIntegrationOnlyProbes(self):
        """
        disableIntegrationOnlyProbes(AnalyzeTool self)

        Parameters:
            self: OpenSim::AnalyzeTool *

        """
        return _opensim.AnalyzeTool_disableIntegrationOnlyProbes(self)


    def run(self, *args):
        """
        run(AnalyzeTool self) -> bool
        run(AnalyzeTool self, bool plotting) -> bool

        Parameters:
            plotting: bool

        """
        return _opensim.AnalyzeTool_run(self, *args)

AnalyzeTool_swigregister = _opensim.AnalyzeTool_swigregister
AnalyzeTool_swigregister(AnalyzeTool)

def AnalyzeTool_safeDownCast(obj):
    """
    AnalyzeTool_safeDownCast(OpenSimObject obj) -> AnalyzeTool

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.AnalyzeTool_safeDownCast(obj)

def AnalyzeTool_getClassName():
    """AnalyzeTool_getClassName() -> std::string const &"""
    return _opensim.AnalyzeTool_getClassName()

def AnalyzeTool_createStatesStorageFromCoordinatesAndSpeeds(aModel, aQStore, aUStore):
    """
    AnalyzeTool_createStatesStorageFromCoordinatesAndSpeeds(Model aModel, Storage aQStore, Storage aUStore) -> Storage

    Parameters:
        aModel: OpenSim::Model const &
        aQStore: OpenSim::Storage const &
        aUStore: OpenSim::Storage const &

    """
    return _opensim.AnalyzeTool_createStatesStorageFromCoordinatesAndSpeeds(aModel, aQStore, aUStore)

class InverseKinematicsTool(Tool):
    """Proxy of C++ OpenSim::InverseKinematicsTool class"""
    __swig_setmethods__ = {}
    for _s in [Tool]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseKinematicsTool, name, value)
    __swig_getmethods__ = {}
    for _s in [Tool]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InverseKinematicsTool, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> InverseKinematicsTool

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.InverseKinematicsTool_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(InverseKinematicsTool self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.InverseKinematicsTool_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.InverseKinematicsTool_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(InverseKinematicsTool self) -> InverseKinematicsTool

        Parameters:
            self: OpenSim::InverseKinematicsTool const *

        """
        return _opensim.InverseKinematicsTool_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(InverseKinematicsTool self) -> std::string const &

        Parameters:
            self: OpenSim::InverseKinematicsTool const *

        """
        return _opensim.InverseKinematicsTool_getConcreteClassName(self)

    __swig_destroy__ = _opensim.delete_InverseKinematicsTool
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::InverseKinematicsTool self) -> InverseKinematicsTool
        __init__(OpenSim::InverseKinematicsTool self, std::string const & aFileName, bool aLoadModel=True) -> InverseKinematicsTool

        Parameters:
            aFileName: std::string const &
            aLoadModel: bool

        __init__(OpenSim::InverseKinematicsTool self, std::string const & aFileName) -> InverseKinematicsTool

        Parameters:
            aFileName: std::string const &

        __init__(OpenSim::InverseKinematicsTool self, InverseKinematicsTool aObject) -> InverseKinematicsTool

        Parameters:
            aObject: OpenSim::InverseKinematicsTool const &

        """
        this = _opensim.new_InverseKinematicsTool(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def registerTypes():
        """registerTypes()"""
        return _opensim.InverseKinematicsTool_registerTypes()

    if _newclass:
        registerTypes = staticmethod(registerTypes)
    __swig_getmethods__["registerTypes"] = lambda x: registerTypes

    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(InverseKinematicsTool self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters:
            aNode: SimTK::Xml::Element &
            versionNumber: int

        updateFromXMLNode(InverseKinematicsTool self, SimTK::Xml::Element & aNode)

        Parameters:
            aNode: SimTK::Xml::Element &

        """
        return _opensim.InverseKinematicsTool_updateFromXMLNode(self, aNode, versionNumber)


    def setModel(self, aModel):
        """
        setModel(InverseKinematicsTool self, Model aModel)

        Parameters:
            aModel: OpenSim::Model &

        """
        return _opensim.InverseKinematicsTool_setModel(self, aModel)


    def setStartTime(self, d):
        """
        setStartTime(InverseKinematicsTool self, double d)

        Parameters:
            d: double

        """
        return _opensim.InverseKinematicsTool_setStartTime(self, d)


    def getStartTime(self):
        """
        getStartTime(InverseKinematicsTool self) -> double

        Parameters:
            self: OpenSim::InverseKinematicsTool const *

        """
        return _opensim.InverseKinematicsTool_getStartTime(self)


    def setEndTime(self, d):
        """
        setEndTime(InverseKinematicsTool self, double d)

        Parameters:
            d: double

        """
        return _opensim.InverseKinematicsTool_setEndTime(self, d)


    def getEndTime(self):
        """
        getEndTime(InverseKinematicsTool self) -> double

        Parameters:
            self: OpenSim::InverseKinematicsTool const *

        """
        return _opensim.InverseKinematicsTool_getEndTime(self)


    def setMarkerDataFileName(self, markerDataFileName):
        """
        setMarkerDataFileName(InverseKinematicsTool self, std::string const & markerDataFileName)

        Parameters:
            markerDataFileName: std::string const &

        """
        return _opensim.InverseKinematicsTool_setMarkerDataFileName(self, markerDataFileName)


    def getMarkerDataFileName(self):
        """
        getMarkerDataFileName(InverseKinematicsTool self) -> std::string const &

        Parameters:
            self: OpenSim::InverseKinematicsTool const *

        """
        return _opensim.InverseKinematicsTool_getMarkerDataFileName(self)


    def setCoordinateFileName(self, coordDataFileName):
        """
        setCoordinateFileName(InverseKinematicsTool self, std::string const & coordDataFileName)

        Parameters:
            coordDataFileName: std::string const &

        """
        return _opensim.InverseKinematicsTool_setCoordinateFileName(self, coordDataFileName)


    def getCoordinateFileName(self):
        """
        getCoordinateFileName(InverseKinematicsTool self) -> std::string const &

        Parameters:
            self: OpenSim::InverseKinematicsTool const *

        """
        return _opensim.InverseKinematicsTool_getCoordinateFileName(self)


    def setOutputMotionFileName(self, aOutputMotionFileName):
        """
        setOutputMotionFileName(InverseKinematicsTool self, std::string const aOutputMotionFileName)

        Parameters:
            aOutputMotionFileName: std::string const

        """
        return _opensim.InverseKinematicsTool_setOutputMotionFileName(self, aOutputMotionFileName)


    def getOutputMotionFileName(self):
        """
        getOutputMotionFileName(InverseKinematicsTool self) -> std::string

        Parameters:
            self: OpenSim::InverseKinematicsTool *

        """
        return _opensim.InverseKinematicsTool_getOutputMotionFileName(self)


    def getIKTaskSet(self):
        """
        getIKTaskSet(InverseKinematicsTool self) -> IKTaskSet

        Parameters:
            self: OpenSim::InverseKinematicsTool *

        """
        return _opensim.InverseKinematicsTool_getIKTaskSet(self)


    def run(self):
        """
        run(InverseKinematicsTool self) -> bool

        Parameters:
            self: OpenSim::InverseKinematicsTool *

        """
        return _opensim.InverseKinematicsTool_run(self)

InverseKinematicsTool_swigregister = _opensim.InverseKinematicsTool_swigregister
InverseKinematicsTool_swigregister(InverseKinematicsTool)

def InverseKinematicsTool_safeDownCast(obj):
    """
    InverseKinematicsTool_safeDownCast(OpenSimObject obj) -> InverseKinematicsTool

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.InverseKinematicsTool_safeDownCast(obj)

def InverseKinematicsTool_getClassName():
    """InverseKinematicsTool_getClassName() -> std::string const &"""
    return _opensim.InverseKinematicsTool_getClassName()

def InverseKinematicsTool_registerTypes():
    """InverseKinematicsTool_registerTypes()"""
    return _opensim.InverseKinematicsTool_registerTypes()

class OpenSimContext(OpenSimObject):
    """Proxy of C++ OpenSim::OpenSimContext class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpenSimContext, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OpenSimContext, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> OpenSimContext

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.OpenSimContext_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(OpenSimContext self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.OpenSimContext_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.OpenSimContext_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(OpenSimContext self) -> OpenSimContext

        Parameters:
            self: OpenSim::OpenSimContext const *

        """
        return _opensim.OpenSimContext_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(OpenSimContext self) -> std::string const &

        Parameters:
            self: OpenSim::OpenSimContext const *

        """
        return _opensim.OpenSimContext_getConcreteClassName(self)


    def __init__(self, s, model):
        """
        __init__(OpenSim::OpenSimContext self, State s, Model model) -> OpenSimContext

        Parameters:
            s: SimTK::State *
            model: OpenSim::Model *

        """
        this = _opensim.new_OpenSimContext(s, model)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setState(self, s):
        """
        setState(OpenSimContext self, State s)

        Parameters:
            s: SimTK::State *

        """
        return _opensim.OpenSimContext_setState(self, s)


    def setModel(self, m):
        """
        setModel(OpenSimContext self, Model m)

        Parameters:
            m: OpenSim::Model *

        """
        return _opensim.OpenSimContext_setModel(self, m)


    def setStates(self, *args):
        """
        setStates(OpenSimContext self, ArrayDouble states)

        Parameters:
            states: OpenSim::Array< double > &

        setStates(OpenSimContext self, double [] statesBuffer)

        Parameters:
            statesBuffer: double []

        """
        return _opensim.OpenSimContext_setStates(self, *args)


    def computeConstrainedCoordinates(self, statesBuffer):
        """
        computeConstrainedCoordinates(OpenSimContext self, double [] statesBuffer)

        Parameters:
            statesBuffer: double []

        """
        return _opensim.OpenSimContext_computeConstrainedCoordinates(self, statesBuffer)


    def getStates(self, *args):
        """
        getStates(OpenSimContext self, double [] statesBuffer)

        Parameters:
            statesBuffer: double []

        getStates(OpenSimContext self, ArrayDouble rStates)

        Parameters:
            rStates: OpenSim::Array< double > &

        """
        return _opensim.OpenSimContext_getStates(self, *args)


    def getCurrentStateRef(self):
        """
        getCurrentStateRef(OpenSimContext self) -> State

        Parameters:
            self: OpenSim::OpenSimContext const *

        """
        return _opensim.OpenSimContext_getCurrentStateRef(self)


    def getCurrentStateCopy(self):
        """
        getCurrentStateCopy(OpenSimContext self) -> State

        Parameters:
            self: OpenSim::OpenSimContext const *

        """
        return _opensim.OpenSimContext_getCurrentStateCopy(self)


    def recreateSystemAfterSystemExistsKeepStage(self):
        """
        recreateSystemAfterSystemExistsKeepStage(OpenSimContext self)

        Parameters:
            self: OpenSim::OpenSimContext *

        """
        return _opensim.OpenSimContext_recreateSystemAfterSystemExistsKeepStage(self)


    def recreateSystemAfterSystemExists(self):
        """
        recreateSystemAfterSystemExists(OpenSimContext self)

        Parameters:
            self: OpenSim::OpenSimContext *

        """
        return _opensim.OpenSimContext_recreateSystemAfterSystemExists(self)


    def resetStateToDefault(self):
        """
        resetStateToDefault(OpenSimContext self)

        Parameters:
            self: OpenSim::OpenSimContext *

        """
        return _opensim.OpenSimContext_resetStateToDefault(self)


    def transformPosition(self, body, offset, gOffset):
        """
        transformPosition(OpenSimContext self, Body body, double [] offset, double [] gOffset)

        Parameters:
            body: OpenSim::Body const &
            offset: double []
            gOffset: double []

        """
        return _opensim.OpenSimContext_transformPosition(self, body, offset, gOffset)


    def getTransform(self, body):
        """
        getTransform(OpenSimContext self, Body body) -> Transform

        Parameters:
            body: OpenSim::Body const &

        """
        return _opensim.OpenSimContext_getTransform(self, body)


    def transform(self, ground, d, body, dragVectorBody):
        """
        transform(OpenSimContext self, Body ground, double [] d, Body body, double [] dragVectorBody)

        Parameters:
            ground: OpenSim::Body const &
            d: double []
            body: OpenSim::Body &
            dragVectorBody: double []

        """
        return _opensim.OpenSimContext_transform(self, ground, d, body, dragVectorBody)


    def getValue(self, coord):
        """
        getValue(OpenSimContext self, Coordinate coord) -> double

        Parameters:
            coord: OpenSim::Coordinate const &

        """
        return _opensim.OpenSimContext_getValue(self, coord)


    def getLocked(self, coord):
        """
        getLocked(OpenSimContext self, Coordinate coord) -> bool

        Parameters:
            coord: OpenSim::Coordinate const &

        """
        return _opensim.OpenSimContext_getLocked(self, coord)


    def setValue(self, coord, d, enforceConstraints=True):
        """
        setValue(OpenSimContext self, Coordinate coord, double d, bool enforceConstraints=True)

        Parameters:
            coord: OpenSim::Coordinate const &
            d: double
            enforceConstraints: bool

        setValue(OpenSimContext self, Coordinate coord, double d)

        Parameters:
            coord: OpenSim::Coordinate const &
            d: double

        """
        return _opensim.OpenSimContext_setValue(self, coord, d, enforceConstraints)


    def setClamped(self, coord, newValue):
        """
        setClamped(OpenSimContext self, Coordinate coord, bool newValue)

        Parameters:
            coord: OpenSim::Coordinate &
            newValue: bool

        """
        return _opensim.OpenSimContext_setClamped(self, coord, newValue)


    def getClamped(self, coord):
        """
        getClamped(OpenSimContext self, Coordinate coord) -> bool

        Parameters:
            coord: OpenSim::Coordinate const &

        """
        return _opensim.OpenSimContext_getClamped(self, coord)


    def setLocked(self, coord, newValue):
        """
        setLocked(OpenSimContext self, Coordinate coord, bool newValue)

        Parameters:
            coord: OpenSim::Coordinate &
            newValue: bool

        """
        return _opensim.OpenSimContext_setLocked(self, coord, newValue)


    def isPrescribed(self, coord):
        """
        isPrescribed(OpenSimContext self, Coordinate coord) -> bool

        Parameters:
            coord: OpenSim::Coordinate const &

        """
        return _opensim.OpenSimContext_isPrescribed(self, coord)


    def isConstrained(self, coord):
        """
        isConstrained(OpenSimContext self, Coordinate coord) -> bool

        Parameters:
            coord: OpenSim::Coordinate const &

        """
        return _opensim.OpenSimContext_isConstrained(self, coord)


    def isDisabled(self, *args):
        """
        isDisabled(OpenSimContext self, Constraint constraint) -> bool

        Parameters:
            constraint: OpenSim::Constraint const &

        isDisabled(OpenSimContext self, Force force) -> bool

        Parameters:
            force: OpenSim::Force const &

        """
        return _opensim.OpenSimContext_isDisabled(self, *args)


    def setDisabled(self, *args):
        """
        setDisabled(OpenSimContext self, Constraint constraint, bool disable)

        Parameters:
            constraint: OpenSim::Constraint &
            disable: bool

        setDisabled(OpenSimContext self, Force force, bool disable)

        Parameters:
            force: OpenSim::Force &
            disable: bool

        """
        return _opensim.OpenSimContext_setDisabled(self, *args)


    def getActivation(self, act):
        """
        getActivation(OpenSimContext self, Muscle act) -> double

        Parameters:
            act: OpenSim::Muscle &

        """
        return _opensim.OpenSimContext_getActivation(self, act)


    def getMuscleLength(self, act):
        """
        getMuscleLength(OpenSimContext self, Muscle act) -> double

        Parameters:
            act: OpenSim::Muscle &

        """
        return _opensim.OpenSimContext_getMuscleLength(self, act)


    def getCurrentPath(self, act):
        """
        getCurrentPath(OpenSimContext self, Muscle act) -> ArrayPathPoint

        Parameters:
            act: OpenSim::Muscle &

        """
        return _opensim.OpenSimContext_getCurrentPath(self, act)


    def getCurrentDisplayPath(self, path):
        """
        getCurrentDisplayPath(OpenSimContext self, GeometryPath path) -> ArrayPathPoint

        Parameters:
            path: OpenSim::GeometryPath &

        """
        return _opensim.OpenSimContext_getCurrentDisplayPath(self, path)


    def updateDisplayer(self, f):
        """
        updateDisplayer(OpenSimContext self, Force f)

        Parameters:
            f: OpenSim::Force &

        """
        return _opensim.OpenSimContext_updateDisplayer(self, f)


    def copyMuscle(self, arg2, to):
        """
        copyMuscle(OpenSimContext self, Muscle arg2, Muscle to)

        Parameters:
            from: OpenSim::Muscle &
            to: OpenSim::Muscle &

        """
        return _opensim.OpenSimContext_copyMuscle(self, arg2, to)


    def replacePropertyFunction(self, obj, aOldFunction, aNewFunction):
        """
        replacePropertyFunction(OpenSimContext self, OpenSimObject obj, Function aOldFunction, Function aNewFunction)

        Parameters:
            obj: OpenSim::Object &
            aOldFunction: OpenSim::Function *
            aNewFunction: OpenSim::Function *

        """
        return _opensim.OpenSimContext_replacePropertyFunction(self, obj, aOldFunction, aNewFunction)


    def setXFunction(self, mmp, newFunction):
        """
        setXFunction(OpenSimContext self, MovingPathPoint mmp, Function newFunction)

        Parameters:
            mmp: OpenSim::MovingPathPoint &
            newFunction: OpenSim::Function &

        """
        return _opensim.OpenSimContext_setXFunction(self, mmp, newFunction)


    def setYFunction(self, mmp, newFunction):
        """
        setYFunction(OpenSimContext self, MovingPathPoint mmp, Function newFunction)

        Parameters:
            mmp: OpenSim::MovingPathPoint &
            newFunction: OpenSim::Function &

        """
        return _opensim.OpenSimContext_setYFunction(self, mmp, newFunction)


    def setZFunction(self, mmp, newFunction):
        """
        setZFunction(OpenSimContext self, MovingPathPoint mmp, Function newFunction)

        Parameters:
            mmp: OpenSim::MovingPathPoint &
            newFunction: OpenSim::Function &

        """
        return _opensim.OpenSimContext_setZFunction(self, mmp, newFunction)


    def setXCoordinate(self, mmp, newCoord):
        """
        setXCoordinate(OpenSimContext self, MovingPathPoint mmp, Coordinate newCoord)

        Parameters:
            mmp: OpenSim::MovingPathPoint &
            newCoord: OpenSim::Coordinate &

        """
        return _opensim.OpenSimContext_setXCoordinate(self, mmp, newCoord)


    def setYCoordinate(self, mmp, newCoord):
        """
        setYCoordinate(OpenSimContext self, MovingPathPoint mmp, Coordinate newCoord)

        Parameters:
            mmp: OpenSim::MovingPathPoint &
            newCoord: OpenSim::Coordinate &

        """
        return _opensim.OpenSimContext_setYCoordinate(self, mmp, newCoord)


    def setZCoordinate(self, mmp, newCoord):
        """
        setZCoordinate(OpenSimContext self, MovingPathPoint mmp, Coordinate newCoord)

        Parameters:
            mmp: OpenSim::MovingPathPoint &
            newCoord: OpenSim::Coordinate &

        """
        return _opensim.OpenSimContext_setZCoordinate(self, mmp, newCoord)


    def setCoordinate(self, via, newCoord):
        """
        setCoordinate(OpenSimContext self, ConditionalPathPoint via, Coordinate newCoord)

        Parameters:
            via: OpenSim::ConditionalPathPoint &
            newCoord: OpenSim::Coordinate &

        """
        return _opensim.OpenSimContext_setCoordinate(self, via, newCoord)


    def setRangeMin(self, via, d):
        """
        setRangeMin(OpenSimContext self, ConditionalPathPoint via, double d)

        Parameters:
            via: OpenSim::ConditionalPathPoint &
            d: double

        """
        return _opensim.OpenSimContext_setRangeMin(self, via, d)


    def setRangeMax(self, via, d):
        """
        setRangeMax(OpenSimContext self, ConditionalPathPoint via, double d)

        Parameters:
            via: OpenSim::ConditionalPathPoint &
            d: double

        """
        return _opensim.OpenSimContext_setRangeMax(self, via, d)


    def replacePathPoint(self, p, mp, newPoint):
        """
        replacePathPoint(OpenSimContext self, GeometryPath p, PathPoint mp, PathPoint newPoint) -> bool

        Parameters:
            p: OpenSim::GeometryPath &
            mp: OpenSim::PathPoint &
            newPoint: OpenSim::PathPoint &

        """
        return _opensim.OpenSimContext_replacePathPoint(self, p, mp, newPoint)


    def setLocation(self, mp, i, d):
        """
        setLocation(OpenSimContext self, PathPoint mp, int i, double d)

        Parameters:
            mp: OpenSim::PathPoint &
            i: int
            d: double

        """
        return _opensim.OpenSimContext_setLocation(self, mp, i, d)


    def setEndPoint(self, mw, newEndPt):
        """
        setEndPoint(OpenSimContext self, PathWrap mw, int newEndPt)

        Parameters:
            mw: OpenSim::PathWrap &
            newEndPt: int

        """
        return _opensim.OpenSimContext_setEndPoint(self, mw, newEndPt)


    def addPathPoint(self, p, menuChoice, body):
        """
        addPathPoint(OpenSimContext self, GeometryPath p, int menuChoice, Body body)

        Parameters:
            p: OpenSim::GeometryPath &
            menuChoice: int
            body: OpenSim::Body &

        """
        return _opensim.OpenSimContext_addPathPoint(self, p, menuChoice, body)


    def deletePathPoint(self, p, menuChoice):
        """
        deletePathPoint(OpenSimContext self, GeometryPath p, int menuChoice) -> bool

        Parameters:
            p: OpenSim::GeometryPath &
            menuChoice: int

        """
        return _opensim.OpenSimContext_deletePathPoint(self, p, menuChoice)


    def isActivePathPoint(self, mp):
        """
        isActivePathPoint(OpenSimContext self, PathPoint mp) -> bool

        Parameters:
            mp: OpenSim::PathPoint &

        """
        return _opensim.OpenSimContext_isActivePathPoint(self, mp)


    def setStartPoint(self, mw, newStartPt):
        """
        setStartPoint(OpenSimContext self, PathWrap mw, int newStartPt)

        Parameters:
            mw: OpenSim::PathWrap &
            newStartPt: int

        """
        return _opensim.OpenSimContext_setStartPoint(self, mw, newStartPt)


    def addPathWrap(self, p, awo):
        """
        addPathWrap(OpenSimContext self, GeometryPath p, WrapObject awo)

        Parameters:
            p: OpenSim::GeometryPath &
            awo: OpenSim::WrapObject &

        """
        return _opensim.OpenSimContext_addPathWrap(self, p, awo)


    def moveUpPathWrap(self, p, num):
        """
        moveUpPathWrap(OpenSimContext self, GeometryPath p, int num)

        Parameters:
            p: OpenSim::GeometryPath &
            num: int

        """
        return _opensim.OpenSimContext_moveUpPathWrap(self, p, num)


    def moveDownPathWrap(self, p, num):
        """
        moveDownPathWrap(OpenSimContext self, GeometryPath p, int num)

        Parameters:
            p: OpenSim::GeometryPath &
            num: int

        """
        return _opensim.OpenSimContext_moveDownPathWrap(self, p, num)


    def deletePathWrap(self, p, num):
        """
        deletePathWrap(OpenSimContext self, GeometryPath p, int num)

        Parameters:
            p: OpenSim::GeometryPath &
            num: int

        """
        return _opensim.OpenSimContext_deletePathWrap(self, p, num)


    def setBody(self, *args):
        """
        setBody(OpenSimContext self, PathPoint pathPoint, Body newBody)

        Parameters:
            pathPoint: OpenSim::PathPoint &
            newBody: OpenSim::Body &

        setBody(OpenSimContext self, Marker currentMarker, Body newBody, bool b)

        Parameters:
            currentMarker: OpenSim::Marker &
            newBody: OpenSim::Body &
            b: bool

        """
        return _opensim.OpenSimContext_setBody(self, *args)


    def replaceMarkerSet(self, model, aMarkerSet):
        """
        replaceMarkerSet(OpenSimContext self, Model model, MarkerSet aMarkerSet) -> int

        Parameters:
            model: OpenSim::Model &
            aMarkerSet: OpenSim::MarkerSet &

        """
        return _opensim.OpenSimContext_replaceMarkerSet(self, model, aMarkerSet)


    def getCenterOfMassInGround(self, com):
        """
        getCenterOfMassInGround(OpenSimContext self, double [3] com)

        Parameters:
            com: double [3]

        """
        return _opensim.OpenSimContext_getCenterOfMassInGround(self, com)


    def step(self, analysis):
        """
        step(OpenSimContext self, Analysis analysis) -> int

        Parameters:
            analysis: OpenSim::Analysis &

        """
        return _opensim.OpenSimContext_step(self, analysis)


    def solveInverseKinematics(self, ikTool):
        """
        solveInverseKinematics(OpenSimContext self, InverseKinematicsTool ikTool) -> bool

        Parameters:
            ikTool: OpenSim::InverseKinematicsTool &

        """
        return _opensim.OpenSimContext_solveInverseKinematics(self, ikTool)


    def setStatesFromMotion(self, analyzeTool, aMotion, aInDegrees):
        """
        setStatesFromMotion(OpenSimContext self, AnalyzeTool analyzeTool, Storage aMotion, bool aInDegrees)

        Parameters:
            analyzeTool: OpenSim::AnalyzeTool &
            aMotion: OpenSim::Storage const &
            aInDegrees: bool

        """
        return _opensim.OpenSimContext_setStatesFromMotion(self, analyzeTool, aMotion, aInDegrees)


    def loadStatesFromFile(self, analyzeTool):
        """
        loadStatesFromFile(OpenSimContext self, AnalyzeTool analyzeTool)

        Parameters:
            analyzeTool: OpenSim::AnalyzeTool &

        """
        return _opensim.OpenSimContext_loadStatesFromFile(self, analyzeTool)


    def processModelScale(self, *args):
        """
        processModelScale(OpenSimContext self, ModelScaler modelScaler, Model aModel, std::string const & aPathToSubject, double aFinalMass=-1.0) -> bool

        Parameters:
            modelScaler: OpenSim::ModelScaler &
            aModel: OpenSim::Model *
            aPathToSubject: std::string const &
            aFinalMass: double

        processModelScale(OpenSimContext self, ModelScaler modelScaler, Model aModel, std::string const & aPathToSubject) -> bool

        Parameters:
            modelScaler: OpenSim::ModelScaler &
            aModel: OpenSim::Model *
            aPathToSubject: std::string const &

        processModelScale(OpenSimContext self, ModelScaler modelScaler, Model aModel) -> bool

        Parameters:
            modelScaler: OpenSim::ModelScaler &
            aModel: OpenSim::Model *

        """
        return _opensim.OpenSimContext_processModelScale(self, *args)


    def processModelMarkerPlacer(self, *args):
        """
        processModelMarkerPlacer(OpenSimContext self, MarkerPlacer markerPlacer, Model aModel, std::string const & aPathToSubject) -> bool

        Parameters:
            markerPlacer: OpenSim::MarkerPlacer &
            aModel: OpenSim::Model *
            aPathToSubject: std::string const &

        processModelMarkerPlacer(OpenSimContext self, MarkerPlacer markerPlacer, Model aModel) -> bool

        Parameters:
            markerPlacer: OpenSim::MarkerPlacer &
            aModel: OpenSim::Model *

        """
        return _opensim.OpenSimContext_processModelMarkerPlacer(self, *args)


    def computeMeasurementScaleFactor(self, modelScaler, aModel, aMarkerData, aMeasurement):
        """
        computeMeasurementScaleFactor(OpenSimContext self, ModelScaler modelScaler, Model aModel, MarkerData aMarkerData, Measurement aMeasurement) -> double

        Parameters:
            modelScaler: OpenSim::ModelScaler &
            aModel: OpenSim::Model const &
            aMarkerData: OpenSim::MarkerData const &
            aMeasurement: OpenSim::Measurement const &

        """
        return _opensim.OpenSimContext_computeMeasurementScaleFactor(self, modelScaler, aModel, aMarkerData, aMeasurement)


    def replaceTransformAxisFunction(self, aDof, aFunction):
        """
        replaceTransformAxisFunction(OpenSimContext self, TransformAxis aDof, Function aFunction)

        Parameters:
            aDof: OpenSim::TransformAxis &
            aFunction: OpenSim::Function &

        """
        return _opensim.OpenSimContext_replaceTransformAxisFunction(self, aDof, aFunction)


    def isNaN(v):
        """
        isNaN(double v) -> bool

        Parameters:
            v: double

        """
        return _opensim.OpenSimContext_isNaN(v)

    if _newclass:
        isNaN = staticmethod(isNaN)
    __swig_getmethods__["isNaN"] = lambda x: isNaN

    def getTime(self):
        """
        getTime(OpenSimContext self) -> double

        Parameters:
            self: OpenSim::OpenSimContext *

        """
        return _opensim.OpenSimContext_getTime(self)


    def getTransformAsDouble16(aTransform, flattened):
        """
        getTransformAsDouble16(Transform aTransform, double [] flattened)

        Parameters:
            aTransform: SimTK::Transform const &
            flattened: double []

        """
        return _opensim.OpenSimContext_getTransformAsDouble16(aTransform, flattened)

    if _newclass:
        getTransformAsDouble16 = staticmethod(getTransformAsDouble16)
    __swig_getmethods__["getTransformAsDouble16"] = lambda x: getTransformAsDouble16

    def setPropertiesFromState(self):
        """
        setPropertiesFromState(OpenSimContext self)

        Parameters:
            self: OpenSim::OpenSimContext *

        """
        return _opensim.OpenSimContext_setPropertiesFromState(self)


    def recreateSystemKeepStage(self):
        """
        recreateSystemKeepStage(OpenSimContext self)

        Parameters:
            self: OpenSim::OpenSimContext *

        """
        return _opensim.OpenSimContext_recreateSystemKeepStage(self)


    def realizePosition(self):
        """
        realizePosition(OpenSimContext self)

        Parameters:
            self: OpenSim::OpenSimContext *

        """
        return _opensim.OpenSimContext_realizePosition(self)


    def realizeVelocity(self):
        """
        realizeVelocity(OpenSimContext self)

        Parameters:
            self: OpenSim::OpenSimContext *

        """
        return _opensim.OpenSimContext_realizeVelocity(self)

    __swig_destroy__ = _opensim.delete_OpenSimContext
    __del__ = lambda self: None
OpenSimContext_swigregister = _opensim.OpenSimContext_swigregister
OpenSimContext_swigregister(OpenSimContext)

def OpenSimContext_safeDownCast(obj):
    """
    OpenSimContext_safeDownCast(OpenSimObject obj) -> OpenSimContext

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.OpenSimContext_safeDownCast(obj)

def OpenSimContext_getClassName():
    """OpenSimContext_getClassName() -> std::string const &"""
    return _opensim.OpenSimContext_getClassName()

def OpenSimContext_isNaN(v):
    """
    OpenSimContext_isNaN(double v) -> bool

    Parameters:
        v: double

    """
    return _opensim.OpenSimContext_isNaN(v)

def OpenSimContext_getTransformAsDouble16(aTransform, flattened):
    """
    OpenSimContext_getTransformAsDouble16(Transform aTransform, double [] flattened)

    Parameters:
        aTransform: SimTK::Transform const &
        flattened: double []

    """
    return _opensim.OpenSimContext_getTransformAsDouble16(aTransform, flattened)

class OpenSimJavaObject(OpenSimObject):
    """Proxy of C++ OpenSim::OpenSimJavaObject class"""
    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpenSimJavaObject, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OpenSimJavaObject, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> OpenSimJavaObject

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.OpenSimJavaObject_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(OpenSimJavaObject self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.OpenSimJavaObject_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.OpenSimJavaObject_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(OpenSimJavaObject self) -> OpenSimJavaObject

        Parameters:
            self: OpenSim::OpenSimJavaObject const *

        """
        return _opensim.OpenSimJavaObject_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(OpenSimJavaObject self) -> std::string const &

        Parameters:
            self: OpenSim::OpenSimJavaObject const *

        """
        return _opensim.OpenSimJavaObject_getConcreteClassName(self)


    def __init__(self):
        """__init__(OpenSim::OpenSimJavaObject self) -> OpenSimJavaObject"""
        this = _opensim.new_OpenSimJavaObject()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_OpenSimJavaObject
    __del__ = lambda self: None
OpenSimJavaObject_swigregister = _opensim.OpenSimJavaObject_swigregister
OpenSimJavaObject_swigregister(OpenSimJavaObject)

def OpenSimJavaObject_safeDownCast(obj):
    """
    OpenSimJavaObject_safeDownCast(OpenSimObject obj) -> OpenSimJavaObject

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.OpenSimJavaObject_safeDownCast(obj)

def OpenSimJavaObject_getClassName():
    """OpenSimJavaObject_getClassName() -> std::string const &"""
    return _opensim.OpenSimJavaObject_getClassName()

class AnalysisWrapper(Analysis):
    """Proxy of C++ OpenSim::AnalysisWrapper class"""
    __swig_setmethods__ = {}
    for _s in [Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalysisWrapper, name, value)
    __swig_getmethods__ = {}
    for _s in [Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalysisWrapper, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> AnalysisWrapper

        Parameters:
            obj: OpenSim::Object *

        """
        return _opensim.AnalysisWrapper_safeDownCast(obj)

    if _newclass:
        safeDownCast = staticmethod(safeDownCast)
    __swig_getmethods__["safeDownCast"] = lambda x: safeDownCast

    def assign(self, aObject):
        """
        assign(AnalysisWrapper self, OpenSimObject aObject)

        Parameters:
            aObject: OpenSim::Object &

        """
        return _opensim.AnalysisWrapper_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _opensim.AnalysisWrapper_getClassName()

    if _newclass:
        getClassName = staticmethod(getClassName)
    __swig_getmethods__["getClassName"] = lambda x: getClassName

    def clone(self):
        """
        clone(AnalysisWrapper self) -> AnalysisWrapper

        Parameters:
            self: OpenSim::AnalysisWrapper const *

        """
        return _opensim.AnalysisWrapper_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(AnalysisWrapper self) -> std::string const &

        Parameters:
            self: OpenSim::AnalysisWrapper const *

        """
        return _opensim.AnalysisWrapper_getConcreteClassName(self)


    def __init__(self, aModel=None):
        """
        __init__(OpenSim::AnalysisWrapper self, Model aModel=None) -> AnalysisWrapper

        Parameters:
            aModel: OpenSim::Model *

        __init__(OpenSim::AnalysisWrapper self) -> AnalysisWrapper

        Parameters:
            self: PyObject *

        """
        if self.__class__ == AnalysisWrapper:
            _self = None
        else:
            _self = self
        this = _opensim.new_AnalysisWrapper(_self, aModel)
        try:
            self.this.append(this)
        except:
            self.this = this

    def step(self, s, stepNumber):
        """
        step(AnalysisWrapper self, State s, int stepNumber) -> int

        Parameters:
            s: SimTK::State const &
            stepNumber: int

        """
        return _opensim.AnalysisWrapper_step(self, s, stepNumber)


    def getStates(self, statesBuffer):
        """
        getStates(AnalysisWrapper self, double [] statesBuffer)

        Parameters:
            statesBuffer: double []

        """
        return _opensim.AnalysisWrapper_getStates(self, statesBuffer)


    def getSimulationTime(self):
        """
        getSimulationTime(AnalysisWrapper self) -> double

        Parameters:
            self: OpenSim::AnalysisWrapper *

        """
        return _opensim.AnalysisWrapper_getSimulationTime(self)

    __swig_destroy__ = _opensim.delete_AnalysisWrapper
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _opensim.disown_AnalysisWrapper(self)
        return weakref_proxy(self)
AnalysisWrapper_swigregister = _opensim.AnalysisWrapper_swigregister
AnalysisWrapper_swigregister(AnalysisWrapper)

def AnalysisWrapper_safeDownCast(obj):
    """
    AnalysisWrapper_safeDownCast(OpenSimObject obj) -> AnalysisWrapper

    Parameters:
        obj: OpenSim::Object *

    """
    return _opensim.AnalysisWrapper_safeDownCast(obj)

def AnalysisWrapper_getClassName():
    """AnalysisWrapper_getClassName() -> std::string const &"""
    return _opensim.AnalysisWrapper_getClassName()

class InterruptCallback(AnalysisWrapper):
    """Proxy of C++ OpenSim::InterruptCallback class"""
    __swig_setmethods__ = {}
    for _s in [AnalysisWrapper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterruptCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [AnalysisWrapper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterruptCallback, name)
    __repr__ = _swig_repr

    def __init__(self, aModel=None):
        """
        __init__(OpenSim::InterruptCallback self, Model aModel=None) -> InterruptCallback

        Parameters:
            aModel: OpenSim::Model *

        __init__(OpenSim::InterruptCallback self) -> InterruptCallback
        """
        this = _opensim.new_InterruptCallback(aModel)
        try:
            self.this.append(this)
        except:
            self.this = this

    def interrupt(self):
        """
        interrupt(InterruptCallback self)

        Parameters:
            self: OpenSim::InterruptCallback *

        """
        return _opensim.InterruptCallback_interrupt(self)


    def step(self, s, stepNumber):
        """
        step(InterruptCallback self, State s, int stepNumber) -> int

        Parameters:
            s: SimTK::State const &
            stepNumber: int

        """
        return _opensim.InterruptCallback_step(self, s, stepNumber)

    __swig_destroy__ = _opensim.delete_InterruptCallback
    __del__ = lambda self: None
InterruptCallback_swigregister = _opensim.InterruptCallback_swigregister
InterruptCallback_swigregister(InterruptCallback)

class PropertyHelper(_object):
    """Proxy of C++ OpenSim::PropertyHelper class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyHelper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyHelper, name)
    __repr__ = _swig_repr

    def getValueBool(p, index=-1):
        """
        getValueBool(AbstractProperty p, int index=-1) -> bool

        Parameters:
            p: OpenSim::AbstractProperty const &
            index: int

        getValueBool(AbstractProperty p) -> bool

        Parameters:
            p: OpenSim::AbstractProperty const &

        """
        return _opensim.PropertyHelper_getValueBool(p, index)

    if _newclass:
        getValueBool = staticmethod(getValueBool)
    __swig_getmethods__["getValueBool"] = lambda x: getValueBool

    def setValueBool(v, p, index=-1):
        """
        setValueBool(bool v, AbstractProperty p, int index=-1)

        Parameters:
            v: bool
            p: OpenSim::AbstractProperty &
            index: int

        setValueBool(bool v, AbstractProperty p)

        Parameters:
            v: bool
            p: OpenSim::AbstractProperty &

        """
        return _opensim.PropertyHelper_setValueBool(v, p, index)

    if _newclass:
        setValueBool = staticmethod(setValueBool)
    __swig_getmethods__["setValueBool"] = lambda x: setValueBool

    def appendValueBool(v, p):
        """
        appendValueBool(bool v, AbstractProperty p)

        Parameters:
            v: bool
            p: OpenSim::AbstractProperty &

        """
        return _opensim.PropertyHelper_appendValueBool(v, p)

    if _newclass:
        appendValueBool = staticmethod(appendValueBool)
    __swig_getmethods__["appendValueBool"] = lambda x: appendValueBool

    def getValueInt(p, index=-1):
        """
        getValueInt(AbstractProperty p, int index=-1) -> int

        Parameters:
            p: OpenSim::AbstractProperty const &
            index: int

        getValueInt(AbstractProperty p) -> int

        Parameters:
            p: OpenSim::AbstractProperty const &

        """
        return _opensim.PropertyHelper_getValueInt(p, index)

    if _newclass:
        getValueInt = staticmethod(getValueInt)
    __swig_getmethods__["getValueInt"] = lambda x: getValueInt

    def setValueInt(v, p, index=-1):
        """
        setValueInt(int v, AbstractProperty p, int index=-1)

        Parameters:
            v: int
            p: OpenSim::AbstractProperty &
            index: int

        setValueInt(int v, AbstractProperty p)

        Parameters:
            v: int
            p: OpenSim::AbstractProperty &

        """
        return _opensim.PropertyHelper_setValueInt(v, p, index)

    if _newclass:
        setValueInt = staticmethod(setValueInt)
    __swig_getmethods__["setValueInt"] = lambda x: setValueInt

    def appendValueInt(v, p):
        """
        appendValueInt(int v, AbstractProperty p)

        Parameters:
            v: int
            p: OpenSim::AbstractProperty &

        """
        return _opensim.PropertyHelper_appendValueInt(v, p)

    if _newclass:
        appendValueInt = staticmethod(appendValueInt)
    __swig_getmethods__["appendValueInt"] = lambda x: appendValueInt

    def getValueDouble(p, index=-1):
        """
        getValueDouble(AbstractProperty p, int index=-1) -> double

        Parameters:
            p: OpenSim::AbstractProperty const &
            index: int

        getValueDouble(AbstractProperty p) -> double

        Parameters:
            p: OpenSim::AbstractProperty const &

        """
        return _opensim.PropertyHelper_getValueDouble(p, index)

    if _newclass:
        getValueDouble = staticmethod(getValueDouble)
    __swig_getmethods__["getValueDouble"] = lambda x: getValueDouble

    def setValueDouble(v, p, index=-1):
        """
        setValueDouble(double v, AbstractProperty p, int index=-1)

        Parameters:
            v: double
            p: OpenSim::AbstractProperty &
            index: int

        setValueDouble(double v, AbstractProperty p)

        Parameters:
            v: double
            p: OpenSim::AbstractProperty &

        """
        return _opensim.PropertyHelper_setValueDouble(v, p, index)

    if _newclass:
        setValueDouble = staticmethod(setValueDouble)
    __swig_getmethods__["setValueDouble"] = lambda x: setValueDouble

    def appendValueDouble(v, p):
        """
        appendValueDouble(double v, AbstractProperty p)

        Parameters:
            v: double
            p: OpenSim::AbstractProperty &

        """
        return _opensim.PropertyHelper_appendValueDouble(v, p)

    if _newclass:
        appendValueDouble = staticmethod(appendValueDouble)
    __swig_getmethods__["appendValueDouble"] = lambda x: appendValueDouble

    def getValueString(p, index=-1):
        """
        getValueString(AbstractProperty p, int index=-1) -> std::string

        Parameters:
            p: OpenSim::AbstractProperty const &
            index: int

        getValueString(AbstractProperty p) -> std::string

        Parameters:
            p: OpenSim::AbstractProperty const &

        """
        return _opensim.PropertyHelper_getValueString(p, index)

    if _newclass:
        getValueString = staticmethod(getValueString)
    __swig_getmethods__["getValueString"] = lambda x: getValueString

    def setValueString(v, p, index=-1):
        """
        setValueString(std::string const & v, AbstractProperty p, int index=-1)

        Parameters:
            v: std::string const &
            p: OpenSim::AbstractProperty &
            index: int

        setValueString(std::string const & v, AbstractProperty p)

        Parameters:
            v: std::string const &
            p: OpenSim::AbstractProperty &

        """
        return _opensim.PropertyHelper_setValueString(v, p, index)

    if _newclass:
        setValueString = staticmethod(setValueString)
    __swig_getmethods__["setValueString"] = lambda x: setValueString

    def appendValueString(v, p):
        """
        appendValueString(std::string const & v, AbstractProperty p)

        Parameters:
            v: std::string const &
            p: OpenSim::AbstractProperty &

        """
        return _opensim.PropertyHelper_appendValueString(v, p)

    if _newclass:
        appendValueString = staticmethod(appendValueString)
    __swig_getmethods__["appendValueString"] = lambda x: appendValueString

    def getValueTransform(p, index):
        """
        getValueTransform(AbstractProperty p, int index) -> double

        Parameters:
            p: OpenSim::AbstractProperty const &
            index: int

        """
        return _opensim.PropertyHelper_getValueTransform(p, index)

    if _newclass:
        getValueTransform = staticmethod(getValueTransform)
    __swig_getmethods__["getValueTransform"] = lambda x: getValueTransform

    def setValueTransform(v, p, index):
        """
        setValueTransform(double v, AbstractProperty p, int index)

        Parameters:
            v: double
            p: OpenSim::AbstractProperty &
            index: int

        """
        return _opensim.PropertyHelper_setValueTransform(v, p, index)

    if _newclass:
        setValueTransform = staticmethod(setValueTransform)
    __swig_getmethods__["setValueTransform"] = lambda x: setValueTransform

    def getValueVec3(p, index):
        """
        getValueVec3(AbstractProperty p, int index) -> double

        Parameters:
            p: OpenSim::AbstractProperty const &
            index: int

        """
        return _opensim.PropertyHelper_getValueVec3(p, index)

    if _newclass:
        getValueVec3 = staticmethod(getValueVec3)
    __swig_getmethods__["getValueVec3"] = lambda x: getValueVec3

    def setValueVec3(v, p, index):
        """
        setValueVec3(double v, AbstractProperty p, int index)

        Parameters:
            v: double
            p: OpenSim::AbstractProperty &
            index: int

        """
        return _opensim.PropertyHelper_setValueVec3(v, p, index)

    if _newclass:
        setValueVec3 = staticmethod(setValueVec3)
    __swig_getmethods__["setValueVec3"] = lambda x: setValueVec3

    def getValueStringArray(p):
        """
        getValueStringArray(AbstractProperty p) -> ArrayStr

        Parameters:
            p: OpenSim::AbstractProperty const &

        """
        return _opensim.PropertyHelper_getValueStringArray(p)

    if _newclass:
        getValueStringArray = staticmethod(getValueStringArray)
    __swig_getmethods__["getValueStringArray"] = lambda x: getValueStringArray

    def setValueStringArray(p, aStringArray):
        """
        setValueStringArray(AbstractProperty p, ArrayStr aStringArray)

        Parameters:
            p: OpenSim::AbstractProperty &
            aStringArray: OpenSim::Array< std::string > &

        """
        return _opensim.PropertyHelper_setValueStringArray(p, aStringArray)

    if _newclass:
        setValueStringArray = staticmethod(setValueStringArray)
    __swig_getmethods__["setValueStringArray"] = lambda x: setValueStringArray

    def removeItem(p, index):
        """
        removeItem(AbstractProperty p, int index)

        Parameters:
            p: OpenSim::AbstractProperty &
            index: int

        """
        return _opensim.PropertyHelper_removeItem(p, index)

    if _newclass:
        removeItem = staticmethod(removeItem)
    __swig_getmethods__["removeItem"] = lambda x: removeItem

    def __init__(self):
        """__init__(OpenSim::PropertyHelper self) -> PropertyHelper"""
        this = _opensim.new_PropertyHelper()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opensim.delete_PropertyHelper
    __del__ = lambda self: None
PropertyHelper_swigregister = _opensim.PropertyHelper_swigregister
PropertyHelper_swigregister(PropertyHelper)

def PropertyHelper_getValueBool(p, index=-1):
    """
    getValueBool(AbstractProperty p, int index=-1) -> bool

    Parameters:
        p: OpenSim::AbstractProperty const &
        index: int

    PropertyHelper_getValueBool(AbstractProperty p) -> bool

    Parameters:
        p: OpenSim::AbstractProperty const &

    """
    return _opensim.PropertyHelper_getValueBool(p, index)

def PropertyHelper_setValueBool(v, p, index=-1):
    """
    setValueBool(bool v, AbstractProperty p, int index=-1)

    Parameters:
        v: bool
        p: OpenSim::AbstractProperty &
        index: int

    PropertyHelper_setValueBool(bool v, AbstractProperty p)

    Parameters:
        v: bool
        p: OpenSim::AbstractProperty &

    """
    return _opensim.PropertyHelper_setValueBool(v, p, index)

def PropertyHelper_appendValueBool(v, p):
    """
    PropertyHelper_appendValueBool(bool v, AbstractProperty p)

    Parameters:
        v: bool
        p: OpenSim::AbstractProperty &

    """
    return _opensim.PropertyHelper_appendValueBool(v, p)

def PropertyHelper_getValueInt(p, index=-1):
    """
    getValueInt(AbstractProperty p, int index=-1) -> int

    Parameters:
        p: OpenSim::AbstractProperty const &
        index: int

    PropertyHelper_getValueInt(AbstractProperty p) -> int

    Parameters:
        p: OpenSim::AbstractProperty const &

    """
    return _opensim.PropertyHelper_getValueInt(p, index)

def PropertyHelper_setValueInt(v, p, index=-1):
    """
    setValueInt(int v, AbstractProperty p, int index=-1)

    Parameters:
        v: int
        p: OpenSim::AbstractProperty &
        index: int

    PropertyHelper_setValueInt(int v, AbstractProperty p)

    Parameters:
        v: int
        p: OpenSim::AbstractProperty &

    """
    return _opensim.PropertyHelper_setValueInt(v, p, index)

def PropertyHelper_appendValueInt(v, p):
    """
    PropertyHelper_appendValueInt(int v, AbstractProperty p)

    Parameters:
        v: int
        p: OpenSim::AbstractProperty &

    """
    return _opensim.PropertyHelper_appendValueInt(v, p)

def PropertyHelper_getValueDouble(p, index=-1):
    """
    getValueDouble(AbstractProperty p, int index=-1) -> double

    Parameters:
        p: OpenSim::AbstractProperty const &
        index: int

    PropertyHelper_getValueDouble(AbstractProperty p) -> double

    Parameters:
        p: OpenSim::AbstractProperty const &

    """
    return _opensim.PropertyHelper_getValueDouble(p, index)

def PropertyHelper_setValueDouble(v, p, index=-1):
    """
    setValueDouble(double v, AbstractProperty p, int index=-1)

    Parameters:
        v: double
        p: OpenSim::AbstractProperty &
        index: int

    PropertyHelper_setValueDouble(double v, AbstractProperty p)

    Parameters:
        v: double
        p: OpenSim::AbstractProperty &

    """
    return _opensim.PropertyHelper_setValueDouble(v, p, index)

def PropertyHelper_appendValueDouble(v, p):
    """
    PropertyHelper_appendValueDouble(double v, AbstractProperty p)

    Parameters:
        v: double
        p: OpenSim::AbstractProperty &

    """
    return _opensim.PropertyHelper_appendValueDouble(v, p)

def PropertyHelper_getValueString(p, index=-1):
    """
    getValueString(AbstractProperty p, int index=-1) -> std::string

    Parameters:
        p: OpenSim::AbstractProperty const &
        index: int

    PropertyHelper_getValueString(AbstractProperty p) -> std::string

    Parameters:
        p: OpenSim::AbstractProperty const &

    """
    return _opensim.PropertyHelper_getValueString(p, index)

def PropertyHelper_setValueString(v, p, index=-1):
    """
    setValueString(std::string const & v, AbstractProperty p, int index=-1)

    Parameters:
        v: std::string const &
        p: OpenSim::AbstractProperty &
        index: int

    PropertyHelper_setValueString(std::string const & v, AbstractProperty p)

    Parameters:
        v: std::string const &
        p: OpenSim::AbstractProperty &

    """
    return _opensim.PropertyHelper_setValueString(v, p, index)

def PropertyHelper_appendValueString(v, p):
    """
    PropertyHelper_appendValueString(std::string const & v, AbstractProperty p)

    Parameters:
        v: std::string const &
        p: OpenSim::AbstractProperty &

    """
    return _opensim.PropertyHelper_appendValueString(v, p)

def PropertyHelper_getValueTransform(p, index):
    """
    PropertyHelper_getValueTransform(AbstractProperty p, int index) -> double

    Parameters:
        p: OpenSim::AbstractProperty const &
        index: int

    """
    return _opensim.PropertyHelper_getValueTransform(p, index)

def PropertyHelper_setValueTransform(v, p, index):
    """
    PropertyHelper_setValueTransform(double v, AbstractProperty p, int index)

    Parameters:
        v: double
        p: OpenSim::AbstractProperty &
        index: int

    """
    return _opensim.PropertyHelper_setValueTransform(v, p, index)

def PropertyHelper_getValueVec3(p, index):
    """
    PropertyHelper_getValueVec3(AbstractProperty p, int index) -> double

    Parameters:
        p: OpenSim::AbstractProperty const &
        index: int

    """
    return _opensim.PropertyHelper_getValueVec3(p, index)

def PropertyHelper_setValueVec3(v, p, index):
    """
    PropertyHelper_setValueVec3(double v, AbstractProperty p, int index)

    Parameters:
        v: double
        p: OpenSim::AbstractProperty &
        index: int

    """
    return _opensim.PropertyHelper_setValueVec3(v, p, index)

def PropertyHelper_getValueStringArray(p):
    """
    PropertyHelper_getValueStringArray(AbstractProperty p) -> ArrayStr

    Parameters:
        p: OpenSim::AbstractProperty const &

    """
    return _opensim.PropertyHelper_getValueStringArray(p)

def PropertyHelper_setValueStringArray(p, aStringArray):
    """
    PropertyHelper_setValueStringArray(AbstractProperty p, ArrayStr aStringArray)

    Parameters:
        p: OpenSim::AbstractProperty &
        aStringArray: OpenSim::Array< std::string > &

    """
    return _opensim.PropertyHelper_setValueStringArray(p, aStringArray)

def PropertyHelper_removeItem(p, index):
    """
    PropertyHelper_removeItem(AbstractProperty p, int index)

    Parameters:
        p: OpenSim::AbstractProperty &
        index: int

    """
    return _opensim.PropertyHelper_removeItem(p, index)

# This file is compatible with both classic and new-style classes.


