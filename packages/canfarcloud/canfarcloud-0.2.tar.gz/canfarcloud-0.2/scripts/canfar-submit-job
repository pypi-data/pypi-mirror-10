#!python
# -*- coding: utf-8 -*-
# ***********************************************************************
# ******************  CANADIAN ASTRONOMY DATA CENTRE  *******************
# *************  CENTRE CANADIEN DE DONNÉES ASTRONOMIQUES  **************
#
# (c) 2015.                            (c) 2015.
#  Government of Canada                 Gouvernement du Canada
#  National Research Council            Conseil national de recherches
#  Ottawa, Canada, K1A 0R6              Ottawa, Canada, K1A 0R6
#  All rights reserved                  Tous droits réservés
#
#  NRC disclaims any warranties,        Le CNRC dénie toute garantie
#  expressed, implied, or               énoncée, implicite ou légale,
#  statutory, of any kind with          de quelque nature que ce
#  respect to the software,             soit, concernant le logiciel,
#  including without limitation         y compris sans restriction
#  any warranty of merchantability      toute garantie de valeur
#  or fitness for a particular          marchande ou de pertinence
#  purpose. NRC shall not be            pour un usage particulier.
#  liable in any event for any          Le CNRC ne pourra en aucun cas
#  damages, whether direct or           être tenu responsable de tout
#  indirect, special or general,        dommage, direct ou indirect,
#  consequential or incidental,         particulier ou général,
#  arising from the use of the          accessoire ou fortuit, résultant
#  software.  Neither the name          de l'utilisation du logiciel. Ni
#  of the National Research             le nom du Conseil National de
#  Council of Canada nor the            Recherches du Canada ni les noms
#  names of its contributors may        de ses  participants ne peuvent
#  be used to endorse or promote        être utilisés pour approuver ou
#  products derived from this           promouvoir les produits dérivés
#  software without specific prior      de ce logiciel sans autorisation
#  written permission.                  préalable et particulière
#                                       par écrit.
#
#  This file is part of the             Ce fichier fait partie du projet
#  OpenCADC project.                    OpenCADC.
#
#  OpenCADC is free software:           OpenCADC est un logiciel libre ;
#  you can redistribute it and/or       vous pouvez le redistribuer ou le
#  modify it under the terms of         modifier suivant les termes de
#  the GNU Affero General Public        la “GNU Affero General Public
#  License as published by the          License” telle que publiée
#  Free Software Foundation,            par la Free Software Foundation
#  either version 3 of the              : soit la version 3 de cette
#  License, or (at your option)         licence, soit (à votre gré)
#  any later version.                   toute version ultérieure.
#
#  OpenCADC is distributed in the       OpenCADC est distribué
#  hope that it will be useful,         dans l’espoir qu’il vous
#  but WITHOUT ANY WARRANTY;            sera utile, mais SANS AUCUNE
#  without even the implied             GARANTIE : sans même la garantie
#  warranty of MERCHANTABILITY          implicite de COMMERCIALISABILITÉ
#  or FITNESS FOR A PARTICULAR          ni d’ADÉQUATION À UN OBJECTIF
#  PURPOSE.  See the GNU Affero         PARTICULIER. Consultez la Licence
#  General Public License for           Générale Publique GNU Affero
#  more details.                        pour plus de détails.
#
#  You should have received             Vous devriez avoir reçu une
#  a copy of the GNU Affero             copie de la Licence Générale
#  General Public License along         Publique GNU Affero avec
#  with OpenCADC.  If not, see          OpenCADC ; si ce n’est
#  <http://www.gnu.org/licenses/>.      pas le cas, consultez :
#                                       <http://www.gnu.org/licenses/>.
#
# ***********************************************************************

"""Submit a batch job to the proc service"""

import os
import sys
import traceback
from argparse import RawDescriptionHelpFormatter

from canfar.__version__ import version
from canfar.common.parser import BaseParser
from canfar.proc.client import ProcClient

from keystoneclient.apiclient import exceptions as keystone_exceptions

description = "Submit a job to the CANFAR proc (batch) service."
epilog = """Examples (assuming OS_* environment variables already set)

Submit a job:

  $ canfar-submit-job job.sub vm_image p1-1.5gb

Share image with batch tenant and display job without POSTing to service:

  $ canfar-submit-job job.sub vm_image p1-1.5gb --nopost

"""


if __name__=='__main__':

    # Parse the command line
    parser = BaseParser(description=description, epilog=epilog,
                        version=version, usecert=False,
                        formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('jobfile',help='Condor job description file')
    parser.add_argument('image',help='VM image for job (name or ID)')
    parser.add_argument('flavor',help='hardware flavor (name or ID)')
    parser.add_argument('--jobscriptonvm', default=None,
                        help='Execution script that already exists on VM')
    parser.add_argument('--nopost',default=False,action='store_true',
                        help='Share VM but do not actually POST to service')
    parser.add_argument('--os-username',
                        help='user name if OS_USERNAME not set')
    parser.add_argument('--os-password',help='password if OS_PASSWORD not set')
    parser.add_argument('--os-tenant-name',
                        help='tenant name for image if OS_TENANT_NAME not set')
    parser.add_argument('--os-auth-url',help='auth URL if OS_AUTH_URL not set')

    args=parser.parse_args()
    log_level = parser.get_log_level(args)
    host=args.host

    jobfile = args.jobfile
    image = args.image
    flavor = args.flavor
    jobscriptonvm = args.jobscriptonvm
    nopost = args.nopost
    anonymous = args.anonymous

    # OpenStack auth parameters dict
    auth = {'username': None,
            'password': None,
            'tenant_name': None,
            'auth_url': None}
    for key in auth:
        argname = 'os_'+key
        osvar = argname.upper()
        if eval( 'args.'+argname ):
            auth[key] = eval( 'args.'+argname )
        elif osvar in os.environ:
            auth[key] = os.environ[osvar]
        else:
            print "Neither --%s nor %s set in the environment" \
                % (argname.replace('_','-'), osvar)
            sys.exit(1)


    try:
        # Create a proc client
        c = ProcClient(auth, host=host, anonymous=anonymous,
                       log_level=log_level)
        c.logger.debug("Start")
    except Exception as E:
        traceback.print_exc()
        print str(E)
        sys.exit(1)

    try:
        # Submit a job for processing
        c.submit_job(jobfile, image, flavor, jobscriptonvm=jobscriptonvm, \
                         nopost=nopost)
    except Exception as E:
        c.logger.exception(str(E))
        if isinstance(E, keystone_exceptions.Unauthorized):
            c.logger.warning(
                'Are your name, password, and tenant set correctly? ' + \
                '(e.g., did you source a valid openrc file to set ' + \
                'OS_* environment variables ?)')
        sys.exit(1)


    # Good exit status if we get here
    c.logger.debug("End")
    sys.exit(0)
