import os
from glob import glob
from datetime import datetime
from kclboot.maven_jar import MavenJar

PACKAGE_VERSION = '0.0.2'
MLD_CLASS = 'com.amazonaws.services.kinesis.multilang.MultiLangDaemon'

JARS = [
    # (group id, artifact id, version)
    ('com.amazonaws', 'amazon-kinesis-client', '1.2.0'),
    ('com.fasterxml.jackson.core', 'jackson-core', '2.1.1'),
    ('org.apache.httpcomponents', 'httpclient', '4.2'),
    ('org.apache.httpcomponents', 'httpcore', '4.2'),
    ('com.fasterxml.jackson.core', 'jackson-annotations', '2.1.1'),
    ('commons-codec', 'commons-codec', '1.3'),
    ('joda-time', 'joda-time', '2.4'),
    ('com.amazonaws', 'aws-java-sdk', '1.7.13'),
    ('com.fasterxml.jackson.core', 'jackson-databind', '2.1.1'),
    ('commons-logging', 'commons-logging', '1.1.1'),
]

ENV_TO_PROPERTY = {
    'EXECUTABLE_NAME': 'executableName',
    'STREAM_NAME': 'streamName',
    'APPLICATION_NAME': 'applicationName',
    'AWS_CREDENTIALS_PROVIDER': 'AWSCredentialsProvider',
    'PROCESSING_LANGUAGE': 'processingLanguage',
    'INITIAL_POSITION_IN_STREAM': 'initialPositionInStream',
    'REGION_NAME': 'regionName',
    'FAILOVER_TIME': 'failoverTimeMillis',
    'WORKER_ID': 'workerId',
    'SHARD_SYNC_INTERVAL': 'shardSyncIntervalMillis',
    'MAX_RECORDS': 'maxRecords',
    'IDLE_TIME_BETWEEN_READS': 'idleTimeBetweenReadsInMillis',
    'CALL_PROCESS_EVEN_FOR_EMPTY': 'callProcessRecordsEvenForEmptyRecordList',
    'PARENT_SHARD_POLL_INTERVAL': 'parentShardPollIntervalMillis',
    'CLEANUP_LEASES': 'cleanupLeasesUponShardCompletion',
    'TASK_BACKOFF_TIME': 'taskBackoffTimeMillis',
    'METRICS_BUFFER_TIME': 'metricsBufferTimeMillis',
    'METRICS_MAX_QUEUE_SIZE': 'metricsMaxQueueSize',
    'VALIDATE_SEQUENCE_NUMBER': 'validateSequenceNumberBeforeCheckpointing',
    'MAX_ACTIVE_THREADS': 'maxActiveThreads',
}

class Bootstrapper:
    def __init__(self, jar_path = None, prop_path = None):
        if jar_path:
            self._jar_path = os.path.abspath(jar_path)
        if prop_path:
            self._prop_basename = os.path.basename(prop_path)
            self._prop_folder   = os.path.abspath(os.path.dirname(prop_path))

    @property
    def classpath(self):
        '''
        Classpath for running KCL's MultiLangDaemon
        '''
        return ':'.join(self.jars() + [self._prop_folder])

    def jars(self, absolute=True):
        '''
        List of jars in the jar path
        '''
        jars = glob(os.path.join(self._jar_path, '*.jar'))
        return jars if absolute else map(lambda j: os.path.abspath(j), jars)

    @property
    def command(self):
        '''
        Formatted java invocation used to run a MultiLangDaemon compatible executable
        '''
        return "java -cp %s %s %s" % (self.classpath, MLD_CLASS, self._prop_basename)

    def download_jars(self):
        '''
        Download missing jars
        '''
        Bootstrapper.download_jars_to(self._jar_path)

    @classmethod
    def download_jars_to(cls, folder):
        '''
        Download missing jars to a specific folder
        '''
        if not os.path.exists(folder):
            os.makedirs(folder)
        for info in JARS:
            jar = MavenJar(info[0], info[1], info[2])
            path = os.path.join(folder, jar.filename)

            if os.path.isfile(path):
                print("Skipping already downloaded file: %s" % jar.filename)
                continue

            print("Downloading %s..." % jar.filename)
            jar.download_to(folder)

    @classmethod
    def write_properties_from_env(cls, path):
        '''
        Uses environmental variables to write a *.properties file for KCL's MultiLangDaemon
        '''
        with open(path, 'w') as f:
            f.write("# Autogenerated by kclboot v%s on %s\n\n" % (PACKAGE_VERSION, datetime.now()))
            for env_var, prop_var in ENV_TO_PROPERTY.items():
                env_value = os.environ.get(env_var)
                if env_value:
                    f.write("%s=%s\n" % (prop_var, env_value))
