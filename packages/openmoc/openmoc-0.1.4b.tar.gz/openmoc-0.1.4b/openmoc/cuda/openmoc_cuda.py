# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openmoc_cuda', [dirname(__file__)])
        except ImportError:
            import _openmoc_cuda
            return _openmoc_cuda
        if fp is not None:
            try:
                _mod = imp.load_module('_openmoc_cuda', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openmoc_cuda = swig_import_helper()
    del swig_import_helper
else:
    import _openmoc_cuda
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openmoc_cuda.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _openmoc_cuda.SwigPyIterator_value(self)
    def incr(self, n=1): return _openmoc_cuda.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _openmoc_cuda.SwigPyIterator_decr(self, n)
    def distance(self, *args, **kwargs): return _openmoc_cuda.SwigPyIterator_distance(self, *args, **kwargs)
    def equal(self, *args, **kwargs): return _openmoc_cuda.SwigPyIterator_equal(self, *args, **kwargs)
    def copy(self): return _openmoc_cuda.SwigPyIterator_copy(self)
    def next(self): return _openmoc_cuda.SwigPyIterator_next(self)
    def __next__(self): return _openmoc_cuda.SwigPyIterator___next__(self)
    def previous(self): return _openmoc_cuda.SwigPyIterator_previous(self)
    def advance(self, *args, **kwargs): return _openmoc_cuda.SwigPyIterator_advance(self, *args, **kwargs)
    def __eq__(self, *args, **kwargs): return _openmoc_cuda.SwigPyIterator___eq__(self, *args, **kwargs)
    def __ne__(self, *args, **kwargs): return _openmoc_cuda.SwigPyIterator___ne__(self, *args, **kwargs)
    def __iadd__(self, *args, **kwargs): return _openmoc_cuda.SwigPyIterator___iadd__(self, *args, **kwargs)
    def __isub__(self, *args, **kwargs): return _openmoc_cuda.SwigPyIterator___isub__(self, *args, **kwargs)
    def __add__(self, *args, **kwargs): return _openmoc_cuda.SwigPyIterator___add__(self, *args, **kwargs)
    def __sub__(self, *args): return _openmoc_cuda.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _openmoc_cuda.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

FOUR_PI = _openmoc_cuda.FOUR_PI
ONE_OVER_FOUR_PI = _openmoc_cuda.ONE_OVER_FOUR_PI
ZERO_SIGMA_T = _openmoc_cuda.ZERO_SIGMA_T
SIGMA_T_THRESH = _openmoc_cuda.SIGMA_T_THRESH
TINY_MOVE = _openmoc_cuda.TINY_MOVE
ON_LATTICE_CELL_THRESH = _openmoc_cuda.ON_LATTICE_CELL_THRESH
ON_SURFACE_THRESH = _openmoc_cuda.ON_SURFACE_THRESH
POLAR_WEIGHT_SUM_TOL = _openmoc_cuda.POLAR_WEIGHT_SUM_TOL
MAX_POLAR_ANGLES_GPU = _openmoc_cuda.MAX_POLAR_ANGLES_GPU
MAX_AZIM_ANGLES_GPU = _openmoc_cuda.MAX_AZIM_ANGLES_GPU
class Solver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Solver, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openmoc_cuda.delete_Solver
    __del__ = lambda self : None;
    def getGeometry(self): return _openmoc_cuda.Solver_getGeometry(self)
    def getFSRVolume(self, *args, **kwargs): return _openmoc_cuda.Solver_getFSRVolume(self, *args, **kwargs)
    def getTrackGenerator(self): return _openmoc_cuda.Solver_getTrackGenerator(self)
    def getNumPolarAngles(self): return _openmoc_cuda.Solver_getNumPolarAngles(self)
    def getNumIterations(self): return _openmoc_cuda.Solver_getNumIterations(self)
    def getTotalTime(self): return _openmoc_cuda.Solver_getTotalTime(self)
    def getKeff(self): return _openmoc_cuda.Solver_getKeff(self)
    def getSourceConvergenceThreshold(self): return _openmoc_cuda.Solver_getSourceConvergenceThreshold(self)
    def isUsingDoublePrecision(self): return _openmoc_cuda.Solver_isUsingDoublePrecision(self)
    def isUsingExponentialInterpolation(self): return _openmoc_cuda.Solver_isUsingExponentialInterpolation(self)
    def getFSRScalarFlux(self, *args, **kwargs): return _openmoc_cuda.Solver_getFSRScalarFlux(self, *args, **kwargs)
    def getFSRScalarFluxes(self): return _openmoc_cuda.Solver_getFSRScalarFluxes(self)
    def getFSRSource(self, *args, **kwargs): return _openmoc_cuda.Solver_getFSRSource(self, *args, **kwargs)
    def setGeometry(self, *args, **kwargs): return _openmoc_cuda.Solver_setGeometry(self, *args, **kwargs)
    def setTrackGenerator(self, *args, **kwargs): return _openmoc_cuda.Solver_setTrackGenerator(self, *args, **kwargs)
    def setPolarQuadrature(self, *args, **kwargs): return _openmoc_cuda.Solver_setPolarQuadrature(self, *args, **kwargs)
    def setSourceConvergenceThreshold(self, *args, **kwargs): return _openmoc_cuda.Solver_setSourceConvergenceThreshold(self, *args, **kwargs)
    def useExponentialInterpolation(self): return _openmoc_cuda.Solver_useExponentialInterpolation(self)
    def useExponentialIntrinsic(self): return _openmoc_cuda.Solver_useExponentialIntrinsic(self)
    def convergeSource(self, *args, **kwargs): return _openmoc_cuda.Solver_convergeSource(self, *args, **kwargs)
    def computeFSRFissionRates(self, *args, **kwargs): return _openmoc_cuda.Solver_computeFSRFissionRates(self, *args, **kwargs)
    def printTimerReport(self): return _openmoc_cuda.Solver_printTimerReport(self)
Solver_swigregister = _openmoc_cuda.Solver_swigregister
Solver_swigregister(Solver)

class GPUSolver(Solver):
    __swig_setmethods__ = {}
    for _s in [Solver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GPUSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [Solver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GPUSolver, name)
    __repr__ = _swig_repr
    def __init__(self, geometry=None, track_generator=None): 
        this = _openmoc_cuda.new_GPUSolver(geometry, track_generator)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc_cuda.delete_GPUSolver
    __del__ = lambda self : None;
    def getNumThreadBlocks(self): return _openmoc_cuda.GPUSolver_getNumThreadBlocks(self)
    def getNumThreadsPerBlock(self): return _openmoc_cuda.GPUSolver_getNumThreadsPerBlock(self)
    def getFSRScalarFlux(self, *args, **kwargs): return _openmoc_cuda.GPUSolver_getFSRScalarFlux(self, *args, **kwargs)
    def getFSRScalarFluxes(self): return _openmoc_cuda.GPUSolver_getFSRScalarFluxes(self)
    def getFSRSource(self, *args, **kwargs): return _openmoc_cuda.GPUSolver_getFSRSource(self, *args, **kwargs)
    def setNumThreadBlocks(self, *args, **kwargs): return _openmoc_cuda.GPUSolver_setNumThreadBlocks(self, *args, **kwargs)
    def setNumThreadsPerBlock(self, *args, **kwargs): return _openmoc_cuda.GPUSolver_setNumThreadsPerBlock(self, *args, **kwargs)
    def setGeometry(self, *args, **kwargs): return _openmoc_cuda.GPUSolver_setGeometry(self, *args, **kwargs)
    def setTrackGenerator(self, *args, **kwargs): return _openmoc_cuda.GPUSolver_setTrackGenerator(self, *args, **kwargs)
    def computeScalarTrackIndex(self, *args, **kwargs): return _openmoc_cuda.GPUSolver_computeScalarTrackIndex(self, *args, **kwargs)
    def computeFSRFissionRates(self, *args, **kwargs): return _openmoc_cuda.GPUSolver_computeFSRFissionRates(self, *args, **kwargs)
GPUSolver_swigregister = _openmoc_cuda.GPUSolver_swigregister
GPUSolver_swigregister(GPUSolver)


def machine_contains_gpu():
  return _openmoc_cuda.machine_contains_gpu()
machine_contains_gpu = _openmoc_cuda.machine_contains_gpu

def attach_gpu(id=0):
  return _openmoc_cuda.attach_gpu(id)
attach_gpu = _openmoc_cuda.attach_gpu

def print_basic_gpu_info():
  return _openmoc_cuda.print_basic_gpu_info()
print_basic_gpu_info = _openmoc_cuda.print_basic_gpu_info

def print_detailed_gpu_info():
  return _openmoc_cuda.print_detailed_gpu_info()
print_detailed_gpu_info = _openmoc_cuda.print_detailed_gpu_info

def get_num_threads_per_warp():
  return _openmoc_cuda.get_num_threads_per_warp()
get_num_threads_per_warp = _openmoc_cuda.get_num_threads_per_warp

def clone_material(*args, **kwargs):
  return _openmoc_cuda.clone_material(*args, **kwargs)
clone_material = _openmoc_cuda.clone_material

def clone_track(*args, **kwargs):
  return _openmoc_cuda.clone_track(*args, **kwargs)
clone_track = _openmoc_cuda.clone_track
# This file is compatible with both classic and new-style classes.


