# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openmoc_bgq_single', [dirname(__file__)])
        except ImportError:
            import _openmoc_bgq_single
            return _openmoc_bgq_single
        if fp is not None:
            try:
                _mod = imp.load_module('_openmoc_bgq_single', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openmoc_bgq_single = swig_import_helper()
    del swig_import_helper
else:
    import _openmoc_bgq_single
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def castCellToCellFill(*args, **kwargs):
  return _openmoc_bgq_single.castCellToCellFill(*args, **kwargs)
castCellToCellFill = _openmoc_bgq_single.castCellToCellFill

def castCellToCellBasic(*args, **kwargs):
  return _openmoc_bgq_single.castCellToCellBasic(*args, **kwargs)
castCellToCellBasic = _openmoc_bgq_single.castCellToCellBasic

def castUniverseToLattice(*args, **kwargs):
  return _openmoc_bgq_single.castUniverseToLattice(*args, **kwargs)
castUniverseToLattice = _openmoc_bgq_single.castUniverseToLattice

def castLatticeToUniverse(*args, **kwargs):
  return _openmoc_bgq_single.castLatticeToUniverse(*args, **kwargs)
castLatticeToUniverse = _openmoc_bgq_single.castLatticeToUniverse

def cell_id():
  return _openmoc_bgq_single.cell_id()
cell_id = _openmoc_bgq_single.cell_id
MATERIAL = _openmoc_bgq_single.MATERIAL
FILL = _openmoc_bgq_single.FILL
class Cell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cell, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openmoc_bgq_single.delete_Cell
    __del__ = lambda self : None;
    def getUid(self): return _openmoc_bgq_single.Cell_getUid(self)
    def getId(self): return _openmoc_bgq_single.Cell_getId(self)
    def getType(self): return _openmoc_bgq_single.Cell_getType(self)
    def getUniverse(self): return _openmoc_bgq_single.Cell_getUniverse(self)
    def getNumSurfaces(self): return _openmoc_bgq_single.Cell_getNumSurfaces(self)
    def getSurfaces(self): return _openmoc_bgq_single.Cell_getSurfaces(self)
    def getNumFSRs(self): return _openmoc_bgq_single.Cell_getNumFSRs(self)
    def setUniverse(self, *args, **kwargs): return _openmoc_bgq_single.Cell_setUniverse(self, *args, **kwargs)
    def addSurface(self, *args, **kwargs): return _openmoc_bgq_single.Cell_addSurface(self, *args, **kwargs)
    def setSurfacePointer(self, *args, **kwargs): return _openmoc_bgq_single.Cell_setSurfacePointer(self, *args, **kwargs)
    def cellContainsPoint(self, *args, **kwargs): return _openmoc_bgq_single.Cell_cellContainsPoint(self, *args, **kwargs)
    def cellContainsCoords(self, *args, **kwargs): return _openmoc_bgq_single.Cell_cellContainsCoords(self, *args, **kwargs)
    def minSurfaceDist(self, *args, **kwargs): return _openmoc_bgq_single.Cell_minSurfaceDist(self, *args, **kwargs)
    def toString(self): return _openmoc_bgq_single.Cell_toString(self)
    def printString(self): return _openmoc_bgq_single.Cell_printString(self)
Cell_swigregister = _openmoc_bgq_single.Cell_swigregister
Cell_swigregister(Cell)

class CellBasic(Cell):
    __swig_setmethods__ = {}
    for _s in [Cell]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellBasic, name, value)
    __swig_getmethods__ = {}
    for _s in [Cell]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CellBasic, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _openmoc_bgq_single.new_CellBasic(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def getMaterial(self): return _openmoc_bgq_single.CellBasic_getMaterial(self)
    def getNumRings(self): return _openmoc_bgq_single.CellBasic_getNumRings(self)
    def getNumSectors(self): return _openmoc_bgq_single.CellBasic_getNumSectors(self)
    def getNumFSRs(self): return _openmoc_bgq_single.CellBasic_getNumFSRs(self)
    def setNumRings(self, *args, **kwargs): return _openmoc_bgq_single.CellBasic_setNumRings(self, *args, **kwargs)
    def setNumSectors(self, *args, **kwargs): return _openmoc_bgq_single.CellBasic_setNumSectors(self, *args, **kwargs)
    def clone(self): return _openmoc_bgq_single.CellBasic_clone(self)
    def subdivideCell(self): return _openmoc_bgq_single.CellBasic_subdivideCell(self)
    def toString(self): return _openmoc_bgq_single.CellBasic_toString(self)
    def printString(self): return _openmoc_bgq_single.CellBasic_printString(self)
    __swig_destroy__ = _openmoc_bgq_single.delete_CellBasic
    __del__ = lambda self : None;
CellBasic_swigregister = _openmoc_bgq_single.CellBasic_swigregister
CellBasic_swigregister(CellBasic)

class CellFill(Cell):
    __swig_setmethods__ = {}
    for _s in [Cell]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellFill, name, value)
    __swig_getmethods__ = {}
    for _s in [Cell]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CellFill, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _openmoc_bgq_single.new_CellFill(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def getUniverseFillId(self): return _openmoc_bgq_single.CellFill_getUniverseFillId(self)
    def getUniverseFill(self): return _openmoc_bgq_single.CellFill_getUniverseFill(self)
    def getNumFSRs(self): return _openmoc_bgq_single.CellFill_getNumFSRs(self)
    def setUniverseFill(self, *args, **kwargs): return _openmoc_bgq_single.CellFill_setUniverseFill(self, *args, **kwargs)
    def setUniverseFillPointer(self, *args, **kwargs): return _openmoc_bgq_single.CellFill_setUniverseFillPointer(self, *args, **kwargs)
    def toString(self): return _openmoc_bgq_single.CellFill_toString(self)
    def printString(self): return _openmoc_bgq_single.CellFill_printString(self)
    __swig_destroy__ = _openmoc_bgq_single.delete_CellFill
    __del__ = lambda self : None;
CellFill_swigregister = _openmoc_bgq_single.CellFill_swigregister
CellFill_swigregister(CellFill)

class Geometry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Geometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Geometry, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openmoc_bgq_single.new_Geometry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc_bgq_single.delete_Geometry
    __del__ = lambda self : None;
    def getWidth(self): return _openmoc_bgq_single.Geometry_getWidth(self)
    def getHeight(self): return _openmoc_bgq_single.Geometry_getHeight(self)
    def getXMin(self): return _openmoc_bgq_single.Geometry_getXMin(self)
    def getXMax(self): return _openmoc_bgq_single.Geometry_getXMax(self)
    def getYMin(self): return _openmoc_bgq_single.Geometry_getYMin(self)
    def getYMax(self): return _openmoc_bgq_single.Geometry_getYMax(self)
    def getBCTop(self): return _openmoc_bgq_single.Geometry_getBCTop(self)
    def getBCBottom(self): return _openmoc_bgq_single.Geometry_getBCBottom(self)
    def getBCLeft(self): return _openmoc_bgq_single.Geometry_getBCLeft(self)
    def getBCRight(self): return _openmoc_bgq_single.Geometry_getBCRight(self)
    def getNumFSRs(self): return _openmoc_bgq_single.Geometry_getNumFSRs(self)
    def getNumEnergyGroups(self): return _openmoc_bgq_single.Geometry_getNumEnergyGroups(self)
    def getNumMaterials(self): return _openmoc_bgq_single.Geometry_getNumMaterials(self)
    def getFSRtoCellMap(self): return _openmoc_bgq_single.Geometry_getFSRtoCellMap(self)
    def getFSRtoMaterialMap(self): return _openmoc_bgq_single.Geometry_getFSRtoMaterialMap(self)
    def getMaxSegmentLength(self): return _openmoc_bgq_single.Geometry_getMaxSegmentLength(self)
    def getMinSegmentLength(self): return _openmoc_bgq_single.Geometry_getMinSegmentLength(self)
    def getMaterials(self): return _openmoc_bgq_single.Geometry_getMaterials(self)
    def getMaterial(self, *args, **kwargs): return _openmoc_bgq_single.Geometry_getMaterial(self, *args, **kwargs)
    def getSurface(self, *args, **kwargs): return _openmoc_bgq_single.Geometry_getSurface(self, *args, **kwargs)
    def getCell(self, *args, **kwargs): return _openmoc_bgq_single.Geometry_getCell(self, *args, **kwargs)
    def getUniverse(self, *args, **kwargs): return _openmoc_bgq_single.Geometry_getUniverse(self, *args, **kwargs)
    def getLattice(self, *args, **kwargs): return _openmoc_bgq_single.Geometry_getLattice(self, *args, **kwargs)
    def addMaterial(self, *args, **kwargs): return _openmoc_bgq_single.Geometry_addMaterial(self, *args, **kwargs)
    def addSurface(self, *args, **kwargs): return _openmoc_bgq_single.Geometry_addSurface(self, *args, **kwargs)
    def addCell(self, *args, **kwargs): return _openmoc_bgq_single.Geometry_addCell(self, *args, **kwargs)
    def addUniverse(self, *args, **kwargs): return _openmoc_bgq_single.Geometry_addUniverse(self, *args, **kwargs)
    def addLattice(self, *args, **kwargs): return _openmoc_bgq_single.Geometry_addLattice(self, *args, **kwargs)
    def findCellContainingCoords(self, *args, **kwargs): return _openmoc_bgq_single.Geometry_findCellContainingCoords(self, *args, **kwargs)
    def findCellContainingFSR(self, *args, **kwargs): return _openmoc_bgq_single.Geometry_findCellContainingFSR(self, *args, **kwargs)
    def findCell(self, *args, **kwargs): return _openmoc_bgq_single.Geometry_findCell(self, *args, **kwargs)
    def findFSRId(self, *args, **kwargs): return _openmoc_bgq_single.Geometry_findFSRId(self, *args, **kwargs)
    def subdivideCells(self): return _openmoc_bgq_single.Geometry_subdivideCells(self)
    def initializeFlatSourceRegions(self): return _openmoc_bgq_single.Geometry_initializeFlatSourceRegions(self)
    def segmentize(self, *args, **kwargs): return _openmoc_bgq_single.Geometry_segmentize(self, *args, **kwargs)
    def computeFissionability(self, univ=None): return _openmoc_bgq_single.Geometry_computeFissionability(self, univ)
    def computePinPowers(self, *args, **kwargs): return _openmoc_bgq_single.Geometry_computePinPowers(self, *args, **kwargs)
    def computePinPowersInUniverse(self, *args, **kwargs): return _openmoc_bgq_single.Geometry_computePinPowersInUniverse(self, *args, **kwargs)
    def toString(self): return _openmoc_bgq_single.Geometry_toString(self)
    def printString(self): return _openmoc_bgq_single.Geometry_printString(self)
Geometry_swigregister = _openmoc_bgq_single.Geometry_swigregister
Geometry_swigregister(Geometry)

UNIV = _openmoc_bgq_single.UNIV
LAT = _openmoc_bgq_single.LAT
class LocalCoords(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalCoords, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LocalCoords, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _openmoc_bgq_single.new_LocalCoords(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc_bgq_single.delete_LocalCoords
    __del__ = lambda self : None;
    def getType(self): return _openmoc_bgq_single.LocalCoords_getType(self)
    def getUniverse(self): return _openmoc_bgq_single.LocalCoords_getUniverse(self)
    def getCell(self): return _openmoc_bgq_single.LocalCoords_getCell(self)
    def getLattice(self): return _openmoc_bgq_single.LocalCoords_getLattice(self)
    def getLatticeX(self): return _openmoc_bgq_single.LocalCoords_getLatticeX(self)
    def getLatticeY(self): return _openmoc_bgq_single.LocalCoords_getLatticeY(self)
    def getX(self): return _openmoc_bgq_single.LocalCoords_getX(self)
    def getY(self): return _openmoc_bgq_single.LocalCoords_getY(self)
    def getPoint(self): return _openmoc_bgq_single.LocalCoords_getPoint(self)
    def getNext(self): return _openmoc_bgq_single.LocalCoords_getNext(self)
    def getPrev(self): return _openmoc_bgq_single.LocalCoords_getPrev(self)
    def setType(self, *args, **kwargs): return _openmoc_bgq_single.LocalCoords_setType(self, *args, **kwargs)
    def setUniverse(self, *args, **kwargs): return _openmoc_bgq_single.LocalCoords_setUniverse(self, *args, **kwargs)
    def setCell(self, *args, **kwargs): return _openmoc_bgq_single.LocalCoords_setCell(self, *args, **kwargs)
    def setLattice(self, *args, **kwargs): return _openmoc_bgq_single.LocalCoords_setLattice(self, *args, **kwargs)
    def setLatticeX(self, *args, **kwargs): return _openmoc_bgq_single.LocalCoords_setLatticeX(self, *args, **kwargs)
    def setLatticeY(self, *args, **kwargs): return _openmoc_bgq_single.LocalCoords_setLatticeY(self, *args, **kwargs)
    def setX(self, *args, **kwargs): return _openmoc_bgq_single.LocalCoords_setX(self, *args, **kwargs)
    def setY(self, *args, **kwargs): return _openmoc_bgq_single.LocalCoords_setY(self, *args, **kwargs)
    def setNext(self, *args, **kwargs): return _openmoc_bgq_single.LocalCoords_setNext(self, *args, **kwargs)
    def setPrev(self, *args, **kwargs): return _openmoc_bgq_single.LocalCoords_setPrev(self, *args, **kwargs)
    def getLowestLevel(self): return _openmoc_bgq_single.LocalCoords_getLowestLevel(self)
    def adjustCoords(self, *args, **kwargs): return _openmoc_bgq_single.LocalCoords_adjustCoords(self, *args, **kwargs)
    def updateMostLocal(self, *args, **kwargs): return _openmoc_bgq_single.LocalCoords_updateMostLocal(self, *args, **kwargs)
    def prune(self): return _openmoc_bgq_single.LocalCoords_prune(self)
    def copyCoords(self, *args, **kwargs): return _openmoc_bgq_single.LocalCoords_copyCoords(self, *args, **kwargs)
    def toString(self): return _openmoc_bgq_single.LocalCoords_toString(self)
LocalCoords_swigregister = _openmoc_bgq_single.LocalCoords_swigregister
LocalCoords_swigregister(LocalCoords)

DEBUG = _openmoc_bgq_single.DEBUG
INFO = _openmoc_bgq_single.INFO
NORMAL = _openmoc_bgq_single.NORMAL
SEPARATOR = _openmoc_bgq_single.SEPARATOR
HEADER = _openmoc_bgq_single.HEADER
TITLE = _openmoc_bgq_single.TITLE
WARNING = _openmoc_bgq_single.WARNING
CRITICAL = _openmoc_bgq_single.CRITICAL
RESULT = _openmoc_bgq_single.RESULT
UNITTEST = _openmoc_bgq_single.UNITTEST
ERROR = _openmoc_bgq_single.ERROR

def set_err(*args, **kwargs):
  return _openmoc_bgq_single.set_err(*args, **kwargs)
set_err = _openmoc_bgq_single.set_err

def setOutputDirectory(*args, **kwargs):
  return _openmoc_bgq_single.setOutputDirectory(*args, **kwargs)
setOutputDirectory = _openmoc_bgq_single.setOutputDirectory

def getOutputDirectory():
  return _openmoc_bgq_single.getOutputDirectory()
getOutputDirectory = _openmoc_bgq_single.getOutputDirectory

def setLogfileName(*args, **kwargs):
  return _openmoc_bgq_single.setLogfileName(*args, **kwargs)
setLogfileName = _openmoc_bgq_single.setLogfileName

def getLogfileName():
  return _openmoc_bgq_single.getLogfileName()
getLogfileName = _openmoc_bgq_single.getLogfileName

def setSeparatorCharacter(*args, **kwargs):
  return _openmoc_bgq_single.setSeparatorCharacter(*args, **kwargs)
setSeparatorCharacter = _openmoc_bgq_single.setSeparatorCharacter

def getSeparatorCharacter():
  return _openmoc_bgq_single.getSeparatorCharacter()
getSeparatorCharacter = _openmoc_bgq_single.getSeparatorCharacter

def setHeaderCharacter(*args, **kwargs):
  return _openmoc_bgq_single.setHeaderCharacter(*args, **kwargs)
setHeaderCharacter = _openmoc_bgq_single.setHeaderCharacter

def getHeaderCharacter():
  return _openmoc_bgq_single.getHeaderCharacter()
getHeaderCharacter = _openmoc_bgq_single.getHeaderCharacter

def setTitleCharacter(*args, **kwargs):
  return _openmoc_bgq_single.setTitleCharacter(*args, **kwargs)
setTitleCharacter = _openmoc_bgq_single.setTitleCharacter

def getTitleCharacter():
  return _openmoc_bgq_single.getTitleCharacter()
getTitleCharacter = _openmoc_bgq_single.getTitleCharacter

def setLineLength(*args, **kwargs):
  return _openmoc_bgq_single.setLineLength(*args, **kwargs)
setLineLength = _openmoc_bgq_single.setLineLength

def setLogLevel(*args, **kwargs):
  return _openmoc_bgq_single.setLogLevel(*args, **kwargs)
setLogLevel = _openmoc_bgq_single.setLogLevel

def getLogLevel():
  return _openmoc_bgq_single.getLogLevel()
getLogLevel = _openmoc_bgq_single.getLogLevel

def log_printf(*args, **kwargs):
  return _openmoc_bgq_single.log_printf(*args, **kwargs)
log_printf = _openmoc_bgq_single.log_printf

def createMultilineMsg(*args, **kwargs):
  return _openmoc_bgq_single.createMultilineMsg(*args, **kwargs)
createMultilineMsg = _openmoc_bgq_single.createMultilineMsg
SIGMA_T_THRESH = _openmoc_bgq_single.SIGMA_T_THRESH

def material_id():
  return _openmoc_bgq_single.material_id()
material_id = _openmoc_bgq_single.material_id
class Material(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Material, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Material, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _openmoc_bgq_single.new_Material(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc_bgq_single.delete_Material
    __del__ = lambda self : None;
    def getUid(self): return _openmoc_bgq_single.Material_getUid(self)
    def getId(self): return _openmoc_bgq_single.Material_getId(self)
    def getNumEnergyGroups(self): return _openmoc_bgq_single.Material_getNumEnergyGroups(self)
    def getSigmaT(self): return _openmoc_bgq_single.Material_getSigmaT(self)
    def getSigmaA(self): return _openmoc_bgq_single.Material_getSigmaA(self)
    def getSigmaS(self): return _openmoc_bgq_single.Material_getSigmaS(self)
    def getSigmaF(self): return _openmoc_bgq_single.Material_getSigmaF(self)
    def getNuSigmaF(self): return _openmoc_bgq_single.Material_getNuSigmaF(self)
    def getChi(self): return _openmoc_bgq_single.Material_getChi(self)
    def isFissionable(self): return _openmoc_bgq_single.Material_isFissionable(self)
    def isDataAligned(self): return _openmoc_bgq_single.Material_isDataAligned(self)
    def getNumVectorGroups(self): return _openmoc_bgq_single.Material_getNumVectorGroups(self)
    def setNumEnergyGroups(self, *args, **kwargs): return _openmoc_bgq_single.Material_setNumEnergyGroups(self, *args, **kwargs)
    def setSigmaT(self, *args, **kwargs): return _openmoc_bgq_single.Material_setSigmaT(self, *args, **kwargs)
    def setSigmaA(self, *args, **kwargs): return _openmoc_bgq_single.Material_setSigmaA(self, *args, **kwargs)
    def setSigmaS(self, *args, **kwargs): return _openmoc_bgq_single.Material_setSigmaS(self, *args, **kwargs)
    def setSigmaF(self, *args, **kwargs): return _openmoc_bgq_single.Material_setSigmaF(self, *args, **kwargs)
    def setNuSigmaF(self, *args, **kwargs): return _openmoc_bgq_single.Material_setNuSigmaF(self, *args, **kwargs)
    def setChi(self, *args, **kwargs): return _openmoc_bgq_single.Material_setChi(self, *args, **kwargs)
    def setSigmaTByGroup(self, *args, **kwargs): return _openmoc_bgq_single.Material_setSigmaTByGroup(self, *args, **kwargs)
    def setSigmaAByGroup(self, *args, **kwargs): return _openmoc_bgq_single.Material_setSigmaAByGroup(self, *args, **kwargs)
    def setSigmaFByGroup(self, *args, **kwargs): return _openmoc_bgq_single.Material_setSigmaFByGroup(self, *args, **kwargs)
    def setNuSigmaFByGroup(self, *args, **kwargs): return _openmoc_bgq_single.Material_setNuSigmaFByGroup(self, *args, **kwargs)
    def setSigmaSByGroup(self, *args, **kwargs): return _openmoc_bgq_single.Material_setSigmaSByGroup(self, *args, **kwargs)
    def setChiByGroup(self, *args, **kwargs): return _openmoc_bgq_single.Material_setChiByGroup(self, *args, **kwargs)
    def checkSigmaT(self): return _openmoc_bgq_single.Material_checkSigmaT(self)
    def toString(self): return _openmoc_bgq_single.Material_toString(self)
    def printString(self): return _openmoc_bgq_single.Material_printString(self)
    def alignData(self): return _openmoc_bgq_single.Material_alignData(self)
Material_swigregister = _openmoc_bgq_single.Material_swigregister
Material_swigregister(Material)

class Point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openmoc_bgq_single.new_Point()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc_bgq_single.delete_Point
    __del__ = lambda self : None;
    def setCoords(self, *args, **kwargs): return _openmoc_bgq_single.Point_setCoords(self, *args, **kwargs)
    def getX(self): return _openmoc_bgq_single.Point_getX(self)
    def getY(self): return _openmoc_bgq_single.Point_getY(self)
    def setX(self, *args, **kwargs): return _openmoc_bgq_single.Point_setX(self, *args, **kwargs)
    def setY(self, *args, **kwargs): return _openmoc_bgq_single.Point_setY(self, *args, **kwargs)
    def distance(self, *args, **kwargs): return _openmoc_bgq_single.Point_distance(self, *args, **kwargs)
    def distanceToPoint(self, *args, **kwargs): return _openmoc_bgq_single.Point_distanceToPoint(self, *args, **kwargs)
    def toString(self): return _openmoc_bgq_single.Point_toString(self)
Point_swigregister = _openmoc_bgq_single.Point_swigregister
Point_swigregister(Point)

LEONARD = _openmoc_bgq_single.LEONARD
TABUCHI = _openmoc_bgq_single.TABUCHI
class Quadrature(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quadrature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Quadrature, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _openmoc_bgq_single.new_Quadrature(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc_bgq_single.delete_Quadrature
    __del__ = lambda self : None;
    def getNumPolarAngles(self): return _openmoc_bgq_single.Quadrature_getNumPolarAngles(self)
    def getType(self): return _openmoc_bgq_single.Quadrature_getType(self)
    def getSinTheta(self, *args, **kwargs): return _openmoc_bgq_single.Quadrature_getSinTheta(self, *args, **kwargs)
    def getWeight(self, *args, **kwargs): return _openmoc_bgq_single.Quadrature_getWeight(self, *args, **kwargs)
    def getMultiple(self, *args, **kwargs): return _openmoc_bgq_single.Quadrature_getMultiple(self, *args, **kwargs)
    def getSinThetas(self): return _openmoc_bgq_single.Quadrature_getSinThetas(self)
    def getWeights(self): return _openmoc_bgq_single.Quadrature_getWeights(self)
    def getMultiples(self): return _openmoc_bgq_single.Quadrature_getMultiples(self)
    def toString(self): return _openmoc_bgq_single.Quadrature_toString(self)
Quadrature_swigregister = _openmoc_bgq_single.Quadrature_swigregister
Quadrature_swigregister(Quadrature)

FOUR_PI = _openmoc_bgq_single.FOUR_PI
ONE_OVER_FOUR_PI = _openmoc_bgq_single.ONE_OVER_FOUR_PI
class Solver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Solver, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openmoc_bgq_single.delete_Solver
    __del__ = lambda self : None;
    def getGeometry(self): return _openmoc_bgq_single.Solver_getGeometry(self)
    def getTrackGenerator(self): return _openmoc_bgq_single.Solver_getTrackGenerator(self)
    def getNumPolarAngles(self): return _openmoc_bgq_single.Solver_getNumPolarAngles(self)
    def getPolarQuadratureType(self): return _openmoc_bgq_single.Solver_getPolarQuadratureType(self)
    def getNumIterations(self): return _openmoc_bgq_single.Solver_getNumIterations(self)
    def getSourceConvergenceThreshold(self): return _openmoc_bgq_single.Solver_getSourceConvergenceThreshold(self)
    def getFSRScalarFlux(self, *args, **kwargs): return _openmoc_bgq_single.Solver_getFSRScalarFlux(self, *args, **kwargs)
    def getFSRScalarFluxes(self): return _openmoc_bgq_single.Solver_getFSRScalarFluxes(self)
    def setGeometry(self, *args, **kwargs): return _openmoc_bgq_single.Solver_setGeometry(self, *args, **kwargs)
    def setTrackGenerator(self, *args, **kwargs): return _openmoc_bgq_single.Solver_setTrackGenerator(self, *args, **kwargs)
    def setPolarQuadratureType(self, *args, **kwargs): return _openmoc_bgq_single.Solver_setPolarQuadratureType(self, *args, **kwargs)
    def setNumPolarAngles(self, *args, **kwargs): return _openmoc_bgq_single.Solver_setNumPolarAngles(self, *args, **kwargs)
    def setSourceConvergenceThreshold(self, *args, **kwargs): return _openmoc_bgq_single.Solver_setSourceConvergenceThreshold(self, *args, **kwargs)
    def useExponentialInterpolation(self): return _openmoc_bgq_single.Solver_useExponentialInterpolation(self)
    def useExponentialIntrinsic(self): return _openmoc_bgq_single.Solver_useExponentialIntrinsic(self)
    def convergeSource(self, *args, **kwargs): return _openmoc_bgq_single.Solver_convergeSource(self, *args, **kwargs)
    def computeFSRFissionRates(self, *args, **kwargs): return _openmoc_bgq_single.Solver_computeFSRFissionRates(self, *args, **kwargs)
    def printTimerReport(self): return _openmoc_bgq_single.Solver_printTimerReport(self)
Solver_swigregister = _openmoc_bgq_single.Solver_swigregister
Solver_swigregister(Solver)

class CPUSolver(Solver):
    __swig_setmethods__ = {}
    for _s in [Solver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPUSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [Solver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPUSolver, name)
    __repr__ = _swig_repr
    def __init__(self, geometry=None, track_generator=None): 
        this = _openmoc_bgq_single.new_CPUSolver(geometry, track_generator)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc_bgq_single.delete_CPUSolver
    __del__ = lambda self : None;
    def getNumThreads(self): return _openmoc_bgq_single.CPUSolver_getNumThreads(self)
    def getFSRScalarFlux(self, *args, **kwargs): return _openmoc_bgq_single.CPUSolver_getFSRScalarFlux(self, *args, **kwargs)
    def getFSRScalarFluxes(self): return _openmoc_bgq_single.CPUSolver_getFSRScalarFluxes(self)
    def setNumThreads(self, *args, **kwargs): return _openmoc_bgq_single.CPUSolver_setNumThreads(self, *args, **kwargs)
    def computeFSRFissionRates(self, *args, **kwargs): return _openmoc_bgq_single.CPUSolver_computeFSRFissionRates(self, *args, **kwargs)
CPUSolver_swigregister = _openmoc_bgq_single.CPUSolver_swigregister
CPUSolver_swigregister(CPUSolver)

class ThreadPrivateSolver(CPUSolver):
    __swig_setmethods__ = {}
    for _s in [CPUSolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreadPrivateSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [CPUSolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThreadPrivateSolver, name)
    __repr__ = _swig_repr
    def __init__(self, geometry=None, track_generator=None): 
        this = _openmoc_bgq_single.new_ThreadPrivateSolver(geometry, track_generator)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc_bgq_single.delete_ThreadPrivateSolver
    __del__ = lambda self : None;
ThreadPrivateSolver_swigregister = _openmoc_bgq_single.ThreadPrivateSolver_swigregister
ThreadPrivateSolver_swigregister(ThreadPrivateSolver)

ON_SURFACE_THRESH = _openmoc_bgq_single.ON_SURFACE_THRESH

def surf_id():
  return _openmoc_bgq_single.surf_id()
surf_id = _openmoc_bgq_single.surf_id
PLANE = _openmoc_bgq_single.PLANE
CIRCLE = _openmoc_bgq_single.CIRCLE
XPLANE = _openmoc_bgq_single.XPLANE
YPLANE = _openmoc_bgq_single.YPLANE
ZPLANE = _openmoc_bgq_single.ZPLANE
QUADRATIC = _openmoc_bgq_single.QUADRATIC
VACUUM = _openmoc_bgq_single.VACUUM
REFLECTIVE = _openmoc_bgq_single.REFLECTIVE
BOUNDARY_NONE = _openmoc_bgq_single.BOUNDARY_NONE
class Surface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Surface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openmoc_bgq_single.delete_Surface
    __del__ = lambda self : None;
    def getUid(self): return _openmoc_bgq_single.Surface_getUid(self)
    def getId(self): return _openmoc_bgq_single.Surface_getId(self)
    def getSurfaceType(self): return _openmoc_bgq_single.Surface_getSurfaceType(self)
    def getBoundaryType(self): return _openmoc_bgq_single.Surface_getBoundaryType(self)
    def getXMin(self): return _openmoc_bgq_single.Surface_getXMin(self)
    def getXMax(self): return _openmoc_bgq_single.Surface_getXMax(self)
    def getYMin(self): return _openmoc_bgq_single.Surface_getYMin(self)
    def getYMax(self): return _openmoc_bgq_single.Surface_getYMax(self)
    def setBoundaryType(self, *args, **kwargs): return _openmoc_bgq_single.Surface_setBoundaryType(self, *args, **kwargs)
    def evaluate(self, *args, **kwargs): return _openmoc_bgq_single.Surface_evaluate(self, *args, **kwargs)
    def intersection(self, *args, **kwargs): return _openmoc_bgq_single.Surface_intersection(self, *args, **kwargs)
    def isPointOnSurface(self, *args, **kwargs): return _openmoc_bgq_single.Surface_isPointOnSurface(self, *args, **kwargs)
    def isCoordOnSurface(self, *args, **kwargs): return _openmoc_bgq_single.Surface_isCoordOnSurface(self, *args, **kwargs)
    def getMinDistance(self, *args, **kwargs): return _openmoc_bgq_single.Surface_getMinDistance(self, *args, **kwargs)
    def toString(self): return _openmoc_bgq_single.Surface_toString(self)
    def printString(self): return _openmoc_bgq_single.Surface_printString(self)
Surface_swigregister = _openmoc_bgq_single.Surface_swigregister
Surface_swigregister(Surface)

class Plane(Surface):
    __swig_setmethods__ = {}
    for _s in [Surface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plane, name, value)
    __swig_getmethods__ = {}
    for _s in [Surface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Plane, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _openmoc_bgq_single.new_Plane(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def getXMin(self): return _openmoc_bgq_single.Plane_getXMin(self)
    def getXMax(self): return _openmoc_bgq_single.Plane_getXMax(self)
    def getYMin(self): return _openmoc_bgq_single.Plane_getYMin(self)
    def getYMax(self): return _openmoc_bgq_single.Plane_getYMax(self)
    def evaluate(self, *args, **kwargs): return _openmoc_bgq_single.Plane_evaluate(self, *args, **kwargs)
    def intersection(self, *args, **kwargs): return _openmoc_bgq_single.Plane_intersection(self, *args, **kwargs)
    def toString(self): return _openmoc_bgq_single.Plane_toString(self)
    def printString(self): return _openmoc_bgq_single.Plane_printString(self)
    __swig_destroy__ = _openmoc_bgq_single.delete_Plane
    __del__ = lambda self : None;
Plane_swigregister = _openmoc_bgq_single.Plane_swigregister
Plane_swigregister(Plane)

class XPlane(Plane):
    __swig_setmethods__ = {}
    for _s in [Plane]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XPlane, name, value)
    __swig_getmethods__ = {}
    for _s in [Plane]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XPlane, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _openmoc_bgq_single.new_XPlane(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def setX(self, *args, **kwargs): return _openmoc_bgq_single.XPlane_setX(self, *args, **kwargs)
    def getX(self): return _openmoc_bgq_single.XPlane_getX(self)
    def getXMin(self): return _openmoc_bgq_single.XPlane_getXMin(self)
    def getXMax(self): return _openmoc_bgq_single.XPlane_getXMax(self)
    def getYMin(self): return _openmoc_bgq_single.XPlane_getYMin(self)
    def getYMax(self): return _openmoc_bgq_single.XPlane_getYMax(self)
    def toString(self): return _openmoc_bgq_single.XPlane_toString(self)
    __swig_destroy__ = _openmoc_bgq_single.delete_XPlane
    __del__ = lambda self : None;
XPlane_swigregister = _openmoc_bgq_single.XPlane_swigregister
XPlane_swigregister(XPlane)

class YPlane(Plane):
    __swig_setmethods__ = {}
    for _s in [Plane]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YPlane, name, value)
    __swig_getmethods__ = {}
    for _s in [Plane]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, YPlane, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _openmoc_bgq_single.new_YPlane(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def setY(self, *args, **kwargs): return _openmoc_bgq_single.YPlane_setY(self, *args, **kwargs)
    def getY(self): return _openmoc_bgq_single.YPlane_getY(self)
    def getXMin(self): return _openmoc_bgq_single.YPlane_getXMin(self)
    def getXMax(self): return _openmoc_bgq_single.YPlane_getXMax(self)
    def getYMin(self): return _openmoc_bgq_single.YPlane_getYMin(self)
    def getYMax(self): return _openmoc_bgq_single.YPlane_getYMax(self)
    def toString(self): return _openmoc_bgq_single.YPlane_toString(self)
    def printString(self): return _openmoc_bgq_single.YPlane_printString(self)
    __swig_destroy__ = _openmoc_bgq_single.delete_YPlane
    __del__ = lambda self : None;
YPlane_swigregister = _openmoc_bgq_single.YPlane_swigregister
YPlane_swigregister(YPlane)

class ZPlane(Plane):
    __swig_setmethods__ = {}
    for _s in [Plane]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZPlane, name, value)
    __swig_getmethods__ = {}
    for _s in [Plane]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZPlane, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _openmoc_bgq_single.new_ZPlane(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def setZ(self, *args, **kwargs): return _openmoc_bgq_single.ZPlane_setZ(self, *args, **kwargs)
    def getZ(self): return _openmoc_bgq_single.ZPlane_getZ(self)
    def getXMin(self): return _openmoc_bgq_single.ZPlane_getXMin(self)
    def getXMax(self): return _openmoc_bgq_single.ZPlane_getXMax(self)
    def getYMin(self): return _openmoc_bgq_single.ZPlane_getYMin(self)
    def getYMax(self): return _openmoc_bgq_single.ZPlane_getYMax(self)
    def toString(self): return _openmoc_bgq_single.ZPlane_toString(self)
    def printString(self): return _openmoc_bgq_single.ZPlane_printString(self)
    __swig_destroy__ = _openmoc_bgq_single.delete_ZPlane
    __del__ = lambda self : None;
ZPlane_swigregister = _openmoc_bgq_single.ZPlane_swigregister
ZPlane_swigregister(ZPlane)

class Circle(Surface):
    __swig_setmethods__ = {}
    for _s in [Surface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Circle, name, value)
    __swig_getmethods__ = {}
    for _s in [Surface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Circle, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _openmoc_bgq_single.new_Circle(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def getX0(self): return _openmoc_bgq_single.Circle_getX0(self)
    def getY0(self): return _openmoc_bgq_single.Circle_getY0(self)
    def getRadius(self): return _openmoc_bgq_single.Circle_getRadius(self)
    def getXMin(self): return _openmoc_bgq_single.Circle_getXMin(self)
    def getXMax(self): return _openmoc_bgq_single.Circle_getXMax(self)
    def getYMin(self): return _openmoc_bgq_single.Circle_getYMin(self)
    def getYMax(self): return _openmoc_bgq_single.Circle_getYMax(self)
    def evaluate(self, *args, **kwargs): return _openmoc_bgq_single.Circle_evaluate(self, *args, **kwargs)
    def intersection(self, *args, **kwargs): return _openmoc_bgq_single.Circle_intersection(self, *args, **kwargs)
    def toString(self): return _openmoc_bgq_single.Circle_toString(self)
    def printString(self): return _openmoc_bgq_single.Circle_printString(self)
    __swig_destroy__ = _openmoc_bgq_single.delete_Circle
    __del__ = lambda self : None;
Circle_swigregister = _openmoc_bgq_single.Circle_swigregister
Circle_swigregister(Circle)

class Timer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Timer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Timer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openmoc_bgq_single.new_Timer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc_bgq_single.delete_Timer
    __del__ = lambda self : None;
    __swig_getmethods__["Get"] = lambda x: _openmoc_bgq_single.Timer_Get
    if _newclass:Get = staticmethod(_openmoc_bgq_single.Timer_Get)
    def startTimer(self): return _openmoc_bgq_single.Timer_startTimer(self)
    def stopTimer(self): return _openmoc_bgq_single.Timer_stopTimer(self)
    def recordSplit(self, *args, **kwargs): return _openmoc_bgq_single.Timer_recordSplit(self, *args, **kwargs)
    def getTime(self): return _openmoc_bgq_single.Timer_getTime(self)
    def getSplit(self, *args, **kwargs): return _openmoc_bgq_single.Timer_getSplit(self, *args, **kwargs)
    def printSplits(self): return _openmoc_bgq_single.Timer_printSplits(self)
    def clearSplit(self, *args, **kwargs): return _openmoc_bgq_single.Timer_clearSplit(self, *args, **kwargs)
    def clearSplits(self): return _openmoc_bgq_single.Timer_clearSplits(self)
Timer_swigregister = _openmoc_bgq_single.Timer_swigregister
Timer_swigregister(Timer)

def Timer_Get():
  return _openmoc_bgq_single.Timer_Get()
Timer_Get = _openmoc_bgq_single.Timer_Get

class segment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, segment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, segment, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_length"] = _openmoc_bgq_single.segment__length_set
    __swig_getmethods__["_length"] = _openmoc_bgq_single.segment__length_get
    if _newclass:_length = _swig_property(_openmoc_bgq_single.segment__length_get, _openmoc_bgq_single.segment__length_set)
    __swig_setmethods__["_material"] = _openmoc_bgq_single.segment__material_set
    __swig_getmethods__["_material"] = _openmoc_bgq_single.segment__material_get
    if _newclass:_material = _swig_property(_openmoc_bgq_single.segment__material_get, _openmoc_bgq_single.segment__material_set)
    __swig_setmethods__["_region_id"] = _openmoc_bgq_single.segment__region_id_set
    __swig_getmethods__["_region_id"] = _openmoc_bgq_single.segment__region_id_get
    if _newclass:_region_id = _swig_property(_openmoc_bgq_single.segment__region_id_get, _openmoc_bgq_single.segment__region_id_set)
    def __init__(self): 
        this = _openmoc_bgq_single.new_segment()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc_bgq_single.delete_segment
    __del__ = lambda self : None;
segment_swigregister = _openmoc_bgq_single.segment_swigregister
segment_swigregister(segment)

class Track(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Track, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Track, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openmoc_bgq_single.new_Track()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc_bgq_single.delete_Track
    __del__ = lambda self : None;
    def setValues(self, *args, **kwargs): return _openmoc_bgq_single.Track_setValues(self, *args, **kwargs)
    def setUid(self, *args, **kwargs): return _openmoc_bgq_single.Track_setUid(self, *args, **kwargs)
    def setPhi(self, *args, **kwargs): return _openmoc_bgq_single.Track_setPhi(self, *args, **kwargs)
    def setAzimAngleIndex(self, *args, **kwargs): return _openmoc_bgq_single.Track_setAzimAngleIndex(self, *args, **kwargs)
    def setReflIn(self, *args, **kwargs): return _openmoc_bgq_single.Track_setReflIn(self, *args, **kwargs)
    def setReflOut(self, *args, **kwargs): return _openmoc_bgq_single.Track_setReflOut(self, *args, **kwargs)
    def setBCIn(self, *args, **kwargs): return _openmoc_bgq_single.Track_setBCIn(self, *args, **kwargs)
    def setBCOut(self, *args, **kwargs): return _openmoc_bgq_single.Track_setBCOut(self, *args, **kwargs)
    def setTrackIn(self, *args, **kwargs): return _openmoc_bgq_single.Track_setTrackIn(self, *args, **kwargs)
    def setTrackOut(self, *args, **kwargs): return _openmoc_bgq_single.Track_setTrackOut(self, *args, **kwargs)
    def setTrackInI(self, *args, **kwargs): return _openmoc_bgq_single.Track_setTrackInI(self, *args, **kwargs)
    def setTrackInJ(self, *args, **kwargs): return _openmoc_bgq_single.Track_setTrackInJ(self, *args, **kwargs)
    def setTrackOutI(self, *args, **kwargs): return _openmoc_bgq_single.Track_setTrackOutI(self, *args, **kwargs)
    def setTrackOutJ(self, *args, **kwargs): return _openmoc_bgq_single.Track_setTrackOutJ(self, *args, **kwargs)
    def getUid(self): return _openmoc_bgq_single.Track_getUid(self)
    def getEnd(self): return _openmoc_bgq_single.Track_getEnd(self)
    def getStart(self): return _openmoc_bgq_single.Track_getStart(self)
    def getPhi(self): return _openmoc_bgq_single.Track_getPhi(self)
    def getAzimAngleIndex(self): return _openmoc_bgq_single.Track_getAzimAngleIndex(self)
    def getSegment(self, *args, **kwargs): return _openmoc_bgq_single.Track_getSegment(self, *args, **kwargs)
    def getSegments(self): return _openmoc_bgq_single.Track_getSegments(self)
    def getNumSegments(self): return _openmoc_bgq_single.Track_getNumSegments(self)
    def getTrackIn(self): return _openmoc_bgq_single.Track_getTrackIn(self)
    def getTrackOut(self): return _openmoc_bgq_single.Track_getTrackOut(self)
    def getTrackInI(self): return _openmoc_bgq_single.Track_getTrackInI(self)
    def getTrackInJ(self): return _openmoc_bgq_single.Track_getTrackInJ(self)
    def getTrackOutI(self): return _openmoc_bgq_single.Track_getTrackOutI(self)
    def getTrackOutJ(self): return _openmoc_bgq_single.Track_getTrackOutJ(self)
    def isReflIn(self): return _openmoc_bgq_single.Track_isReflIn(self)
    def isReflOut(self): return _openmoc_bgq_single.Track_isReflOut(self)
    def getBCIn(self): return _openmoc_bgq_single.Track_getBCIn(self)
    def getBCOut(self): return _openmoc_bgq_single.Track_getBCOut(self)
    def contains(self, *args, **kwargs): return _openmoc_bgq_single.Track_contains(self, *args, **kwargs)
    def addSegment(self, *args, **kwargs): return _openmoc_bgq_single.Track_addSegment(self, *args, **kwargs)
    def clearSegments(self): return _openmoc_bgq_single.Track_clearSegments(self)
    def toString(self): return _openmoc_bgq_single.Track_toString(self)
Track_swigregister = _openmoc_bgq_single.Track_swigregister
Track_swigregister(Track)

class TrackGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrackGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TrackGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _openmoc_bgq_single.new_TrackGenerator(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc_bgq_single.delete_TrackGenerator
    __del__ = lambda self : None;
    def getNumAzim(self): return _openmoc_bgq_single.TrackGenerator_getNumAzim(self)
    def getTrackSpacing(self): return _openmoc_bgq_single.TrackGenerator_getTrackSpacing(self)
    def getGeometry(self): return _openmoc_bgq_single.TrackGenerator_getGeometry(self)
    def getNumTracks(self): return _openmoc_bgq_single.TrackGenerator_getNumTracks(self)
    def getNumTracksArray(self): return _openmoc_bgq_single.TrackGenerator_getNumTracksArray(self)
    def getNumSegments(self): return _openmoc_bgq_single.TrackGenerator_getNumSegments(self)
    def getNumSegmentsArray(self): return _openmoc_bgq_single.TrackGenerator_getNumSegmentsArray(self)
    def getTracks(self): return _openmoc_bgq_single.TrackGenerator_getTracks(self)
    def getAzimWeights(self): return _openmoc_bgq_single.TrackGenerator_getAzimWeights(self)
    def containsTracks(self): return _openmoc_bgq_single.TrackGenerator_containsTracks(self)
    def retrieveTrackCoords(self, *args, **kwargs): return _openmoc_bgq_single.TrackGenerator_retrieveTrackCoords(self, *args, **kwargs)
    def retrieveSegmentCoords(self, *args, **kwargs): return _openmoc_bgq_single.TrackGenerator_retrieveSegmentCoords(self, *args, **kwargs)
    def setNumAzim(self, *args, **kwargs): return _openmoc_bgq_single.TrackGenerator_setNumAzim(self, *args, **kwargs)
    def setTrackSpacing(self, *args, **kwargs): return _openmoc_bgq_single.TrackGenerator_setTrackSpacing(self, *args, **kwargs)
    def setGeometry(self, *args, **kwargs): return _openmoc_bgq_single.TrackGenerator_setGeometry(self, *args, **kwargs)
    def generateTracks(self): return _openmoc_bgq_single.TrackGenerator_generateTracks(self)
TrackGenerator_swigregister = _openmoc_bgq_single.TrackGenerator_swigregister
TrackGenerator_swigregister(TrackGenerator)

ON_LATTICE_CELL_THRESH = _openmoc_bgq_single.ON_LATTICE_CELL_THRESH
TINY_MOVE = _openmoc_bgq_single.TINY_MOVE
SIMPLE = _openmoc_bgq_single.SIMPLE
LATTICE = _openmoc_bgq_single.LATTICE
class Universe(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Universe, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Universe, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _openmoc_bgq_single.new_Universe(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc_bgq_single.delete_Universe
    __del__ = lambda self : None;
    def addCell(self, *args, **kwargs): return _openmoc_bgq_single.Universe_addCell(self, *args, **kwargs)
    def getCell(self, *args, **kwargs): return _openmoc_bgq_single.Universe_getCell(self, *args, **kwargs)
    def getCells(self): return _openmoc_bgq_single.Universe_getCells(self)
    def getUid(self): return _openmoc_bgq_single.Universe_getUid(self)
    def getId(self): return _openmoc_bgq_single.Universe_getId(self)
    def getType(self): return _openmoc_bgq_single.Universe_getType(self)
    def getNumCells(self): return _openmoc_bgq_single.Universe_getNumCells(self)
    def getFSR(self, *args, **kwargs): return _openmoc_bgq_single.Universe_getFSR(self, *args, **kwargs)
    def getOrigin(self): return _openmoc_bgq_single.Universe_getOrigin(self)
    def getMaterialIds(self): return _openmoc_bgq_single.Universe_getMaterialIds(self)
    def getNestedUniverseIds(self): return _openmoc_bgq_single.Universe_getNestedUniverseIds(self)
    def getCellIds(self, *args, **kwargs): return _openmoc_bgq_single.Universe_getCellIds(self, *args, **kwargs)
    def isFissionable(self): return _openmoc_bgq_single.Universe_isFissionable(self)
    def setType(self, *args, **kwargs): return _openmoc_bgq_single.Universe_setType(self, *args, **kwargs)
    def setOrigin(self, *args, **kwargs): return _openmoc_bgq_single.Universe_setOrigin(self, *args, **kwargs)
    def setFissionability(self, *args, **kwargs): return _openmoc_bgq_single.Universe_setFissionability(self, *args, **kwargs)
    def findCell(self, *args, **kwargs): return _openmoc_bgq_single.Universe_findCell(self, *args, **kwargs)
    def computeFSRMaps(self): return _openmoc_bgq_single.Universe_computeFSRMaps(self)
    def subdivideCells(self): return _openmoc_bgq_single.Universe_subdivideCells(self)
    def toString(self): return _openmoc_bgq_single.Universe_toString(self)
    def printString(self): return _openmoc_bgq_single.Universe_printString(self)
Universe_swigregister = _openmoc_bgq_single.Universe_swigregister
Universe_swigregister(Universe)

class Lattice(Universe):
    __swig_setmethods__ = {}
    for _s in [Universe]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lattice, name, value)
    __swig_getmethods__ = {}
    for _s in [Universe]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Lattice, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _openmoc_bgq_single.new_Lattice(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc_bgq_single.delete_Lattice
    __del__ = lambda self : None;
    def getNumX(self): return _openmoc_bgq_single.Lattice_getNumX(self)
    def getNumY(self): return _openmoc_bgq_single.Lattice_getNumY(self)
    def getOrigin(self): return _openmoc_bgq_single.Lattice_getOrigin(self)
    def getUniverses(self): return _openmoc_bgq_single.Lattice_getUniverses(self)
    def getUniverse(self, *args, **kwargs): return _openmoc_bgq_single.Lattice_getUniverse(self, *args, **kwargs)
    def getWidthX(self): return _openmoc_bgq_single.Lattice_getWidthX(self)
    def getWidthY(self): return _openmoc_bgq_single.Lattice_getWidthY(self)
    def getFSR(self, *args, **kwargs): return _openmoc_bgq_single.Lattice_getFSR(self, *args, **kwargs)
    def getNestedUniverseIds(self): return _openmoc_bgq_single.Lattice_getNestedUniverseIds(self)
    def setLatticeCells(self, *args, **kwargs): return _openmoc_bgq_single.Lattice_setLatticeCells(self, *args, **kwargs)
    def setUniversePointer(self, *args, **kwargs): return _openmoc_bgq_single.Lattice_setUniversePointer(self, *args, **kwargs)
    def withinBounds(self, *args, **kwargs): return _openmoc_bgq_single.Lattice_withinBounds(self, *args, **kwargs)
    def findCell(self, *args, **kwargs): return _openmoc_bgq_single.Lattice_findCell(self, *args, **kwargs)
    def findNextLatticeCell(self, *args, **kwargs): return _openmoc_bgq_single.Lattice_findNextLatticeCell(self, *args, **kwargs)
    def computeFSRMaps(self): return _openmoc_bgq_single.Lattice_computeFSRMaps(self)
    def toString(self): return _openmoc_bgq_single.Lattice_toString(self)
    def printString(self): return _openmoc_bgq_single.Lattice_printString(self)
Lattice_swigregister = _openmoc_bgq_single.Lattice_swigregister
Lattice_swigregister(Lattice)

# This file is compatible with both classic and new-style classes.


