# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
A method of characteristics code for nuclear reactor physics calculations.
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openmoc', [dirname(__file__)])
        except ImportError:
            import _openmoc
            return _openmoc
        if fp is not None:
            try:
                _mod = imp.load_module('_openmoc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openmoc = swig_import_helper()
    del swig_import_helper
else:
    import _openmoc
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def castCellToCellFill(*args, **kwargs):
  return _openmoc.castCellToCellFill(*args, **kwargs)
castCellToCellFill = _openmoc.castCellToCellFill

def castCellToCellBasic(*args, **kwargs):
  return _openmoc.castCellToCellBasic(*args, **kwargs)
castCellToCellBasic = _openmoc.castCellToCellBasic

def castUniverseToLattice(*args, **kwargs):
  return _openmoc.castUniverseToLattice(*args, **kwargs)
castUniverseToLattice = _openmoc.castUniverseToLattice

def castLatticeToUniverse(*args, **kwargs):
  return _openmoc.castLatticeToUniverse(*args, **kwargs)
castLatticeToUniverse = _openmoc.castLatticeToUniverse

def castSurfaceToPlane(*args, **kwargs):
  return _openmoc.castSurfaceToPlane(*args, **kwargs)
castSurfaceToPlane = _openmoc.castSurfaceToPlane

def castSurfaceToXPlane(*args, **kwargs):
  return _openmoc.castSurfaceToXPlane(*args, **kwargs)
castSurfaceToXPlane = _openmoc.castSurfaceToXPlane

def castSurfaceToYPlane(*args, **kwargs):
  return _openmoc.castSurfaceToYPlane(*args, **kwargs)
castSurfaceToYPlane = _openmoc.castSurfaceToYPlane

def castSurfaceToZPlane(*args, **kwargs):
  return _openmoc.castSurfaceToZPlane(*args, **kwargs)
castSurfaceToZPlane = _openmoc.castSurfaceToZPlane

def castSurfaceToCircle(*args, **kwargs):
  return _openmoc.castSurfaceToCircle(*args, **kwargs)
castSurfaceToCircle = _openmoc.castSurfaceToCircle
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openmoc.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _openmoc.SwigPyIterator_value(self)
    def incr(self, n=1): return _openmoc.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _openmoc.SwigPyIterator_decr(self, n)
    def distance(self, *args, **kwargs): return _openmoc.SwigPyIterator_distance(self, *args, **kwargs)
    def equal(self, *args, **kwargs): return _openmoc.SwigPyIterator_equal(self, *args, **kwargs)
    def copy(self): return _openmoc.SwigPyIterator_copy(self)
    def next(self): return _openmoc.SwigPyIterator_next(self)
    def __next__(self): return _openmoc.SwigPyIterator___next__(self)
    def previous(self): return _openmoc.SwigPyIterator_previous(self)
    def advance(self, *args, **kwargs): return _openmoc.SwigPyIterator_advance(self, *args, **kwargs)
    def __eq__(self, *args, **kwargs): return _openmoc.SwigPyIterator___eq__(self, *args, **kwargs)
    def __ne__(self, *args, **kwargs): return _openmoc.SwigPyIterator___ne__(self, *args, **kwargs)
    def __iadd__(self, *args, **kwargs): return _openmoc.SwigPyIterator___iadd__(self, *args, **kwargs)
    def __isub__(self, *args, **kwargs): return _openmoc.SwigPyIterator___isub__(self, *args, **kwargs)
    def __add__(self, *args, **kwargs): return _openmoc.SwigPyIterator___add__(self, *args, **kwargs)
    def __sub__(self, *args): return _openmoc.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _openmoc.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def cell_id():
  return _openmoc.cell_id()
cell_id = _openmoc.cell_id

def reset_cell_id():
  return _openmoc.reset_cell_id()
reset_cell_id = _openmoc.reset_cell_id
class surface_halfspace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, surface_halfspace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, surface_halfspace, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_surface"] = _openmoc.surface_halfspace__surface_set
    __swig_getmethods__["_surface"] = _openmoc.surface_halfspace__surface_get
    if _newclass:_surface = _swig_property(_openmoc.surface_halfspace__surface_get, _openmoc.surface_halfspace__surface_set)
    __swig_setmethods__["_halfspace"] = _openmoc.surface_halfspace__halfspace_set
    __swig_getmethods__["_halfspace"] = _openmoc.surface_halfspace__halfspace_get
    if _newclass:_halfspace = _swig_property(_openmoc.surface_halfspace__halfspace_get, _openmoc.surface_halfspace__halfspace_set)
    def __init__(self): 
        this = _openmoc.new_surface_halfspace()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc.delete_surface_halfspace
    __del__ = lambda self : None;
surface_halfspace_swigregister = _openmoc.surface_halfspace_swigregister
surface_halfspace_swigregister(surface_halfspace)

MATERIAL = _openmoc.MATERIAL
FILL = _openmoc.FILL
class Cell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cell, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openmoc.delete_Cell
    __del__ = lambda self : None;
    def getUid(self): return _openmoc.Cell_getUid(self)
    def getId(self): return _openmoc.Cell_getId(self)
    def getName(self): return _openmoc.Cell_getName(self)
    def getType(self): return _openmoc.Cell_getType(self)
    def getMinX(self): return _openmoc.Cell_getMinX(self)
    def getMaxX(self): return _openmoc.Cell_getMaxX(self)
    def getMinY(self): return _openmoc.Cell_getMinY(self)
    def getMaxY(self): return _openmoc.Cell_getMaxY(self)
    def getMinZ(self): return _openmoc.Cell_getMinZ(self)
    def getMaxZ(self): return _openmoc.Cell_getMaxZ(self)
    def getMinXBoundaryType(self): return _openmoc.Cell_getMinXBoundaryType(self)
    def getMaxXBoundaryType(self): return _openmoc.Cell_getMaxXBoundaryType(self)
    def getMinYBoundaryType(self): return _openmoc.Cell_getMinYBoundaryType(self)
    def getMaxYBoundaryType(self): return _openmoc.Cell_getMaxYBoundaryType(self)
    def getMinZBoundaryType(self): return _openmoc.Cell_getMinZBoundaryType(self)
    def getMaxZBoundaryType(self): return _openmoc.Cell_getMaxZBoundaryType(self)
    def getNumSurfaces(self): return _openmoc.Cell_getNumSurfaces(self)
    def getSurfaces(self): return _openmoc.Cell_getSurfaces(self)
    def getAllCells(self): return _openmoc.Cell_getAllCells(self)
    def getAllUniverses(self): return _openmoc.Cell_getAllUniverses(self)
    def setName(self, *args, **kwargs): return _openmoc.Cell_setName(self, *args, **kwargs)
    def addSurface(self, *args, **kwargs): return _openmoc.Cell_addSurface(self, *args, **kwargs)
    def removeSurface(self, *args, **kwargs): return _openmoc.Cell_removeSurface(self, *args, **kwargs)
    def findBoundingBox(self): return _openmoc.Cell_findBoundingBox(self)
    def cellContainsPoint(self, *args, **kwargs): return _openmoc.Cell_cellContainsPoint(self, *args, **kwargs)
    def cellContainsCoords(self, *args, **kwargs): return _openmoc.Cell_cellContainsCoords(self, *args, **kwargs)
    def minSurfaceDist(self, *args, **kwargs): return _openmoc.Cell_minSurfaceDist(self, *args, **kwargs)
    def toString(self): return _openmoc.Cell_toString(self)
    def printString(self): return _openmoc.Cell_printString(self)
Cell_swigregister = _openmoc.Cell_swigregister
Cell_swigregister(Cell)

class CellBasic(Cell):
    __swig_setmethods__ = {}
    for _s in [Cell]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellBasic, name, value)
    __swig_getmethods__ = {}
    for _s in [Cell]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CellBasic, name)
    __repr__ = _swig_repr
    def __init__(self, id=0, name="", rings=0, sectors=0): 
        this = _openmoc.new_CellBasic(id, name, rings, sectors)
        try: self.this.append(this)
        except: self.this = this
    def getMaterial(self): return _openmoc.CellBasic_getMaterial(self)
    def getNumRings(self): return _openmoc.CellBasic_getNumRings(self)
    def getNumSectors(self): return _openmoc.CellBasic_getNumSectors(self)
    def getAllCells(self): return _openmoc.CellBasic_getAllCells(self)
    def getAllUniverses(self): return _openmoc.CellBasic_getAllUniverses(self)
    def setMaterial(self, *args, **kwargs): return _openmoc.CellBasic_setMaterial(self, *args, **kwargs)
    def setNumRings(self, *args, **kwargs): return _openmoc.CellBasic_setNumRings(self, *args, **kwargs)
    def setNumSectors(self, *args, **kwargs): return _openmoc.CellBasic_setNumSectors(self, *args, **kwargs)
    def clone(self): return _openmoc.CellBasic_clone(self)
    def subdivideCell(self): return _openmoc.CellBasic_subdivideCell(self)
    def toString(self): return _openmoc.CellBasic_toString(self)
    def printString(self): return _openmoc.CellBasic_printString(self)
    __swig_destroy__ = _openmoc.delete_CellBasic
    __del__ = lambda self : None;
CellBasic_swigregister = _openmoc.CellBasic_swigregister
CellBasic_swigregister(CellBasic)

class CellFill(Cell):
    __swig_setmethods__ = {}
    for _s in [Cell]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellFill, name, value)
    __swig_getmethods__ = {}
    for _s in [Cell]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CellFill, name)
    __repr__ = _swig_repr
    def __init__(self, id=0, name=""): 
        this = _openmoc.new_CellFill(id, name)
        try: self.this.append(this)
        except: self.this = this
    def getFill(self): return _openmoc.CellFill_getFill(self)
    def getAllCells(self): return _openmoc.CellFill_getAllCells(self)
    def getAllUniverses(self): return _openmoc.CellFill_getAllUniverses(self)
    def setFill(self, *args, **kwargs): return _openmoc.CellFill_setFill(self, *args, **kwargs)
    def toString(self): return _openmoc.CellFill_toString(self)
    def printString(self): return _openmoc.CellFill_printString(self)
    __swig_destroy__ = _openmoc.delete_CellFill
    __del__ = lambda self : None;
CellFill_swigregister = _openmoc.CellFill_swigregister
CellFill_swigregister(CellFill)

class fsr_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fsr_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fsr_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_fsr_id"] = _openmoc.fsr_data__fsr_id_set
    __swig_getmethods__["_fsr_id"] = _openmoc.fsr_data__fsr_id_get
    if _newclass:_fsr_id = _swig_property(_openmoc.fsr_data__fsr_id_get, _openmoc.fsr_data__fsr_id_set)
    __swig_setmethods__["_point"] = _openmoc.fsr_data__point_set
    __swig_getmethods__["_point"] = _openmoc.fsr_data__point_get
    if _newclass:_point = _swig_property(_openmoc.fsr_data__point_get, _openmoc.fsr_data__point_set)
    def __init__(self): 
        this = _openmoc.new_fsr_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc.delete_fsr_data
    __del__ = lambda self : None;
fsr_data_swigregister = _openmoc.fsr_data_swigregister
fsr_data_swigregister(fsr_data)


def reset_auto_ids():
  return _openmoc.reset_auto_ids()
reset_auto_ids = _openmoc.reset_auto_ids
class Geometry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Geometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Geometry, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openmoc.new_Geometry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc.delete_Geometry
    __del__ = lambda self : None;
    def getWidth(self): return _openmoc.Geometry_getWidth(self)
    def getHeight(self): return _openmoc.Geometry_getHeight(self)
    def getMinX(self): return _openmoc.Geometry_getMinX(self)
    def getMaxX(self): return _openmoc.Geometry_getMaxX(self)
    def getMinY(self): return _openmoc.Geometry_getMinY(self)
    def getMaxY(self): return _openmoc.Geometry_getMaxY(self)
    def getMinZ(self): return _openmoc.Geometry_getMinZ(self)
    def getMaxZ(self): return _openmoc.Geometry_getMaxZ(self)
    def getMinXBoundaryType(self): return _openmoc.Geometry_getMinXBoundaryType(self)
    def getMaxXBoundaryType(self): return _openmoc.Geometry_getMaxXBoundaryType(self)
    def getMinYBoundaryType(self): return _openmoc.Geometry_getMinYBoundaryType(self)
    def getMaxYBoundaryType(self): return _openmoc.Geometry_getMaxYBoundaryType(self)
    def getMinZBoundaryType(self): return _openmoc.Geometry_getMinZBoundaryType(self)
    def getMaxZBoundaryType(self): return _openmoc.Geometry_getMaxZBoundaryType(self)
    def getRootUniverse(self): return _openmoc.Geometry_getRootUniverse(self)
    def getNumFSRs(self): return _openmoc.Geometry_getNumFSRs(self)
    def getNumEnergyGroups(self): return _openmoc.Geometry_getNumEnergyGroups(self)
    def getNumMaterials(self): return _openmoc.Geometry_getNumMaterials(self)
    def getNumCells(self): return _openmoc.Geometry_getNumCells(self)
    def getAllMaterials(self): return _openmoc.Geometry_getAllMaterials(self)
    def getAllMaterialCells(self): return _openmoc.Geometry_getAllMaterialCells(self)
    def setRootUniverse(self, *args, **kwargs): return _openmoc.Geometry_setRootUniverse(self, *args, **kwargs)
    def getMaxSegmentLength(self): return _openmoc.Geometry_getMaxSegmentLength(self)
    def getMinSegmentLength(self): return _openmoc.Geometry_getMinSegmentLength(self)
    def getCmfd(self): return _openmoc.Geometry_getCmfd(self)
    def getFSRsToKeys(self): return _openmoc.Geometry_getFSRsToKeys(self)
    def getFSRsToMaterialIDs(self): return _openmoc.Geometry_getFSRsToMaterialIDs(self)
    def getFSRId(self, *args, **kwargs): return _openmoc.Geometry_getFSRId(self, *args, **kwargs)
    def getFSRPoint(self, *args, **kwargs): return _openmoc.Geometry_getFSRPoint(self, *args, **kwargs)
    def getFSRKey(self, *args, **kwargs): return _openmoc.Geometry_getFSRKey(self, *args, **kwargs)
    def getFSRKeysMap(self): return _openmoc.Geometry_getFSRKeysMap(self)
    def setFSRsToMaterialIDs(self, *args, **kwargs): return _openmoc.Geometry_setFSRsToMaterialIDs(self, *args, **kwargs)
    def setFSRsToKeys(self, *args, **kwargs): return _openmoc.Geometry_setFSRsToKeys(self, *args, **kwargs)
    def setNumFSRs(self, *args, **kwargs): return _openmoc.Geometry_setNumFSRs(self, *args, **kwargs)
    def setCmfd(self, *args, **kwargs): return _openmoc.Geometry_setCmfd(self, *args, **kwargs)
    def setFSRKeysMap(self, *args, **kwargs): return _openmoc.Geometry_setFSRKeysMap(self, *args, **kwargs)
    def findCellContainingCoords(self, *args, **kwargs): return _openmoc.Geometry_findCellContainingCoords(self, *args, **kwargs)
    def findFSRMaterial(self, *args, **kwargs): return _openmoc.Geometry_findFSRMaterial(self, *args, **kwargs)
    def findFSRId(self, *args, **kwargs): return _openmoc.Geometry_findFSRId(self, *args, **kwargs)
    def subdivideCells(self): return _openmoc.Geometry_subdivideCells(self)
    def initializeFlatSourceRegions(self): return _openmoc.Geometry_initializeFlatSourceRegions(self)
    def segmentize(self, *args, **kwargs): return _openmoc.Geometry_segmentize(self, *args, **kwargs)
    def computeFissionability(self, univ=None): return _openmoc.Geometry_computeFissionability(self, univ)
    def toString(self): return _openmoc.Geometry_toString(self)
    def printString(self): return _openmoc.Geometry_printString(self)
    def initializeCmfd(self): return _openmoc.Geometry_initializeCmfd(self)
    def withinBounds(self, *args, **kwargs): return _openmoc.Geometry_withinBounds(self, *args, **kwargs)
Geometry_swigregister = _openmoc.Geometry_swigregister
Geometry_swigregister(Geometry)

VACUUM = _openmoc.VACUUM
REFLECTIVE = _openmoc.REFLECTIVE
BOUNDARY_NONE = _openmoc.BOUNDARY_NONE
UNIV = _openmoc.UNIV
LAT = _openmoc.LAT
class LocalCoords(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalCoords, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LocalCoords, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _openmoc.new_LocalCoords(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc.delete_LocalCoords
    __del__ = lambda self : None;
    def getType(self): return _openmoc.LocalCoords_getType(self)
    def getUniverse(self): return _openmoc.LocalCoords_getUniverse(self)
    def getCell(self): return _openmoc.LocalCoords_getCell(self)
    def getLattice(self): return _openmoc.LocalCoords_getLattice(self)
    def getLatticeX(self): return _openmoc.LocalCoords_getLatticeX(self)
    def getLatticeY(self): return _openmoc.LocalCoords_getLatticeY(self)
    def getX(self): return _openmoc.LocalCoords_getX(self)
    def getY(self): return _openmoc.LocalCoords_getY(self)
    def getPoint(self): return _openmoc.LocalCoords_getPoint(self)
    def getNext(self): return _openmoc.LocalCoords_getNext(self)
    def getPrev(self): return _openmoc.LocalCoords_getPrev(self)
    def setType(self, *args, **kwargs): return _openmoc.LocalCoords_setType(self, *args, **kwargs)
    def setUniverse(self, *args, **kwargs): return _openmoc.LocalCoords_setUniverse(self, *args, **kwargs)
    def setCell(self, *args, **kwargs): return _openmoc.LocalCoords_setCell(self, *args, **kwargs)
    def setLattice(self, *args, **kwargs): return _openmoc.LocalCoords_setLattice(self, *args, **kwargs)
    def setLatticeX(self, *args, **kwargs): return _openmoc.LocalCoords_setLatticeX(self, *args, **kwargs)
    def setLatticeY(self, *args, **kwargs): return _openmoc.LocalCoords_setLatticeY(self, *args, **kwargs)
    def setX(self, *args, **kwargs): return _openmoc.LocalCoords_setX(self, *args, **kwargs)
    def setY(self, *args, **kwargs): return _openmoc.LocalCoords_setY(self, *args, **kwargs)
    def setNext(self, *args, **kwargs): return _openmoc.LocalCoords_setNext(self, *args, **kwargs)
    def setPrev(self, *args, **kwargs): return _openmoc.LocalCoords_setPrev(self, *args, **kwargs)
    def getLowestLevel(self): return _openmoc.LocalCoords_getLowestLevel(self)
    def getHighestLevel(self): return _openmoc.LocalCoords_getHighestLevel(self)
    def adjustCoords(self, *args, **kwargs): return _openmoc.LocalCoords_adjustCoords(self, *args, **kwargs)
    def updateMostLocal(self, *args, **kwargs): return _openmoc.LocalCoords_updateMostLocal(self, *args, **kwargs)
    def prune(self): return _openmoc.LocalCoords_prune(self)
    def copyCoords(self, *args, **kwargs): return _openmoc.LocalCoords_copyCoords(self, *args, **kwargs)
    def toString(self): return _openmoc.LocalCoords_toString(self)
LocalCoords_swigregister = _openmoc.LocalCoords_swigregister
LocalCoords_swigregister(LocalCoords)

DEBUG = _openmoc.DEBUG
INFO = _openmoc.INFO
NORMAL = _openmoc.NORMAL
SEPARATOR = _openmoc.SEPARATOR
HEADER = _openmoc.HEADER
TITLE = _openmoc.TITLE
WARNING = _openmoc.WARNING
CRITICAL = _openmoc.CRITICAL
RESULT = _openmoc.RESULT
UNITTEST = _openmoc.UNITTEST
ERROR = _openmoc.ERROR

def set_err(*args, **kwargs):
  return _openmoc.set_err(*args, **kwargs)
set_err = _openmoc.set_err

def set_output_directory(*args, **kwargs):
  return _openmoc.set_output_directory(*args, **kwargs)
set_output_directory = _openmoc.set_output_directory

def get_output_directory():
  return _openmoc.get_output_directory()
get_output_directory = _openmoc.get_output_directory

def set_log_filename(*args, **kwargs):
  return _openmoc.set_log_filename(*args, **kwargs)
set_log_filename = _openmoc.set_log_filename

def get_log_filename():
  return _openmoc.get_log_filename()
get_log_filename = _openmoc.get_log_filename

def set_separator_character(*args, **kwargs):
  return _openmoc.set_separator_character(*args, **kwargs)
set_separator_character = _openmoc.set_separator_character

def get_separator_character():
  return _openmoc.get_separator_character()
get_separator_character = _openmoc.get_separator_character

def set_header_character(*args, **kwargs):
  return _openmoc.set_header_character(*args, **kwargs)
set_header_character = _openmoc.set_header_character

def get_header_character():
  return _openmoc.get_header_character()
get_header_character = _openmoc.get_header_character

def set_title_character(*args, **kwargs):
  return _openmoc.set_title_character(*args, **kwargs)
set_title_character = _openmoc.set_title_character

def get_title_character():
  return _openmoc.get_title_character()
get_title_character = _openmoc.get_title_character

def set_line_length(*args, **kwargs):
  return _openmoc.set_line_length(*args, **kwargs)
set_line_length = _openmoc.set_line_length

def set_log_level(*args, **kwargs):
  return _openmoc.set_log_level(*args, **kwargs)
set_log_level = _openmoc.set_log_level

def get_log_level():
  return _openmoc.get_log_level()
get_log_level = _openmoc.get_log_level

def log_printf(*args, **kwargs):
  return _openmoc.log_printf(*args, **kwargs)
log_printf = _openmoc.log_printf

def create_multiline_msg(*args, **kwargs):
  return _openmoc.create_multiline_msg(*args, **kwargs)
create_multiline_msg = _openmoc.create_multiline_msg
ZERO_SIGMA_T = _openmoc.ZERO_SIGMA_T
SIGMA_T_THRESH = _openmoc.SIGMA_T_THRESH

def material_id():
  return _openmoc.material_id()
material_id = _openmoc.material_id

def reset_material_id():
  return _openmoc.reset_material_id()
reset_material_id = _openmoc.reset_material_id
class Material(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Material, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Material, name)
    __repr__ = _swig_repr
    def __init__(self, id=0, name=""): 
        this = _openmoc.new_Material(id, name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc.delete_Material
    __del__ = lambda self : None;
    def getId(self): return _openmoc.Material_getId(self)
    def getName(self): return _openmoc.Material_getName(self)
    def getNumEnergyGroups(self): return _openmoc.Material_getNumEnergyGroups(self)
    def getSigmaT(self): return _openmoc.Material_getSigmaT(self)
    def getSigmaA(self): return _openmoc.Material_getSigmaA(self)
    def getSigmaS(self): return _openmoc.Material_getSigmaS(self)
    def getSigmaF(self): return _openmoc.Material_getSigmaF(self)
    def getNuSigmaF(self): return _openmoc.Material_getNuSigmaF(self)
    def getChi(self): return _openmoc.Material_getChi(self)
    def getDifCoef(self): return _openmoc.Material_getDifCoef(self)
    def getBuckling(self): return _openmoc.Material_getBuckling(self)
    def getDifHat(self): return _openmoc.Material_getDifHat(self)
    def getDifTilde(self): return _openmoc.Material_getDifTilde(self)
    def getSigmaTByGroup(self, *args, **kwargs): return _openmoc.Material_getSigmaTByGroup(self, *args, **kwargs)
    def getSigmaAByGroup(self, *args, **kwargs): return _openmoc.Material_getSigmaAByGroup(self, *args, **kwargs)
    def getSigmaSByGroup(self, *args, **kwargs): return _openmoc.Material_getSigmaSByGroup(self, *args, **kwargs)
    def getSigmaSByGroupInline(self, *args, **kwargs): return _openmoc.Material_getSigmaSByGroupInline(self, *args, **kwargs)
    def getSigmaFByGroup(self, *args, **kwargs): return _openmoc.Material_getSigmaFByGroup(self, *args, **kwargs)
    def getNuSigmaFByGroup(self, *args, **kwargs): return _openmoc.Material_getNuSigmaFByGroup(self, *args, **kwargs)
    def getChiByGroup(self, *args, **kwargs): return _openmoc.Material_getChiByGroup(self, *args, **kwargs)
    def getDifCoefByGroup(self, *args, **kwargs): return _openmoc.Material_getDifCoefByGroup(self, *args, **kwargs)
    def getBucklingByGroup(self, *args, **kwargs): return _openmoc.Material_getBucklingByGroup(self, *args, **kwargs)
    def getDifHatByGroup(self, *args, **kwargs): return _openmoc.Material_getDifHatByGroup(self, *args, **kwargs)
    def getDifTildeByGroup(self, *args, **kwargs): return _openmoc.Material_getDifTildeByGroup(self, *args, **kwargs)
    def isFissionable(self): return _openmoc.Material_isFissionable(self)
    def isDataAligned(self): return _openmoc.Material_isDataAligned(self)
    def getNumVectorGroups(self): return _openmoc.Material_getNumVectorGroups(self)
    def setName(self, *args, **kwargs): return _openmoc.Material_setName(self, *args, **kwargs)
    def setNumEnergyGroups(self, *args, **kwargs): return _openmoc.Material_setNumEnergyGroups(self, *args, **kwargs)
    def setSigmaT(self, *args, **kwargs): return _openmoc.Material_setSigmaT(self, *args, **kwargs)
    def setSigmaA(self, *args, **kwargs): return _openmoc.Material_setSigmaA(self, *args, **kwargs)
    def setSigmaS(self, *args, **kwargs): return _openmoc.Material_setSigmaS(self, *args, **kwargs)
    def setSigmaF(self, *args, **kwargs): return _openmoc.Material_setSigmaF(self, *args, **kwargs)
    def setNuSigmaF(self, *args, **kwargs): return _openmoc.Material_setNuSigmaF(self, *args, **kwargs)
    def setChi(self, *args, **kwargs): return _openmoc.Material_setChi(self, *args, **kwargs)
    def setBuckling(self, *args, **kwargs): return _openmoc.Material_setBuckling(self, *args, **kwargs)
    def setDifCoef(self, *args, **kwargs): return _openmoc.Material_setDifCoef(self, *args, **kwargs)
    def setDifHat(self, *args, **kwargs): return _openmoc.Material_setDifHat(self, *args, **kwargs)
    def setDifTilde(self, *args, **kwargs): return _openmoc.Material_setDifTilde(self, *args, **kwargs)
    def setSigmaTByGroup(self, *args, **kwargs): return _openmoc.Material_setSigmaTByGroup(self, *args, **kwargs)
    def setSigmaAByGroup(self, *args, **kwargs): return _openmoc.Material_setSigmaAByGroup(self, *args, **kwargs)
    def setSigmaFByGroup(self, *args, **kwargs): return _openmoc.Material_setSigmaFByGroup(self, *args, **kwargs)
    def setNuSigmaFByGroup(self, *args, **kwargs): return _openmoc.Material_setNuSigmaFByGroup(self, *args, **kwargs)
    def setSigmaSByGroup(self, *args, **kwargs): return _openmoc.Material_setSigmaSByGroup(self, *args, **kwargs)
    def setChiByGroup(self, *args, **kwargs): return _openmoc.Material_setChiByGroup(self, *args, **kwargs)
    def setBucklingByGroup(self, *args, **kwargs): return _openmoc.Material_setBucklingByGroup(self, *args, **kwargs)
    def setDifCoefByGroup(self, *args, **kwargs): return _openmoc.Material_setDifCoefByGroup(self, *args, **kwargs)
    def setDifHatByGroup(self, *args, **kwargs): return _openmoc.Material_setDifHatByGroup(self, *args, **kwargs)
    def setDifTildeByGroup(self, *args, **kwargs): return _openmoc.Material_setDifTildeByGroup(self, *args, **kwargs)
    def checkSigmaT(self): return _openmoc.Material_checkSigmaT(self)
    def toString(self): return _openmoc.Material_toString(self)
    def printString(self): return _openmoc.Material_printString(self)
    def alignData(self): return _openmoc.Material_alignData(self)
    def clone(self): return _openmoc.Material_clone(self)
Material_swigregister = _openmoc.Material_swigregister
Material_swigregister(Material)

class Point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openmoc.new_Point()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc.delete_Point
    __del__ = lambda self : None;
    def setCoords(self, *args, **kwargs): return _openmoc.Point_setCoords(self, *args, **kwargs)
    def getX(self): return _openmoc.Point_getX(self)
    def getY(self): return _openmoc.Point_getY(self)
    def setX(self, *args, **kwargs): return _openmoc.Point_setX(self, *args, **kwargs)
    def setY(self, *args, **kwargs): return _openmoc.Point_setY(self, *args, **kwargs)
    def distance(self, *args, **kwargs): return _openmoc.Point_distance(self, *args, **kwargs)
    def distanceToPoint(self, *args, **kwargs): return _openmoc.Point_distanceToPoint(self, *args, **kwargs)
    def toString(self): return _openmoc.Point_toString(self)
Point_swigregister = _openmoc.Point_swigregister
Point_swigregister(Point)

POLAR_WEIGHT_SUM_TOL = _openmoc.POLAR_WEIGHT_SUM_TOL
class PolarQuad(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolarQuad, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolarQuad, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openmoc.new_PolarQuad()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc.delete_PolarQuad
    __del__ = lambda self : None;
    def getNumPolarAngles(self): return _openmoc.PolarQuad_getNumPolarAngles(self)
    def getSinTheta(self, *args, **kwargs): return _openmoc.PolarQuad_getSinTheta(self, *args, **kwargs)
    def getWeight(self, *args, **kwargs): return _openmoc.PolarQuad_getWeight(self, *args, **kwargs)
    def getMultiple(self, *args, **kwargs): return _openmoc.PolarQuad_getMultiple(self, *args, **kwargs)
    def getSinThetas(self): return _openmoc.PolarQuad_getSinThetas(self)
    def getWeights(self): return _openmoc.PolarQuad_getWeights(self)
    def getMultiples(self): return _openmoc.PolarQuad_getMultiples(self)
    def setNumPolarAngles(self, *args, **kwargs): return _openmoc.PolarQuad_setNumPolarAngles(self, *args, **kwargs)
    def setSinThetas(self, *args, **kwargs): return _openmoc.PolarQuad_setSinThetas(self, *args, **kwargs)
    def setWeights(self, *args, **kwargs): return _openmoc.PolarQuad_setWeights(self, *args, **kwargs)
    def initialize(self): return _openmoc.PolarQuad_initialize(self)
    def toString(self): return _openmoc.PolarQuad_toString(self)
PolarQuad_swigregister = _openmoc.PolarQuad_swigregister
PolarQuad_swigregister(PolarQuad)

class TYPolarQuad(PolarQuad):
    __swig_setmethods__ = {}
    for _s in [PolarQuad]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TYPolarQuad, name, value)
    __swig_getmethods__ = {}
    for _s in [PolarQuad]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TYPolarQuad, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openmoc.new_TYPolarQuad()
        try: self.this.append(this)
        except: self.this = this
    def setNumPolarAngles(self, *args, **kwargs): return _openmoc.TYPolarQuad_setNumPolarAngles(self, *args, **kwargs)
    def initialize(self): return _openmoc.TYPolarQuad_initialize(self)
    __swig_destroy__ = _openmoc.delete_TYPolarQuad
    __del__ = lambda self : None;
TYPolarQuad_swigregister = _openmoc.TYPolarQuad_swigregister
TYPolarQuad_swigregister(TYPolarQuad)

class LeonardPolarQuad(PolarQuad):
    __swig_setmethods__ = {}
    for _s in [PolarQuad]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LeonardPolarQuad, name, value)
    __swig_getmethods__ = {}
    for _s in [PolarQuad]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LeonardPolarQuad, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openmoc.new_LeonardPolarQuad()
        try: self.this.append(this)
        except: self.this = this
    def setNumPolarAngles(self, *args, **kwargs): return _openmoc.LeonardPolarQuad_setNumPolarAngles(self, *args, **kwargs)
    def initialize(self): return _openmoc.LeonardPolarQuad_initialize(self)
    __swig_destroy__ = _openmoc.delete_LeonardPolarQuad
    __del__ = lambda self : None;
LeonardPolarQuad_swigregister = _openmoc.LeonardPolarQuad_swigregister
LeonardPolarQuad_swigregister(LeonardPolarQuad)

class GLPolarQuad(PolarQuad):
    __swig_setmethods__ = {}
    for _s in [PolarQuad]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLPolarQuad, name, value)
    __swig_getmethods__ = {}
    for _s in [PolarQuad]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GLPolarQuad, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openmoc.new_GLPolarQuad()
        try: self.this.append(this)
        except: self.this = this
    def setNumPolarAngles(self, *args, **kwargs): return _openmoc.GLPolarQuad_setNumPolarAngles(self, *args, **kwargs)
    def initialize(self): return _openmoc.GLPolarQuad_initialize(self)
    __swig_destroy__ = _openmoc.delete_GLPolarQuad
    __del__ = lambda self : None;
GLPolarQuad_swigregister = _openmoc.GLPolarQuad_swigregister
GLPolarQuad_swigregister(GLPolarQuad)

class EqualWeightPolarQuad(PolarQuad):
    __swig_setmethods__ = {}
    for _s in [PolarQuad]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EqualWeightPolarQuad, name, value)
    __swig_getmethods__ = {}
    for _s in [PolarQuad]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EqualWeightPolarQuad, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openmoc.new_EqualWeightPolarQuad()
        try: self.this.append(this)
        except: self.this = this
    def setNumPolarAngles(self, *args, **kwargs): return _openmoc.EqualWeightPolarQuad_setNumPolarAngles(self, *args, **kwargs)
    def initialize(self): return _openmoc.EqualWeightPolarQuad_initialize(self)
    __swig_destroy__ = _openmoc.delete_EqualWeightPolarQuad
    __del__ = lambda self : None;
EqualWeightPolarQuad_swigregister = _openmoc.EqualWeightPolarQuad_swigregister
EqualWeightPolarQuad_swigregister(EqualWeightPolarQuad)

class EqualAnglePolarQuad(PolarQuad):
    __swig_setmethods__ = {}
    for _s in [PolarQuad]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EqualAnglePolarQuad, name, value)
    __swig_getmethods__ = {}
    for _s in [PolarQuad]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EqualAnglePolarQuad, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openmoc.new_EqualAnglePolarQuad()
        try: self.this.append(this)
        except: self.this = this
    def setNumPolarAngles(self, *args, **kwargs): return _openmoc.EqualAnglePolarQuad_setNumPolarAngles(self, *args, **kwargs)
    def initialize(self): return _openmoc.EqualAnglePolarQuad_initialize(self)
    __swig_destroy__ = _openmoc.delete_EqualAnglePolarQuad
    __del__ = lambda self : None;
EqualAnglePolarQuad_swigregister = _openmoc.EqualAnglePolarQuad_swigregister
EqualAnglePolarQuad_swigregister(EqualAnglePolarQuad)

FOUR_PI = _openmoc.FOUR_PI
ONE_OVER_FOUR_PI = _openmoc.ONE_OVER_FOUR_PI
class Solver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Solver, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openmoc.delete_Solver
    __del__ = lambda self : None;
    def getGeometry(self): return _openmoc.Solver_getGeometry(self)
    def getFSRVolume(self, *args, **kwargs): return _openmoc.Solver_getFSRVolume(self, *args, **kwargs)
    def getTrackGenerator(self): return _openmoc.Solver_getTrackGenerator(self)
    def getNumPolarAngles(self): return _openmoc.Solver_getNumPolarAngles(self)
    def getNumIterations(self): return _openmoc.Solver_getNumIterations(self)
    def getTotalTime(self): return _openmoc.Solver_getTotalTime(self)
    def getKeff(self): return _openmoc.Solver_getKeff(self)
    def getSourceConvergenceThreshold(self): return _openmoc.Solver_getSourceConvergenceThreshold(self)
    def isUsingSinglePrecision(self): return _openmoc.Solver_isUsingSinglePrecision(self)
    def isUsingDoublePrecision(self): return _openmoc.Solver_isUsingDoublePrecision(self)
    def isUsingExponentialInterpolation(self): return _openmoc.Solver_isUsingExponentialInterpolation(self)
    def isUsingExponentialIntrinsic(self): return _openmoc.Solver_isUsingExponentialIntrinsic(self)
    def getFSRScalarFlux(self, *args, **kwargs): return _openmoc.Solver_getFSRScalarFlux(self, *args, **kwargs)
    def getFSRScalarFluxes(self): return _openmoc.Solver_getFSRScalarFluxes(self)
    def getFSRSource(self, *args, **kwargs): return _openmoc.Solver_getFSRSource(self, *args, **kwargs)
    def setGeometry(self, *args, **kwargs): return _openmoc.Solver_setGeometry(self, *args, **kwargs)
    def setTrackGenerator(self, *args, **kwargs): return _openmoc.Solver_setTrackGenerator(self, *args, **kwargs)
    def setPolarQuadrature(self, *args, **kwargs): return _openmoc.Solver_setPolarQuadrature(self, *args, **kwargs)
    def setSourceConvergenceThreshold(self, *args, **kwargs): return _openmoc.Solver_setSourceConvergenceThreshold(self, *args, **kwargs)
    def useExponentialInterpolation(self): return _openmoc.Solver_useExponentialInterpolation(self)
    def useExponentialIntrinsic(self): return _openmoc.Solver_useExponentialIntrinsic(self)
    def convergeSource(self, *args, **kwargs): return _openmoc.Solver_convergeSource(self, *args, **kwargs)
    def computeFSRFissionRates(self, *args, **kwargs): return _openmoc.Solver_computeFSRFissionRates(self, *args, **kwargs)
    def printTimerReport(self): return _openmoc.Solver_printTimerReport(self)
Solver_swigregister = _openmoc.Solver_swigregister
Solver_swigregister(Solver)

class CPUSolver(Solver):
    __swig_setmethods__ = {}
    for _s in [Solver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPUSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [Solver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPUSolver, name)
    __repr__ = _swig_repr
    def __init__(self, geometry=None, track_generator=None): 
        this = _openmoc.new_CPUSolver(geometry, track_generator)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc.delete_CPUSolver
    __del__ = lambda self : None;
    def getNumThreads(self): return _openmoc.CPUSolver_getNumThreads(self)
    def getFSRScalarFlux(self, *args, **kwargs): return _openmoc.CPUSolver_getFSRScalarFlux(self, *args, **kwargs)
    def getFSRScalarFluxes(self): return _openmoc.CPUSolver_getFSRScalarFluxes(self)
    def getFSRSource(self, *args, **kwargs): return _openmoc.CPUSolver_getFSRSource(self, *args, **kwargs)
    def getSurfaceCurrents(self): return _openmoc.CPUSolver_getSurfaceCurrents(self)
    def setNumThreads(self, *args, **kwargs): return _openmoc.CPUSolver_setNumThreads(self, *args, **kwargs)
    def computeFSRFissionRates(self, *args, **kwargs): return _openmoc.CPUSolver_computeFSRFissionRates(self, *args, **kwargs)
CPUSolver_swigregister = _openmoc.CPUSolver_swigregister
CPUSolver_swigregister(CPUSolver)

ON_SURFACE_THRESH = _openmoc.ON_SURFACE_THRESH

def surf_id():
  return _openmoc.surf_id()
surf_id = _openmoc.surf_id

def reset_surf_id():
  return _openmoc.reset_surf_id()
reset_surf_id = _openmoc.reset_surf_id
PLANE = _openmoc.PLANE
CIRCLE = _openmoc.CIRCLE
XPLANE = _openmoc.XPLANE
YPLANE = _openmoc.YPLANE
ZPLANE = _openmoc.ZPLANE
QUADRATIC = _openmoc.QUADRATIC
class Surface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Surface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openmoc.delete_Surface
    __del__ = lambda self : None;
    def getUid(self): return _openmoc.Surface_getUid(self)
    def getId(self): return _openmoc.Surface_getId(self)
    def getName(self): return _openmoc.Surface_getName(self)
    def getSurfaceType(self): return _openmoc.Surface_getSurfaceType(self)
    def getBoundaryType(self): return _openmoc.Surface_getBoundaryType(self)
    def getMinX(self, *args, **kwargs): return _openmoc.Surface_getMinX(self, *args, **kwargs)
    def getMaxX(self, *args, **kwargs): return _openmoc.Surface_getMaxX(self, *args, **kwargs)
    def getMinY(self, *args, **kwargs): return _openmoc.Surface_getMinY(self, *args, **kwargs)
    def getMaxY(self, *args, **kwargs): return _openmoc.Surface_getMaxY(self, *args, **kwargs)
    def getMinZ(self, *args, **kwargs): return _openmoc.Surface_getMinZ(self, *args, **kwargs)
    def getMaxZ(self, *args, **kwargs): return _openmoc.Surface_getMaxZ(self, *args, **kwargs)
    def setName(self, *args, **kwargs): return _openmoc.Surface_setName(self, *args, **kwargs)
    def setBoundaryType(self, *args, **kwargs): return _openmoc.Surface_setBoundaryType(self, *args, **kwargs)
    def evaluate(self, *args, **kwargs): return _openmoc.Surface_evaluate(self, *args, **kwargs)
    def intersection(self, *args, **kwargs): return _openmoc.Surface_intersection(self, *args, **kwargs)
    def isPointOnSurface(self, *args, **kwargs): return _openmoc.Surface_isPointOnSurface(self, *args, **kwargs)
    def isCoordOnSurface(self, *args, **kwargs): return _openmoc.Surface_isCoordOnSurface(self, *args, **kwargs)
    def getMinDistance(self, *args, **kwargs): return _openmoc.Surface_getMinDistance(self, *args, **kwargs)
    def toString(self): return _openmoc.Surface_toString(self)
    def printString(self): return _openmoc.Surface_printString(self)
Surface_swigregister = _openmoc.Surface_swigregister
Surface_swigregister(Surface)

class Plane(Surface):
    __swig_setmethods__ = {}
    for _s in [Surface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plane, name, value)
    __swig_getmethods__ = {}
    for _s in [Surface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Plane, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _openmoc.new_Plane(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def getMinX(self, *args, **kwargs): return _openmoc.Plane_getMinX(self, *args, **kwargs)
    def getMaxX(self, *args, **kwargs): return _openmoc.Plane_getMaxX(self, *args, **kwargs)
    def getMinY(self, *args, **kwargs): return _openmoc.Plane_getMinY(self, *args, **kwargs)
    def getMaxY(self, *args, **kwargs): return _openmoc.Plane_getMaxY(self, *args, **kwargs)
    def getMinZ(self, *args, **kwargs): return _openmoc.Plane_getMinZ(self, *args, **kwargs)
    def getMaxZ(self, *args, **kwargs): return _openmoc.Plane_getMaxZ(self, *args, **kwargs)
    def getA(self): return _openmoc.Plane_getA(self)
    def getB(self): return _openmoc.Plane_getB(self)
    def getC(self): return _openmoc.Plane_getC(self)
    def evaluate(self, *args, **kwargs): return _openmoc.Plane_evaluate(self, *args, **kwargs)
    def intersection(self, *args, **kwargs): return _openmoc.Plane_intersection(self, *args, **kwargs)
    def toString(self): return _openmoc.Plane_toString(self)
    __swig_destroy__ = _openmoc.delete_Plane
    __del__ = lambda self : None;
Plane_swigregister = _openmoc.Plane_swigregister
Plane_swigregister(Plane)

class XPlane(Plane):
    __swig_setmethods__ = {}
    for _s in [Plane]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XPlane, name, value)
    __swig_getmethods__ = {}
    for _s in [Plane]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XPlane, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _openmoc.new_XPlane(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def setX(self, *args, **kwargs): return _openmoc.XPlane_setX(self, *args, **kwargs)
    def getX(self): return _openmoc.XPlane_getX(self)
    def getMinX(self, *args, **kwargs): return _openmoc.XPlane_getMinX(self, *args, **kwargs)
    def getMaxX(self, *args, **kwargs): return _openmoc.XPlane_getMaxX(self, *args, **kwargs)
    def toString(self): return _openmoc.XPlane_toString(self)
    __swig_destroy__ = _openmoc.delete_XPlane
    __del__ = lambda self : None;
XPlane_swigregister = _openmoc.XPlane_swigregister
XPlane_swigregister(XPlane)

class YPlane(Plane):
    __swig_setmethods__ = {}
    for _s in [Plane]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YPlane, name, value)
    __swig_getmethods__ = {}
    for _s in [Plane]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, YPlane, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _openmoc.new_YPlane(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def setY(self, *args, **kwargs): return _openmoc.YPlane_setY(self, *args, **kwargs)
    def getY(self): return _openmoc.YPlane_getY(self)
    def getMinY(self, *args, **kwargs): return _openmoc.YPlane_getMinY(self, *args, **kwargs)
    def getMaxY(self, *args, **kwargs): return _openmoc.YPlane_getMaxY(self, *args, **kwargs)
    def toString(self): return _openmoc.YPlane_toString(self)
    __swig_destroy__ = _openmoc.delete_YPlane
    __del__ = lambda self : None;
YPlane_swigregister = _openmoc.YPlane_swigregister
YPlane_swigregister(YPlane)

class ZPlane(Plane):
    __swig_setmethods__ = {}
    for _s in [Plane]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZPlane, name, value)
    __swig_getmethods__ = {}
    for _s in [Plane]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZPlane, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _openmoc.new_ZPlane(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def setZ(self, *args, **kwargs): return _openmoc.ZPlane_setZ(self, *args, **kwargs)
    def getZ(self): return _openmoc.ZPlane_getZ(self)
    def getMinZ(self, *args, **kwargs): return _openmoc.ZPlane_getMinZ(self, *args, **kwargs)
    def getMaxZ(self, *args, **kwargs): return _openmoc.ZPlane_getMaxZ(self, *args, **kwargs)
    def toString(self): return _openmoc.ZPlane_toString(self)
    __swig_destroy__ = _openmoc.delete_ZPlane
    __del__ = lambda self : None;
ZPlane_swigregister = _openmoc.ZPlane_swigregister
ZPlane_swigregister(ZPlane)

class Circle(Surface):
    __swig_setmethods__ = {}
    for _s in [Surface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Circle, name, value)
    __swig_getmethods__ = {}
    for _s in [Surface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Circle, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _openmoc.new_Circle(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def getX0(self): return _openmoc.Circle_getX0(self)
    def getY0(self): return _openmoc.Circle_getY0(self)
    def getRadius(self): return _openmoc.Circle_getRadius(self)
    def getMinX(self, *args, **kwargs): return _openmoc.Circle_getMinX(self, *args, **kwargs)
    def getMaxX(self, *args, **kwargs): return _openmoc.Circle_getMaxX(self, *args, **kwargs)
    def getMinY(self, *args, **kwargs): return _openmoc.Circle_getMinY(self, *args, **kwargs)
    def getMaxY(self, *args, **kwargs): return _openmoc.Circle_getMaxY(self, *args, **kwargs)
    def getMinZ(self, *args, **kwargs): return _openmoc.Circle_getMinZ(self, *args, **kwargs)
    def getMaxZ(self, *args, **kwargs): return _openmoc.Circle_getMaxZ(self, *args, **kwargs)
    def evaluate(self, *args, **kwargs): return _openmoc.Circle_evaluate(self, *args, **kwargs)
    def intersection(self, *args, **kwargs): return _openmoc.Circle_intersection(self, *args, **kwargs)
    def toString(self): return _openmoc.Circle_toString(self)
    __swig_destroy__ = _openmoc.delete_Circle
    __del__ = lambda self : None;
Circle_swigregister = _openmoc.Circle_swigregister
Circle_swigregister(Circle)

class Timer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Timer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Timer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openmoc.new_Timer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc.delete_Timer
    __del__ = lambda self : None;
    __swig_getmethods__["Get"] = lambda x: _openmoc.Timer_Get
    if _newclass:Get = staticmethod(_openmoc.Timer_Get)
    def startTimer(self): return _openmoc.Timer_startTimer(self)
    def stopTimer(self): return _openmoc.Timer_stopTimer(self)
    def recordSplit(self, *args, **kwargs): return _openmoc.Timer_recordSplit(self, *args, **kwargs)
    def getTime(self): return _openmoc.Timer_getTime(self)
    def getSplit(self, *args, **kwargs): return _openmoc.Timer_getSplit(self, *args, **kwargs)
    def printSplits(self): return _openmoc.Timer_printSplits(self)
    def clearSplit(self, *args, **kwargs): return _openmoc.Timer_clearSplit(self, *args, **kwargs)
    def clearSplits(self): return _openmoc.Timer_clearSplits(self)
Timer_swigregister = _openmoc.Timer_swigregister
Timer_swigregister(Timer)

def Timer_Get():
  return _openmoc.Timer_Get()
Timer_Get = _openmoc.Timer_Get

class segment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, segment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, segment, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_length"] = _openmoc.segment__length_set
    __swig_getmethods__["_length"] = _openmoc.segment__length_get
    if _newclass:_length = _swig_property(_openmoc.segment__length_get, _openmoc.segment__length_set)
    __swig_setmethods__["_material"] = _openmoc.segment__material_set
    __swig_getmethods__["_material"] = _openmoc.segment__material_get
    if _newclass:_material = _swig_property(_openmoc.segment__material_get, _openmoc.segment__material_set)
    __swig_setmethods__["_region_id"] = _openmoc.segment__region_id_set
    __swig_getmethods__["_region_id"] = _openmoc.segment__region_id_get
    if _newclass:_region_id = _swig_property(_openmoc.segment__region_id_get, _openmoc.segment__region_id_set)
    __swig_setmethods__["_cmfd_surface_fwd"] = _openmoc.segment__cmfd_surface_fwd_set
    __swig_getmethods__["_cmfd_surface_fwd"] = _openmoc.segment__cmfd_surface_fwd_get
    if _newclass:_cmfd_surface_fwd = _swig_property(_openmoc.segment__cmfd_surface_fwd_get, _openmoc.segment__cmfd_surface_fwd_set)
    __swig_setmethods__["_cmfd_surface_bwd"] = _openmoc.segment__cmfd_surface_bwd_set
    __swig_getmethods__["_cmfd_surface_bwd"] = _openmoc.segment__cmfd_surface_bwd_get
    if _newclass:_cmfd_surface_bwd = _swig_property(_openmoc.segment__cmfd_surface_bwd_get, _openmoc.segment__cmfd_surface_bwd_set)
    def __init__(self): 
        this = _openmoc.new_segment()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc.delete_segment
    __del__ = lambda self : None;
segment_swigregister = _openmoc.segment_swigregister
segment_swigregister(segment)

class Track(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Track, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Track, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openmoc.new_Track()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc.delete_Track
    __del__ = lambda self : None;
    def setValues(self, *args, **kwargs): return _openmoc.Track_setValues(self, *args, **kwargs)
    def setUid(self, *args, **kwargs): return _openmoc.Track_setUid(self, *args, **kwargs)
    def setPhi(self, *args, **kwargs): return _openmoc.Track_setPhi(self, *args, **kwargs)
    def setAzimAngleIndex(self, *args, **kwargs): return _openmoc.Track_setAzimAngleIndex(self, *args, **kwargs)
    def setReflIn(self, *args, **kwargs): return _openmoc.Track_setReflIn(self, *args, **kwargs)
    def setReflOut(self, *args, **kwargs): return _openmoc.Track_setReflOut(self, *args, **kwargs)
    def setBCIn(self, *args, **kwargs): return _openmoc.Track_setBCIn(self, *args, **kwargs)
    def setBCOut(self, *args, **kwargs): return _openmoc.Track_setBCOut(self, *args, **kwargs)
    def setTrackIn(self, *args, **kwargs): return _openmoc.Track_setTrackIn(self, *args, **kwargs)
    def setTrackOut(self, *args, **kwargs): return _openmoc.Track_setTrackOut(self, *args, **kwargs)
    def setTrackInI(self, *args, **kwargs): return _openmoc.Track_setTrackInI(self, *args, **kwargs)
    def setTrackInJ(self, *args, **kwargs): return _openmoc.Track_setTrackInJ(self, *args, **kwargs)
    def setTrackOutI(self, *args, **kwargs): return _openmoc.Track_setTrackOutI(self, *args, **kwargs)
    def setTrackOutJ(self, *args, **kwargs): return _openmoc.Track_setTrackOutJ(self, *args, **kwargs)
    def getUid(self): return _openmoc.Track_getUid(self)
    def getEnd(self): return _openmoc.Track_getEnd(self)
    def getStart(self): return _openmoc.Track_getStart(self)
    def getPhi(self): return _openmoc.Track_getPhi(self)
    def getAzimAngleIndex(self): return _openmoc.Track_getAzimAngleIndex(self)
    def getSegment(self, *args, **kwargs): return _openmoc.Track_getSegment(self, *args, **kwargs)
    def getSegments(self): return _openmoc.Track_getSegments(self)
    def getNumSegments(self): return _openmoc.Track_getNumSegments(self)
    def getTrackIn(self): return _openmoc.Track_getTrackIn(self)
    def getTrackOut(self): return _openmoc.Track_getTrackOut(self)
    def getTrackInI(self): return _openmoc.Track_getTrackInI(self)
    def getTrackInJ(self): return _openmoc.Track_getTrackInJ(self)
    def getTrackOutI(self): return _openmoc.Track_getTrackOutI(self)
    def getTrackOutJ(self): return _openmoc.Track_getTrackOutJ(self)
    def isReflIn(self): return _openmoc.Track_isReflIn(self)
    def isReflOut(self): return _openmoc.Track_isReflOut(self)
    def getBCIn(self): return _openmoc.Track_getBCIn(self)
    def getBCOut(self): return _openmoc.Track_getBCOut(self)
    def contains(self, *args, **kwargs): return _openmoc.Track_contains(self, *args, **kwargs)
    def addSegment(self, *args, **kwargs): return _openmoc.Track_addSegment(self, *args, **kwargs)
    def clearSegments(self): return _openmoc.Track_clearSegments(self)
    def toString(self): return _openmoc.Track_toString(self)
Track_swigregister = _openmoc.Track_swigregister
Track_swigregister(Track)

class TrackGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrackGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TrackGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _openmoc.new_TrackGenerator(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc.delete_TrackGenerator
    __del__ = lambda self : None;
    def getNumAzim(self): return _openmoc.TrackGenerator_getNumAzim(self)
    def getTrackSpacing(self): return _openmoc.TrackGenerator_getTrackSpacing(self)
    def getGeometry(self): return _openmoc.TrackGenerator_getGeometry(self)
    def getNumTracks(self): return _openmoc.TrackGenerator_getNumTracks(self)
    def getNumTracksArray(self): return _openmoc.TrackGenerator_getNumTracksArray(self)
    def getNumSegments(self): return _openmoc.TrackGenerator_getNumSegments(self)
    def getNumSegmentsArray(self): return _openmoc.TrackGenerator_getNumSegmentsArray(self)
    def getTracks(self): return _openmoc.TrackGenerator_getTracks(self)
    def getAzimWeights(self): return _openmoc.TrackGenerator_getAzimWeights(self)
    def getMaxOpticalLength(self): return _openmoc.TrackGenerator_getMaxOpticalLength(self)
    def getTotNumSegments(self): return _openmoc.TrackGenerator_getTotNumSegments(self)
    def getTotNumTracks(self): return _openmoc.TrackGenerator_getTotNumTracks(self)
    def getNumThreads(self): return _openmoc.TrackGenerator_getNumThreads(self)
    def getFSRVolumes(self): return _openmoc.TrackGenerator_getFSRVolumes(self)
    def getFSRVolume(self, *args, **kwargs): return _openmoc.TrackGenerator_getFSRVolume(self, *args, **kwargs)
    def setNumAzim(self, *args, **kwargs): return _openmoc.TrackGenerator_setNumAzim(self, *args, **kwargs)
    def setTrackSpacing(self, *args, **kwargs): return _openmoc.TrackGenerator_setTrackSpacing(self, *args, **kwargs)
    def setGeometry(self, *args, **kwargs): return _openmoc.TrackGenerator_setGeometry(self, *args, **kwargs)
    def setMaxOpticalLength(self, *args, **kwargs): return _openmoc.TrackGenerator_setMaxOpticalLength(self, *args, **kwargs)
    def setNumThreads(self, *args, **kwargs): return _openmoc.TrackGenerator_setNumThreads(self, *args, **kwargs)
    def containsTracks(self): return _openmoc.TrackGenerator_containsTracks(self)
    def retrieveTrackCoords(self, *args, **kwargs): return _openmoc.TrackGenerator_retrieveTrackCoords(self, *args, **kwargs)
    def retrieveSegmentCoords(self, *args, **kwargs): return _openmoc.TrackGenerator_retrieveSegmentCoords(self, *args, **kwargs)
    def generateTracks(self): return _openmoc.TrackGenerator_generateTracks(self)
    def correctFSRVolume(self, *args, **kwargs): return _openmoc.TrackGenerator_correctFSRVolume(self, *args, **kwargs)
TrackGenerator_swigregister = _openmoc.TrackGenerator_swigregister
TrackGenerator_swigregister(TrackGenerator)

ON_LATTICE_CELL_THRESH = _openmoc.ON_LATTICE_CELL_THRESH
TINY_MOVE = _openmoc.TINY_MOVE

def universe_id():
  return _openmoc.universe_id()
universe_id = _openmoc.universe_id

def reset_universe_id():
  return _openmoc.reset_universe_id()
reset_universe_id = _openmoc.reset_universe_id
SIMPLE = _openmoc.SIMPLE
LATTICE = _openmoc.LATTICE
class Universe(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Universe, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Universe, name)
    __repr__ = _swig_repr
    def __init__(self, id=0, name=""): 
        this = _openmoc.new_Universe(id, name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc.delete_Universe
    __del__ = lambda self : None;
    def getUid(self): return _openmoc.Universe_getUid(self)
    def getId(self): return _openmoc.Universe_getId(self)
    def getName(self): return _openmoc.Universe_getName(self)
    def getType(self): return _openmoc.Universe_getType(self)
    def getNumCells(self): return _openmoc.Universe_getNumCells(self)
    def getMinX(self): return _openmoc.Universe_getMinX(self)
    def getMaxX(self): return _openmoc.Universe_getMaxX(self)
    def getMinY(self): return _openmoc.Universe_getMinY(self)
    def getMaxY(self): return _openmoc.Universe_getMaxY(self)
    def getMinZ(self): return _openmoc.Universe_getMinZ(self)
    def getMaxZ(self): return _openmoc.Universe_getMaxZ(self)
    def getMinXBoundaryType(self): return _openmoc.Universe_getMinXBoundaryType(self)
    def getMaxXBoundaryType(self): return _openmoc.Universe_getMaxXBoundaryType(self)
    def getMinYBoundaryType(self): return _openmoc.Universe_getMinYBoundaryType(self)
    def getMaxYBoundaryType(self): return _openmoc.Universe_getMaxYBoundaryType(self)
    def getMinZBoundaryType(self): return _openmoc.Universe_getMinZBoundaryType(self)
    def getMaxZBoundaryType(self): return _openmoc.Universe_getMaxZBoundaryType(self)
    def getCell(self, *args, **kwargs): return _openmoc.Universe_getCell(self, *args, **kwargs)
    def getCells(self): return _openmoc.Universe_getCells(self)
    def getCellFill(self, *args, **kwargs): return _openmoc.Universe_getCellFill(self, *args, **kwargs)
    def getCellBasic(self, *args, **kwargs): return _openmoc.Universe_getCellBasic(self, *args, **kwargs)
    def getAllCells(self): return _openmoc.Universe_getAllCells(self)
    def getAllMaterials(self): return _openmoc.Universe_getAllMaterials(self)
    def getAllUniverses(self): return _openmoc.Universe_getAllUniverses(self)
    def isFissionable(self): return _openmoc.Universe_isFissionable(self)
    def setName(self, *args, **kwargs): return _openmoc.Universe_setName(self, *args, **kwargs)
    def setType(self, *args, **kwargs): return _openmoc.Universe_setType(self, *args, **kwargs)
    def addCell(self, *args, **kwargs): return _openmoc.Universe_addCell(self, *args, **kwargs)
    def removeCell(self, *args, **kwargs): return _openmoc.Universe_removeCell(self, *args, **kwargs)
    def findCell(self, *args, **kwargs): return _openmoc.Universe_findCell(self, *args, **kwargs)
    def setFissionability(self, *args, **kwargs): return _openmoc.Universe_setFissionability(self, *args, **kwargs)
    def minSurfaceDist(self, *args, **kwargs): return _openmoc.Universe_minSurfaceDist(self, *args, **kwargs)
    def subdivideCells(self): return _openmoc.Universe_subdivideCells(self)
    def toString(self): return _openmoc.Universe_toString(self)
    def printString(self): return _openmoc.Universe_printString(self)
    def clone(self): return _openmoc.Universe_clone(self)
Universe_swigregister = _openmoc.Universe_swigregister
Universe_swigregister(Universe)

class Lattice(Universe):
    __swig_setmethods__ = {}
    for _s in [Universe]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lattice, name, value)
    __swig_getmethods__ = {}
    for _s in [Universe]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Lattice, name)
    __repr__ = _swig_repr
    def __init__(self, id=0, name=""): 
        this = _openmoc.new_Lattice(id, name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc.delete_Lattice
    __del__ = lambda self : None;
    def setOffset(self, *args, **kwargs): return _openmoc.Lattice_setOffset(self, *args, **kwargs)
    def getOffset(self): return _openmoc.Lattice_getOffset(self)
    def getNumX(self): return _openmoc.Lattice_getNumX(self)
    def getNumY(self): return _openmoc.Lattice_getNumY(self)
    def getWidthX(self): return _openmoc.Lattice_getWidthX(self)
    def getWidthY(self): return _openmoc.Lattice_getWidthY(self)
    def getMinX(self): return _openmoc.Lattice_getMinX(self)
    def getMaxX(self): return _openmoc.Lattice_getMaxX(self)
    def getMinY(self): return _openmoc.Lattice_getMinY(self)
    def getMaxY(self): return _openmoc.Lattice_getMaxY(self)
    def getMinZ(self): return _openmoc.Lattice_getMinZ(self)
    def getMaxZ(self): return _openmoc.Lattice_getMaxZ(self)
    def getUniverse(self, *args, **kwargs): return _openmoc.Lattice_getUniverse(self, *args, **kwargs)
    def getUniverses(self): return _openmoc.Lattice_getUniverses(self)
    def getUniqueUniverses(self): return _openmoc.Lattice_getUniqueUniverses(self)
    def getAllCells(self): return _openmoc.Lattice_getAllCells(self)
    def getAllUniverses(self): return _openmoc.Lattice_getAllUniverses(self)
    def setNumX(self, *args, **kwargs): return _openmoc.Lattice_setNumX(self, *args, **kwargs)
    def setNumY(self, *args, **kwargs): return _openmoc.Lattice_setNumY(self, *args, **kwargs)
    def setWidth(self, *args, **kwargs): return _openmoc.Lattice_setWidth(self, *args, **kwargs)
    def setUniverses(self, *args, **kwargs): return _openmoc.Lattice_setUniverses(self, *args, **kwargs)
    def withinBounds(self, *args, **kwargs): return _openmoc.Lattice_withinBounds(self, *args, **kwargs)
    def findCell(self, *args, **kwargs): return _openmoc.Lattice_findCell(self, *args, **kwargs)
    def minSurfaceDist(self, *args, **kwargs): return _openmoc.Lattice_minSurfaceDist(self, *args, **kwargs)
    def getLatX(self, *args, **kwargs): return _openmoc.Lattice_getLatX(self, *args, **kwargs)
    def getLatY(self, *args, **kwargs): return _openmoc.Lattice_getLatY(self, *args, **kwargs)
    def getLatticeCell(self, *args, **kwargs): return _openmoc.Lattice_getLatticeCell(self, *args, **kwargs)
    def getLatticeSurface(self, *args, **kwargs): return _openmoc.Lattice_getLatticeSurface(self, *args, **kwargs)
    def toString(self): return _openmoc.Lattice_toString(self)
    def printString(self): return _openmoc.Lattice_printString(self)
Lattice_swigregister = _openmoc.Lattice_swigregister
Lattice_swigregister(Lattice)

class Cmfd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cmfd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cmfd, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openmoc.new_Cmfd()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openmoc.delete_Cmfd
    __del__ = lambda self : None;
    def constructMatrices(self): return _openmoc.Cmfd_constructMatrices(self)
    def computeDs(self, *args, **kwargs): return _openmoc.Cmfd_computeDs(self, *args, **kwargs)
    def computeXS(self): return _openmoc.Cmfd_computeXS(self)
    def updateMOCFlux(self): return _openmoc.Cmfd_updateMOCFlux(self)
    def computeDiffCorrect(self, *args, **kwargs): return _openmoc.Cmfd_computeDiffCorrect(self, *args, **kwargs)
    def computeKeff(self, *args, **kwargs): return _openmoc.Cmfd_computeKeff(self, *args, **kwargs)
    def initializeCellMap(self): return _openmoc.Cmfd_initializeCellMap(self)
    def initializeGroupMap(self): return _openmoc.Cmfd_initializeGroupMap(self)
    def initializeFlux(self): return _openmoc.Cmfd_initializeFlux(self)
    def initializeMaterials(self): return _openmoc.Cmfd_initializeMaterials(self)
    def rescaleFlux(self): return _openmoc.Cmfd_rescaleFlux(self)
    def linearSolve(self, *args, **kwargs): return _openmoc.Cmfd_linearSolve(self, *args, **kwargs)
    def splitCorners(self): return _openmoc.Cmfd_splitCorners(self)
    def getCellNext(self, *args, **kwargs): return _openmoc.Cmfd_getCellNext(self, *args, **kwargs)
    def findCmfdCell(self, *args, **kwargs): return _openmoc.Cmfd_findCmfdCell(self, *args, **kwargs)
    def findCmfdSurface(self, *args, **kwargs): return _openmoc.Cmfd_findCmfdSurface(self, *args, **kwargs)
    def addFSRToCell(self, *args, **kwargs): return _openmoc.Cmfd_addFSRToCell(self, *args, **kwargs)
    def updateBoundaryFlux(self, *args, **kwargs): return _openmoc.Cmfd_updateBoundaryFlux(self, *args, **kwargs)
    def getNumCmfdGroups(self): return _openmoc.Cmfd_getNumCmfdGroups(self)
    def getNumMOCGroups(self): return _openmoc.Cmfd_getNumMOCGroups(self)
    def getNumCells(self): return _openmoc.Cmfd_getNumCells(self)
    def getCmfdGroup(self, *args, **kwargs): return _openmoc.Cmfd_getCmfdGroup(self, *args, **kwargs)
    def isOpticallyThick(self): return _openmoc.Cmfd_isOpticallyThick(self)
    def getMOCRelaxationFactor(self): return _openmoc.Cmfd_getMOCRelaxationFactor(self)
    def getBoundary(self, *args, **kwargs): return _openmoc.Cmfd_getBoundary(self, *args, **kwargs)
    def getLattice(self): return _openmoc.Cmfd_getLattice(self)
    def getNumX(self): return _openmoc.Cmfd_getNumX(self)
    def getNumY(self): return _openmoc.Cmfd_getNumY(self)
    def convertFSRIdToCmfdCell(self, *args, **kwargs): return _openmoc.Cmfd_convertFSRIdToCmfdCell(self, *args, **kwargs)
    def getCellFSRs(self): return _openmoc.Cmfd_getCellFSRs(self)
    def isFluxUpdateOn(self): return _openmoc.Cmfd_isFluxUpdateOn(self)
    def getFluxRatio(self, *args, **kwargs): return _openmoc.Cmfd_getFluxRatio(self, *args, **kwargs)
    def setSORRelaxationFactor(self, *args, **kwargs): return _openmoc.Cmfd_setSORRelaxationFactor(self, *args, **kwargs)
    def setWidth(self, *args, **kwargs): return _openmoc.Cmfd_setWidth(self, *args, **kwargs)
    def setHeight(self, *args, **kwargs): return _openmoc.Cmfd_setHeight(self, *args, **kwargs)
    def setNumX(self, *args, **kwargs): return _openmoc.Cmfd_setNumX(self, *args, **kwargs)
    def setNumY(self, *args, **kwargs): return _openmoc.Cmfd_setNumY(self, *args, **kwargs)
    def setSurfaceCurrents(self, *args, **kwargs): return _openmoc.Cmfd_setSurfaceCurrents(self, *args, **kwargs)
    def setNumFSRs(self, *args, **kwargs): return _openmoc.Cmfd_setNumFSRs(self, *args, **kwargs)
    def setNumMOCGroups(self, *args, **kwargs): return _openmoc.Cmfd_setNumMOCGroups(self, *args, **kwargs)
    def setOpticallyThick(self, *args, **kwargs): return _openmoc.Cmfd_setOpticallyThick(self, *args, **kwargs)
    def setMOCRelaxationFactor(self, *args, **kwargs): return _openmoc.Cmfd_setMOCRelaxationFactor(self, *args, **kwargs)
    def setBoundary(self, *args, **kwargs): return _openmoc.Cmfd_setBoundary(self, *args, **kwargs)
    def setLattice(self, *args, **kwargs): return _openmoc.Cmfd_setLattice(self, *args, **kwargs)
    def setLatticeStructure(self, *args, **kwargs): return _openmoc.Cmfd_setLatticeStructure(self, *args, **kwargs)
    def setFluxUpdateOn(self, *args, **kwargs): return _openmoc.Cmfd_setFluxUpdateOn(self, *args, **kwargs)
    def setGroupStructure(self, *args, **kwargs): return _openmoc.Cmfd_setGroupStructure(self, *args, **kwargs)
    def setSourceConvergenceThreshold(self, *args, **kwargs): return _openmoc.Cmfd_setSourceConvergenceThreshold(self, *args, **kwargs)
    def setPolarQuadrature(self, *args, **kwargs): return _openmoc.Cmfd_setPolarQuadrature(self, *args, **kwargs)
    def setFSRMaterials(self, *args, **kwargs): return _openmoc.Cmfd_setFSRMaterials(self, *args, **kwargs)
    def setFSRVolumes(self, *args, **kwargs): return _openmoc.Cmfd_setFSRVolumes(self, *args, **kwargs)
    def setFSRFluxes(self, *args, **kwargs): return _openmoc.Cmfd_setFSRFluxes(self, *args, **kwargs)
    def setCellFSRs(self, *args, **kwargs): return _openmoc.Cmfd_setCellFSRs(self, *args, **kwargs)
Cmfd_swigregister = _openmoc.Cmfd_swigregister
Cmfd_swigregister(Cmfd)

# This file is compatible with both classic and new-style classes.


