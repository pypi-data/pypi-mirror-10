#!python
# -*- coding: utf-8 -*-
# ***********************************************************************
# ******************  CANADIAN ASTRONOMY DATA CENTRE  *******************
# *************  CENTRE CANADIEN DE DONNÉES ASTRONOMIQUES  **************
#
# (c) 2015.                            (c) 2015.
#  Government of Canada                 Gouvernement du Canada
#  National Research Council            Conseil national de recherches
#  Ottawa, Canada, K1A 0R6              Ottawa, Canada, K1A 0R6
#  All rights reserved                  Tous droits réservés
#
#  NRC disclaims any warranties,        Le CNRC dénie toute garantie
#  expressed, implied, or               énoncée, implicite ou légale,
#  statutory, of any kind with          de quelque nature que ce
#  respect to the software,             soit, concernant le logiciel,
#  including without limitation         y compris sans restriction
#  any warranty of merchantability      toute garantie de valeur
#  or fitness for a particular          marchande ou de pertinence
#  purpose. NRC shall not be            pour un usage particulier.
#  liable in any event for any          Le CNRC ne pourra en aucun cas
#  damages, whether direct or           être tenu responsable de tout
#  indirect, special or general,        dommage, direct ou indirect,
#  consequential or incidental,         particulier ou général,
#  arising from the use of the          accessoire ou fortuit, résultant
#  software.  Neither the name          de l'utilisation du logiciel. Ni
#  of the National Research             le nom du Conseil National de
#  Council of Canada nor the            Recherches du Canada ni les noms
#  names of its contributors may        de ses  participants ne peuvent
#  be used to endorse or promote        être utilisés pour approuver ou
#  products derived from this           promouvoir les produits dérivés
#  software without specific prior      de ce logiciel sans autorisation
#  written permission.                  préalable et particulière
#                                       par écrit.
#
#  This file is part of the             Ce fichier fait partie du projet
#  OpenCADC project.                    OpenCADC.
#
#  OpenCADC is free software:           OpenCADC est un logiciel libre ;
#  you can redistribute it and/or       vous pouvez le redistribuer ou le
#  modify it under the terms of         modifier suivant les termes de
#  the GNU Affero General Public        la “GNU Affero General Public
#  License as published by the          License” telle que publiée
#  Free Software Foundation,            par la Free Software Foundation
#  either version 3 of the              : soit la version 3 de cette
#  License, or (at your option)         licence, soit (à votre gré)
#  any later version.                   toute version ultérieure.
#
#  OpenCADC is distributed in the       OpenCADC est distribué
#  hope that it will be useful,         dans l’espoir qu’il vous
#  but WITHOUT ANY WARRANTY;            sera utile, mais SANS AUCUNE
#  without even the implied             GARANTIE : sans même la garantie
#  warranty of MERCHANTABILITY          implicite de COMMERCIALISABILITÉ
#  or FITNESS FOR A PARTICULAR          ni d’ADÉQUATION À UN OBJECTIF
#  PURPOSE.  See the GNU Affero         PARTICULIER. Consultez la Licence
#  General Public License for           Générale Publique GNU Affero
#  more details.                        pour plus de détails.
#
#  You should have received             Vous devriez avoir reçu une
#  a copy of the GNU Affero             copie de la Licence Générale
#  General Public License along         Publique GNU Affero avec
#  with OpenCADC.  If not, see          OpenCADC ; si ce n’est
#  <http://www.gnu.org/licenses/>.      pas le cas, consultez :
#                                       <http://www.gnu.org/licenses/>.
#
# ***********************************************************************

"""Get or put a file to the CADC storage system."""

from cadc.__version__ import version
from cadc.data.client import DataClient
from canfar.common.parser import BaseParser
from argparse import RawDescriptionHelpFormatter
import sys
import logging
import glob
description = "Get or Put a file to the CADC storage system."
epilog = """This client is capable of getting/putting multiple files.

A single file:
  $ cadc-copy put TEST publicEd

Multiple files (must be quoted):
  $ cadc-copy put TEST 'file1 file2'

Multiple files using glob (put only, must be quoted):
  $ cadc-copy put TEST 'file*'

Multiple files, specifying individual archive filenames:
  $ cadc-copy put TEST 'file1 file2' --filename='remotefile1 remotefile2'
"""


if __name__=='__main__':

    # Parse the command line
    parser = BaseParser(description=description, epilog=epilog,
                        version=version,
                        formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('dir', choices=['get','put'], help='Direction')
    parser.add_argument('archive', help='Archive name')
    parser.add_argument('file', help='File(s) on local disk')
    parser.add_argument('--stream', default=None, help='Stream name')
    parser.add_argument('--filename', default=None,
                        help='Filename(s) in archive (defaults to file)')
    parser.add_argument('--ignorefailures', action='store_true',
                        default=False,
                        help='continue even if individual file transfers fail')

    args=parser.parse_args()

    certfile=args.certfile
    host=args.host
    anonymous=args.anonymous
    dir=args.dir
    if dir == 'put':
        is_put = True
    else:
        is_put = False
    archive = args.archive
    ignorefailures = args.ignorefailures

    # The user can specify a single local file, a list of files,
    # or a glob
    files = glob.glob(args.file)
    if not files:
        # glob returned nothing, so assume we have space-separated
        # list of files
        parts = args.file.split(' ')
        files = []
        for part in parts:
            if part != '':
                files.append(part)

    # if filename is provided, need same number as files (space-separated)
    if args.filename:
        filenames = []
        parts = args.filename.split(' ')
        for part in parts:
            if part != '':
                filenames.append(part)
        if len(filenames) != len(files):
            raise ValueError("Number of names in --filename must match file")
    else:
        filenames = None

    stream = args.stream
    filename = args.filename

    # Create a data client and logger
    try:
        # Schema validation is slow due to large initial overhead (~1.5s) ?
        c = DataClient(certfile=certfile, schema_validate=False,
                       host=host, anonymous=anonymous)
        logger = c.get_logger(verbose=args.verbose, debug=args.debug,
                              quiet=args.quiet)
        logger.debug("Start")
    except Exception as e:
        print e
        sys.exit(1)

    logger.debug("Client authorized: %s, certfile: %s, name/password: %s" % \
                     (str(c.is_authorized), str(c.certificate_file_location),
                      str(c.basic_auth is not None)) )

    # hack for VOSpace testing
    #if c.basic_auth:
    #    auth_url='auth/'
    #else:
    #    auth_url=''
    #c.base_url = '%s://%s/vospace/%ssynctrans' % (c.protocol,c.host,auth_url)
    #uri = 'vos:/echapin/%s' % filename

    # Copy file(s)
    for i in range(len(files)):
        file = files[i]
        if filenames is not None:
            filename = filenames[i]
        else:
            filename = None

        try:
            logger.info("Transferring %s" % file)
            c.transfer_file(file, archive=archive, filename=filename,
                            is_put=is_put, stream=stream)
        except Exception as e:
            if ignorefailures:
                logger.error("Failed transfer of %s. Continuing." % file)
                next
            else:
                logger.exception("Failed to transfer file %s:\n%s" % \
                                     (file, str(e)))
                logger.debug("End")
                sys.exit(1)

    # Good exit status if we get here
    logger.debug("End")
    sys.exit(0)
