Detailed tests of baserelease.py
================================

.. :doctest:
.. :setup: zest.releaser.tests.functional.setup
.. :teardown: zest.releaser.tests.functional.teardown

Change to an svn dir:

    >>> svnsourcedir
    'TESTTEMP/tha.example-svn'
    >>> import os
    >>> os.chdir(svnsourcedir)

Init the Basereleaser, which is otherwise only used as a base class.

    >>> from zest.releaser import baserelease
    >>> base = baserelease.Basereleaser()

The data dict is initialized.  And a vcs is chosen:

    >>> base.data['workingdir']
    'TESTTEMP/tha.example-svn'
    >>> base.data['name']
    'tha.example'
    >>> base.vcs
    <zest.releaser.svn.Subversion object at ...>

Two methods are unimplemented:

    >>> base.prepare()
    Traceback (most recent call last):
    ...
    NotImplementedError
    >>> base.execute()
    Traceback (most recent call last):
    ...
    NotImplementedError

We can update commit messages based on what we find in ``setup.cfg``::

    >>> lines = [
    ...     "[zest.releaser]",
    ...     "extra-message = Aargh!"]
    >>> open('setup.cfg', 'w').write('\n'.join(lines))
    >>> base = baserelease.Basereleaser()
    >>> print base.update_commit_message('Ni!')
    Ni!
    <BLANKLINE>
    Aargh!

Check that this works with non-ascii too.

    >>> lines = [
    ...     "[zest.releaser]",
    ...     u"extra-message = \xec\xab".encode('utf-8')]
    >>> open('setup.cfg', 'w').write('\n'.join(lines))
    >>> base = baserelease.Basereleaser()
    >>> base.update_commit_message('Ni!')
    'Ni!\n\n\xc3\xac\xc2\xab'

And check with multiple lines.

    >>> lines = [
    ...     "[zest.releaser]",
    ...     "extra-message =",
    ...     "    Where is my towel?",
    ...     "    Not again."]
    >>> open('setup.cfg', 'w').write('\n'.join(lines))
    >>> base = baserelease.Basereleaser()
    >>> print base.update_commit_message('Ni!')
    Ni!
    <BLANKLINE>
    Where is my towel?
    Not again.
