#!/usr/bin/env python
import argparse
import os

from os import mkdir, path
from torrentcatcher import torrentcatcher

def main():
    # Finds the location of torrentcatcher
    homeFolder = os.environ['HOME']
    dataPath = path.join(homeFolder, '.torrentcatcher')
    # Dictionary of values for Torrentcatcher class
    log = path.join(dataPath, 'torrentcatcher.log')
    config = path.join(dataPath, 'trconfig')
    database = path.join(dataPath, 'torcatch.db')
    # Creates data directory for config file, database, and log file
    if not path.isdir(dataPath):
        mkdir(dataPath)
    # Parsing out arguments for command line input
    parser = argparse.ArgumentParser(prog='torrentcatcher')
    parser.add_argument(
        '-a',
        '--archive',
        nargs='+',
        metavar=('all', 'ID'),
        help=("Moves selected torrents to the archive. Using the argument "
              "'all' will move all currently queued torrents to the archive. Use the '--list' option to see IDs.")
    )
    parser.add_argument(
        '-C',
        nargs=1,
        metavar='<path to trconfig file>',
        help=("Overrides default config file location. If the config file does "
              "not exist at given location, the file will be created there.")
    )
    parser.add_argument(
        '-d',
        '--download',
        nargs='+',
        metavar=('all', 'ID'),
        help=("Moves selected torrents to Transmission.Using the argument 'all' "
              "will move all currently queued torrents to Transmission. Use the "
              "'--list' option to see IDs.")
    )
    parser.add_argument(
        '-D',
        nargs=1,
        metavar='<path to database>',
        help=("Overrides default database location. If the database file does "
              "not exist at given location, it will be created there.")
    )
    parser.add_argument(
        '-f',
        '--add-feed',
        nargs=2,
        metavar=('<name>', '<url>'),
        help="Adds given feed to the database."
    )
    parser.add_argument(
        '-F',
        '--feed',
        help=("Checks all feeds for new torrents to add to the queue. DOES "
              "NOT SEND TO TRANSMISSION."),
        action="store_true"
    )
    parser.add_argument(
        '-l',
        '--list',
        nargs=1,
        choices=['queue', 'archive', 'feeds'],
        help="Lists all items for given category."
    )
    parser.add_argument(
        '-L',
        nargs=1,
        metavar='<path to log file>',
        help="Choose location for log output."
    )
    parser.add_argument(
        '-q',
        '--queue',
        nargs='+',
        metavar=('all', 'ID'),
        help=("Moves selected torrents to the queue. Using the argument 'all' "
              "will move all currently archived torrents to the queue. Use the "
              "'--list' option to see IDs.")
    )
    parser.add_argument(
        '-Q',
        '--quiet',
        help="Suppresses output.",
        action="store_true"
    )
    parser.add_argument(
        '--search',
        nargs=1,
        choices=['name', 'source', 'id'],
        help=("Searches archive and queue for given query. Can search by name, "
              "source, or ID number.")
    )
    parser.add_argument('--version', action='version', version='%(prog)s 2.0.1')
    args = parser.parse_args()
    # Turns quiet mode off and on
    quiet = args.quiet
    # Initialize Torrentcatcher class
    tc = torrentcatcher.TorrentCatcher(
        trconf=config,
        trlog=log,
        trquiet=quiet,
        trdb=database
    )
    # Create the configuration file if it does not exist
    tc.configreader()
    # Interprets arguments to their respective functions
    argument = False
    if args.archive != None:
        argument = True
        tc.archive(args.archive)
    if args.download != None:
        argument = True
        tc.download(args.download)
    if args.add_feed != None:
        argument = True
        tc.addfeed(args.add_feed[0], args.add_feed[1])
    if args.feed:
        argument = True
        tc.logger.info(
            '[FEED ONLY] Checking feeds for new torrents to queue')
        tc.feeder()
    if args.list != None:
        argument = True
        tc.lister(args.list[0])
    if args.queue != None:
        argument = True
        tc.queue(args.queue)
    if args.search != None:
        argument = True
        query = raw_input('Enter query: ')
        tc.torsearch(args.search[0], query)
    if not argument:
        tc.torrentcatcher()
        
if __name__ == '__main__':
    main()