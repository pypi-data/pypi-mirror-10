Metadata-Version: 1.1
Name: fresco-template
Version: 0.2.1
Summary: Template system integration for fresco
Home-page: UNKNOWN
Author: Oliver Cope
Author-email: oliver@redgecko.org
License: Apache
Description: fresco-template - Templating for Fresco
        =======================================
        
        
        Example usage with Jinja2::
        
            from fresco import FrescoApp
            from fresco_template import Jinja2
            from jinja2 import PackageLoader
        
            app = FrescoApp()
            jinja2 = Jinja2(loader=PackageLoader('mypackage', 'template/dir'))
            jinja2.init_app(app)
        
        
            @jinja2.contextprocessor
            def default_context():
                # Return a dictionary of variables always to be included in the
                # template context.
                #
                # NB the fresco context object and urlfor function are already included
                # in the template context by default.
                return {}
        
            @jinja2.render('page.html')
            def myview():
                return {'var': 'value'}
        
        
        Same example with Chameleon::
        
            from fresco import FrescoApp
            from fresco_template import Chameleon
            from chameleon import PageTemplateLoader
        
            app = FrescoApp()
        
            loader = PageTemplateLoader(['template/dir'], auto_reload=True)
            chameleon = Chameleon(loader)
            chameleon.init_app(app)
        
        
            @chameleon.contextprocessor
            def default_context():
                # Return a dictionary of variables always to be included in the
                # template context.
                #
                # NB the fresco context object and urlfor function are already included
                # in the template context by default.
                return {}
        
            @chameleon.render('page.html')
            def myview():
                return {'var': 'value'}
        
        
        0.2.1
        -----
        
        - The ``TemplateContent`` class now calls all context processors on
          instantiation. This ensures context processors are always called before
          response headers are sent.
        
        0.2
        ---
        
        Initial release
        
        0.1
        ---
        
        (unreleased version)
        
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Web Environment
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Classifier: Topic :: Internet :: WWW/HTTP :: WSGI
Classifier: Topic :: Software Development :: Libraries :: Python Modules
