#! /bin/usr/env python
# D.J. Bennett
# 26/05/2014
"""
Test download stage.
"""

import unittest
import pickle
import os
import shutil
from pglt.stages import download_stage
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from pglt.tools.alignment_tools import blastn


# DUMMIES
def dummy_findBestGenes(namesdict, genedict, thoroughness, allrankids, logger,
                        minnseq, target, minnspp):
    # return a list of genes
    return ['rbcl', 'COI']


class Dummy_Downloader(object):
    def __init__(self, gene_names, nseqs, thoroughness, maxpn, votesize,
                 maxtrys, minoverlap, maxlen, minlen, logger, wd):
        pass

    def run(self, taxids):
        seq = 'A' * 500
        seq = SeqRecord(Seq(seq), id='testseq')
        return [seq]

# TEST DATA
genedict = {'rbcl': {'names': ['rbcl'], 'minlen': '300', 'maxlen': '2000',
                     'minoverlap': '300'},
            'COI': {'names': ['COI'], 'minlen': '300', 'maxlen': '2000',
                    'minoverlap': '300'}}
paradict = {'email': '', 'nseqs': '100', 'thoroughness': '3', 'maxlen': '2000',
            'minspecies_gene': '5', 'minspecies_gene': '5',
            'minnseqs_gene': '1', 'target_ngenes': '1', 'maxpn': '0.1',
            'votesize': '10', 'maxvotetrys': '100'}
namesdict = {}
namesdict['query_name'] = {"txids": [1, 2], "unique_name": 'returned_name',
                           "rank": 'species'}
namesdict['outgroup'] = {"txids": [3], "unique_name": 'outgroup',
                         "rank": 'genus'}
allrankids = []


@unittest.skipIf(not blastn, "Requires BLASTN")
class DownloadStageTestSuite(unittest.TestCase):

    def setUp(self):
        # stub functions and class
        self.True_Downloader = download_stage.dtools.Downloader
        self.true_findBestGenes = download_stage.dtools.findBestGenes
        download_stage.dtools.Downloader = Dummy_Downloader
        download_stage.dtools.findBestGenes = dummy_findBestGenes
        # write out necessary files to run
        os.mkdir('tempfiles')
        with open(os.path.join('tempfiles', "genedict.p"), "wb") as file:
            pickle.dump(genedict, file)
        with open(os.path.join('tempfiles', "paradict.p"), "wb") as file:
            pickle.dump(paradict, file)
        with open(os.path.join('tempfiles', "namesdict.p"), "wb") as file:
            pickle.dump(namesdict, file)
        with open(os.path.join('tempfiles', "allrankids.p"), "wb") as file:
            pickle.dump(allrankids, file)

    def tearDown(self):
        # re-stub
        download_stage.dtools.Downloader = self.True_Downloader
        download_stage.dtools.findBestGenes = self.true_findBestGenes
        # remove all folders potentially generated by download stage
        download_folders = ['2_download', 'tempfiles']
        while download_folders:
            try:
                download_folder = download_folders.pop()
                shutil.rmtree(download_folder)
            except OSError:
                pass

    def test_download_stage(self):
        # run
        res = download_stage.run()
        # remove files and folders
        self.assertIsNone(res)

if __name__ == '__main__':
    unittest.main()
