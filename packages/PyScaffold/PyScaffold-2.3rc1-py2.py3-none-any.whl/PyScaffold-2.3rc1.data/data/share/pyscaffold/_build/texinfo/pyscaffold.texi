\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename pyscaffold.info
@documentencoding UTF-8
@ifinfo
@*Generated by Sphinx 1.2.@*
@end ifinfo
@settitle PyScaffold
@defindex ge
@paragraphindent 0
@exampleindent 4
@finalout
@dircategory Python
@direntry
* PyScaffold: (pyscaffold.info). The PyScaffold reference manual.
@end direntry

@definfoenclose strong,`,'
@definfoenclose emph,`,'
@c %**end of header

@copying
@quotation
PyScaffold 0.9.post3, July 29, 2014



Copyright @copyright{} 2014, Blue Yonder
@end quotation

@end copying

@titlepage
@title PyScaffold
@insertcopying
@end titlepage
@contents

@c %** start of user preamble

@c %** end of user preamble

@ifnottex
@node Top
@top PyScaffold
@insertcopying
@end ifnottex

@c %**start of body
@anchor{index doc}@anchor{7}
PyScaffold helps you to easily setup a new Python project, it is as easy as:

@example
putup my_project
@end example

This will create a new subdirectory @code{my_project} and serve you a project
setup with git repository, setup.py, document and test folder ready for some
serious coding.

Type @code{putup -h} to learn about more configuration options. PyScaffold assumes
that you have Git@footnote{http://git-scm.com/} installed and set up on your PC,
meaning at least your name and email configured.
The scaffold of @code{my_project} provides you with following
@ref{8,,features}.

@menu
* Contents:: 
* Indices and tables:: 
* Python Module Index:: 
* Index:: 

@detailmenu
 --- The Detailed Node Listing ---

Contents

* Features:: 
* Contributing:: 
* pyscaffold:: 

Features

* Packaging:: 
* Complete Git Integration:: 
* Sphinx Documentation:: 
* Unittest & Coverage:: 
* Requirements Management:: 
* Easy Updating:: 

Contributing

* Bug Reports:: 
* Code:: 

pyscaffold

* pyscaffold package:: 

pyscaffold package

* Submodules:: 
* pyscaffold.info module: pyscaffold info module. 
* pyscaffold.repo module: pyscaffold repo module. 
* pyscaffold.runner module: pyscaffold runner module. 
* pyscaffold.structure module: pyscaffold structure module. 
* pyscaffold.templates module: pyscaffold templates module. 
* pyscaffold.utils module: pyscaffold utils module. 
* Module contents:: 

@end detailmenu
@end menu

@node Contents,Indices and tables,Top,Top
@anchor{index pyscaffold}@anchor{9}@anchor{index contents}@anchor{a}
@chapter Contents


@menu
* Features:: 
* Contributing:: 
* pyscaffold:: 

@end menu

@node Features,Contributing,,Contents
@anchor{features doc}@anchor{b}@anchor{features features}@anchor{8}@anchor{features id1}@anchor{c}
@section Features


@menu
* Packaging:: 
* Complete Git Integration:: 
* Sphinx Documentation:: 
* Unittest & Coverage:: 
* Requirements Management:: 
* Easy Updating:: 

@end menu

@node Packaging,Complete Git Integration,,Features
@anchor{features packaging}@anchor{d}
@subsection Packaging


Run @code{python setup.py sdist}, @code{python setup.py bdist} or
@code{python setup.py bdist_wheel} to build a source, binary or wheel
distribution.

@node Complete Git Integration,Sphinx Documentation,Packaging,Features
@anchor{features complete-git-integration}@anchor{e}
@subsection Complete Git Integration


Your project is already an initialised Git repository and @code{setup.py} uses
the information of tags to infer the version of your project with the help of
versioneer@footnote{https://github.com/warner/python-versioneer}.
To use this feature you need to tag with the format @code{vMAJOR.MINOR[.REVISION]}
, e.g. @code{v0.0.1} or @code{v0.1}. The prefix @code{v} is needed!
Run @code{python setup.py version} to retrieve the current PEP440@footnote{http://www.python.org/dev/peps/pep-0440/}-compliant version. This version
will be used when building a package and is also accessible through
@code{my_project.__version__}.
The version will be @code{unknown} until you have added a first tag.

@node Sphinx Documentation,Unittest & Coverage,Complete Git Integration,Features
@anchor{features sphinx-documentation}@anchor{f}
@subsection Sphinx Documentation


Build the documentation with @code{python setup.py docs} and run doctests with
@code{python setup.py doctest}. Start editing the file @code{docs/index.rst} to
extend the documentation. The documentation also works with Read the Docs@footnote{https://readthedocs.org/}.

@node Unittest & Coverage,Requirements Management,Sphinx Documentation,Features
@anchor{features unittest-coverage}@anchor{10}
@subsection Unittest & Coverage


Run @code{python setup.py test} to run all unittests defined in the subfolder
@code{tests} with the help of py.test@footnote{http://pytest.org/}. The py.test plugin
pytest-cov@footnote{https://github.com/schlamar/pytest-cov} is used to automatically
generate a coverage report. For usage with a continuous integration software
JUnit and Coverage XML output can be activated. Checkout @code{putup -h} for
details.

@node Requirements Management,Easy Updating,Unittest & Coverage,Features
@anchor{features requirements-management}@anchor{11}
@subsection Requirements Management


Add the requirements of your project to the @code{requirements.txt} file which
will be automatically used by @code{setup.py}.

@node Easy Updating,,Requirements Management,Features
@anchor{features easy-updating}@anchor{12}
@subsection Easy Updating


Keep your project's scaffold up-to-date by applying
@code{putput --update my_project} when a new version of PyScaffold was released.
It may also be used to change the url, license and description setting.

@node Contributing,pyscaffold,Features,Contents
@anchor{contrib contributing}@anchor{13}@anchor{contrib doc}@anchor{14}
@section Contributing


PyScaffold is developed by Blue Yonder developers to help automating and
standardizing the process of project setups.
You are very welcome to join in our effort if you would like to contribute.

@menu
* Bug Reports:: 
* Code:: 

@end menu

@node Bug Reports,Code,,Contributing
@anchor{contrib bug-reports}@anchor{15}
@subsection Bug Reports


If you experience bugs or in general issues with PyScaffold, please file a bug
report to our Bug Tracker@footnote{http://github.com/blue-yonder/pyscaffold/issues}.

@node Code,,Bug Reports,Contributing
@anchor{contrib code}@anchor{16}
@subsection Code


If you would like to contribute to PyScaffold, fork the main repository@footnote{https://github.com/blue-yonder/pyscaffold/} on GitHub, then submit a
“pull request” (PR):


@enumerate 

@item 
Create an account@footnote{https://github.com/signup/free} on GitHub if you do
not already have one.

@item 
Fork the project repository: click on the @emph{Fork} button near the top of the
page. This creates a copy of the code under your account on the GitHub server.

@item 
Clone this copy to your local disk:

@example
git clone git@@github.com:YourLogin/pyscaffold.git
@end example

@item 
Create a branch to hold your changes:

@example
git checkout -b my-feature
@end example

and start making changes. Never work in the master branch!

@item 
Work on this copy, on your computer, using Git@footnote{http://git-scm.com/} to
do the version control. When you’re done editing, do:

@example
git add modified_files
git commit
@end example

to record your changes in Git, then push them to GitHub with:

@example
git push -u origin my-feature
@end example
@end enumerate

@node pyscaffold,,Contributing,Contents
@anchor{_rst/modules pyscaffold}@anchor{17}@anchor{_rst/modules doc}@anchor{18}
@section pyscaffold


@menu
* pyscaffold package:: 

@end menu

@node pyscaffold package,,,pyscaffold
@anchor{_rst/pyscaffold doc}@anchor{19}@anchor{_rst/pyscaffold pyscaffold-package}@anchor{1a}
@subsection pyscaffold package


@menu
* Submodules:: 
* pyscaffold.info module: pyscaffold info module. 
* pyscaffold.repo module: pyscaffold repo module. 
* pyscaffold.runner module: pyscaffold runner module. 
* pyscaffold.structure module: pyscaffold structure module. 
* pyscaffold.templates module: pyscaffold templates module. 
* pyscaffold.utils module: pyscaffold utils module. 
* Module contents:: 

@end menu

@node Submodules,pyscaffold info module,,pyscaffold package
@anchor{_rst/pyscaffold submodules}@anchor{1b}
@subsubsection Submodules


@node pyscaffold info module,pyscaffold repo module,Submodules,pyscaffold package
@anchor{_rst/pyscaffold module-pyscaffold info}@anchor{1}@anchor{_rst/pyscaffold pyscaffold-info-module}@anchor{1c}
@subsubsection pyscaffold.info module


@geindex pyscaffold.info (module)

@geindex email() (in module pyscaffold.info)
@anchor{_rst/pyscaffold pyscaffold info email}@anchor{1d}
@deffn {Function} pyscaffold.info.email ()

@end deffn

@geindex is_git_installed() (in module pyscaffold.info)
@anchor{_rst/pyscaffold pyscaffold info is_git_installed}@anchor{1e}
@deffn {Function} pyscaffold.info.is_git_installed ()
@end deffn

@geindex project() (in module pyscaffold.info)
@anchor{_rst/pyscaffold pyscaffold info project}@anchor{1f}
@deffn {Function} pyscaffold.info.project (args)

@end deffn

@geindex username() (in module pyscaffold.info)
@anchor{_rst/pyscaffold pyscaffold info username}@anchor{20}
@deffn {Function} pyscaffold.info.username ()

@end deffn

@node pyscaffold repo module,pyscaffold runner module,pyscaffold info module,pyscaffold package
@anchor{_rst/pyscaffold module-pyscaffold repo}@anchor{2}@anchor{_rst/pyscaffold pyscaffold-repo-module}@anchor{21}
@subsubsection pyscaffold.repo module


@geindex pyscaffold.repo (module)

@geindex git_tree_add() (in module pyscaffold.repo)
@anchor{_rst/pyscaffold pyscaffold repo git_tree_add}@anchor{22}
@deffn {Function} pyscaffold.repo.git_tree_add (struct, prefix='@w{'})

@end deffn

@geindex init_commit_repo() (in module pyscaffold.repo)
@anchor{_rst/pyscaffold pyscaffold repo init_commit_repo}@anchor{23}
@deffn {Function} pyscaffold.repo.init_commit_repo (project, struct)

@end deffn

@geindex is_git_repo() (in module pyscaffold.repo)
@anchor{_rst/pyscaffold pyscaffold repo is_git_repo}@anchor{24}
@deffn {Function} pyscaffold.repo.is_git_repo (folder)
@end deffn

@node pyscaffold runner module,pyscaffold structure module,pyscaffold repo module,pyscaffold package
@anchor{_rst/pyscaffold module-pyscaffold runner}@anchor{3}@anchor{_rst/pyscaffold pyscaffold-runner-module}@anchor{25}
@subsubsection pyscaffold.runner module


@geindex pyscaffold.runner (module)

@geindex main() (in module pyscaffold.runner)
@anchor{_rst/pyscaffold pyscaffold runner main}@anchor{26}
@deffn {Function} pyscaffold.runner.main (args)

@end deffn

@geindex parse_args() (in module pyscaffold.runner)
@anchor{_rst/pyscaffold pyscaffold runner parse_args}@anchor{27}
@deffn {Function} pyscaffold.runner.parse_args (args)

@end deffn

@geindex run() (in module pyscaffold.runner)
@anchor{_rst/pyscaffold pyscaffold runner run}@anchor{28}
@deffn {Function} pyscaffold.runner.run (*args, **kwargs)


Entry point for setup.py
@end deffn

@node pyscaffold structure module,pyscaffold templates module,pyscaffold runner module,pyscaffold package
@anchor{_rst/pyscaffold module-pyscaffold structure}@anchor{4}@anchor{_rst/pyscaffold pyscaffold-structure-module}@anchor{29}
@subsubsection pyscaffold.structure module


@geindex pyscaffold.structure (module)

@geindex create_structure() (in module pyscaffold.structure)
@anchor{_rst/pyscaffold pyscaffold structure create_structure}@anchor{2a}
@deffn {Function} pyscaffold.structure.create_structure (struct, prefix=None, update=False)

@end deffn

@geindex make_structure() (in module pyscaffold.structure)
@anchor{_rst/pyscaffold pyscaffold structure make_structure}@anchor{2b}
@deffn {Function} pyscaffold.structure.make_structure (args)

@end deffn

@geindex set_default_args() (in module pyscaffold.structure)
@anchor{_rst/pyscaffold pyscaffold structure set_default_args}@anchor{2c}
@deffn {Function} pyscaffold.structure.set_default_args (args)

@end deffn

@node pyscaffold templates module,pyscaffold utils module,pyscaffold structure module,pyscaffold package
@anchor{_rst/pyscaffold pyscaffold-templates-module}@anchor{2d}@anchor{_rst/pyscaffold module-pyscaffold templates}@anchor{5}
@subsubsection pyscaffold.templates module


@geindex pyscaffold.templates (module)

@geindex authors() (in module pyscaffold.templates)
@anchor{_rst/pyscaffold pyscaffold templates authors}@anchor{2e}
@deffn {Function} pyscaffold.templates.authors (args)

@end deffn

@geindex copying() (in module pyscaffold.templates)
@anchor{_rst/pyscaffold pyscaffold templates copying}@anchor{2f}
@deffn {Function} pyscaffold.templates.copying (args)

@end deffn

@geindex coveragerc() (in module pyscaffold.templates)
@anchor{_rst/pyscaffold pyscaffold templates coveragerc}@anchor{30}
@deffn {Function} pyscaffold.templates.coveragerc (args)

@end deffn

@geindex get_template() (in module pyscaffold.templates)
@anchor{_rst/pyscaffold pyscaffold templates get_template}@anchor{31}
@deffn {Function} pyscaffold.templates.get_template (name)

@end deffn

@geindex gitignore() (in module pyscaffold.templates)
@anchor{_rst/pyscaffold pyscaffold templates gitignore}@anchor{32}
@deffn {Function} pyscaffold.templates.gitignore (args)

@end deffn

@geindex gitignore_empty() (in module pyscaffold.templates)
@anchor{_rst/pyscaffold pyscaffold templates gitignore_empty}@anchor{33}
@deffn {Function} pyscaffold.templates.gitignore_empty (args)

@end deffn

@geindex init() (in module pyscaffold.templates)
@anchor{_rst/pyscaffold pyscaffold templates init}@anchor{34}
@deffn {Function} pyscaffold.templates.init (args)

@end deffn

@geindex manifest_in() (in module pyscaffold.templates)
@anchor{_rst/pyscaffold pyscaffold templates manifest_in}@anchor{35}
@deffn {Function} pyscaffold.templates.manifest_in (args)

@end deffn

@geindex readme() (in module pyscaffold.templates)
@anchor{_rst/pyscaffold pyscaffold templates readme}@anchor{36}
@deffn {Function} pyscaffold.templates.readme (args)

@end deffn

@geindex requirements() (in module pyscaffold.templates)
@anchor{_rst/pyscaffold pyscaffold templates requirements}@anchor{37}
@deffn {Function} pyscaffold.templates.requirements (args)

@end deffn

@geindex setup() (in module pyscaffold.templates)
@anchor{_rst/pyscaffold pyscaffold templates setup}@anchor{38}
@deffn {Function} pyscaffold.templates.setup (args)

@end deffn

@geindex sphinx_conf() (in module pyscaffold.templates)
@anchor{_rst/pyscaffold pyscaffold templates sphinx_conf}@anchor{39}
@deffn {Function} pyscaffold.templates.sphinx_conf (args)

@end deffn

@geindex sphinx_index() (in module pyscaffold.templates)
@anchor{_rst/pyscaffold pyscaffold templates sphinx_index}@anchor{3a}
@deffn {Function} pyscaffold.templates.sphinx_index (args)

@end deffn

@geindex sphinx_makefile() (in module pyscaffold.templates)
@anchor{_rst/pyscaffold pyscaffold templates sphinx_makefile}@anchor{3b}
@deffn {Function} pyscaffold.templates.sphinx_makefile (args)

@end deffn

@geindex version() (in module pyscaffold.templates)
@anchor{_rst/pyscaffold pyscaffold templates version}@anchor{3c}
@deffn {Function} pyscaffold.templates.version (args)

@end deffn

@geindex versioneer() (in module pyscaffold.templates)
@anchor{_rst/pyscaffold pyscaffold templates versioneer}@anchor{3d}
@deffn {Function} pyscaffold.templates.versioneer (args)

@end deffn

@node pyscaffold utils module,Module contents,pyscaffold templates module,pyscaffold package
@anchor{_rst/pyscaffold pyscaffold-utils-module}@anchor{3e}@anchor{_rst/pyscaffold module-pyscaffold utils}@anchor{6}
@subsubsection pyscaffold.utils module


@geindex pyscaffold.utils (module)

@geindex ObjKeeper (class in pyscaffold.utils)
@anchor{_rst/pyscaffold pyscaffold utils ObjKeeper}@anchor{3f}
@deffn {Class} pyscaffold.utils.ObjKeeper (name, bases, dct)


Bases: @code{type}

@geindex instances (pyscaffold.utils.ObjKeeper attribute)
@anchor{_rst/pyscaffold pyscaffold utils ObjKeeper instances}@anchor{40}
@deffn {Attribute} instances = @{@}
@end deffn
@end deffn

@geindex capture_objs() (in module pyscaffold.utils)
@anchor{_rst/pyscaffold pyscaffold utils capture_objs}@anchor{41}
@deffn {Function} pyscaffold.utils.capture_objs (cls)

@end deffn

@geindex chdir() (in module pyscaffold.utils)
@anchor{_rst/pyscaffold pyscaffold utils chdir}@anchor{42}
@deffn {Function} pyscaffold.utils.chdir (*args, **kwds)

@end deffn

@geindex exceptions2exit() (in module pyscaffold.utils)
@anchor{_rst/pyscaffold pyscaffold utils exceptions2exit}@anchor{43}
@deffn {Function} pyscaffold.utils.exceptions2exit (exception_list)

@end deffn

@geindex is_valid_identifier() (in module pyscaffold.utils)
@anchor{_rst/pyscaffold pyscaffold utils is_valid_identifier}@anchor{44}
@deffn {Function} pyscaffold.utils.is_valid_identifier (string)

@end deffn

@geindex list2str() (in module pyscaffold.utils)
@anchor{_rst/pyscaffold pyscaffold utils list2str}@anchor{45}
@deffn {Function} pyscaffold.utils.list2str (lst, indent=0)

@end deffn

@geindex make_valid_identifier() (in module pyscaffold.utils)
@anchor{_rst/pyscaffold pyscaffold utils make_valid_identifier}@anchor{46}
@deffn {Function} pyscaffold.utils.make_valid_identifier (string)

@end deffn

@geindex safe_get() (in module pyscaffold.utils)
@anchor{_rst/pyscaffold pyscaffold utils safe_get}@anchor{47}
@deffn {Function} pyscaffold.utils.safe_get (namespace, attr)

@end deffn

@geindex safe_set() (in module pyscaffold.utils)
@anchor{_rst/pyscaffold pyscaffold utils safe_set}@anchor{48}
@deffn {Function} pyscaffold.utils.safe_set (namespace, attr, value)

@end deffn

@node Module contents,,pyscaffold utils module,pyscaffold package
@anchor{_rst/pyscaffold module-contents}@anchor{49}@anchor{_rst/pyscaffold module-pyscaffold}@anchor{0}
@subsubsection Module contents


@geindex pyscaffold (module)

@node Indices and tables,Python Module Index,Contents,Top
@anchor{index indices-and-tables}@anchor{4a}
@chapter Indices and tables



@itemize *

@item 
@emph{genindex}

@item 
@emph{modindex}

@item 
@emph{search}
@end itemize

@node Python Module Index,Index,Indices and tables,Top
@unnumbered Python Module Index


@menu
* pyscaffold: 0. 
* pyscaffold.info: 1. 
* pyscaffold.repo: 2. 
* pyscaffold.runner: 3. 
* pyscaffold.structure: 4. 
* pyscaffold.templates: 5. 
* pyscaffold.utils: 6. 
@end menu


@node Index,,Python Module Index,Top
@unnumbered Index


@printindex ge


@c %**end of body
@bye
