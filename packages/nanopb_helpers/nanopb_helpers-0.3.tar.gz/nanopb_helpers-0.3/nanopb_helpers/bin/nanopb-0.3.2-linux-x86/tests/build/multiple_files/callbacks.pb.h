/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.2 at Fri Feb 27 07:14:50 2015. */

#ifndef PB_CALLBACKS_PB_H_INCLUDED
#define PB_CALLBACKS_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
/* Struct definitions */
typedef struct _SubMessage {
    pb_callback_t stringvalue;
    pb_callback_t int32value;
    pb_callback_t fixed32value;
    pb_callback_t fixed64value;
} SubMessage;

typedef struct _TestMessage {
    pb_callback_t stringvalue;
    pb_callback_t int32value;
    pb_callback_t fixed32value;
    pb_callback_t fixed64value;
    bool has_submsg;
    SubMessage submsg;
    pb_callback_t repeatedstring;
} TestMessage;

/* Default values for struct fields */

/* Initializer values for message structs */
#define SubMessage_init_default                  {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define TestMessage_init_default                 {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, SubMessage_init_default, {{NULL}, NULL}}
#define SubMessage_init_zero                     {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define TestMessage_init_zero                    {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, SubMessage_init_zero, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define SubMessage_stringvalue_tag               1
#define SubMessage_int32value_tag                2
#define SubMessage_fixed32value_tag              3
#define SubMessage_fixed64value_tag              4
#define TestMessage_stringvalue_tag              1
#define TestMessage_int32value_tag               2
#define TestMessage_fixed32value_tag             3
#define TestMessage_fixed64value_tag             4
#define TestMessage_submsg_tag                   5
#define TestMessage_repeatedstring_tag           6

/* Struct field encoding specification for nanopb */
extern const pb_field_t SubMessage_fields[5];
extern const pb_field_t TestMessage_fields[7];

/* Maximum encoded size of messages (where known) */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
