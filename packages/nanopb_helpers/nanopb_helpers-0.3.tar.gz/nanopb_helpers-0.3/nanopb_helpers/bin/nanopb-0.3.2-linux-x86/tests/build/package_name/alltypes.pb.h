/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.2 at Fri Feb 27 07:14:53 2015. */

#ifndef PB_ALLTYPES_PB_H_INCLUDED
#define PB_ALLTYPES_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _test_package_HugeEnum {
    test_package_HugeEnum_Negative = -2147483647,
    test_package_HugeEnum_Positive = 2147483647
} test_package_HugeEnum;

typedef enum _test_package_MyEnum {
    test_package_MyEnum_Zero = 0,
    test_package_MyEnum_First = 1,
    test_package_MyEnum_Second = 2,
    test_package_MyEnum_Truth = 42
} test_package_MyEnum;

/* Struct definitions */
typedef struct _test_package_EmptyMessage {
    uint8_t dummy_field;
} test_package_EmptyMessage;

typedef struct _test_package_Limits {
    int32_t int32_min;
    int32_t int32_max;
    uint32_t uint32_min;
    uint32_t uint32_max;
    int64_t int64_min;
    int64_t int64_max;
    uint64_t uint64_min;
    uint64_t uint64_max;
    test_package_HugeEnum enum_min;
    test_package_HugeEnum enum_max;
} test_package_Limits;

typedef struct _test_package_SubMessage {
    char substuff1[16];
    int32_t substuff2;
    bool has_substuff3;
    uint32_t substuff3;
} test_package_SubMessage;

typedef PB_BYTES_ARRAY_T(16) test_package_AllTypes_req_bytes_t;
typedef PB_BYTES_ARRAY_T(16) test_package_AllTypes_rep_bytes_t;
typedef PB_BYTES_ARRAY_T(16) test_package_AllTypes_opt_bytes_t;
typedef struct _test_package_AllTypes {
    int32_t req_int32;
    int64_t req_int64;
    uint32_t req_uint32;
    uint64_t req_uint64;
    int32_t req_sint32;
    int64_t req_sint64;
    bool req_bool;
    uint32_t req_fixed32;
    int32_t req_sfixed32;
    float req_float;
    uint64_t req_fixed64;
    int64_t req_sfixed64;
    double req_double;
    char req_string[16];
    test_package_AllTypes_req_bytes_t req_bytes;
    test_package_SubMessage req_submsg;
    test_package_MyEnum req_enum;
    test_package_EmptyMessage req_emptymsg;
    pb_size_t rep_int32_count;
    int32_t rep_int32[5];
    pb_size_t rep_int64_count;
    int64_t rep_int64[5];
    pb_size_t rep_uint32_count;
    uint32_t rep_uint32[5];
    pb_size_t rep_uint64_count;
    uint64_t rep_uint64[5];
    pb_size_t rep_sint32_count;
    int32_t rep_sint32[5];
    pb_size_t rep_sint64_count;
    int64_t rep_sint64[5];
    pb_size_t rep_bool_count;
    bool rep_bool[5];
    pb_size_t rep_fixed32_count;
    uint32_t rep_fixed32[5];
    pb_size_t rep_sfixed32_count;
    int32_t rep_sfixed32[5];
    pb_size_t rep_float_count;
    float rep_float[5];
    pb_size_t rep_fixed64_count;
    uint64_t rep_fixed64[5];
    pb_size_t rep_sfixed64_count;
    int64_t rep_sfixed64[5];
    pb_size_t rep_double_count;
    double rep_double[5];
    pb_size_t rep_string_count;
    char rep_string[5][16];
    pb_size_t rep_bytes_count;
    test_package_AllTypes_rep_bytes_t rep_bytes[5];
    pb_size_t rep_submsg_count;
    test_package_SubMessage rep_submsg[5];
    pb_size_t rep_enum_count;
    test_package_MyEnum rep_enum[5];
    pb_size_t rep_emptymsg_count;
    test_package_EmptyMessage rep_emptymsg[5];
    bool has_opt_int32;
    int32_t opt_int32;
    bool has_opt_int64;
    int64_t opt_int64;
    bool has_opt_uint32;
    uint32_t opt_uint32;
    bool has_opt_uint64;
    uint64_t opt_uint64;
    bool has_opt_sint32;
    int32_t opt_sint32;
    bool has_opt_sint64;
    int64_t opt_sint64;
    bool has_opt_bool;
    bool opt_bool;
    bool has_opt_fixed32;
    uint32_t opt_fixed32;
    bool has_opt_sfixed32;
    int32_t opt_sfixed32;
    bool has_opt_float;
    float opt_float;
    bool has_opt_fixed64;
    uint64_t opt_fixed64;
    bool has_opt_sfixed64;
    int64_t opt_sfixed64;
    bool has_opt_double;
    double opt_double;
    bool has_opt_string;
    char opt_string[16];
    bool has_opt_bytes;
    test_package_AllTypes_opt_bytes_t opt_bytes;
    bool has_opt_submsg;
    test_package_SubMessage opt_submsg;
    bool has_opt_enum;
    test_package_MyEnum opt_enum;
    bool has_opt_emptymsg;
    test_package_EmptyMessage opt_emptymsg;
    pb_size_t which_oneof;
    union {
        test_package_SubMessage oneof_msg1;
        test_package_EmptyMessage oneof_msg2;
    } oneof;
    test_package_Limits req_limits;
    int32_t end;
    pb_extension_t *extensions;
} test_package_AllTypes;

/* Default values for struct fields */
extern const char test_package_SubMessage_substuff1_default[16];
extern const int32_t test_package_SubMessage_substuff2_default;
extern const uint32_t test_package_SubMessage_substuff3_default;
extern const int32_t test_package_Limits_int32_min_default;
extern const int32_t test_package_Limits_int32_max_default;
extern const uint32_t test_package_Limits_uint32_min_default;
extern const uint32_t test_package_Limits_uint32_max_default;
extern const int64_t test_package_Limits_int64_min_default;
extern const int64_t test_package_Limits_int64_max_default;
extern const uint64_t test_package_Limits_uint64_min_default;
extern const uint64_t test_package_Limits_uint64_max_default;
extern const test_package_HugeEnum test_package_Limits_enum_min_default;
extern const test_package_HugeEnum test_package_Limits_enum_max_default;
extern const int32_t test_package_AllTypes_opt_int32_default;
extern const int64_t test_package_AllTypes_opt_int64_default;
extern const uint32_t test_package_AllTypes_opt_uint32_default;
extern const uint64_t test_package_AllTypes_opt_uint64_default;
extern const int32_t test_package_AllTypes_opt_sint32_default;
extern const int64_t test_package_AllTypes_opt_sint64_default;
extern const bool test_package_AllTypes_opt_bool_default;
extern const uint32_t test_package_AllTypes_opt_fixed32_default;
extern const int32_t test_package_AllTypes_opt_sfixed32_default;
extern const float test_package_AllTypes_opt_float_default;
extern const uint64_t test_package_AllTypes_opt_fixed64_default;
extern const int64_t test_package_AllTypes_opt_sfixed64_default;
extern const double test_package_AllTypes_opt_double_default;
extern const char test_package_AllTypes_opt_string_default[16];
extern const test_package_AllTypes_opt_bytes_t test_package_AllTypes_opt_bytes_default;
extern const test_package_MyEnum test_package_AllTypes_opt_enum_default;

/* Initializer values for message structs */
#define test_package_SubMessage_init_default     {"1", 2, false, 3u}
#define test_package_EmptyMessage_init_default   {0}
#define test_package_Limits_init_default         {2147483647, -2147483647, 4294967295u, 0u, 9223372036854775807ll, -9223372036854775807ll, 18446744073709551615ull, 0ull, test_package_HugeEnum_Positive, test_package_HugeEnum_Negative}
#define test_package_AllTypes_init_default       {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", {0, {0}}, test_package_SubMessage_init_default, (test_package_MyEnum)0, test_package_EmptyMessage_init_default, 0, {0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0, {"", "", "", "", ""}, 0, {{0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}}, 0, {test_package_SubMessage_init_default, test_package_SubMessage_init_default, test_package_SubMessage_init_default, test_package_SubMessage_init_default, test_package_SubMessage_init_default}, 0, {(test_package_MyEnum)0, (test_package_MyEnum)0, (test_package_MyEnum)0, (test_package_MyEnum)0, (test_package_MyEnum)0}, 0, {test_package_EmptyMessage_init_default, test_package_EmptyMessage_init_default, test_package_EmptyMessage_init_default, test_package_EmptyMessage_init_default, test_package_EmptyMessage_init_default}, false, 4041, false, 4042ll, false, 4043u, false, 4044ull, false, 4045, false, 4046, false, false, false, 4048u, false, 4049, false, 4050, false, 4051ull, false, 4052ll, false, 4053, false, "4054", false, {4, {0x34,0x30,0x35,0x35}}, false, test_package_SubMessage_init_default, false, test_package_MyEnum_Second, false, test_package_EmptyMessage_init_default, 0, {test_package_SubMessage_init_default}, test_package_Limits_init_default, 0, NULL}
#define test_package_SubMessage_init_zero        {"", 0, false, 0}
#define test_package_EmptyMessage_init_zero      {0}
#define test_package_Limits_init_zero            {0, 0, 0, 0, 0, 0, 0, 0, (test_package_HugeEnum)0, (test_package_HugeEnum)0}
#define test_package_AllTypes_init_zero          {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", {0, {0}}, test_package_SubMessage_init_zero, (test_package_MyEnum)0, test_package_EmptyMessage_init_zero, 0, {0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0, {"", "", "", "", ""}, 0, {{0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}}, 0, {test_package_SubMessage_init_zero, test_package_SubMessage_init_zero, test_package_SubMessage_init_zero, test_package_SubMessage_init_zero, test_package_SubMessage_init_zero}, 0, {(test_package_MyEnum)0, (test_package_MyEnum)0, (test_package_MyEnum)0, (test_package_MyEnum)0, (test_package_MyEnum)0}, 0, {test_package_EmptyMessage_init_zero, test_package_EmptyMessage_init_zero, test_package_EmptyMessage_init_zero, test_package_EmptyMessage_init_zero, test_package_EmptyMessage_init_zero}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, "", false, {0, {0}}, false, test_package_SubMessage_init_zero, false, (test_package_MyEnum)0, false, test_package_EmptyMessage_init_zero, 0, {test_package_SubMessage_init_zero}, test_package_Limits_init_zero, 0, NULL}

/* Field tags (for use in manual encoding/decoding) */
#define test_package_Limits_int32_min_tag        1
#define test_package_Limits_int32_max_tag        2
#define test_package_Limits_uint32_min_tag       3
#define test_package_Limits_uint32_max_tag       4
#define test_package_Limits_int64_min_tag        5
#define test_package_Limits_int64_max_tag        6
#define test_package_Limits_uint64_min_tag       7
#define test_package_Limits_uint64_max_tag       8
#define test_package_Limits_enum_min_tag         9
#define test_package_Limits_enum_max_tag         10
#define test_package_SubMessage_substuff1_tag    1
#define test_package_SubMessage_substuff2_tag    2
#define test_package_SubMessage_substuff3_tag    3
#define test_package_AllTypes_oneof_msg1_tag     59

#define test_package_AllTypes_oneof_msg2_tag     60
#define test_package_AllTypes_req_int32_tag      1
#define test_package_AllTypes_req_int64_tag      2
#define test_package_AllTypes_req_uint32_tag     3
#define test_package_AllTypes_req_uint64_tag     4
#define test_package_AllTypes_req_sint32_tag     5
#define test_package_AllTypes_req_sint64_tag     6
#define test_package_AllTypes_req_bool_tag       7
#define test_package_AllTypes_req_fixed32_tag    8
#define test_package_AllTypes_req_sfixed32_tag   9
#define test_package_AllTypes_req_float_tag      10
#define test_package_AllTypes_req_fixed64_tag    11
#define test_package_AllTypes_req_sfixed64_tag   12
#define test_package_AllTypes_req_double_tag     13
#define test_package_AllTypes_req_string_tag     14
#define test_package_AllTypes_req_bytes_tag      15
#define test_package_AllTypes_req_submsg_tag     16
#define test_package_AllTypes_req_enum_tag       17
#define test_package_AllTypes_req_emptymsg_tag   18
#define test_package_AllTypes_rep_int32_tag      21
#define test_package_AllTypes_rep_int64_tag      22
#define test_package_AllTypes_rep_uint32_tag     23
#define test_package_AllTypes_rep_uint64_tag     24
#define test_package_AllTypes_rep_sint32_tag     25
#define test_package_AllTypes_rep_sint64_tag     26
#define test_package_AllTypes_rep_bool_tag       27
#define test_package_AllTypes_rep_fixed32_tag    28
#define test_package_AllTypes_rep_sfixed32_tag   29
#define test_package_AllTypes_rep_float_tag      30
#define test_package_AllTypes_rep_fixed64_tag    31
#define test_package_AllTypes_rep_sfixed64_tag   32
#define test_package_AllTypes_rep_double_tag     33
#define test_package_AllTypes_rep_string_tag     34
#define test_package_AllTypes_rep_bytes_tag      35
#define test_package_AllTypes_rep_submsg_tag     36
#define test_package_AllTypes_rep_enum_tag       37
#define test_package_AllTypes_rep_emptymsg_tag   38
#define test_package_AllTypes_opt_int32_tag      41
#define test_package_AllTypes_opt_int64_tag      42
#define test_package_AllTypes_opt_uint32_tag     43
#define test_package_AllTypes_opt_uint64_tag     44
#define test_package_AllTypes_opt_sint32_tag     45
#define test_package_AllTypes_opt_sint64_tag     46
#define test_package_AllTypes_opt_bool_tag       47
#define test_package_AllTypes_opt_fixed32_tag    48
#define test_package_AllTypes_opt_sfixed32_tag   49
#define test_package_AllTypes_opt_float_tag      50
#define test_package_AllTypes_opt_fixed64_tag    51
#define test_package_AllTypes_opt_sfixed64_tag   52
#define test_package_AllTypes_opt_double_tag     53
#define test_package_AllTypes_opt_string_tag     54
#define test_package_AllTypes_opt_bytes_tag      55
#define test_package_AllTypes_opt_submsg_tag     56
#define test_package_AllTypes_opt_enum_tag       57
#define test_package_AllTypes_opt_emptymsg_tag   58
#define test_package_AllTypes_req_limits_tag     98
#define test_package_AllTypes_end_tag            99

/* Struct field encoding specification for nanopb */
extern const pb_field_t test_package_SubMessage_fields[4];
extern const pb_field_t test_package_EmptyMessage_fields[1];
extern const pb_field_t test_package_Limits_fields[11];
extern const pb_field_t test_package_AllTypes_fields[60];

/* Maximum encoded size of messages (where known) */
#define test_package_SubMessage_size             34
#define test_package_EmptyMessage_size           0
#define test_package_Limits_size                 90
#define test_package_AllTypes_size               1513

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
