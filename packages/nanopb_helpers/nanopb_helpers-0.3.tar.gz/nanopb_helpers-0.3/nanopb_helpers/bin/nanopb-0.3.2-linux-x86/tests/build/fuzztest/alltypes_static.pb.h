/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.2 at Fri Feb 27 07:14:42 2015. */

#ifndef PB_ALLTYPES_STATIC_PB_H_INCLUDED
#define PB_ALLTYPES_STATIC_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _alltypes_static_HugeEnum {
    alltypes_static_HugeEnum_Negative = -2147483647,
    alltypes_static_HugeEnum_Positive = 2147483647
} alltypes_static_HugeEnum;

typedef enum _alltypes_static_MyEnum {
    alltypes_static_MyEnum_Zero = 0,
    alltypes_static_MyEnum_First = 1,
    alltypes_static_MyEnum_Second = 2,
    alltypes_static_MyEnum_Truth = 42
} alltypes_static_MyEnum;

/* Struct definitions */
typedef struct _alltypes_static_EmptyMessage {
    uint8_t dummy_field;
} alltypes_static_EmptyMessage;

typedef struct _alltypes_static_Limits {
    int32_t int32_min;
    int32_t int32_max;
    uint32_t uint32_min;
    uint32_t uint32_max;
    int64_t int64_min;
    int64_t int64_max;
    uint64_t uint64_min;
    uint64_t uint64_max;
    alltypes_static_HugeEnum enum_min;
    alltypes_static_HugeEnum enum_max;
} alltypes_static_Limits;

typedef struct _alltypes_static_SubMessage {
    char substuff1[32];
    int32_t substuff2;
    bool has_substuff3;
    uint32_t substuff3;
} alltypes_static_SubMessage;

typedef PB_BYTES_ARRAY_T(32) alltypes_static_AllTypes_req_bytes_t;
typedef PB_BYTES_ARRAY_T(32) alltypes_static_AllTypes_rep_bytes_t;
typedef PB_BYTES_ARRAY_T(32) alltypes_static_AllTypes_opt_bytes_t;
typedef struct _alltypes_static_AllTypes {
    int32_t req_int32;
    int64_t req_int64;
    uint32_t req_uint32;
    uint64_t req_uint64;
    int32_t req_sint32;
    int64_t req_sint64;
    bool req_bool;
    uint32_t req_fixed32;
    int32_t req_sfixed32;
    float req_float;
    uint64_t req_fixed64;
    int64_t req_sfixed64;
    double req_double;
    char req_string[32];
    alltypes_static_AllTypes_req_bytes_t req_bytes;
    alltypes_static_SubMessage req_submsg;
    alltypes_static_MyEnum req_enum;
    alltypes_static_EmptyMessage req_emptymsg;
    pb_size_t rep_int32_count;
    int32_t rep_int32[8];
    pb_size_t rep_int64_count;
    int64_t rep_int64[8];
    pb_size_t rep_uint32_count;
    uint32_t rep_uint32[8];
    pb_size_t rep_uint64_count;
    uint64_t rep_uint64[8];
    pb_size_t rep_sint32_count;
    int32_t rep_sint32[8];
    pb_size_t rep_sint64_count;
    int64_t rep_sint64[8];
    pb_size_t rep_bool_count;
    bool rep_bool[8];
    pb_size_t rep_fixed32_count;
    uint32_t rep_fixed32[8];
    pb_size_t rep_sfixed32_count;
    int32_t rep_sfixed32[8];
    pb_size_t rep_float_count;
    float rep_float[8];
    pb_size_t rep_fixed64_count;
    uint64_t rep_fixed64[8];
    pb_size_t rep_sfixed64_count;
    int64_t rep_sfixed64[8];
    pb_size_t rep_double_count;
    double rep_double[8];
    pb_size_t rep_string_count;
    char rep_string[8][32];
    pb_size_t rep_bytes_count;
    alltypes_static_AllTypes_rep_bytes_t rep_bytes[8];
    pb_size_t rep_submsg_count;
    alltypes_static_SubMessage rep_submsg[8];
    pb_size_t rep_enum_count;
    alltypes_static_MyEnum rep_enum[8];
    pb_size_t rep_emptymsg_count;
    alltypes_static_EmptyMessage rep_emptymsg[8];
    bool has_opt_int32;
    int32_t opt_int32;
    bool has_opt_int64;
    int64_t opt_int64;
    bool has_opt_uint32;
    uint32_t opt_uint32;
    bool has_opt_uint64;
    uint64_t opt_uint64;
    bool has_opt_sint32;
    int32_t opt_sint32;
    bool has_opt_sint64;
    int64_t opt_sint64;
    bool has_opt_bool;
    bool opt_bool;
    bool has_opt_fixed32;
    uint32_t opt_fixed32;
    bool has_opt_sfixed32;
    int32_t opt_sfixed32;
    bool has_opt_float;
    float opt_float;
    bool has_opt_fixed64;
    uint64_t opt_fixed64;
    bool has_opt_sfixed64;
    int64_t opt_sfixed64;
    bool has_opt_double;
    double opt_double;
    bool has_opt_string;
    char opt_string[32];
    bool has_opt_bytes;
    alltypes_static_AllTypes_opt_bytes_t opt_bytes;
    bool has_opt_submsg;
    alltypes_static_SubMessage opt_submsg;
    bool has_opt_enum;
    alltypes_static_MyEnum opt_enum;
    bool has_opt_emptymsg;
    alltypes_static_EmptyMessage opt_emptymsg;
    pb_size_t which_oneof;
    union {
        alltypes_static_SubMessage oneof_msg1;
        alltypes_static_EmptyMessage oneof_msg2;
    } oneof;
    alltypes_static_Limits req_limits;
    int32_t end;
} alltypes_static_AllTypes;

/* Default values for struct fields */
extern const char alltypes_static_SubMessage_substuff1_default[32];
extern const int32_t alltypes_static_SubMessage_substuff2_default;
extern const uint32_t alltypes_static_SubMessage_substuff3_default;
extern const int32_t alltypes_static_Limits_int32_min_default;
extern const int32_t alltypes_static_Limits_int32_max_default;
extern const uint32_t alltypes_static_Limits_uint32_min_default;
extern const uint32_t alltypes_static_Limits_uint32_max_default;
extern const int64_t alltypes_static_Limits_int64_min_default;
extern const int64_t alltypes_static_Limits_int64_max_default;
extern const uint64_t alltypes_static_Limits_uint64_min_default;
extern const uint64_t alltypes_static_Limits_uint64_max_default;
extern const alltypes_static_HugeEnum alltypes_static_Limits_enum_min_default;
extern const alltypes_static_HugeEnum alltypes_static_Limits_enum_max_default;
extern const int32_t alltypes_static_AllTypes_opt_int32_default;
extern const int64_t alltypes_static_AllTypes_opt_int64_default;
extern const uint32_t alltypes_static_AllTypes_opt_uint32_default;
extern const uint64_t alltypes_static_AllTypes_opt_uint64_default;
extern const int32_t alltypes_static_AllTypes_opt_sint32_default;
extern const int64_t alltypes_static_AllTypes_opt_sint64_default;
extern const bool alltypes_static_AllTypes_opt_bool_default;
extern const uint32_t alltypes_static_AllTypes_opt_fixed32_default;
extern const int32_t alltypes_static_AllTypes_opt_sfixed32_default;
extern const float alltypes_static_AllTypes_opt_float_default;
extern const uint64_t alltypes_static_AllTypes_opt_fixed64_default;
extern const int64_t alltypes_static_AllTypes_opt_sfixed64_default;
extern const double alltypes_static_AllTypes_opt_double_default;
extern const char alltypes_static_AllTypes_opt_string_default[32];
extern const alltypes_static_AllTypes_opt_bytes_t alltypes_static_AllTypes_opt_bytes_default;
extern const alltypes_static_MyEnum alltypes_static_AllTypes_opt_enum_default;

/* Initializer values for message structs */
#define alltypes_static_SubMessage_init_default  {"1", 2, false, 3u}
#define alltypes_static_EmptyMessage_init_default {0}
#define alltypes_static_Limits_init_default      {2147483647, -2147483647, 4294967295u, 0u, 9223372036854775807ll, -9223372036854775807ll, 18446744073709551615ull, 0ull, alltypes_static_HugeEnum_Positive, alltypes_static_HugeEnum_Negative}
#define alltypes_static_AllTypes_init_default    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", {0, {0}}, alltypes_static_SubMessage_init_default, (alltypes_static_MyEnum)0, alltypes_static_EmptyMessage_init_default, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {"", "", "", "", "", "", "", ""}, 0, {{0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}}, 0, {alltypes_static_SubMessage_init_default, alltypes_static_SubMessage_init_default, alltypes_static_SubMessage_init_default, alltypes_static_SubMessage_init_default, alltypes_static_SubMessage_init_default, alltypes_static_SubMessage_init_default, alltypes_static_SubMessage_init_default, alltypes_static_SubMessage_init_default}, 0, {(alltypes_static_MyEnum)0, (alltypes_static_MyEnum)0, (alltypes_static_MyEnum)0, (alltypes_static_MyEnum)0, (alltypes_static_MyEnum)0, (alltypes_static_MyEnum)0, (alltypes_static_MyEnum)0, (alltypes_static_MyEnum)0}, 0, {alltypes_static_EmptyMessage_init_default, alltypes_static_EmptyMessage_init_default, alltypes_static_EmptyMessage_init_default, alltypes_static_EmptyMessage_init_default, alltypes_static_EmptyMessage_init_default, alltypes_static_EmptyMessage_init_default, alltypes_static_EmptyMessage_init_default, alltypes_static_EmptyMessage_init_default}, false, 4041, false, 4042ll, false, 4043u, false, 4044ull, false, 4045, false, 4046, false, false, false, 4048u, false, 4049, false, 4050, false, 4051ull, false, 4052ll, false, 4053, false, "4054", false, {4, {0x34,0x30,0x35,0x35}}, false, alltypes_static_SubMessage_init_default, false, alltypes_static_MyEnum_Second, false, alltypes_static_EmptyMessage_init_default, 0, {alltypes_static_SubMessage_init_default}, alltypes_static_Limits_init_default, 0}
#define alltypes_static_SubMessage_init_zero     {"", 0, false, 0}
#define alltypes_static_EmptyMessage_init_zero   {0}
#define alltypes_static_Limits_init_zero         {0, 0, 0, 0, 0, 0, 0, 0, (alltypes_static_HugeEnum)0, (alltypes_static_HugeEnum)0}
#define alltypes_static_AllTypes_init_zero       {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", {0, {0}}, alltypes_static_SubMessage_init_zero, (alltypes_static_MyEnum)0, alltypes_static_EmptyMessage_init_zero, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0, {"", "", "", "", "", "", "", ""}, 0, {{0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}}, 0, {alltypes_static_SubMessage_init_zero, alltypes_static_SubMessage_init_zero, alltypes_static_SubMessage_init_zero, alltypes_static_SubMessage_init_zero, alltypes_static_SubMessage_init_zero, alltypes_static_SubMessage_init_zero, alltypes_static_SubMessage_init_zero, alltypes_static_SubMessage_init_zero}, 0, {(alltypes_static_MyEnum)0, (alltypes_static_MyEnum)0, (alltypes_static_MyEnum)0, (alltypes_static_MyEnum)0, (alltypes_static_MyEnum)0, (alltypes_static_MyEnum)0, (alltypes_static_MyEnum)0, (alltypes_static_MyEnum)0}, 0, {alltypes_static_EmptyMessage_init_zero, alltypes_static_EmptyMessage_init_zero, alltypes_static_EmptyMessage_init_zero, alltypes_static_EmptyMessage_init_zero, alltypes_static_EmptyMessage_init_zero, alltypes_static_EmptyMessage_init_zero, alltypes_static_EmptyMessage_init_zero, alltypes_static_EmptyMessage_init_zero}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, "", false, {0, {0}}, false, alltypes_static_SubMessage_init_zero, false, (alltypes_static_MyEnum)0, false, alltypes_static_EmptyMessage_init_zero, 0, {alltypes_static_SubMessage_init_zero}, alltypes_static_Limits_init_zero, 0}

/* Field tags (for use in manual encoding/decoding) */
#define alltypes_static_Limits_int32_min_tag     1
#define alltypes_static_Limits_int32_max_tag     2
#define alltypes_static_Limits_uint32_min_tag    3
#define alltypes_static_Limits_uint32_max_tag    4
#define alltypes_static_Limits_int64_min_tag     5
#define alltypes_static_Limits_int64_max_tag     6
#define alltypes_static_Limits_uint64_min_tag    7
#define alltypes_static_Limits_uint64_max_tag    8
#define alltypes_static_Limits_enum_min_tag      9
#define alltypes_static_Limits_enum_max_tag      10
#define alltypes_static_SubMessage_substuff1_tag 1
#define alltypes_static_SubMessage_substuff2_tag 2
#define alltypes_static_SubMessage_substuff3_tag 3
#define alltypes_static_AllTypes_oneof_msg1_tag  59

#define alltypes_static_AllTypes_oneof_msg2_tag  60
#define alltypes_static_AllTypes_req_int32_tag   1
#define alltypes_static_AllTypes_req_int64_tag   2
#define alltypes_static_AllTypes_req_uint32_tag  3
#define alltypes_static_AllTypes_req_uint64_tag  4
#define alltypes_static_AllTypes_req_sint32_tag  5
#define alltypes_static_AllTypes_req_sint64_tag  6
#define alltypes_static_AllTypes_req_bool_tag    7
#define alltypes_static_AllTypes_req_fixed32_tag 8
#define alltypes_static_AllTypes_req_sfixed32_tag 9
#define alltypes_static_AllTypes_req_float_tag   10
#define alltypes_static_AllTypes_req_fixed64_tag 11
#define alltypes_static_AllTypes_req_sfixed64_tag 12
#define alltypes_static_AllTypes_req_double_tag  13
#define alltypes_static_AllTypes_req_string_tag  14
#define alltypes_static_AllTypes_req_bytes_tag   15
#define alltypes_static_AllTypes_req_submsg_tag  16
#define alltypes_static_AllTypes_req_enum_tag    17
#define alltypes_static_AllTypes_req_emptymsg_tag 18
#define alltypes_static_AllTypes_rep_int32_tag   21
#define alltypes_static_AllTypes_rep_int64_tag   22
#define alltypes_static_AllTypes_rep_uint32_tag  23
#define alltypes_static_AllTypes_rep_uint64_tag  24
#define alltypes_static_AllTypes_rep_sint32_tag  25
#define alltypes_static_AllTypes_rep_sint64_tag  26
#define alltypes_static_AllTypes_rep_bool_tag    27
#define alltypes_static_AllTypes_rep_fixed32_tag 28
#define alltypes_static_AllTypes_rep_sfixed32_tag 29
#define alltypes_static_AllTypes_rep_float_tag   30
#define alltypes_static_AllTypes_rep_fixed64_tag 31
#define alltypes_static_AllTypes_rep_sfixed64_tag 32
#define alltypes_static_AllTypes_rep_double_tag  33
#define alltypes_static_AllTypes_rep_string_tag  34
#define alltypes_static_AllTypes_rep_bytes_tag   35
#define alltypes_static_AllTypes_rep_submsg_tag  36
#define alltypes_static_AllTypes_rep_enum_tag    37
#define alltypes_static_AllTypes_rep_emptymsg_tag 38
#define alltypes_static_AllTypes_opt_int32_tag   41
#define alltypes_static_AllTypes_opt_int64_tag   42
#define alltypes_static_AllTypes_opt_uint32_tag  43
#define alltypes_static_AllTypes_opt_uint64_tag  44
#define alltypes_static_AllTypes_opt_sint32_tag  45
#define alltypes_static_AllTypes_opt_sint64_tag  46
#define alltypes_static_AllTypes_opt_bool_tag    47
#define alltypes_static_AllTypes_opt_fixed32_tag 48
#define alltypes_static_AllTypes_opt_sfixed32_tag 49
#define alltypes_static_AllTypes_opt_float_tag   50
#define alltypes_static_AllTypes_opt_fixed64_tag 51
#define alltypes_static_AllTypes_opt_sfixed64_tag 52
#define alltypes_static_AllTypes_opt_double_tag  53
#define alltypes_static_AllTypes_opt_string_tag  54
#define alltypes_static_AllTypes_opt_bytes_tag   55
#define alltypes_static_AllTypes_opt_submsg_tag  56
#define alltypes_static_AllTypes_opt_enum_tag    57
#define alltypes_static_AllTypes_opt_emptymsg_tag 58
#define alltypes_static_AllTypes_req_limits_tag  98
#define alltypes_static_AllTypes_end_tag         99

/* Struct field encoding specification for nanopb */
extern const pb_field_t alltypes_static_SubMessage_fields[4];
extern const pb_field_t alltypes_static_EmptyMessage_fields[1];
extern const pb_field_t alltypes_static_Limits_fields[11];
extern const pb_field_t alltypes_static_AllTypes_fields[59];

/* Maximum encoded size of messages (where known) */
#define alltypes_static_SubMessage_size          50
#define alltypes_static_EmptyMessage_size        0
#define alltypes_static_Limits_size              90
#define alltypes_static_AllTypes_size            2603

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
