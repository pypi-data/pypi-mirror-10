#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings,slots,dynamic,tornado
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.protocol.TBase import TBase, TExceptionBase



class meta(TBase):
  """
  Attributes:
   - shouldIgnore
   - pickupLatitude
   - pickupLongitude
   - tripId
   - clientToken
   - clientId
   - destinationLatitude
   - destinationLongitude
   - currentETA
   - fifoDispatchId
   - waitSince
   - driverLatitude
   - driverLongitude
  """

  __slots__ = [ 
    'shouldIgnore',
    'pickupLatitude',
    'pickupLongitude',
    'tripId',
    'clientToken',
    'clientId',
    'destinationLatitude',
    'destinationLongitude',
    'currentETA',
    'fifoDispatchId',
    'waitSince',
    'driverLatitude',
    'driverLongitude',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'shouldIgnore', None, None, ), # 1
    (2, TType.DOUBLE, 'pickupLatitude', None, None, ), # 2
    (3, TType.DOUBLE, 'pickupLongitude', None, None, ), # 3
    (4, TType.STRING, 'tripId', None, None, ), # 4
    (5, TType.STRING, 'clientToken', None, None, ), # 5
    (6, TType.I32, 'clientId', None, None, ), # 6
    (7, TType.DOUBLE, 'destinationLatitude', None, None, ), # 7
    (8, TType.DOUBLE, 'destinationLongitude', None, None, ), # 8
    (9, TType.STRING, 'currentETA', None, None, ), # 9
    (10, TType.STRING, 'fifoDispatchId', None, None, ), # 10
    (11, TType.DOUBLE, 'waitSince', None, None, ), # 11
    (12, TType.DOUBLE, 'driverLatitude', None, None, ), # 12
    (13, TType.DOUBLE, 'driverLongitude', None, None, ), # 13
  )

  def __init__(self, shouldIgnore=None, pickupLatitude=None, pickupLongitude=None, tripId=None, clientToken=None, clientId=None, destinationLatitude=None, destinationLongitude=None, currentETA=None, fifoDispatchId=None, waitSince=None, driverLatitude=None, driverLongitude=None,):
    self.shouldIgnore = shouldIgnore
    self.pickupLatitude = pickupLatitude
    self.pickupLongitude = pickupLongitude
    self.tripId = tripId
    self.clientToken = clientToken
    self.clientId = clientId
    self.destinationLatitude = destinationLatitude
    self.destinationLongitude = destinationLongitude
    self.currentETA = currentETA
    self.fifoDispatchId = fifoDispatchId
    self.waitSince = waitSince
    self.driverLatitude = driverLatitude
    self.driverLongitude = driverLongitude

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.shouldIgnore)
    value = (value * 31) ^ hash(self.pickupLatitude)
    value = (value * 31) ^ hash(self.pickupLongitude)
    value = (value * 31) ^ hash(self.tripId)
    value = (value * 31) ^ hash(self.clientToken)
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.destinationLatitude)
    value = (value * 31) ^ hash(self.destinationLongitude)
    value = (value * 31) ^ hash(self.currentETA)
    value = (value * 31) ^ hash(self.fifoDispatchId)
    value = (value * 31) ^ hash(self.waitSince)
    value = (value * 31) ^ hash(self.driverLatitude)
    value = (value * 31) ^ hash(self.driverLongitude)
    return value


class driver(TBase):
  """
  Attributes:
   - id
   - distance
   - latitude
   - longitude
   - vehicleCategoryId
   - updateTime
   - peerId
   - status
   - token
   - vehicleId
   - vehicleUUID
   - course
   - uuid
   - meta
  """

  __slots__ = [ 
    'id',
    'distance',
    'latitude',
    'longitude',
    'vehicleCategoryId',
    'updateTime',
    'peerId',
    'status',
    'token',
    'vehicleId',
    'vehicleUUID',
    'course',
    'uuid',
    'meta',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.DOUBLE, 'distance', None, None, ), # 2
    (3, TType.DOUBLE, 'latitude', None, None, ), # 3
    (4, TType.DOUBLE, 'longitude', None, None, ), # 4
    (5, TType.I32, 'vehicleCategoryId', None, None, ), # 5
    (6, TType.DOUBLE, 'updateTime', None, None, ), # 6
    (7, TType.I16, 'peerId', None, None, ), # 7
    (8, TType.STRING, 'status', None, None, ), # 8
    (9, TType.STRING, 'token', None, None, ), # 9
    (10, TType.I32, 'vehicleId', None, None, ), # 10
    (11, TType.STRING, 'vehicleUUID', None, None, ), # 11
    (12, TType.DOUBLE, 'course', None, None, ), # 12
    (13, TType.STRING, 'uuid', None, None, ), # 13
    (14, TType.STRUCT, 'meta', (meta, meta.thrift_spec), None, ), # 14
  )

  def __init__(self, id=None, distance=None, latitude=None, longitude=None, vehicleCategoryId=None, updateTime=None, peerId=None, status=None, token=None, vehicleId=None, vehicleUUID=None, course=None, uuid=None, meta=None,):
    self.id = id
    self.distance = distance
    self.latitude = latitude
    self.longitude = longitude
    self.vehicleCategoryId = vehicleCategoryId
    self.updateTime = updateTime
    self.peerId = peerId
    self.status = status
    self.token = token
    self.vehicleId = vehicleId
    self.vehicleUUID = vehicleUUID
    self.course = course
    self.uuid = uuid
    self.meta = meta

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.distance)
    value = (value * 31) ^ hash(self.latitude)
    value = (value * 31) ^ hash(self.longitude)
    value = (value * 31) ^ hash(self.vehicleCategoryId)
    value = (value * 31) ^ hash(self.updateTime)
    value = (value * 31) ^ hash(self.peerId)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.vehicleId)
    value = (value * 31) ^ hash(self.vehicleUUID)
    value = (value * 31) ^ hash(self.course)
    value = (value * 31) ^ hash(self.uuid)
    value = (value * 31) ^ hash(self.meta)
    return value


class FindResultPerVehicleView(TBase):
  """
  Attributes:
   - cacheEmpty
   - cars
   - id
  """

  __slots__ = [ 
    'cacheEmpty',
    'cars',
    'id',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'cacheEmpty', None, None, ), # 1
    (2, TType.LIST, 'cars', (TType.STRUCT,(driver, driver.thrift_spec)), None, ), # 2
    (3, TType.I32, 'id', None, None, ), # 3
  )

  def __init__(self, cacheEmpty=None, cars=None, id=None,):
    self.cacheEmpty = cacheEmpty
    self.cars = cars
    self.id = id

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cacheEmpty)
    value = (value * 31) ^ hash(self.cars)
    value = (value * 31) ^ hash(self.id)
    return value


class VehicleViewQuery(TBase):
  """
  Attributes:
   - id
   - maxNearestCars
   - maxDispatchDistanceMiles
   - maxNearestCabs
  """

  __slots__ = [ 
    'id',
    'maxNearestCars',
    'maxDispatchDistanceMiles',
    'maxNearestCabs',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'maxNearestCars', None, None, ), # 2
    (3, TType.DOUBLE, 'maxDispatchDistanceMiles', None, None, ), # 3
    (4, TType.I32, 'maxNearestCabs', None, None, ), # 4
  )

  def __init__(self, id=None, maxNearestCars=None, maxDispatchDistanceMiles=None, maxNearestCabs=None,):
    self.id = id
    self.maxNearestCars = maxNearestCars
    self.maxDispatchDistanceMiles = maxDispatchDistanceMiles
    self.maxNearestCabs = maxNearestCabs

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.maxNearestCars)
    value = (value * 31) ^ hash(self.maxDispatchDistanceMiles)
    value = (value * 31) ^ hash(self.maxNearestCabs)
    return value


class FindQuery(TBase):
  """
  Attributes:
   - mask
   - type
   - vehicleViews
   - lat
   - lng
  """

  __slots__ = [ 
    'mask',
    'type',
    'vehicleViews',
    'lat',
    'lng',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mask', None, None, ), # 1
    (2, TType.STRING, 'type', None, None, ), # 2
    (3, TType.LIST, 'vehicleViews', (TType.STRUCT,(VehicleViewQuery, VehicleViewQuery.thrift_spec)), None, ), # 3
    (4, TType.DOUBLE, 'lat', None, None, ), # 4
    (5, TType.DOUBLE, 'lng', None, None, ), # 5
  )

  def __init__(self, mask=None, type=None, vehicleViews=None, lat=None, lng=None,):
    self.mask = mask
    self.type = type
    self.vehicleViews = vehicleViews
    self.lat = lat
    self.lng = lng

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mask)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.vehicleViews)
    value = (value * 31) ^ hash(self.lat)
    value = (value * 31) ^ hash(self.lng)
    return value

